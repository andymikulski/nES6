/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 651);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(117)
var ieee754 = __webpack_require__(121)
var isArray = __webpack_require__(112)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _mirroMethods, _joypadIdMap;

exports.mirroringMethodToString = mirroringMethodToString;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PPU_TICKS_PER_SCANLINE = exports.PPU_TICKS_PER_SCANLINE = 341;
var MASTER_CYCLES_PER_PPU = exports.MASTER_CYCLES_PER_PPU = 5;
var MASTER_CYCLES_PER_SCANLINE = exports.MASTER_CYCLES_PER_SCANLINE = PPU_TICKS_PER_SCANLINE * MASTER_CYCLES_PER_PPU;

var CPU_RESET_ADDRESS = exports.CPU_RESET_ADDRESS = 0xFFFC;
var CPU_IRQ_ADDRESS = exports.CPU_IRQ_ADDRESS = 0xFFFE;
var CPU_NMI_ADDRESS = exports.CPU_NMI_ADDRESS = 0xFFFA;

var SCREEN_WIDTH = exports.SCREEN_WIDTH = 256;
var SCREEN_HEIGHT = exports.SCREEN_HEIGHT = 240;

var TRACE_ENABLED = exports.TRACE_ENABLED = false;

var IS_INT_BETWEEN = exports.IS_INT_BETWEEN = function IS_INT_BETWEEN(offset, min, max) {
	return min <= offset && offset < max;
};

var zeroPadCache = {};
var ZERO_PAD = exports.ZERO_PAD = function ZERO_PAD(n, width, z) {
	var cacheKey = n + ' ' + width + ' ' + z;
	if (!zeroPadCache[cacheKey]) {
		z = z || '0';
		n = n + '';
		zeroPadCache[cacheKey] = n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
	}
	return zeroPadCache[cacheKey];
};

var ZERO_PAD_HEX = exports.ZERO_PAD_HEX = function ZERO_PAD_HEX(n, width, z) {
	return ZERO_PAD(n.toString(16), width, z);
};

var g_DefaultColourEncoding = exports.g_DefaultColourEncoding = 'NTSC';

var COLOUR_ENCODING_NAME = exports.COLOUR_ENCODING_NAME = "";
var COLOUR_ENCODING_REFRESHRATE = exports.COLOUR_ENCODING_REFRESHRATE = 0.0;
var COLOUR_ENCODING_MTC_PER_CPU = exports.COLOUR_ENCODING_MTC_PER_CPU = 0;
var COLOUR_ENCODING_VBLANK_SCANLINES = exports.COLOUR_ENCODING_VBLANK_SCANLINES = 0;
var COLOUR_ENCODING_FRAME_SCANLINES = exports.COLOUR_ENCODING_FRAME_SCANLINES = 0;
var COLOUR_ENCODING_VBLANK_MTC = exports.COLOUR_ENCODING_VBLANK_MTC = 0;
var COLOUR_ENCODING_FRAME_MTC = exports.COLOUR_ENCODING_FRAME_MTC = 0;

var setColourEncodingType = exports.setColourEncodingType = function setColourEncodingType(name) {

	if (name === 'PAL') {
		exports.COLOUR_ENCODING_NAME = COLOUR_ENCODING_NAME = "PAL";
		exports.COLOUR_ENCODING_REFRESHRATE = COLOUR_ENCODING_REFRESHRATE = 50.0;
		exports.COLOUR_ENCODING_MTC_PER_CPU = COLOUR_ENCODING_MTC_PER_CPU = 16;
		exports.COLOUR_ENCODING_VBLANK_SCANLINES = COLOUR_ENCODING_VBLANK_SCANLINES = 70;
		exports.COLOUR_ENCODING_FRAME_SCANLINES = COLOUR_ENCODING_FRAME_SCANLINES = 312;
	} else {
		exports.COLOUR_ENCODING_NAME = COLOUR_ENCODING_NAME = "NTSC";
		exports.COLOUR_ENCODING_REFRESHRATE = COLOUR_ENCODING_REFRESHRATE = 60.1;
		exports.COLOUR_ENCODING_MTC_PER_CPU = COLOUR_ENCODING_MTC_PER_CPU = 15;
		exports.COLOUR_ENCODING_VBLANK_SCANLINES = COLOUR_ENCODING_VBLANK_SCANLINES = 20;
		exports.COLOUR_ENCODING_FRAME_SCANLINES = COLOUR_ENCODING_FRAME_SCANLINES = 262;
	}

	exports.COLOUR_ENCODING_VBLANK_MTC = COLOUR_ENCODING_VBLANK_MTC = COLOUR_ENCODING_VBLANK_SCANLINES * MASTER_CYCLES_PER_SCANLINE;
	exports.COLOUR_ENCODING_FRAME_MTC = COLOUR_ENCODING_FRAME_MTC = COLOUR_ENCODING_FRAME_SCANLINES * MASTER_CYCLES_PER_SCANLINE;
};

setColourEncodingType(g_DefaultColourEncoding);

var PPU_MIRRORING_HORIZONTAL = exports.PPU_MIRRORING_HORIZONTAL = 0;
var PPU_MIRRORING_VERTICAL = exports.PPU_MIRRORING_VERTICAL = 1;
var PPU_MIRRORING_FOURSCREEN = exports.PPU_MIRRORING_FOURSCREEN = 2;
var PPU_MIRRORING_SINGLESCREEN_NT0 = exports.PPU_MIRRORING_SINGLESCREEN_NT0 = 3;
var PPU_MIRRORING_SINGLESCREEN_NT1 = exports.PPU_MIRRORING_SINGLESCREEN_NT1 = 4;

var mirroMethods = (_mirroMethods = {}, _defineProperty(_mirroMethods, PPU_MIRRORING_HORIZONTAL, 'horizontal'), _defineProperty(_mirroMethods, PPU_MIRRORING_VERTICAL, 'vertical'), _defineProperty(_mirroMethods, PPU_MIRRORING_FOURSCREEN, 'fourscreen'), _defineProperty(_mirroMethods, PPU_MIRRORING_SINGLESCREEN_NT0, 'singlescreen 0'), _defineProperty(_mirroMethods, PPU_MIRRORING_SINGLESCREEN_NT1, 'singlescreen 1'), _mirroMethods);

function mirroringMethodToString(method) {
	return mirroMethods[method] || '';
};

var JOYPAD_A = exports.JOYPAD_A = 0;
var JOYPAD_B = exports.JOYPAD_B = 1;
var JOYPAD_SELECT = exports.JOYPAD_SELECT = 2;
var JOYPAD_START = exports.JOYPAD_START = 3;
var JOYPAD_UP = exports.JOYPAD_UP = 4;
var JOYPAD_DOWN = exports.JOYPAD_DOWN = 5;
var JOYPAD_LEFT = exports.JOYPAD_LEFT = 6;
var JOYPAD_RIGHT = exports.JOYPAD_RIGHT = 7;

var joypadNameMap = {
	'UP': JOYPAD_UP,
	'DOWN': JOYPAD_DOWN,
	'RIGHT': JOYPAD_RIGHT,
	'LEFT': JOYPAD_LEFT,
	'A': JOYPAD_A,
	'B': JOYPAD_B,
	'SELECT': JOYPAD_SELECT,
	'START': JOYPAD_START
};
var JOYPAD_NAME_TO_ID = exports.JOYPAD_NAME_TO_ID = function JOYPAD_NAME_TO_ID(name) {
	var foundId = joypadNameMap[name];
	if (!joypadNameMap.hasOwnProperty(name)) {
		throw new Error('Joypad button name not recognized: "' + name + '"');
	}

	return foundId;
};

var joypadIdMap = (_joypadIdMap = {}, _defineProperty(_joypadIdMap, JOYPAD_UP, 'UP'), _defineProperty(_joypadIdMap, JOYPAD_DOWN, 'DOWN'), _defineProperty(_joypadIdMap, JOYPAD_LEFT, 'LEFT'), _defineProperty(_joypadIdMap, JOYPAD_RIGHT, 'RIGHT'), _defineProperty(_joypadIdMap, JOYPAD_SELECT, 'SELECT'), _defineProperty(_joypadIdMap, JOYPAD_START, 'START'), _defineProperty(_joypadIdMap, JOYPAD_A, 'A'), _defineProperty(_joypadIdMap, JOYPAD_B, 'B'), _joypadIdMap);
var JOYPAD_ID_TO_NAME = exports.JOYPAD_ID_TO_NAME = function JOYPAD_ID_TO_NAME(id) {
	var foundId = joypadIdMap[id];
	if (!foundId) {
		throw new Error('Joypad button ID not recognized: "' + id + '"');
	}

	return foundId;
};

var g_ClearScreenArray = exports.g_ClearScreenArray = new Int32Array(SCREEN_WIDTH * SCREEN_HEIGHT).fill(0);

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 12 */,
/* 13 */,
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rusha = undefined;
exports.uintArrayToString = uintArrayToString;
exports.stringToUintArray = stringToUintArray;
exports.blobToString = blobToString;

var _rusha = __webpack_require__(213);

var _rusha2 = _interopRequireDefault(_rusha);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rusha = exports.rusha = new _rusha2.default();

var uintArrayCache = {};
function uintArrayToString(uintArray) {
  if (!(uintArray instanceof Int32Array)) {
    throw new Error('uintArrayToString: Only accepts Int32Array parameter');
  }
  var cacheKey = uintArray.toString();

  if (!uintArrayCache[cacheKey]) {
    var str = '';
    for (var i = 0, strLen = uintArray.length; i < strLen; i++) {
      var saveValue = uintArray[i];
      if (saveValue > 0xFFFF) {
        throw new Error("Invalid value attempted to be serialised");
      }
      str += String.fromCharCode(saveValue);
    }

    uintArrayCache[cacheKey] = str;
  }

  return uintArrayCache[cacheKey];
};

var stringCache = {};
function stringToUintArray(str) {
  if (!stringCache[stringCache]) {
    var buf = new Int32Array(str.length);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
      buf[i] = str.charCodeAt(i) | 0;
    }
    stringCache[stringCache] = buf;
  }

  return stringCache[stringCache];
};

function blobToString(blob) {
  var url = window.webkitURL || window.URL;
  return url.createObjectURL(blob);
};

/***/ }),
/* 15 */,
/* 16 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(1).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(234)(module)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* Estimated number of games with mapper (other mappers had <10 games)
apper 004: 569
apper 001: 481
apper 000: 260
apper 002: 200
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Mapper 003: 145
apper 007: 56
apper 011: 35
apper 019: 32
apper 016: 26
apper 099: 25
apper 005: 24
apper 018: 16
apper 066: 16
apper 033: 15
apper 079: 15
apper 045: 14
apper 071: 14
apper 113: 12
apper 245: 11
apper 023: 11
apper 069: 11


var _serialisation = __webpack_require__(14);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseMapper = function () {
	function BaseMapper(mainboard, mirroringMethod) {
		_classCallCheck(this, BaseMapper);

		this.mainboard = mainboard;
		this.mirroringMethod = mirroringMethod;
		this.prgPagesMap = new Int32Array(4);
		this._prgData = null;
		this._prgPageCount = 0;

		this.chrPages = [];
		this.chrPagesMap = new Int32Array(8);
		this._chrData = null;
		this._chrPageCount = 0;
		this._usingChrVram = false;

		this._gameGenieActive = false;
		this._gameGeniePokes = {};

		this.sram = new Int32Array(0x2000);
		this.expansionRam = new Int32Array(0x1FE0);
	}

	_createClass(BaseMapper, [{
		key: 'onEndFrame',
		value: function onEndFrame() {}
	}, {
		key: 'getNextEvent',
		value: function getNextEvent() {
			return -1;
		}
	}, {
		key: 'synchronise',
		value: function synchronise(startTicks, endTicks) {}

		// MMC3 specific functions

	}, {
		key: 'spriteScreenEnabledUpdate',
		value: function spriteScreenEnabledUpdate(spriteEnabled, screenEnabled) {}
	}, {
		key: 'renderingEnabledChanged',
		value: function renderingEnabledChanged(enabled) {}
	}, {
		key: 'setPrgData',
		value: function setPrgData(array, prg8kPageCount) {

			this._prgData = array;
			this._prgPageCount = prg8kPageCount;
		}
	}, {
		key: 'setChrData',
		value: function setChrData(array, chr1kPageCount) {

			this._chrData = array;
			this._chrPageCount = chr1kPageCount;
		}

		////// PRG switching


	}, {
		key: 'get1kChrBankCount',
		value: function get1kChrBankCount() {
			return this._chrPageCount;
		}
	}, {
		key: 'get2kChrBankCount',
		value: function get2kChrBankCount() {
			return this._chrPageCount >> 1; // Math.floor( this.chrPages.length / 2 );
		}
	}, {
		key: 'get4kChrBankCount',
		value: function get4kChrBankCount() {
			return this._chrPageCount >> 2; // Math.floor( this.chrPages.length / 4 );
		}
	}, {
		key: 'get8kChrBankCount',
		value: function get8kChrBankCount() {
			return this._chrPageCount >> 3; // Math.floor( this.chrPages.length / 8 );
		}
	}, {
		key: 'get8kPrgBankCount',
		value: function get8kPrgBankCount() {
			return this._prgPageCount;
		}
	}, {
		key: 'get16kPrgBankCount',
		value: function get16kPrgBankCount() {
			return this._prgPageCount >> 1; // Math.floor( this.prgPages.length / 2 );
		}
	}, {
		key: 'get32kPrgBankCount',
		value: function get32kPrgBankCount() {
			return this._prgPageCount >> 2; // Math.floor( this.prgPages.length / 4 );
		}
	}, {
		key: 'switch8kPrgBank',
		value: function switch8kPrgBank(id, pos) {
			//Nes.Trace.writeLine( 'mapper', 'switch8kPrgBank:' + id );
			this.setPrgPage(id % this._prgPageCount, pos);
		}
	}, {
		key: 'switch16kPrgBank',
		value: function switch16kPrgBank(id, low) {
			if (this.get16kPrgBankCount() > 0) {
				//Nes.Trace.writeLine( 'mapper', 'switch16kPrgBank:' + id );
				var aid = id * 2 % this._prgPageCount;
				for (var i = 0; i < 2; ++i) {
					this.setPrgPage(aid + i, i + (low ? 0 : 2));
				}
			}
		}
	}, {
		key: 'switch32kPrgBank',
		value: function switch32kPrgBank(id) {
			if (this.get32kPrgBankCount() > 0) {
				//Nes.Trace.writeLine( 'mapper', 'switch32kPrgBank:' + id );
				var aid = id * 4 % this._prgPageCount;
				for (var i = 0; i < 4; ++i) {
					this.setPrgPage(aid + i, i);
				}
			}
		}
	}, {
		key: 'setPrgPage',
		value: function setPrgPage(id, pos) {
			if (this.prgPagesMap[pos] !== id) {
				this.prgPagesMap[pos] = id * 0x2000;
			}
		}
	}, {
		key: 'setChrPage',
		value: function setChrPage(id, pos) {
			this.chrPagesMap[pos] = id * 0x400;
		}
	}, {
		key: 'switch1kChrBank',
		value: function switch1kChrBank(id, pos) {
			this.setChrPage(id % this._chrPageCount, pos);
		}
	}, {
		key: 'switch2kChrBank',
		value: function switch2kChrBank(id, pos) {
			if (this.get2kChrBankCount() > 0) {
				var aid = id * 2 % this._chrPageCount;
				for (var i = 0; i < 2; ++i) {
					this.setChrPage(aid + i, pos * 2 + i);
				}
			}
		}
	}, {
		key: 'switch4kChrBank',
		value: function switch4kChrBank(id, low) {
			if (this.get4kChrBankCount() > 0) {
				var aid = id * 4 % this._chrPageCount;
				for (var i = 0; i < 4; ++i) {
					this.setChrPage(aid + i, i + (low ? 0 : 4));
				}
			}
		}
	}, {
		key: 'switch8kChrBank',
		value: function switch8kChrBank(id) {
			if (this.get8kChrBankCount() > 0) {
				var aid = id * 8 % this._chrPageCount;
				for (var i = 0; i < 8; ++i) {
					this.setChrPage(aid + i, i);
				}
			}
		}
	}, {
		key: 'useVRAM',
		value: function useVRAM(numBanks) {

			numBanks = numBanks || 8;
			this._usingChrVram = true;
			this._chrData = new Int32Array(0x400 * numBanks);

			this._chrPageCount = numBanks;
			for (var i = 0; i < Math.min(8, numBanks); ++i) {
				this.setChrPage(i, i);
			}
		}

		// 0x8000 -> 0xFFFF

	}, {
		key: 'write8PrgRom',
		value: function write8PrgRom(offset, data) {}
	}, {
		key: 'read8PrgRom',
		value: function read8PrgRom(offset) {

			var pageid = (offset & 0x6000) >> 13; // Math.floor( ( prgOffset ) / 0x2000 );
			var pagepos = this.prgPagesMap[pageid];
			var aid = offset & 0x1FFF;
			var readValue = this._prgData[pagepos + aid];

			// if ( this._gameGenieActive ) {
			// 	if ( this._gameGeniePokes.hasOwnProperty( offset ) ) {
			// 		return this._checkGameGenieCode( readValue, offset );
			// 	}
			// }
			return readValue;
		}
	}, {
		key: '_checkGameGenieCode',
		value: function _checkGameGenieCode(readValue, offset) {
			// Game genie override
			var gg = this._gameGeniePokes[offset];
			if (gg.compare === -1 || gg.compare === readValue) {
				return gg.value;
			}
			return readValue | 0;
		}

		// VRAM 0x0000 -> 0x2000

	}, {
		key: 'write8ChrRom',
		value: function write8ChrRom(offset, data) {
			if (this._usingChrVram) {
				var pageid = (offset & 0x1C00) >> 10; // Math.floor( offset / 0x400 );
				var pagepos = this.chrPagesMap[pageid];
				var writeOffset = pagepos + (offset & 0x3FF);
				this._chrData[writeOffset] = data;
			}
		}
	}, {
		key: 'read8ChrRom',
		value: function read8ChrRom(offset, renderingSprites, readType) {
			var pageid = (offset & 0x1C00) >> 10; // Math.floor( offset / 0x400 );
			var pagepos = this.chrPagesMap[pageid];
			var readOffset = pagepos + (offset & 0x3FF);
			return this._chrData[readOffset] | 0;
		}
	}, {
		key: 'write8SRam',
		value: function write8SRam(offset, data) {
			this.sram[offset & 0x1FFF] = data;
		}
	}, {
		key: 'read8SRam',
		value: function read8SRam(offset) {
			return this.sram[offset & 0x1FFF] | 0;
		}
	}, {
		key: 'write8EXRam',
		value: function write8EXRam(offset, data) {
			this.expansionRam[offset - 0x4020] = data;
		}
	}, {
		key: 'read8EXRam',
		value: function read8EXRam(offset) {
			return this.expansionRam[offset - 0x4020] | 0;
		}
	}, {
		key: 'reset',
		value: function reset() {}

		// Called from gameGenie.js - modified the PRG at given value

	}, {
		key: 'gameGeniePoke',
		value: function gameGeniePoke(codeName, address, value, compareValue) {

			this._gameGenieActive = true;
			this._gameGeniePokes[address] = { name: codeName, value: value, compare: compareValue };
		}
	}, {
		key: 'removeGameGeniePoke',
		value: function removeGameGeniePoke(codeName) {

			var keyArray = Object.keys(this._gameGeniePokes);
			for (var i = 0; i < keyArray.length; ++i) {
				var prop = keyArray[i];
				if (this._gameGeniePokes.hasOwnProperty(prop)) {
					var gg = this._gameGeniePokes[prop];
					if (gg && gg.name === codeName) {
						delete this._gameGeniePokes[prop];
					}
				}
			}

			var codesActive = Object.keys(this._gameGeniePokes).length;
			this._gameGenieActive = codesActive > 0;
		}
	}, {
		key: 'saveState',
		value: function saveState() {
			var data = {};

			data.mirroringMethod = this.mirroringMethod;
			data._usingChrVram = this._usingChrVram;
			//data.prgPagesMap = Object.assign( {}, this.prgPagesMap );
			//data.chrPagesMap = Object.assign( {}, this.chrPagesMap ); // TODO: restore
			data.sram = (0, _serialisation.uintArrayToString)(this.sram);
			data.expansionRam = (0, _serialisation.uintArrayToString)(this.expansionRam);
			data._gameGeniePokes = Object.assign({}, this._gameGeniePokes);
			if (this._usingChrVram) {
				//data.chrPages = this.chrPages.map( function( page ) { return uintArrayToString( page ); } );
				data._chrData = (0, _serialisation.uintArrayToString)(this._chrData);
			}
			if (this.mapperSaveState) {
				this.mapperSaveState(data);
			}
			return data;
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {
			this.mirroringMethod = state.mirroringMethod;
			this._usingChrVram = state._usingChrVram;
			//this.prgPagesMap = Object.assign( {}, state.prgPagesMap );
			// this.chrPagesMap = Object.assign( {}, state.chrPagesMap ); // TODO: restore
			this.sram = (0, _serialisation.stringToUintArray)(state.sram);
			this.expansionRam = (0, _serialisation.stringToUintArray)(state.expansionRam);
			this._gameGeniePokes = Object.assign({}, state._gameGeniePokes);
			if (this._usingChrVram) {
				this._chrData = (0, _serialisation.stringToUintArray)(state._chrData);
			}
			if (this.mapperLoadState) {
				this.mapperLoadState(state);
			}
		}
	}]);

	return BaseMapper;
}();

exports.default = BaseMapper;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trace_all = exports.trace_apu = exports.trace_mapper = exports.trace_ppu = exports.trace_cpuInstructions = exports.trace_cpu = undefined;
exports.enabled = enabled;
exports.enableType = enableType;
exports.writeLine = writeLine;
exports.start = start;
exports.stop = stop;

var _fileSaver = __webpack_require__(61);

var trace_cpu = exports.trace_cpu = 0;
var trace_cpuInstructions = exports.trace_cpuInstructions = 1;
var trace_ppu = exports.trace_ppu = 2;
var trace_mapper = exports.trace_mapper = 3;
var trace_apu = exports.trace_apu = 4;
var trace_all = exports.trace_all = 5;

var tracer = {
  lines: [],
  running: false,
  enabledTypes: new Array(trace_all + 1).fill(0)
};

function enabled() {
  return tracer.running;
}

function enableType(traceType, checked) {
  tracer.enabledTypes[traceType] = checked ? 1 : 0;
}

function writeLine(traceType, line) {
  if (tracer.running) {
    if (tracer.enabledTypes[traceType] === 1) {
      tracer.lines.push(line + '\r\n');
    }
  }
}

function start() {
  tracer.running = true;
}

function stop() {
  tracer.running = false;

  // save to file
  if (tracer.lines.length > 0) {
    var blob = new Blob(tracer.lines, {
      type: "text/plain;charset=utf-8"
    });
    (0, _fileSaver.saveAs)(blob, "trace.txt");
    tracer.lines.length = 0;
  }
}

/***/ }),
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(641);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(640);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10), __webpack_require__(16)))

/***/ }),
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(544).version;
elliptic.utils = __webpack_require__(543);
elliptic.rand = __webpack_require__(439);
elliptic.curve = __webpack_require__(223);
elliptic.curves = __webpack_require__(535);

// Protocols
elliptic.ec = __webpack_require__(536);
elliptic.eddsa = __webpack_require__(539);


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Event = exports.Event = function () {
  function Event() {
    _classCallCheck(this, Event);

    this._callbacks = [];
  }

  _createClass(Event, [{
    key: "addCallback",
    value: function addCallback(cb) {
      this._callbacks.push(cb);
    }
  }, {
    key: "invoke",
    value: function invoke() {
      var eventArgs = Array.prototype.slice.call(arguments, 0);
      for (var i = 0; i < this._callbacks.length; ++i) {
        this._callbacks[i].apply(this, eventArgs);
      }
    }
  }]);

  return Event;
}();

var EventBus = exports.EventBus = function () {
  function EventBus() {
    _classCallCheck(this, EventBus);

    this._map = {};
  }

  _createClass(EventBus, [{
    key: "getEvent",
    value: function getEvent(name) {
      if (!this._map[name]) {
        this._map[name] = new Event();
      }
      return this._map[name];
    }
  }, {
    key: "connect",
    value: function connect(name, cb) {
      this.getEvent(name).addCallback(cb);
    }
  }, {
    key: "invoke",
    value: function invoke(name) {
      var event = this._map[name];
      var eventArgs = [];

      if (event) {
        if (arguments.length > 1) {
          eventArgs = Array.prototype.slice.call(arguments, 1);
        }

        event.invoke.apply(event, eventArgs);
      }
    }
  }]);

  return EventBus;
}();

/***/ }),
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs || (function(view) {
	"use strict";
	// IE <10 is explicitly unsupported
	if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = "download" in save_link
		, click = function(node) {
			var event = new MouseEvent("click");
			node.dispatchEvent(event);
		}
		, is_safari = /constructor/i.test(view.HTMLElement) || view.safari
		, is_chrome_ios =/CriOS\/[\d]+/.test(navigator.userAgent)
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
		, arbitrary_revoke_timeout = 1000 * 40 // in ms
		, revoke = function(file) {
			var revoker = function() {
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			};
			setTimeout(revoker, arbitrary_revoke_timeout);
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, auto_bom = function(blob) {
			// prepend BOM for UTF-8 XML and text/* types (including HTML)
			// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
			if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
				return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});
			}
			return blob;
		}
		, FileSaver = function(blob, name, no_auto_bom) {
			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, force = type === force_saveable_type
				, object_url
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
						// Safari doesn't allow downloading of blob urls
						var reader = new FileReader();
						reader.onloadend = function() {
							var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
							var popup = view.open(url, '_blank');
							if(!popup) view.location.href = url;
							url=undefined; // release reference before dispatching
							filesaver.readyState = filesaver.DONE;
							dispatch_all();
						};
						reader.readAsDataURL(blob);
						filesaver.readyState = filesaver.INIT;
						return;
					}
					// don't create more object URLs than needed
					if (!object_url) {
						object_url = get_URL().createObjectURL(blob);
					}
					if (force) {
						view.location.href = object_url;
					} else {
						var opened = view.open(object_url, "_blank");
						if (!opened) {
							// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
							view.location.href = object_url;
						}
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
					revoke(object_url);
				}
			;
			filesaver.readyState = filesaver.INIT;

			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				setTimeout(function() {
					save_link.href = object_url;
					save_link.download = name;
					click(save_link);
					dispatch_all();
					revoke(object_url);
					filesaver.readyState = filesaver.DONE;
				});
				return;
			}

			fs_error();
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name, no_auto_bom) {
			return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
		}
	;
	// IE 10+ (native saveAs)
	if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
		return function(blob, name, no_auto_bom) {
			name = name || blob.name || "download";

			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			return navigator.msSaveOrOpenBlob(blob, name);
		};
	}

	FS_proto.abort = function(){};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module.exports) {
  module.exports.saveAs = saveAs;
} else if (("function" !== "undefined" && __webpack_require__(124) !== null) && (__webpack_require__(114) !== null)) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
    return saveAs;
  }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var keys = __webpack_require__(552);
var hasBinary = __webpack_require__(227);
var sliceBuffer = __webpack_require__(494);
var after = __webpack_require__(493);
var utf8 = __webpack_require__(643);

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = __webpack_require__(505);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(507);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if ('function' == typeof supportsBinary) {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if ('function' == typeof utf8encode) {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data == 'string') {
    if (data.charAt(0) == 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data);
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary == 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data != 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data == '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = ''
    , n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (':' != chr) {
      length += chr;
    } else {
      if ('' == length || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, true);

        if (err.type == packet.type && err.data == packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }
  }

  if (length != '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  var numberTooLong = false;
  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] == 255) break;

      if (msgLength.length > 310) {
        numberTooLong = true;
        break;
      }

      msgLength += tailArray[i];
    }

    if(numberTooLong) return callback(err, 0, 1);

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.OrthoCamera = exports.FillableTexture = exports.ShaderProgram = exports.IndexBuffer = exports.VertexBuffer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.getGlContext = getGlContext;
exports.webGlSupported = webGlSupported;

var _glMat = __webpack_require__(198);

var _glMat2 = _interopRequireDefault(_glMat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultVertexShader = 'void main(void) {\n\t\t\tgl_Position = aModelViewProjectionMatrix * aVertexPosition;\n\t\t\tvTextureCoord[0] = aTextureCoord;\n\t\t}';

var defaultFragmentShader = 'uniform sampler2D rubyTexture;\n\t\tvoid main(void) {\n\t\t\tgl_FragColor = texture2D(rubyTexture, vec2(vTextureCoord[0].s, vTextureCoord[0].t));\n\t\t}';

var VertexBuffer = exports.VertexBuffer = function () {
	function VertexBuffer(glContext) {
		_classCallCheck(this, VertexBuffer);

		this._glContext = glContext;
		this._itemSize = 0;
		this._itemCount = 0;
		this._buffer = this._glContext.createBuffer();
	}

	_createClass(VertexBuffer, [{
		key: 'setData',
		value: function setData(vertices, itemSize, itemCount) {

			// ELEMENT_ARRAY_BUFFER is used by index buffer, ARRAY_BUFFER by vertex and tex coord buffers
			this._itemSize = itemSize;
			this._itemCount = itemCount;
			this._glContext.bindBuffer(this._glContext.ARRAY_BUFFER, this._buffer);
			this._glContext.bufferData(this._glContext.ARRAY_BUFFER, vertices, this._glContext.STATIC_DRAW);
		}
	}, {
		key: 'bind',
		value: function bind(positionAttribute) {
			this._glContext.bindBuffer(this._glContext.ARRAY_BUFFER, this._buffer);
			this._glContext.vertexAttribPointer(positionAttribute, this._itemSize, this._glContext.FLOAT, false, 0, 0);
		}
	}]);

	return VertexBuffer;
}();

var IndexBuffer = exports.IndexBuffer = function () {
	function IndexBuffer(glContext) {
		_classCallCheck(this, IndexBuffer);

		this._glContext = glContext;
		this._itemCount = 0;
		this._buffer = this._glContext.createBuffer();
	}

	_createClass(IndexBuffer, [{
		key: 'setData',
		value: function setData(indices, itemCount) {
			this._itemCount = itemCount;
			this._glContext.bindBuffer(this._glContext.ELEMENT_ARRAY_BUFFER, this._buffer);
			this._glContext.bufferData(this._glContext.ELEMENT_ARRAY_BUFFER, indices, this._glContext.STATIC_DRAW);
		}
	}, {
		key: 'bind',
		value: function bind() {
			this._glContext.bindBuffer(this._glContext.ELEMENT_ARRAY_BUFFER, this._buffer);
		}
	}, {
		key: 'draw',
		value: function draw() {
			this._glContext.drawElements(this._glContext.TRIANGLES, this._itemCount, this._glContext.UNSIGNED_SHORT, 0);
		}
	}]);

	return IndexBuffer;
}();

var ShaderProgram = exports.ShaderProgram = function () {
	function ShaderProgram(glContext) {
		_classCallCheck(this, ShaderProgram);

		this._fragment = null;
		this._vertex = null;

		this._glContext = glContext;
		// add some extensions - this enables fwidth() method, see https://www.khronos.org/registry/gles/extensions/OES/OES_standard_derivatives.txt
		this._glContext.getExtension('OES_standard_derivatives');

		this._uniformLocationCache = {};
		this._attribCache = {};
		this._shaderProgram = this._glContext.createProgram();
	}

	_createClass(ShaderProgram, [{
		key: '_compileShader',
		value: function _compileShader(glType, str) {

			var shader = this._glContext.createShader(glType);

			var prepend = '';

			if (str.indexOf('#version') === 0) {
				var versionString = str.substr(0, str.indexOf('\n'));
				str = str.substring(versionString.length);
				prepend += versionString;
			}

			prepend += 'precision mediump float;\n'; // Bodge precision on script
			prepend += '#extension GL_OES_standard_derivatives : enable\n';

			if (glType === this._glContext.VERTEX_SHADER) {
				// Add variables common to all vertex shaders
				prepend += 'uniform mat4 aModelViewProjectionMatrix;\n';
				prepend += 'attribute vec4 aVertexPosition;\n';
				prepend += 'attribute vec4 aTextureCoord;\n';
			}

			prepend += 'varying vec4 vTextureCoord[8];\n';

			str = prepend + str;

			this._glContext.shaderSource(shader, str);
			this._glContext.compileShader(shader);

			if (!this._glContext.getShaderParameter(shader, this._glContext.COMPILE_STATUS)) {
				throw new Error("Error compiling shader script " + this._glContext.getShaderInfoLog(shader));
			}

			return shader;
		}
	}, {
		key: '_shaderLoadSuccess',
		value: function _shaderLoadSuccess(xmlRaw, callback) {

			var fragmentStr, vertexStr;
			var fragmentXml, vertexXml;

			if (xmlRaw) {
				var xmlDoc = $(xmlRaw);
				fragmentXml = xmlDoc.find('fragment')[0];
				vertexXml = xmlDoc.find('vertex')[0];
			}

			if (fragmentXml && fragmentXml.textContent) {
				fragmentStr = fragmentXml.textContent;
			} else {
				fragmentStr = defaultFragmentShader;
			}
			if (vertexXml && vertexXml.textContent) {
				vertexStr = vertexXml.textContent;
			} else {
				vertexStr = defaultVertexShader;
			}

			if (this._fragment) {
				this._glContext.detachShader(this._shaderProgram, this._fragment);
			}
			if (this._vertex) {
				this._glContext.detachShader(this._shaderProgram, this._vertex);
			}

			this._fragment = this._compileShader(this._glContext.FRAGMENT_SHADER, fragmentStr);
			this._vertex = this._compileShader(this._glContext.VERTEX_SHADER, vertexStr);

			this._glContext.attachShader(this._shaderProgram, this._fragment);
			this._glContext.attachShader(this._shaderProgram, this._vertex);

			this._glContext.linkProgram(this._shaderProgram);

			if (!this._glContext.getProgramParameter(this._shaderProgram, this._glContext.LINK_STATUS)) {
				throw new Error(this._glContext.getProgramInfoLog(this._shaderProgram));
			}

			callback(null);
		}
	}, {
		key: 'loadAndLink',
		value: function loadAndLink(shaderFile, callback) {

			this._uniformLocationCache = {};
			this._attribCache = {};

			if (shaderFile && shaderFile.length > 0) {
				var that = this;
				$['ajax']({
					'url': 'shaders/' + shaderFile,
					'success': function success(xmlDoc) {
						that._shaderLoadSuccess(xmlDoc, callback);
					},
					'dataType': 'xml'
				});
			} else {
				this._shaderLoadSuccess(null, callback);
			}
		}
	}, {
		key: 'use',
		value: function use() {

			this._glContext.useProgram(this._shaderProgram);
		}
	}, {
		key: 'getUniformLocation',
		value: function getUniformLocation(name) {

			if (!this._uniformLocationCache.hasOwnProperty(name)) {
				this._uniformLocationCache[name] = this._glContext.getUniformLocation(this._shaderProgram, name);
			}
			return this._uniformLocationCache[name];
		}
	}, {
		key: 'getAttrib',
		value: function getAttrib(name) {

			if (!this._attribCache.hasOwnProperty(name)) {
				this._attribCache[name] = this._glContext.getAttribLocation(this._shaderProgram, name);
				this._glContext.enableVertexAttribArray(this._attribCache[name]);
			}
			return this._attribCache[name];
		}
	}]);

	return ShaderProgram;
}();

var FillableTexture = exports.FillableTexture = function () {
	function FillableTexture(glContext, width, height) {
		_classCallCheck(this, FillableTexture);

		this._glContext = glContext;
		this._texture = this._glContext.createTexture();
		this._glContext.bindTexture(this._glContext.TEXTURE_2D, this._texture);
		this._glContext.pixelStorei(this._glContext.UNPACK_FLIP_Y_WEBGL, true);
		this._glContext.texImage2D(this._glContext.TEXTURE_2D, 0, this._glContext.RGBA, width, height, 0, this._glContext.RGBA, this._glContext.UNSIGNED_BYTE, null);
	}

	_createClass(FillableTexture, [{
		key: 'bind',
		value: function bind() {
			this._glContext.activeTexture(this._glContext.TEXTURE0);
			this._glContext.bindTexture(this._glContext.TEXTURE_2D, this._texture);

			var filtering = this._glContext.LINEAR; // NEAREST for block quality, LINEAR for softer texture

			this._glContext.texParameteri(this._glContext.TEXTURE_2D, this._glContext.TEXTURE_MAG_FILTER, filtering);
			this._glContext.texParameteri(this._glContext.TEXTURE_2D, this._glContext.TEXTURE_MIN_FILTER, filtering);
			this._glContext.texParameteri(this._glContext.TEXTURE_2D, this._glContext.TEXTURE_WRAP_S, this._glContext.CLAMP_TO_EDGE);
			this._glContext.texParameteri(this._glContext.TEXTURE_2D, this._glContext.TEXTURE_WRAP_T, this._glContext.CLAMP_TO_EDGE);
		}
	}, {
		key: 'fill',
		value: function fill(x, y, width, height, array) {
			this._glContext.texSubImage2D(this._glContext.TEXTURE_2D, 0, x, y, width, height, this._glContext.RGBA, this._glContext.UNSIGNED_BYTE, array);
		}
	}]);

	return FillableTexture;
}();

var OrthoCamera = exports.OrthoCamera = function () {
	function OrthoCamera(glContext) {
		_classCallCheck(this, OrthoCamera);

		this._glContext = glContext;
		this._mvMatrix = _glMat2.default.create();
		this._pMatrix = _glMat2.default.create();
	}

	_createClass(OrthoCamera, [{
		key: 'setup',
		value: function setup(width, height) {
			_glMat2.default.ortho(this._pMatrix, 0, width, 0, height, 0.1, 100);
			_glMat2.default.identity(this._mvMatrix);
			_glMat2.default.translate(this._mvMatrix, this._mvMatrix, [0.0, 0.0, -0.1]);
		}
	}, {
		key: 'getMVPMatrix',
		value: function getMVPMatrix() {
			var combined = _glMat2.default.create();
			_glMat2.default.multiply(combined, this._pMatrix, this._mvMatrix);
			return combined;
		}
	}]);

	return OrthoCamera;
}();

function getGlContext(canvas) {
	return canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
}

function webGlSupported() {
	try {
		var canvas = document.createElement('canvas');
		var ctx = getGlContext(canvas);
		return ctx !== null;
	} catch (e) {
		return false;
	}
}

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BlipImpulse = __webpack_require__(135);

var _BlipImpulse2 = _interopRequireDefault(_BlipImpulse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (C) 2003-2005 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
more details. You should have received a copy of the GNU Lesser General
Public License along with this module; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

// BlipSynth and Blip_Wave are waveform transition synthesizers for adding
// waveforms to a Blip_Buffer.

var widest_impulse_ = 24;
var blip_res_bits_ = 5;
var BLIP_BUFFER_ACCURACY = 16;
var max_res = 1 << blip_res_bits_;

// BlipSynth is a transition waveform synthesizer which adds band-limited
// offsets (transitions) into a Blip_Buffer. For a simpler interface, use
// Blip_Wave (below).
//
// Range specifies the greatest expected offset that will occur. For a
// waveform that goes between +amp and -amp, range should be amp * 2 (half
// that if it only goes between +amp and 0). When range is large, a higher
// accuracy scheme is used; to force this even when range is small, pass
// the negative of range (i.e. -range).

var BlipSynth = function () {
	function BlipSynth(quality, range) {
		_classCallCheck(this, BlipSynth);

		this.abs_range = range < 0 ? -range : range;
		this.fine_mode = range > 512 || range < 0;
		this.width = quality < 5 ? quality * 4 : widest_impulse_;
		this.res = 1 << blip_res_bits_;
		this.impulse_size = Math.floor(this.width / 2) * (this.fine_mode + 1);
		this.base_impulses_size = Math.floor(this.width / 2) * (Math.floor(this.res / 2) + 1);
		this.fine_bits = this.fine_mode ? BlipSynth.calc_fine_bits(this.abs_range) : 0;

		this.impulses = new Uint32Array(this.impulse_size * this.res * 2 + this.base_impulses_size);
		this.impulse = new _BlipImpulse2.default();

		this.impulse.init(this.impulses, this.width, this.res, this.fine_bits);
	}

	// Quality level. Higher levels are slower, and worse in a few cases.
	// Use blip_good_quality as a starting point.


	_createClass(BlipSynth, [{
		key: 'volume',


		// Set volume of a transition at amplitude 'range' by setting volume_unit
		// to v / range
		value: function volume(v) {
			this.impulse.volume_unit(v * (1.0 / this.abs_range));
		}

		// Set base volume unit of transitions, where 1.0 is a full swing between the
		// positive and negative extremes. Not optimized for real-time control.

	}, {
		key: 'volume_unit',
		value: function volume_unit(unit) {
			this.impulse.volume_unit(unit);
		}
	}, {
		key: 'output',


		// Default Blip_Buffer used for output when none is specified for a given call
		value: function output(buf) {
			if (buf === undefined) {
				return this.impulse.buf;
			} else {
				this.impulse.buf = buf;
			}
		}

		// Add an amplitude offset (transition) with a magnitude of delta * volume_unit
		// into the specified buffer (default buffer if none specified) at the
		// specified source time. Delta can be positive or negative. To increase
		// performance by inlining code at the call site, use offset_inline().

	}, {
		key: 'offset',
		value: function offset(time, delta, buf) {
			buf = buf || this.impulse.buf;
			this.offset_resampled(time * buf.factor_ + buf.offset_, delta, buf);
		}
	}, {
		key: 'offset_resampled',
		value: function offset_resampled(time, delta, blip_buf) {
			blip_buf = blip_buf || this.impulse.buf;

			var sample_index = time >> BLIP_BUFFER_ACCURACY & ~1;
			//	assert(( "BlipSynth/Blip_wave: Went past end of buffer",
			//			sample_index < blip_buf->buffer_size_ ));
			var const_offset = Math.floor(widest_impulse_ / 2) - Math.floor(this.width / 2);

			// original code cast from 16 bit array to 32 bit for this function - we can't do that
			// as it requires to modify on 16 bit boundaries so can't just pass .buffer to Uint32Array
			var buf = new Uint32Array(blip_buf.buffer_.buffer, (const_offset + sample_index) * 2);

			var shift = BLIP_BUFFER_ACCURACY - blip_res_bits_;
			var mask = this.res * 2 - 1;
			var impulsesIndex = (time >> shift & mask) * this.impulse_size;
			var imp = this.impulses.subarray(impulsesIndex);

			var offset = this.impulse.offset * delta;
			var bufIndex = 0;
			var impIndex = 0;

			if (!this.fine_bits) {
				// normal mode
				for (var n = Math.floor(this.width / 4); n > 0; --n) {

					var t0 = buf[bufIndex + 0] - offset;
					var t1 = buf[bufIndex + 1] - offset;

					t0 += imp[impIndex + 0] * delta;
					t1 += imp[impIndex + 1] * delta;
					impIndex += 2;

					buf[bufIndex + 0] = t0;
					buf[bufIndex + 1] = t1;
					bufIndex += 2;
				}
			} else {
				// fine mode
				var sub_range = 1 << this.fine_bits;
				delta += Math.floor(sub_range / 2);
				var delta2 = (delta & sub_range - 1) - Math.floor(sub_range / 2);
				delta >>= this.fine_bits;

				for (var m = Math.floor(this.width / 4); m > 0; --m) {
					var s0 = buf[bufIndex + 0] - offset;
					var s1 = buf[bufIndex + 1] - offset;

					s0 += imp[impIndex + 0] * delta2;
					s0 += imp[impIndex + 1] * delta;

					s1 += imp[impIndex + 2] * delta2;
					s1 += imp[impIndex + 3] * delta;

					impIndex += 4;

					buf[bufIndex + 0] = s0;
					buf[bufIndex + 1] = s1;
					bufIndex += 2;
				}
			}
		}
	}, {
		key: 'offset_inline',
		value: function offset_inline(time, delta, buf) {
			buf = buf || this.impulse.buf;
			this.offset_resampled(time * buf.factor_ + buf.offset_, delta, buf);
		}
	}], [{
		key: 'calc_fine_bits',
		value: function calc_fine_bits(abs_range) {
			return abs_range <= 64 ? 2 : abs_range <= 128 ? 3 : abs_range <= 256 ? 4 : abs_range <= 512 ? 5 : abs_range <= 1024 ? 6 : abs_range <= 2048 ? 7 : 8;
		}
	}]);

	return BlipSynth;
}();

BlipSynth.blip_low_quality = 1;
BlipSynth.blip_med_quality = 2;
BlipSynth.blip_good_quality = 3;
BlipSynth.blip_high_quality = 4;
exports.default = BlipSynth;

/***/ }),
/* 76 */
/***/ (function(module, exports) {

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;


/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = identity;

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(575);
hash.common = __webpack_require__(571);
hash.sha = __webpack_require__(574);
hash.ripemd = __webpack_require__(573);
hash.hmac = __webpack_require__(572);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = __webpack_require__(246);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(119);
util.inherits = __webpack_require__(11);
/*</replacement>*/

var Readable = __webpack_require__(478);
var Writable = __webpack_require__(249);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var debug = __webpack_require__(624)('socket.io-parser');
var json = __webpack_require__(578);
var Emitter = __webpack_require__(519);
var binary = __webpack_require__(623);
var isBuf = __webpack_require__(486);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {
  var str = '';
  var nsp = false;

  // first is type
  str += obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    str += obj.attachments;
    str += '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' != obj.nsp) {
    nsp = true;
    str += obj.nsp;
  }

  // immediately followed by the id
  if (null != obj.id) {
    if (nsp) {
      str += ',';
      nsp = false;
    }
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    if (nsp) str += ',';
    str += json.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if ('string' == typeof obj) {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var p = {};
  var i = 0;

  // look up type
  p.type = Number(str.charAt(0));
  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
    var buf = '';
    while (str.charAt(++i) != '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) != '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' == str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' == c) break;
      p.nsp += c;
      if (i == str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i == str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    p = tryParse(p, str.substr(i));
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(p, str) {
  try {
    p.data = json.parse(str);
  } catch(e){
    return error();
  }
  return p; 
};

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(data){
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(41).EventEmitter;
var inherits = __webpack_require__(11);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(250);
Stream.Writable = __webpack_require__(608);
Stream.Duplex = __webpack_require__(605);
Stream.Transform = __webpack_require__(479);
Stream.PassThrough = __webpack_require__(607);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(602);
var util = __webpack_require__(638);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(247);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(82).Transform
var inherits = __webpack_require__(11)
var StringDecoder = __webpack_require__(251).StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var inherits = __webpack_require__(11)
var md5 = __webpack_require__(452)
var rmd160 = __webpack_require__(609)
var sha = __webpack_require__(611)

var Base = __webpack_require__(110)

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 112 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 114 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _stats = __webpack_require__(215);

var _stats2 = _interopRequireDefault(_stats);

var _Event = __webpack_require__(52);

var _Mainboard = __webpack_require__(142);

var _Mainboard2 = _interopRequireDefault(_Mainboard);

var _Cartridge = __webpack_require__(141);

var _Cartridge2 = _interopRequireDefault(_Cartridge);

var _Trace = __webpack_require__(32);

var _Trace2 = _interopRequireDefault(_Trace);

var _loadRom = __webpack_require__(159);

var _gameGenie = __webpack_require__(158);

var _validateObject = __webpack_require__(160);

var _validateObject2 = _interopRequireDefault(_validateObject);

var _CanvasParent = __webpack_require__(125);

var _CanvasParent2 = _interopRequireDefault(_CanvasParent);

var _HeadlessRenderSurface = __webpack_require__(129);

var _HeadlessRenderSurface2 = _interopRequireDefault(_HeadlessRenderSurface);

var _WebGlRenderSurface = __webpack_require__(130);

var _WebGlRenderSurface2 = _interopRequireDefault(_WebGlRenderSurface);

var _utils = __webpack_require__(74);

var _CanvasRenderSurface = __webpack_require__(128);

var _CanvasRenderSurface2 = _interopRequireDefault(_CanvasRenderSurface);

var _consts = __webpack_require__(5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var nES6 = function () {
  function nES6(options) {
    var _this = this;

    _classCallCheck(this, nES6);

    // validate the options object before doing anything
    (0, _validateObject2.default)({
      plugins: { is: Array, with: Function },
      render: ['auto', 'canvas', 'webgl', 'headless'],
      audio: { is: Boolean }
    }, options);
    // if we're still here, then the options are all good

    this._options = options || {};

    this._cart = null;
    this._romLoaded = false;
    this._mainboard = null;
    this._renderSurface = null;
    this._fpsMeter = null;
    this._spriteDisplay = null;
    this._paletteDisplay = null;
    this._logWindow = null;
    this._encodingTypeToSet = '';
    this._newRomWaiting = false;
    this._newRomLoaded = {
      name: '',
      binaryString: null
    };
    this._eventBus = new _Event.EventBus();

    this._frameTimeTarget = 0;
    this._lastFrameTime = 0;
    this._gameSpeed = 100; // 100% normal speed

    this._isPaused = 0;
    this._pauseNextFrame = false;
    this._pauseOnFrame = -1;

    this.animate = this._animate.bind(this);

    window.onerror = this._showError.bind(this);

    // Apply plugins
    if (this._options.plugins) {
      // Pass this nES6 instance to each plugin
      this._options.plugins.map(function (plugin) {
        return plugin(_this);
      });
    }
  }

  _createClass(nES6, [{
    key: 'connect',
    value: function connect(name, cb) {
      this._eventBus.connect(name, cb);
    }
  }, {
    key: 'setColourEncodingType',
    value: function setColourEncodingType(encodingType) {
      this._encodingTypeToSet = encodingType;
    }
  }, {
    key: '_loadRomCallback',
    value: function _loadRomCallback(name, binaryString) {
      this._newRomWaiting = true;
      this._newRomLoaded = {
        name: name,
        binaryString: binaryString instanceof Uint8Array ? binaryString : new Uint8Array(binaryString)
      };
    }
  }, {
    key: 'start',
    value: function start() {
      this._fpsMeter = new _stats2.default();
      this._fpsMeter.showPanel(1);
      document.body.appendChild(this._fpsMeter.dom);

      this._canvasParent = new _CanvasParent2.default();
      this._renderSurface = null;

      switch (this._options['render']) {
        // headless render
        case 'headless':
          this._renderSurface = new _HeadlessRenderSurface2.default();
          break;
        // canvas render
        case 'canvas':
          this._renderSurface = new _CanvasRenderSurface2.default(this._canvasParent);
          break;
        // webgl is the same as auto - webgl will run if possible but will
        // fallback to canvas automatically
        case 'webgl':
        case 'auto':
        default:
          if ((0, _utils.webGlSupported)()) {
            this._renderSurface = new _WebGlRenderSurface2.default(this._canvasParent);
          } else {
            this._renderSurface = new _CanvasRenderSurface2.default(this._canvasParent);
          }
          break;
      }

      this._mainboard = new _Mainboard2.default(this._renderSurface);
      this._mainboard.connect('reset', this._onReset.bind(this));

      // disable audio for headless rendering
      if (this._options['render'] === 'headless' || this._options['audio'] === false) {
        this._mainboard.enableSound(false);
      }

      this.animate();
    }
  }, {
    key: 'pause',
    value: function pause(isPaused) {
      var changed = isPaused !== this._isPaused;
      this._isPaused = isPaused;

      if (changed) {
        this._eventBus.invoke('isPausedChange', isPaused);
      }
    }
  }, {
    key: 'isPaused',
    value: function isPaused() {
      return this._isPaused;
    }
  }, {
    key: '_onReset',
    value: function _onReset() {
      this._calculateFrameTimeTarget();
    }
  }, {
    key: '_calculateFrameTimeTarget',
    value: function _calculateFrameTimeTarget() {
      if (this._gameSpeed) {
        var base = 100000 / this._gameSpeed; // 100000 = 1000 * 100 ( 1000 milliseconds, multiplied by 100 as gameSpeed is a %)
        this._frameTimeTarget = base / _consts.COLOUR_ENCODING_REFRESHRATE;
      }
    }
  }, {
    key: 'reset',
    value: function reset() {
      this._mainboard.reset();
    }
  }, {
    key: 'playOneFrame',
    value: function playOneFrame() {
      this.pause(false);
      this._pauseNextFrame = true;
    }
  }, {
    key: 'playUntilFrame',
    value: function playUntilFrame(frameNum) {
      this.pause(false);
      this._pauseOnFrame = frameNum;
    }
  }, {
    key: 'enableSound',
    value: function enableSound(enable) {
      this._mainboard.enableSound(enable);
    }
  }, {
    key: 'soundEnabled',
    value: function soundEnabled() {
      return this._mainboard.apu.soundEnabled();
    }
  }, {
    key: 'soundSupported',
    value: function soundSupported() {
      return this._mainboard.apu.soundSupported();
    }
  }, {
    key: 'setVolume',
    value: function setVolume(val) {
      this._mainboard.setVolume(val);
    }
  }, {
    key: 'setGameSpeed',
    value: function setGameSpeed(gameSpeed) {
      this._gameSpeed = gameSpeed;
      this._calculateFrameTimeTarget();
    }
  }, {
    key: 'setTraceOption',
    value: function setTraceOption(traceType, checked) {
      this._mainboard.setTraceOption(traceType, checked);
    }
  }, {
    key: '_readyToRender',
    value: function _readyToRender() {
      if (this._gameSpeed <= 0) {
        return true;
      }
      var now = performance ? performance.now() : Date.now(); // Date.now() in unsupported browsers
      var diff = now - (this._lastFrameTime || 0);
      if (diff >= this._frameTimeTarget) {
        this._lastFrameTime = now;
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: 'showFpsMeter',
    value: function showFpsMeter(show) {
      if (show) {
        // this._fpsMeter.show();
      } else {
          // this._fpsMeter.hide();
        }
    }
  }, {
    key: 'startTrace',
    value: function startTrace() {
      this._eventBus.invoke('traceRunning', true);
      // if ( traceType === 'cpuInstructions' ) {
      this._mainboard.cpu.enableTrace(true);
      // }
      _Trace2.default.start();
    }
  }, {
    key: 'stopTrace',
    value: function stopTrace() {
      _Trace2.default.stop();
      this._mainboard.cpu.enableTrace(false);
      this._eventBus.invoke('traceRunning', false);
    }
  }, {
    key: 'screenshot',
    value: function screenshot() {
      this._renderSurface.screenshotToFile();
    }
  }, {
    key: '_animate',
    value: function _animate() {
      if (this._gameSpeed !== 100 && !this._readyToRender()) {
        requestAnimationFrame(this.animate);
        return;
      }

      if (this._fpsMeter) {
        this._fpsMeter.begin();
      }

      if (this._newRomWaiting) {
        this._doRomLoad(this._newRomLoaded);
        this._newRomWaiting = false;
      }

      if (this._romLoaded) {
        this._romLoaded = false;
        this._mainboard.loadCartridge(this._cart);
        this._eventBus.invoke('cartLoaded', this._cart);
      }

      if (this._isPaused) {
        if (this._fpsMeter) {
          this._fpsMeter.end();
        }
        setTimeout(this.animate, 300);
        return;
      }

      var bgColour = this._mainboard.renderBuffer.pickColour(this._mainboard.ppu.getBackgroundPaletteIndex());
      this._renderSurface.clearBuffers(bgColour);
      this._mainboard.renderBuffer.clearBuffer();

      this._mainboard.doFrame();
      this._renderSurface.render(this._mainboard);

      if (this._fpsMeter) {
        this._fpsMeter.end();
      }

      requestAnimationFrame(this.animate);
    }
  }, {
    key: 'exportState',
    value: function exportState() {
      return this._mainboard.saveState();
    }
  }, {
    key: 'importState',
    value: function importState(loadedData) {
      return this._mainboard.importState(loadedData);
    }
  }, {
    key: '_doRomLoad',
    value: function _doRomLoad(_ref) {
      var _this2 = this;

      var name = _ref.name,
          binaryString = _ref.binaryString;

      this._cart = new _Cartridge2.default(this._mainboard);
      this._cart.loadRom({
        name: name,
        binaryString: binaryString,
        fileSize: binaryString.length / 1000 // in KB
      }).catch(this._showError.bind(this)).then(function () {
        _this2._romLoaded = true;
      });
    }
  }, {
    key: 'loadRomFromUrl',
    value: function loadRomFromUrl(url) {
      var that = this;
      (0, _loadRom.loadRomFromUrl)(url, function (err, name, binary) {
        if (!err) {
          that._loadRomCallback(name, binary);
        } else {
          that._showError(err);
        }
      });
    }

    /**
     * Given a Binary string (and an optional ROM name), loads the ROM into
     * this nES6 instance's memory. Manages casting the string to the proper
     * format for end developer.
     *
     * @param  {String} binaryString  ROM file as a binary string
     * @param  {String} name?         Optional ROM name (default: 'Game')
     * @return {void}
     */

  }, {
    key: 'loadRomFromBinary',
    value: function loadRomFromBinary(binaryString) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Game';

      this._loadRomCallback(name, binaryString);
    }
  }, {
    key: '_showError',
    value: function _showError(err) {
      console.log(err);
      var errorType = typeof err === 'undefined' ? 'undefined' : _typeof(err);
      var msg = '';
      if (errorType === 'string') {
        msg = err;
      } else if (errorType === 'object') {
        if (err.message) {
          msg = err.message;
        } else {
          msg = err.toString();
        }
      } else {
        msg = err.toString();
      }
      this._eventBus.invoke('romLoadFailure', msg);
    }
  }, {
    key: 'enterGameGenieCode',
    value: function enterGameGenieCode(code) {
      (0, _gameGenie.processGenieCode)(this._mainboard, code, true);
    }
  }, {
    key: 'loadShaderFromUrl',
    value: function loadShaderFromUrl(url) {
      if (this._renderSurface.loadShaderFromUrl) {
        this._renderSurface.loadShaderFromUrl(url);
      }
    }
  }, {
    key: 'pressControllerButton',
    value: function pressControllerButton(playerNum, button) {
      var joypad = this._mainboard.inputdevicebus.getJoypad(playerNum);
      var buttonIdPressed = (0, _consts.JOYPAD_NAME_TO_ID)(button);

      if (typeof buttonIdPressed !== 'undefined') {
        joypad.pressButton(buttonIdPressed, true);
      }
    }
  }, {
    key: 'depressControllerButton',
    value: function depressControllerButton(playerNum, button) {
      var joypad = this._mainboard.inputdevicebus.getJoypad(playerNum);
      var buttonIdPressed = (0, _consts.JOYPAD_NAME_TO_ID)(button);

      if (typeof buttonIdPressed !== 'undefined') {
        joypad.pressButton(buttonIdPressed, false);
      }
    }
  }]);

  return nES6;
}();

exports.default = nES6;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__(497).Reporter;
base.DecoderBuffer = __webpack_require__(435).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(435).EncoderBuffer;
base.Node = __webpack_require__(496);


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(559);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 121 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, Buffer, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}

var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }
  // phantomjs doesn't like a buffer being passed here
  var bytes = new Buffer(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10), __webpack_require__(1).Buffer, __webpack_require__(16)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(634)
var extend = __webpack_require__(644)
var statusCodes = __webpack_require__(518)
var url = __webpack_require__(83)

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _consts = __webpack_require__(5);

var _Event = __webpack_require__(52);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CanvasParent = function () {
	function CanvasParent(renderSurface) {
		var _this = this;

		_classCallCheck(this, CanvasParent);

		var that = this;

		this._eventBus = new _Event.EventBus();
		this._parent = document.createElement('div');
		this._parent.style.cssText = 'position: absolute; height: 100%; width: 100%; top: 0px; bottom: 0px;';
		this._element = document.createElement('div');
		this._parent.appendChild(this._element);

		this._canvasElement = document.createElement('canvas');
		this._canvasElement.classList.add('nes6-player');
		this._element.appendChild(this._canvasElement);

		document.body.appendChild(this._parent);

		this._setSize();

		window.addEventListener('resize', function () {
			_this._setSize();
			_this._setPosition();
		}, true);

		this._setPosition();
	}

	_createClass(CanvasParent, [{
		key: 'connect',
		value: function connect(name, cb) {
			this._eventBus.connect(name, cb);
		}
	}, {
		key: 'getCanvasElement',
		value: function getCanvasElement() {
			return this._canvasElement;
		}
	}, {
		key: '_setSize',
		value: function _setSize() {

			var parentBounds = this._parent.getBoundingClientRect();
			var parentWidth = parentBounds.width;
			var parentHeight = parentBounds.height;

			var aspectRatio = _consts.SCREEN_WIDTH / _consts.SCREEN_HEIGHT;
			var newWidth = aspectRatio * parentHeight;

			this._canvasElement.width = Math.floor(newWidth);
			this._canvasElement.height = parentHeight;

			this._eventBus.invoke('resize');
		}
	}, {
		key: '_setPosition',
		value: function _setPosition() {
			this._element.style.cssText = 'transform: translate(-50%, -50%); position: absolute; left: 50%; top: 50%;';
		}
	}]);

	return CanvasParent;
}();

exports.default = CanvasParent;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebAudioBuffer = function () {
	function WebAudioBuffer(audioContext, masterVolNode, size) {
		_classCallCheck(this, WebAudioBuffer);

		this._locked = false;
		this.audioContext = audioContext;

		this.audioNode = null;
		this._gainNode = this.audioContext['createGain']();
		this._gainNode['connect'](masterVolNode);

		this.audioBuffer = this.audioContext['createBuffer'](1, size, this.audioContext['sampleRate']);
	}

	_createClass(WebAudioBuffer, [{
		key: 'lockBuffer',
		value: function lockBuffer() {
			this._locked = true;
			return this.audioBuffer['getChannelData'](0);
		}
	}, {
		key: 'unlockBuffer',
		value: function unlockBuffer() {
			this._locked = false;

			// Alternative method using audio node buffer instead of onaudioprocess
			if (this.audioNode) {
				this.audioNode['disconnect']();
				this.audioNode = null;
			}
			this.audioNode = this.audioContext['createBufferSource']();
			this.audioNode['buffer'] = this.audioBuffer;

			this.audioNode['connect'](this._gainNode);
			this.audioNode['start'](0);
		}
	}]);

	return WebAudioBuffer;
}();

exports.default = WebAudioBuffer;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _WebAudioBuffer = __webpack_require__(126);

var _WebAudioBuffer2 = _interopRequireDefault(_WebAudioBuffer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebAudioRenderer = function () {
	function WebAudioRenderer(bufferSize, sampleRate) {
		_classCallCheck(this, WebAudioRenderer);

		window.AudioContext = window.AudioContext || window.webkitAudioContext;
		if (window.AudioContext === undefined) {
			throw new Error("WebAudio not supported in this browser");
		}
		this.audioContext = new window.AudioContext();
		this._gainNode = this.audioContext['createGain']();
		this._gainNode['connect'](this.audioContext['destination']);
	}

	_createClass(WebAudioRenderer, [{
		key: 'setVolume',
		value: function setVolume(val) {
			if (this._gainNode) {
				this._gainNode['gain']['value'] = val / 100;
			}
		}
	}, {
		key: 'getSampleRate',
		value: function getSampleRate() {
			return this.audioContext['sampleRate'];
		}
	}, {
		key: 'createBuffer',
		value: function createBuffer(size) {
			return new _WebAudioBuffer2.default(this.audioContext, this._gainNode, size);
		}
	}]);

	return WebAudioRenderer;
}();

exports.default = WebAudioRenderer;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fileSaver = __webpack_require__(61);

var _serialisation = __webpack_require__(14);

var _consts = __webpack_require__(5);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CanvasRenderSurface = function () {
	function CanvasRenderSurface(canvasParent) {
		_classCallCheck(this, CanvasRenderSurface);

		this._clearArray = new Uint32Array(_consts.SCREEN_WIDTH * _consts.SCREEN_HEIGHT);
		this._clearArrayColour = this._clearArray[0];

		this._bufferIndexArray = new Int32Array(_consts.SCREEN_WIDTH * _consts.SCREEN_HEIGHT);

		this._offscreenElement = document.createElement('canvas');
		this._offscreenElement.width = _consts.SCREEN_WIDTH;
		this._offscreenElement.height = _consts.SCREEN_HEIGHT;
		this._offscreenCanvas = this._offscreenElement.getContext("2d");
		//this._offscreenCanvas.imageSmoothingEnabled = false;
		this._offscreenData = this._offscreenCanvas.getImageData(0, 0, _consts.SCREEN_WIDTH, _consts.SCREEN_HEIGHT);

		if (!this._offscreenData.data.buffer) {
			throw new Error("Browser does not support canvas image buffers. Cannot run emulator");
		}
		// Chrome & Firefox support passing the underlying image data buffer to Uint32Array(). IE does not.
		this._offscreen32BitView = new Uint32Array(this._offscreenData.data.buffer);
		if (this._offscreen32BitView.length !== this._clearArray.length) {
			throw new Error("Unexpected canvas buffer size (actual=" + this._offscreen32BitView.length + ")");
		}

		this._element = canvasParent.getCanvasElement();
		this._canvas = this._element.getContext("2d");
		//this._canvas.imageSmoothingEnabled = false;
	}

	_createClass(CanvasRenderSurface, [{
		key: 'writeToBuffer',
		value: function writeToBuffer(bufferIndex, insertIndex, colour) {
			var existingIndex = this._bufferIndexArray[insertIndex];
			if (existingIndex <= bufferIndex) {
				this._offscreen32BitView[insertIndex] = 0xFF000000 | colour;
				this._bufferIndexArray[insertIndex] = bufferIndex;
			}
		}
	}, {
		key: 'getRenderBufferHash',
		value: function getRenderBufferHash() {
			return _serialisation.rusha.digestFromArrayBuffer(this._offscreen32BitView).toUpperCase();
		}
	}, {
		key: 'clearBuffers',
		value: function clearBuffers(backgroundColour) {

			var i = 0;
			// update clear array if background colour changes
			if (backgroundColour !== this._clearArrayColour) {
				for (i = 0; i < this._clearArray.length; ++i) {
					this._clearArray[i] = 0xFF000000 | backgroundColour;
				}
				this._clearArrayColour = backgroundColour;
			}

			// set background colour
			this._offscreen32BitView.set(this._clearArray);

			// Nes.ClearScreenArray is a quicker way of clearing this array
			this._bufferIndexArray.set(_consts.g_ClearScreenArray);
		}
	}, {
		key: 'render',
		value: function render(mainboard) {

			this._offscreenCanvas.putImageData(this._offscreenData, 0, 0);
			// Draw offscreen canvas onto front buffer, resizing it in the process
			this._canvas.drawImage(this._offscreenElement, 0, 0, this._element.clientWidth, this._element.clientHeight);
		}
	}, {
		key: 'screenshotToFile',
		value: function screenshotToFile() {

			this._offscreenElement.toBlob(function (blob) {
				(0, _fileSaver.saveAs)(blob, "screenshot.png");
			});
		}
	}, {
		key: 'screenshotToString',
		value: function screenshotToString() {

			return this._offscreenElement.toDataURL("image/png");
		}
	}]);

	return CanvasRenderSurface;
}();

exports.default = CanvasRenderSurface;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _serialisation = __webpack_require__(14);

var _consts = __webpack_require__(5);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HeadlessRenderSurface = function () {
	function HeadlessRenderSurface() {
		_classCallCheck(this, HeadlessRenderSurface);

		this._buffer = new Uint32Array(_consts.SCREEN_WIDTH * _consts.SCREEN_HEIGHT);
	}

	_createClass(HeadlessRenderSurface, [{
		key: 'writeToBuffer',
		value: function writeToBuffer(bufferIndex, insertIndex, colour) {
			this._buffer[insertIndex] = 0xFF000000 | colour;
		}
	}, {
		key: 'clearBuffers',
		value: function clearBuffers(backgroundColour) {
			for (var i = 0; i < this._buffer.length; ++i) {
				this._buffer[i] = 0xFF000000 | backgroundColour;
			}
		}
	}, {
		key: 'getRenderBufferHash',
		value: function getRenderBufferHash() {
			return _serialisation.rusha.digestFromArrayBuffer(this._buffer).toUpperCase();
		}
	}, {
		key: 'render',
		value: function render() {}
	}, {
		key: 'screenshot',
		value: function screenshot() {}
	}, {
		key: 'screenshotToString',
		value: function screenshotToString() {
			return '';
		}
	}]);

	return HeadlessRenderSurface;
}();

exports.default = HeadlessRenderSurface;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _consts = __webpack_require__(5);

var _fileSaver = __webpack_require__(61);

var _serialisation = __webpack_require__(14);

var _utils = __webpack_require__(74);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Must be power of 2
var TEXTURE_WIDTH = 256;
var TEXTURE_HEIGHT = 256;

var WebGlRenderSurface = function () {
	function WebGlRenderSurface(canvasParent) {
		var _this = this;

		_classCallCheck(this, WebGlRenderSurface);

		this._ready = false;

		this._clearArray = new Uint32Array(_consts.SCREEN_WIDTH * _consts.SCREEN_HEIGHT);
		this._clearArrayColour = this._clearArray[0];

		this._bufferIndexArray = new Int32Array(_consts.SCREEN_WIDTH * _consts.SCREEN_HEIGHT);
		this._offscreen32BitView = new Uint32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT);
		this._offscreen8BitView = new Uint8Array(this._offscreen32BitView.buffer);

		this._element = canvasParent.getCanvasElement();
		this._glContext = (0, _utils.getGlContext)(this._element);

		this._camera = new _utils.OrthoCamera(this._glContext);
		this._camera.setup(_consts.SCREEN_WIDTH, _consts.SCREEN_HEIGHT);

		this._initBuffers();

		this._texture = new _utils.FillableTexture(this._glContext, TEXTURE_WIDTH, TEXTURE_HEIGHT);

		canvasParent.connect('resize', this._onResize.bind(this));

		this._inputSizeShaderArray = new Float32Array([_consts.SCREEN_WIDTH, _consts.SCREEN_HEIGHT]);
		this._outputSizeShaderArray = new Float32Array([_consts.SCREEN_WIDTH, _consts.SCREEN_HEIGHT]);
		this._textureSizeShaderArray = new Float32Array([TEXTURE_WIDTH, TEXTURE_HEIGHT]);

		this._shader = new _utils.ShaderProgram(this._glContext);

		this.loadShader(null, function () {
			_this._ready = true;
		});
	}

	_createClass(WebGlRenderSurface, [{
		key: 'loadShader',
		value: function loadShader(shaderFilename, callback) {

			var that = this;
			this._shader.loadAndLink(shaderFilename, function () {
				that._shader.use();

				that._glContext.uniform2fv(that._shader.getUniformLocation("rubyInputSize"), that._inputSizeShaderArray);
				that._glContext.uniform2fv(that._shader.getUniformLocation("rubyOutputSize"), that._outputSizeShaderArray);
				that._glContext.uniform2fv(that._shader.getUniformLocation("rubyTextureSize"), that._textureSizeShaderArray);

				that._glContext.uniformMatrix4fv(that._shader.getUniformLocation("aModelViewProjectionMatrix"), false, that._camera.getMVPMatrix());

				that._vertexBuffer.bind(that._shader.getAttrib("aVertexPosition"));
				that._textureCoordBuffer.bind(that._shader.getAttrib("aTextureCoord"));
				that._indexBuffer.bind();
				that._texture.bind();

				that._glContext.uniform1i(that._shader.getUniformLocation("rubyTexture"), 0); //Texture unit 0 is for base images.

				callback();
			});
		}
	}, {
		key: '_initBuffers',
		value: function _initBuffers() {
			var t = _consts.SCREEN_WIDTH / TEXTURE_WIDTH;
			var u = _consts.SCREEN_HEIGHT / TEXTURE_HEIGHT;

			var vertices = new Float32Array([0, 0, 0.0, 1.0, _consts.SCREEN_WIDTH, 0, 0.0, 1.0, _consts.SCREEN_WIDTH, _consts.SCREEN_HEIGHT, 0.0, 1.0, 0, _consts.SCREEN_HEIGHT, 0.0, 1.0]);
			var texCoords = new Float32Array([0.0, 0.0, t, 0.0, t, u, 0.0, u]);
			var indices = new Uint16Array([0, 1, 2, 0, 2, 3]);

			this._vertexBuffer = new _utils.VertexBuffer(this._glContext);
			this._vertexBuffer.setData(vertices, 4, 4);

			this._textureCoordBuffer = new _utils.VertexBuffer(this._glContext);
			this._textureCoordBuffer.setData(texCoords, 2, 4);

			this._indexBuffer = new _utils.IndexBuffer(this._glContext);
			this._indexBuffer.setData(indices, 6);
		}
	}, {
		key: '_onResize',
		value: function _onResize() {
			this._glContext.viewport(0, 0, this._element.width, this._element.height);
			this._glContext.clearColor(0.0, 0.0, 0.0, 1.0);
		}
	}, {
		key: 'writeToBuffer',
		value: function writeToBuffer(bufferIndex, insertIndex, colour) {

			var existingIndex = this._bufferIndexArray[insertIndex];
			if (existingIndex <= bufferIndex) {
				this._offscreen32BitView[insertIndex] = 0xFF000000 | colour;
				this._bufferIndexArray[insertIndex] = bufferIndex;
			}
		}
	}, {
		key: 'getRenderBufferHash',
		value: function getRenderBufferHash() {
			return _serialisation.rusha.digestFromArrayBuffer(this._offscreen32BitView).toUpperCase();
		}
	}, {
		key: 'clearBuffers',
		value: function clearBuffers(backgroundColour) {

			// update clear array if background colour changes
			if (backgroundColour !== this._clearArrayColour) {
				for (var i = 0; i < this._clearArray.length; ++i) {
					this._clearArray[i] = 0xFF000000 | backgroundColour;
				}
				this._clearArrayColour = backgroundColour;
			}

			// set background colour
			this._offscreen32BitView.set(this._clearArray);

			// Nes.ClearScreenArray is a quicker way of clearing this array
			this._bufferIndexArray.set(_consts.g_ClearScreenArray);
		}
	}, {
		key: 'render',
		value: function render(mainboard) {

			if (!this._ready) {
				return;
			}
			this._glContext.clear(this._glContext.COLOR_BUFFER_BIT);
			this._texture.fill(0, 0, _consts.SCREEN_WIDTH, _consts.SCREEN_HEIGHT, this._offscreen8BitView);
			this._glContext.uniform1i(this._shader.getUniformLocation("rubyFrameCount"), mainboard.ppu.frameCounter);
			this._indexBuffer.draw();
		}
	}, {
		key: '_createCanvasWithScreenshotOn',
		value: function _createCanvasWithScreenshotOn() {

			// create copy of offscreen buffer into a new canvas element
			var element = document.createElement('canvas');
			element.width = _consts.SCREEN_WIDTH;
			element.height = _consts.SCREEN_HEIGHT;
			var canvas = element.getContext("2d");
			var imgData = canvas.getImageData(0, 0, _consts.SCREEN_WIDTH, _consts.SCREEN_HEIGHT);
			imgData.data.set(this._offscreen8BitView.subarray(0, _consts.SCREEN_WIDTH * _consts.SCREEN_HEIGHT * 4));
			canvas.putImageData(imgData, 0, 0);
			return element;
		}
	}, {
		key: 'screenshotToFile',
		value: function screenshotToFile() {
			var element = this._createCanvasWithScreenshotOn();
			element.toBlob(function (blob) {
				(0, _fileSaver.saveAs)(blob, "screenshot.png");
			});
		}
	}, {
		key: 'screenshotToString',
		value: function screenshotToString() {
			var element = this._createCanvasWithScreenshotOn();
			return element.toDataURL("image/png");
		}
	}, {
		key: 'loadShaderFromUrl',
		value: function loadShaderFromUrl(url) {
			this.loadShader(url, function () {});
		}
	}]);

	return WebGlRenderSurface;
}();

exports.default = WebGlRenderSurface;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.irq_waiting = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* Copyright (C) 2003-2005 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
eneral Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
ee the GNU Lesser General Public License for
more details. You should have received a copy of the GNU Lesser General
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Public License along with this module; if not, write to the Free Software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

// NES 2A03 APU sound chip emulator

// Nes_Snd_Emu 0.1.7. Copyright (C) 2003-2005 Shay Green. GNU LGPL license.

var _Tones = __webpack_require__(136);

var _BlipSynth = __webpack_require__(75);

var _BlipSynth2 = _interopRequireDefault(_BlipSynth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var osc_count = 5;
var start_addr = 0x4000;
var end_addr = 0x4017;
var no_irq = 1073741824;
var irq_waiting = exports.irq_waiting = 0;

// registers
var length_table = [0x0A, 0xFE, 0x14, 0x02, 0x28, 0x04, 0x50, 0x06, 0xA0, 0x08, 0x3C, 0x0A, 0x0E, 0x0C, 0x1A, 0x0E, 0x0C, 0x10, 0x18, 0x12, 0x30, 0x14, 0x60, 0x16, 0xC0, 0x18, 0x48, 0x1A, 0x10, 0x1C, 0x20, 0x1E];

var APU = function () {
	function APU() {
		_classCallCheck(this, APU);

		this.start_addr = start_addr;
		this.end_addr = end_addr;
		this.status_addr = 0x4015;

		this._square1 = new _Tones.Square();
		this._square2 = new _Tones.Square();
		this._triangle = new _Tones.Triangle();
		this._noise = new _Tones.Noise();
		this._dmc = new _Tones.Dmc();
		this.osc = [this._square1, this._square2, this._triangle, this._noise, this._dmc];

		this.last_time = 0; // has been run until this time in current frame
		this.earliest_irq_ = 0;
		this.next_irq = 0;

		this._square_synth = new _BlipSynth2.default(_BlipSynth2.default.blip_good_quality, 15);
		this._irqCallback = null;
		this.frame_mode = 0;
		this.frame = 0;

		this._dmc.apu = this;
		this._dmc.rom_reader = null;
		this._square1.synth = this._square_synth;
		this._square2.synth = this._square_synth;

		this.output(null);
		this.volume(1.0);
		this.reset(false);
	}

	// Reset internal frame counter, registers, and all oscillators.
	// Use PAL timing if pal_timing is true, otherwise use NTSC timing.
	// Set the DMC oscillator's initial DAC value to initial_dmc_dac without
	// any audible click.


	_createClass(APU, [{
		key: 'reset',
		value: function reset(pal_mode, initial_dmc_dac) {
			pal_mode = pal_mode || false;
			initial_dmc_dac = initial_dmc_dac || 0;

			// to do: time pal frame periods exactly
			this.frame_period = pal_mode ? 8314 : 7458;
			this._dmc.pal_mode = pal_mode ? 1 : 0;

			this._square1.reset();
			this._square2.reset();
			this._triangle.reset();
			this._noise.reset();
			this._dmc.reset();

			this.last_time = 0;
			this.osc_enables = 0;
			this.irq_flag = false;
			this.earliest_irq_ = no_irq;
			this.frame_delay = 1; // cycles until frame counter runs next
			this.write_register(0, 0x4017, 0x00);
			this.write_register(0, 0x4015, 0x00);

			for (var addr = start_addr; addr <= 0x4013; addr++) {
				this.write_register(0, addr, addr & 3 ? 0x00 : 0x10);
			}

			this._dmc.dac = initial_dmc_dac;
			if (!this._dmc.nonlinear) {
				this._dmc.last_amp = initial_dmc_dac; // prevent output transition
			}
		}

		// Set buffer to generate all sound into, or disable sound if NULL

	}, {
		key: 'output',
		value: function output(buffer) {
			for (var i = 0; i < osc_count; i++) {
				this.osc_output(i, buffer);
			}
		}

		// Set memory reader callback used by DMC oscillator to fetch samples.
		// When callback is invoked, 'user_data' is passed unchanged as the
		// first parameter.

	}, {
		key: 'dmc_reader',
		value: function dmc_reader(dmcCallback) {
			this._dmc.rom_reader = dmcCallback;
		}

		// All time values are the number of CPU clock cycles relative to the
		// beginning of the current time frame. Before resetting the CPU clock
		// count, call end_frame( last_cpu_time ).
		// Write to register (0x4000-0x4017, except 0x4014 and 0x4016)

	}, {
		key: 'write_register',
		value: function write_register(time, addr, data) {

			//	require( addr > 0x20 ); // addr must be actual address (i.e. 0x40xx)
			//	require( (unsigned) data <= 0xff );

			// Ignore addresses outside range
			if (addr < start_addr || end_addr < addr) {
				return;
			}

			this.run_until(time);

			if (addr < 0x4014) {
				// Write to channel
				var osc_index = addr - start_addr >> 2;
				var osc = this.osc[osc_index];

				var reg = addr & 3;
				osc.regs[reg] = data;
				osc.reg_written[reg] = true;

				if (osc_index === 4) {
					// handle DMC specially
					this._dmc.write_register(reg, data);
				} else if (reg === 3) {
					// load length counter
					if (this.osc_enables >> osc_index & 1) {
						osc.length_counter = length_table[data >> 3 & 0x1f];
					}

					// reset square phase
					if (osc_index < 2) {
						osc.phase = _Tones.Square.phase_range - 1;
					}
				}
			} else if (addr === 0x4015) {
				// Channel enables
				for (var i = 0; i < osc_count; ++i) {
					var enabled = data >> i & 1;
					if (enabled === 0) {
						this.osc[i].length_counter = 0;
					}
				}

				var recalc_irq = this._dmc.irq_flag;
				this._dmc.irq_flag = false;

				var old_enables = this.osc_enables;
				this.osc_enables = data;
				if (!(data & 0x10)) {
					this._dmc.next_irq = no_irq;
					recalc_irq = true;
				} else if (!(old_enables & 0x10)) {
					this._dmc.start(); // dmc just enabled
				}

				if (recalc_irq) {
					this.irq_changed();
				}
			} else if (addr === 0x4017) {
				// Frame mode
				this.frame_mode = data;

				var irq_enabled = !(data & 0x40);
				this.irq_flag &= irq_enabled;
				this.next_irq = no_irq;

				// mode 1
				this.frame_delay = this.frame_delay & 1;
				this.frame = 0;

				if (!(data & 0x80)) {
					// mode 0
					this.frame = 1;
					this.frame_delay += this.frame_period;
					if (irq_enabled) {
						this.next_irq = time + this.frame_delay + this.frame_period * 3;
					}
				}

				this.irq_changed();
			}
		}

		// Read from status register at 0x4015

	}, {
		key: 'read_status',
		value: function read_status(time) {

			this.run_until(time - 1);

			var result = (this._dmc.irq_flag ? 0x80 : 0) | (this.irq_flag ? 0x40 : 0);

			for (var i = 0; i < osc_count; i++) {
				if (this.osc[i].length_counter > 0) {
					result |= 1 << i;
				}
			}

			this.run_until(time);

			if (this.irq_flag) {
				this.irq_flag = false;
				this.irq_changed();
			}

			return result;
		}

		// Run all oscillators up to specified time, end current time frame, then
		// start a new time frame at time 0. Time frames have no effect on emulation
		// and each can be whatever length is convenient.

	}, {
		key: 'end_frame',
		value: function end_frame(end_time) {
			if (end_time > this.last_time) {
				this.run_until(end_time);
			}

			// make times relative to new frame
			this.last_time -= end_time;
			//require( this.last_time >= 0 );

			if (this.next_irq !== no_irq) {
				this.next_irq -= end_time;
				//assert( this.next_irq >= 0 );
			}
			if (this._dmc.next_irq !== no_irq) {
				this._dmc.next_irq -= end_time;
				//assert( this._dmc.next_irq >= 0 );
			}
			if (this.earliest_irq_ !== no_irq) {
				this.earliest_irq_ -= end_time;
				if (this.earliest_irq_ < 0) {
					this.earliest_irq_ = 0;
				}
			}
		}

		// Save/load snapshot of exact emulation state

	}, {
		key: 'save_snapshot',
		value: function save_snapshot(apu_snapshot_t) {}
	}, {
		key: 'load_snapshot',
		value: function load_snapshot(apu_snapshot_t) {}

		// Set overall volume (default is 1.0)

	}, {
		key: 'volume',
		value: function volume(v) {
			v = v || 1.0;
			this._dmc.nonlinear = false;
			this._square_synth.volume(0.1128 * v);
			this._triangle.synth.volume(0.12765 * v);
			this._noise.synth.volume(0.0741 * v);
			this._dmc.synth.volume(0.42545 * v);
		}

		// Set IRQ time callback that is invoked when the time of earliest IRQ
		// may have changed, or NULL to disable. When callback is invoked,
		// 'user_data' is passed unchanged as the first parameter.

	}, {
		key: 'irq_notifier',
		value: function irq_notifier(irqCallback) {

			this._irqCallback = irqCallback;
		}

		// Get time that APU-generated IRQ will occur if no further register reads
		// or writes occur. If IRQ is already pending, returns irq_waiting. If no
		// IRQ will occur, returns no_irq.

	}, {
		key: 'earliest_irq',
		value: function earliest_irq() {
			return this.earliest_irq_;
		}

		// Run APU until specified time, so that any DMC memory reads can be
		// accounted for (i.e. inserting CPU wait states).

	}, {
		key: 'run_until',
		value: function run_until(end_time) {
			//require( end_time >= this.last_time );

			if (end_time === this.last_time) {
				return;
			}

			while (true) {
				// earlier of next frame time or end time
				var time = this.last_time + this.frame_delay;
				if (time > end_time) {
					time = end_time;
				}
				this.frame_delay -= time - this.last_time;

				// run oscs to present
				this._square1.run(this.last_time, time);
				this._square2.run(this.last_time, time);
				this._triangle.run(this.last_time, time);
				this._noise.run(this.last_time, time);
				this._dmc.run(this.last_time, time);
				this.last_time = time;

				if (time === end_time) {
					break; // no more frames to run
				}

				// take frame-specific actions
				this.frame_delay = this.frame_period;
				switch (this.frame++) {
					case 0:
						if (!(this.frame_mode & 0xc0)) {
							this.next_irq = time + this.frame_period * 4 + 1;
							this.irq_flag = true;
						}
					// fall through
					case 2:
						// clock length and sweep on frames 0 and 2
						this._square1.clock_length(0x20);
						this._square2.clock_length(0x20);
						this._noise.clock_length(0x20);
						this._triangle.clock_length(0x80); // different bit for halt flag on triangle

						this._square1.clock_sweep(-1);
						this._square2.clock_sweep(0);
						break;

					case 1:
						// frame 1 is slightly shorter
						this.frame_delay -= 2;
						break;

					case 3:
						this.frame = 0;

						// frame 3 is almost twice as long in mode 1
						if (this.frame_mode & 0x80) {
							this.frame_delay += this.frame_period - 6;
						}
						break;
				}

				// clock envelopes and linear counter every frame
				this._triangle.clock_linear_counter();
				this._square1.clock_envelope();
				this._square2.clock_envelope();
				this._noise.clock_envelope();
			}
		}
	}, {
		key: 'irq_changed',
		value: function irq_changed() {
			var new_irq = this._dmc.next_irq;
			if (this._dmc.irq_flag || this.irq_flag) {
				new_irq = 0;
			} else if (new_irq > this.next_irq) {
				new_irq = this.next_irq;
			}

			if (new_irq !== this.earliest_irq_) {
				this.earliest_irq_ = new_irq;
				if (this._irqCallback) {
					this._irqCallback();
				}
			}
		}
	}, {
		key: 'osc_output',
		value: function osc_output(osc, buf) {
			this.osc[osc].output = buf;
		}
	}, {
		key: 'save_snapshot',
		value: function save_snapshot() {
			return {};
		}
	}, {
		key: 'load_snapshot',
		value: function load_snapshot() {}
	}]);

	return APU;
}();

exports.default = APU;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Trace = __webpack_require__(32);

var _APU = __webpack_require__(131);

var _APU2 = _interopRequireDefault(_APU);

var _BlipBuffer = __webpack_require__(133);

var _BlipBuffer2 = _interopRequireDefault(_BlipBuffer);

var _WebAudioRenderer = __webpack_require__(127);

var _WebAudioRenderer2 = _interopRequireDefault(_WebAudioRenderer);

var _consts = __webpack_require__(5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var APUOutBufferSize = 4096;
var APUBaseRate = 1789773;

var APULegacy = function () {
	function APULegacy(mainboard) {
		_classCallCheck(this, APULegacy);

		this._outBufferSize = 4096;
		this._soundRate = 44100;

		this.mainboard = mainboard;
		this.mainboard.connect('reset', this._onReset.bind(this));
		this.nextIrq = -1;
		this._irqActive = false;
		this.mLastCalculatedNextIrqTime = -1;

		this._enabled = true;
		this._justRenabled = 0;
		var soundRate = 44100;

		this.apu = new _APU2.default();

		try {
			this._renderer = new _WebAudioRenderer2.default(APUOutBufferSize);
			this._outBuffer = this._renderer.createBuffer(this._outBufferSize);
			soundRate = this._renderer.getSampleRate();
			this.buf = new _BlipBuffer2.default();

			this.buf.clock_rate(APUBaseRate);
			this.apu.output(this.buf);
			this.buf.sample_rate(soundRate);
		} catch (err) {
			this._renderer = null;
			this._enabled = false;
			console.log("WebAudio unsupported in this browser. Sound will be disabled...", err);
		}

		this.apu.dmc_reader(function (addr) {
			return mainboard.memory.read8(addr);
		});
		this.apu.irq_notifier(this.CalculateWhenIrqDue.bind(this));
		// called when the next predicted nmi changes
		//that.mainboard.synchroniser.synchronise();
	}

	_createClass(APULegacy, [{
		key: 'enableSound',
		value: function enableSound(enable) {
			enable = enable === undefined ? true : enable;
			if (enable !== this._enabled) {
				if (enable) {
					// after re-enabling sound, fill audio buffer with zeroes to prevent static
					this._justRenabled = 2;
				}
				this._enabled = enable;
			}
		}
	}, {
		key: 'soundEnabled',
		value: function soundEnabled() {
			return this._enabled && this.soundSupported();
		}
	}, {
		key: 'soundSupported',
		value: function soundSupported() {
			return !!this._renderer;
		}
	}, {
		key: 'setVolume',
		value: function setVolume(val) {
			if (this._renderer) {
				this._renderer.setVolume(val);
			}
		}
	}, {
		key: '_onReset',
		value: function _onReset(cold) {

			this.nextIrq = -1;
			this.apu.reset(_consts.COLOUR_ENCODING_NAME !== "NTSC");
		}
	}, {
		key: 'readFromRegister',
		value: function readFromRegister(offset) {
			var ret = 0;
			if (offset === this.apu.status_addr) {
				this.mainboard.synchroniser.synchronise();
				var realTime = Math.floor(this.mainboard.synchroniser.getCpuMTC() / _consts.COLOUR_ENCODING_MTC_PER_CPU);
				if (offset === 0x4015 && this._irqActive) {
					// irq acknowledge
					this._irqActive = false;
					//this.mainboard.cpu.holdIrqLineLow( false );
				}
				ret = this.apu.read_status(realTime);
			}
			return ret;
		}
	}, {
		key: 'writeToRegister',
		value: function writeToRegister(offset, data) {
			if (offset >= this.apu.start_addr && offset <= this.apu.end_addr) {
				this.mainboard.synchroniser.synchronise();
				var realTime = Math.floor(this.mainboard.synchroniser.getCpuMTC() / _consts.COLOUR_ENCODING_MTC_PER_CPU);
				this.apu.write_register(realTime, offset, data);
			}
		}
	}, {
		key: 'synchronise',
		value: function synchronise(startTicks, endTicks) {
			var cpuClocks = Math.floor(startTicks / _consts.COLOUR_ENCODING_MTC_PER_CPU) - 1;
			this.apu.run_until(cpuClocks >= 0 ? cpuClocks : 0);

			if (this.apu.earliest_irq() === _APU2.default.irq_waiting) {
				this._irqActive = true;
			}
		}
	}, {
		key: 'onEndFrame',
		value: function onEndFrame(cpuMtc) {
			var realTime = Math.floor(this.mainboard.synchroniser.getCpuMTC() / _consts.COLOUR_ENCODING_MTC_PER_CPU);
			this.apu.end_frame(realTime);

			if (this._renderer && this._enabled) {
				// Read some samples out of BlipBuffer if there are enough to
				// fill our output buffer
				this.buf.end_frame(realTime);

				var samplesAvailable = this.buf.samples_avail();

				//	if ( g_options->SoundEnabled && g_options->ApplicationSpeed == 0 ) // dont play sound if disabled or not running at normal speed
				if (samplesAvailable >= APUOutBufferSize) {
					//write samples directly to renderer's buffer
					var floatArray = this._outBuffer.lockBuffer();
					this.buf.read_samples(floatArray, APUOutBufferSize);
					this._outBuffer.unlockBuffer();
				}
			}

			this.CalculateWhenIrqDue();
		}
	}, {
		key: '_eventIrqTrigger',
		value: function _eventIrqTrigger(eventTime) {
			// done in the synchronise method
			//	this.mainboard.cpu.holdIrqLineLow();
		}
	}, {
		key: 'CalculateWhenIrqDue',
		value: function CalculateWhenIrqDue() {

			var that = this;
			var earliestIrq = this.apu.earliest_irq();
			if (earliestIrq !== this.apu.no_irq) {
				this.nextIrq = earliestIrq * _consts.COLOUR_ENCODING_MTC_PER_CPU;
				if (this.nextIrq >= 0) {
					(0, _Trace.writeLine)(_Trace.trace_apu, 'IRQ scheduled for: ' + this.nextIrq);
					//this.mainboard.synchroniser.addEvent( 'apu irq', this.nextIrq, function( eventTime ) { that._eventIrqTrigger( eventTime ); } );
				}
			} else {
				this.nextIrq = -1;
				// TODO: change irq event if it changes
			}
		}
	}, {
		key: 'saveState',
		value: function saveState() {
			var data = {};
			data.apu = this.apu.save_snapshot();
			data.nextIrq = this.nextIrq;
			data.mLastCalculatedNextIrqTime = this.mLastCalculatedNextIrqTime;
			return data;
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {

			this.apu.load_snapshot(state.apu);
			this.nextIrq = state.nextIrq;
			this.mLastCalculatedNextIrqTime = state.mLastCalculatedNextIrqTime;
		}
	}]);

	return APULegacy;
}();

exports.default = APULegacy;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (C) 2003-2005 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
more details. You should have received a copy of the GNU Lesser General
Public License along with this module; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

// Buffer of sound samples into which band-limited waveforms can be synthesized
// using Blip_Wave or Blip_Synth.

// Blip_Buffer 0.3.3. Copyright (C) 2003-2005 Shay Green. GNU LGPL license.


var widest_impulse_ = 24;
var blip_res_bits_ = 5;
var BLIP_BUFFER_ACCURACY = 16;
var max_res = 1 << blip_res_bits_;

var Blip_eq_t = function Blip_eq_t(treble, cutoff, samplerate) {
	_classCallCheck(this, Blip_eq_t);

	this.treble = treble || 0;
	this.cutoff = cutoff || 0;
	this.sample_rate = samplerate || 44100;
};

var uintArray_memset = function uintArray_memset(buf, data, len, startIndex) {

	startIndex = startIndex || 0;
	for (var i = 0; i < len; ++i) {
		buf[startIndex + i] = data;
	}
};

var uintArray_memmove = function uintArray_memmove(buf, srcIndex, destIndex, len) {

	var tmpArray = null;
	if (!tmpArray || tmpArray.length < len) {
		tmpArray = new Uint16Array(len);
	}
	tmpArray.set(buf.subarray(srcIndex, srcIndex + len), 0);
	buf.set(tmpArray.subarray(0, len), destIndex);
};

var uintArray_memcpy = function uintArray_memcpy(buf, srcIndex, destIndex, len) {
	buf.set(buf.subarray(srcIndex, srcIndex + len), destIndex);
};

var blip_default_length = 0;
var accum_fract = 15; // less than 16 to give extra sample range
var sample_offset = 0x7F7F; // repeated byte allows memset to clear buffer


var BlipBuffer = function () {
	function BlipBuffer() {
		_classCallCheck(this, BlipBuffer);

		this.samples_per_sec = 44100;
		this.reader_accum = 0;
		this.bass_shift = 0;
		this.eq = new Blip_eq_t();

		// try to cause assertion failure if buffer is used before these are set
		this.clocks_per_sec = 0;
		this.buffer_ = null;
		this.factor_ = ~0;
		this.offset_ = 0;
		this.buffer_size_ = 0;
		this.length_ = 0;

		this.bass_freq_ = 16;
	}

	// Set output sample rate and buffer length in milliseconds (1/1000 sec),
	// If there is insufficient memory for the buffer, sets the buffer length
	// to 0 and returns error string (or propagates exception if compiler supports it).


	_createClass(BlipBuffer, [{
		key: "sample_rate",
		value: function sample_rate(new_rate, msec) {

			if (new_rate === undefined) {
				return this.samples_per_sec;
			} else {
				msec = msec || blip_default_length;

				var new_size = 65448; //(0xFFFFFFFF >> BLIP_BUFFER_ACCURACY) + 1 - widest_impulse_ - 64;
				if (msec !== blip_default_length) {
					var s = Math.floor((new_rate * (msec + 1) + 999) / 1000);
					if (s < new_size) {
						new_size = s;
					} else {
						//		require( false ); // requested buffer length exceeds limit
					}
				}

				if (this.buffer_size_ !== new_size) {
					this.buffer_ = null; // allow for exception in allocation below
					this.buffer_size_ = 0;
					this.offset_ = 0;

					this.buffer_ = new Uint16Array(new_size + widest_impulse_);
				}

				this.buffer_size_ = new_size;
				this.length_ = Math.floor(new_size * 1000 / new_rate) - 1;
				//	if ( msec )
				//		assert( this.length_ == msec ); // ensure length is same as that passed in

				this.samples_per_sec = new_rate;
				if (this.clocks_per_sec) {
					this.clock_rate(this.clocks_per_sec); // recalculate factor
				}

				this.bass_freq(this.bass_freq_); // recalculate shift

				this.clear();
			}
		}

		// Length of buffer, in milliseconds

	}, {
		key: "length",
		value: function length() {
			return this.length_;
		}

		// Number of source time units per second

	}, {
		key: "clock_rate",
		value: function clock_rate(cps) {
			if (cps === undefined) {
				return this.clocks_per_sec;
			} else {
				this.clocks_per_sec = cps;
				this.factor_ = Math.floor(this.samples_per_sec / cps * (1 << BLIP_BUFFER_ACCURACY) + 0.5);
				//	require( this.factor_ > 0 ); // clock_rate/sample_rate ratio is too large
			}
		}

		// Set frequency at which high-pass filter attenuation passes -3dB

	}, {
		key: "bass_freq",
		value: function bass_freq(freq) {
			this.bass_freq_ = freq;
			if (freq === 0) {
				this.bass_shift = 31; // 32 or greater invokes undefined behavior elsewhere
				return;
			}
			this.bass_shift = 1 + Math.floor(1.442695041 * Math.log(0.124 * this.samples_per_sec / freq));
			if (this.bass_shift < 0) {
				this.bass_shift = 0;
			}
			if (this.bass_shift > 24) {
				this.bass_shift = 24;
			}
		}

		// Remove all available samples and clear buffer to silence. If 'entire_buffer' is
		// false, just clear out any samples waiting rather than the entire buffer.

	}, {
		key: "clear",
		value: function clear(entire_buffer) {
			entire_buffer = entire_buffer === undefined ? true : entire_buffer;

			var count = entire_buffer ? this.buffer_size_ : this.samples_avail();
			this.offset_ = 0;
			this.reader_accum = 0;
			uintArray_memset(this.buffer_, sample_offset, count + widest_impulse_);
		}

		// to do:
		// Notify Blip_Buffer that synthesis has been performed until specified time
		//void run_until( blip_time_t );

		// End current time frame of specified duration and make its samples available
		// (along with any still-unread samples) for reading with read_samples(). Begin
		// a new time frame at the end of the current frame. All transitions must have
		// been added before 'time'.

	}, {
		key: "end_frame",
		value: function end_frame(t) {
			this.offset_ += t * this.factor_;
			//	assert(( "Blip_Buffer::end_frame(): Frame went past end of buffer",
			//			samples_avail() <= (long) this.buffer_size_ ));
		}

		// Number of samples available for reading with read_samples()

	}, {
		key: "samples_avail",
		value: function samples_avail() {
			return this.offset_ >> BLIP_BUFFER_ACCURACY;
		}

		// Read at most 'max_samples' out of buffer into 'dest', removing them from from
		// the buffer. Return number of samples actually read and removed. If stereo is
		// true, increment 'dest' one extra time after writing each sample, to allow
		// easy interleving of two channels into a stereo output buffer.

	}, {
		key: "read_samples",
		value: function read_samples(out, max_samples, stereo) {
			//require( this.buffer_ ); // sample rate must have been set

			var count = this.samples_avail();
			if (count > max_samples) {
				count = max_samples;
			}

			if (!count) {
				return 0; // optimization
			}

			var isFloatOutputArray = out instanceof Float32Array;

			var inIndex = 0;
			var outIndex = 0;
			var step = stereo ? 2 : 1;

			for (var n = count; n--;) {

				var s = this.reader_accum >> accum_fract;
				this.reader_accum -= this.reader_accum >> this.bass_shift;
				var inbyte = this.buffer_[inIndex];
				this.reader_accum += inbyte - sample_offset << accum_fract;
				inIndex += 1;

				// clamp sample
				//	if ( s !== ( s & 0xFFFF ) ) {
				if (s < -32767 || s > 32767) {
					// larger than a signed 16 bit value
					s = 0x7FFF - (s >> 24);
				}

				if (isFloatOutputArray) {
					out[outIndex] = s / 32768.0;
				} else {
					out[outIndex] = s;
				}

				outIndex += step;
			}

			this.remove_samples(count);

			return count;
		}

		// Remove 'count' samples from those waiting to be read

	}, {
		key: "remove_samples",
		value: function remove_samples(count) {
			//require( this.buffer_ ); // sample rate must have been set

			if (!count) {
				// optimization
				return;
			}

			this.remove_silence(count);

			// Allows synthesis slightly past time passed to end_frame(), as long as it's
			// not more than an output sample.
			// to do: kind of hacky, could add run_until() which keeps track of extra synthesis
			var copy_extra = 1;

			// copy remaining samples to beginning and clear old samples
			var remain = this.samples_avail() + widest_impulse_ + copy_extra;
			if (count >= remain) {
				uintArray_memmove(this.buffer_, count, 0, remain);
			} else {
				uintArray_memcpy(this.buffer_, count, 0, remain);
			}
			uintArray_memset(this.buffer_, sample_offset, count, remain);
		}

		// Number of samples delay from synthesis to samples read out

	}, {
		key: "output_latency",
		value: function output_latency() {
			return Math.floor(widest_impulse_ / 2);
		}

		// not documented yet

	}, {
		key: "remove_silence",
		value: function remove_silence(count) {
			//assert(( "Blip_Buffer::remove_silence(): Tried to remove more samples than available",
			//		count <= samples_avail() ));
			this.offset_ -= count << BLIP_BUFFER_ACCURACY;
		}
	}, {
		key: "resampled_time",
		value: function resampled_time(t) {
			return t * this.factor_ + this.offset_;
		}
	}, {
		key: "resampled_duration",
		value: function resampled_duration(t) {
			return t * this.factor_;
		}
	}]);

	return BlipBuffer;
}();

exports.default = BlipBuffer;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (C) 2003-2005 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
more details. You should have received a copy of the GNU Lesser General
Public License along with this module; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

// Buffer of sound samples into which band-limited waveforms can be synthesized
// using Blip_Wave or Blip_Synth.

// Blip_Buffer 0.3.3. Copyright (C) 2003-2005 Shay Green. GNU LGPL license.


var BlipEqT = function BlipEqT(treble, cutoff, samplerate) {
	_classCallCheck(this, BlipEqT);

	this.treble = treble || 0;
	this.cutoff = cutoff || 0;
	this.sample_rate = samplerate || 44100;
};

exports.default = BlipEqT;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BlipEqT = __webpack_require__(134);

var _BlipEqT2 = _interopRequireDefault(_BlipEqT);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright (C) 2003-2005 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
more details. You should have received a copy of the GNU Lesser General
Public License along with this module; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

// Buffer of sound samples into which band-limited waveforms can be synthesized
// using Blip_Wave or Blip_Synth.

// Blip_Buffer 0.3.3. Copyright (C) 2003-2005 Shay Green. GNU LGPL license.

var impulse_bits = 15;
var impulse_amp = 1 << impulse_bits;
var impulse_offset = Math.floor(impulse_amp / 2);
var widest_impulse_ = 24;
var blip_res_bits_ = 5;
var max_res = 1 << blip_res_bits_;

var uintArray_memcpy = function uintArray_memcpy(buf, srcIndex, destIndex, len) {
	buf.set(buf.subarray(srcIndex, srcIndex + len), destIndex);
};

var BlipImpulse = function () {
	function BlipImpulse() {
		_classCallCheck(this, BlipImpulse);

		this.impulses = null;
		this.impulse = null;
	}

	_createClass(BlipImpulse, [{
		key: 'init',
		value: function init(imps, w, r, fb) {
			this.fine_bits = fb || 0;
			this.width = w;
			this.impulses = new Uint16Array(imps.buffer);
			this.generate = true;
			this.volume_unit_ = -1.0;
			this.res = r;
			this.buf = null;

			this.impulse = new Uint16Array(this.impulses.buffer, this.width * this.res * 2 * (this.fine_bits ? 2 : 1) * 2);
			this.offset = 0;
		}

		// TODO: examine this if there are any problems

	}, {
		key: 'scale_impulse',
		value: function scale_impulse(unit, imp_in) {

			var offset = (unit << impulse_bits) - impulse_offset * unit + (1 << impulse_bits - 1);
			var impIndex = 0;
			var fimpIndex = 0;
			for (var n = Math.floor(this.res / 2) + 1; n--;) {
				var error = unit;
				for (var nn = this.width; nn--;) {
					var a = this.impulse[fimpIndex++] * unit + offset >> impulse_bits;
					error -= a - unit;
					imp_in[impIndex++] = a;
				}

				// add error to middle
				imp_in[impIndex - Math.floor(this.width / 2) - 1] += error;
			}

			if (this.res > 2) {
				// second half is mirror-image
				var revIndex = impIndex - this.width - 1;
				for (var mm = (Math.floor(this.res / 2) - 1) * this.width - 1; mm--;) {
					imp_in[impIndex++] = imp_in[--revIndex];
				}
				imp_in[impIndex++] = unit;
			}

			// copy to odd offset
			imp_in[impIndex++] = unit;
			//memcpy( imp, imp_in, (res * width - 1) * sizeof *imp );
			uintArray_memcpy(imp_in, 0, impIndex, this.res * this.width - 1);
		}
	}, {
		key: 'fine_volume_unit',
		value: function fine_volume_unit() {
			// to do: find way of merging in-place without temporary buffer

			var temp = new Uint16Array(max_res * 2 * widest_impulse_);
			this.scale_impulse((this.offset & 0xffff) << this.fine_bits, temp);
			var imp2 = this.impulse.subarray(this.res * 2 * this.width);
			this.scale_impulse(this.offset & 0xffff, imp2);

			// merge impulses
			var impIndex = 0;
			var imp2Index = 0;
			var src2Index = 0;
			for (var n = Math.floor(this.res / 2) * 2 * this.width; n--;) {
				this.impulses[impIndex++] = imp2[imp2Index++];
				this.impulses[impIndex++] = imp2[imp2Index++];
				this.impulses[impIndex++] = temp[src2Index++];
				this.impulses[impIndex++] = temp[src2Index++];
			}
		}
	}, {
		key: 'volume_unit',
		value: function volume_unit(new_unit) {
			if (new_unit === this.volume_unit_) {
				return;
			}

			if (this.generate) {
				this.treble_eq(new _BlipEqT2.default(-8.87, 8800, 44100));
			}

			this.volume_unit_ = new_unit;

			this.offset = 0x10001 * Math.floor(this.volume_unit_ * 0x10000 + 0.5);

			if (this.fine_bits) {
				this.fine_volume_unit();
			} else {
				this.scale_impulse(this.offset & 0xffff, this.impulses);
			}
		}
	}, {
		key: 'treble_eq',
		value: function treble_eq(new_eq) {

			if (!this.generate && new_eq.treble === this.eq.treble && new_eq.cutoff === this.eq.cutoff && new_eq.sample_rate === this.eq.sample_rate) {
				return; // already calculated with same parameters
			}

			var pi = 3.1415926535897932384626433832795029;

			this.generate = false;
			this.eq = new_eq;

			var treble = Math.pow(10.0, 1.0 / 20 * this.eq.treble); // dB (-6dB = 0.50)
			if (treble < 0.000005) {
				treble = 0.000005;
			}

			var treble_freq = 22050.0; // treble level at 22 kHz harmonic
			var sample_rate = this.eq.sample_rate;
			var pt = treble_freq * 2 / sample_rate;
			var cutoff = this.eq.cutoff * 2 / sample_rate;
			if (cutoff >= pt * 0.95 || cutoff >= 0.95) {
				cutoff = 0.5;
				treble = 1.0;
			}

			// DSF Synthesis (See T. Stilson & J. Smith (1996),
			// Alias-free digital synthesis of classic analog waveforms)

			// reduce adjacent impulse interference by using small part of wide impulse
			var n_harm = 4096;
			var rolloff = Math.pow(treble, 1.0 / (n_harm * pt - n_harm * cutoff));
			var rescale = 1.0 / Math.pow(rolloff, n_harm * cutoff);

			var pow_a_n = rescale * Math.pow(rolloff, n_harm);
			var pow_a_nc = rescale * Math.pow(rolloff, n_harm * cutoff);

			var total = 0.0;
			var to_angle = pi / 2 / n_harm / max_res;

			var buf = [];
			buf.length = Math.floor(max_res * (widest_impulse_ - 2) / 2);
			var size = Math.floor(max_res * (this.width - 2) / 2);
			for (var i = size; i--;) {
				var angle = (i * 2 + 1) * to_angle;

				// equivalent
				//double y =     dsf( angle, n_harm * cutoff, 1.0 );
				//y -= rescale * dsf( angle, n_harm * cutoff, rolloff );
				//y += rescale * dsf( angle, n_harm,          rolloff );

				var cos_angle = Math.cos(angle);
				var cos_nc_angle = Math.cos(n_harm * cutoff * angle);
				var cos_nc1_angle = Math.cos((n_harm * cutoff - 1.0) * angle);

				var b = 2.0 - 2.0 * cos_angle;
				var a = 1.0 - cos_angle - cos_nc_angle + cos_nc1_angle;

				var d = 1.0 + rolloff * (rolloff - 2.0 * cos_angle);
				var c = pow_a_n * rolloff * Math.cos((n_harm - 1.0) * angle) - pow_a_n * Math.cos(n_harm * angle) - pow_a_nc * rolloff * cos_nc1_angle + pow_a_nc * cos_nc_angle;

				// optimization of a / b + c / d
				var y = (a * d + c * b) / (b * d);

				// fixed window which affects wider impulses more
				if (this.width > 12) {
					var windowVar = Math.cos(n_harm / 1.25 / widest_impulse_ * angle);
					y *= windowVar * windowVar;
				}

				total += y;
				buf[i] = y;
			}

			// integrate runs of length 'max_res'
			var factor = impulse_amp * 0.5 / total; // 0.5 accounts for other mirrored half
			var impIndex = 0;
			var step = Math.floor(max_res / this.res);
			var offset = this.res > 1 ? max_res : Math.floor(max_res / 2);
			for (var n = Math.floor(this.res / 2) + 1; n--; offset -= step) {
				for (var w = -Math.floor(this.width / 2); w < Math.floor(this.width / 2); w++) {
					var sum = 0;
					for (var k = max_res; k--;) {
						var index = w * max_res + offset + k;
						if (index < 0) {
							index = -index - 1;
						}
						if (index < size) {
							sum += buf[index];
						}
					}
					this.impulse[impIndex++] = Math.floor(sum * factor + (impulse_offset + 0.5));
				}
			}

			// rescale
			var unit = this.volume_unit_;
			if (unit >= 0) {
				this.volume_unit_ = -1;
				this.volume_unit(unit);
			}
		}
	}]);

	return BlipImpulse;
}();

exports.default = BlipImpulse;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Dmc = exports.Noise = exports.Triangle = exports.Square = exports.Envelope = exports.Osc = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* Copyright (C) 2003-2005 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
eneral Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
without even the implied warranty of MERCHANTABILITY or FITNESS
ee the GNU Lesser General Public License for
more details. You should have received a copy of the GNU Lesser General
ublic License along with this module; if not, write to the Free Software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

var _BlipSynth = __webpack_require__(75);

var _BlipSynth2 = _interopRequireDefault(_BlipSynth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var no_irq = 1073741824;

var Osc = exports.Osc = function () {
	function Osc() {
		_classCallCheck(this, Osc);

		this.regs = new Uint8Array(4);
		this.reg_written = [false, false, false, false];
		this.output = null;
		this.length_counter = 0; // length counter (0 if unused by oscillator)
		this.delay = 0; // delay until next (potential) transition
		this.last_amp = 0; // last amplitude oscillator was outputting
	}

	_createClass(Osc, [{
		key: 'clock_length',
		value: function clock_length(halt_mask) {
			if (this.length_counter > 0 && (this.regs[0] & halt_mask) === 0) {
				this.length_counter--;
			}
		}
	}, {
		key: 'period',
		value: function period(halt_mask) {
			return (this.regs[3] & 7) * 0x100 + (this.regs[2] & 0xff);
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.delay = 0;
			this.last_amp = 0;
		}
	}, {
		key: 'update_amp',
		value: function update_amp(amp) {
			var delta = amp - this.last_amp;
			this.last_amp = amp;
			return delta;
		}
	}]);

	return Osc;
}();

var Envelope = exports.Envelope = function (_Osc) {
	_inherits(Envelope, _Osc);

	function Envelope() {
		_classCallCheck(this, Envelope);

		var _this = _possibleConstructorReturn(this, (Envelope.__proto__ || Object.getPrototypeOf(Envelope)).call(this));

		_this.envelope = 0;
		_this.env_delay = 0;
		return _this;
	}

	_createClass(Envelope, [{
		key: 'clock_envelope',
		value: function clock_envelope() {
			var period = this.regs[0] & 15;
			if (this.reg_written[3]) {
				this.reg_written[3] = false;
				this.env_delay = period;
				this.envelope = 15;
			} else if (--this.env_delay < 0) {
				this.env_delay = period;
				if (this.envelope | this.regs[0] & 0x20) {
					this.envelope = this.envelope - 1 & 15;
				}
			}
		}
	}, {
		key: 'volume',
		value: function volume() {
			return this.length_counter === 0 ? 0 : this.regs[0] & 0x10 ? this.regs[0] & 15 : this.envelope;
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.envelope = 0;
			this.env_delay = 0;
			Osc.prototype.reset.call(this);
		}
	}]);

	return Envelope;
}(Osc);

var Square = exports.Square = function (_Envelope) {
	_inherits(Square, _Envelope);

	function Square() {
		_classCallCheck(this, Square);

		var _this2 = _possibleConstructorReturn(this, (Square.__proto__ || Object.getPrototypeOf(Square)).call(this));

		_this2.phase = 0;
		_this2.sweep_delay = 0;
		_this2.synth = null;
		return _this2;
	}

	_createClass(Square, [{
		key: 'clock_sweep',
		value: function clock_sweep(negative_adjust) {
			var sweep = this.regs[1];

			if (--this.sweep_delay < 0) {
				this.reg_written[1] = true;

				var period = this.period();
				var shift = sweep & Square.shift_mask;
				if (shift && sweep & 0x80 && period >= 8) {
					var offset = period >> shift;

					if (sweep & Square.negate_flag) {
						offset = negative_adjust - offset;
					}

					if (period + offset < 0x800) {
						period += offset;
						// rewrite period
						this.regs[2] = period & 0xff;
						this.regs[3] = this.regs[3] & 0xF8 | period >> 8 & 7;
					}
				}
			}

			if (this.reg_written[1]) {
				this.reg_written[1] = false;
				this.sweep_delay = sweep >> 4 & 7;
			}
		}
	}, {
		key: 'run',
		value: function run(time, end_time) {
			if (!this.output) return;

			var volume = this.volume();
			var period = this.period();
			var offset = period >> (this.regs[1] & Square.shift_mask);
			if (this.regs[1] & Square.negate_flag) {
				offset = 0;
			}

			var timer_period = (period + 1) * 2;
			if (volume === 0 || period < 8 || period + offset >= 0x800) {
				if (this.last_amp) {
					this.synth.offset(time, -this.last_amp, this.output);
					this.last_amp = 0;
				}

				time += this.delay;
				if (time < end_time) {
					// maintain proper phase
					var count = Math.floor((end_time - time + timer_period - 1) / timer_period);
					this.phase = this.phase + count & Square.phase_range - 1;
					time += count * timer_period;
				}
			} else {
				// handle duty select
				var duty_select = this.regs[0] >> 6 & 3;
				var duty = 1 << duty_select; // 1, 2, 4, 2
				var amp = 0;
				if (duty_select === 3) {
					duty = 2; // negated 25%
					amp = volume;
				}
				if (this.phase < duty) {
					amp ^= volume;
				}

				var delta = this.update_amp(amp);
				if (delta) {
					this.synth.offset(time, delta, this.output);
				}

				time += this.delay;
				if (time < end_time) {
					delta = amp * 2 - volume;

					do {
						this.phase = this.phase + 1 & Square.phase_range - 1;
						if (this.phase === 0 || this.phase === duty) {
							delta = -delta;
							this.synth.offset_inline(time, delta, this.output);
						}
						time += timer_period;
					} while (time < end_time);

					this.last_amp = delta + volume >> 1;
				}
			}

			this.delay = time - end_time;
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.sweep_delay = 0;
			Envelope.prototype.reset.call(this);
		}
	}]);

	return Square;
}(Envelope);

Square.negate_flag = 0x08;
Square.shift_mask = 0x07;
Square.phase_range = 8;

var Triangle = exports.Triangle = function (_Osc2) {
	_inherits(Triangle, _Osc2);

	function Triangle() {
		_classCallCheck(this, Triangle);

		var _this3 = _possibleConstructorReturn(this, (Triangle.__proto__ || Object.getPrototypeOf(Triangle)).call(this));

		_this3.phase = _this3.phase_range;
		_this3.linear_counter = 0;
		_this3.synth = new _BlipSynth2.default(_BlipSynth2.default.blip_good_quality, 15);
		return _this3;
	}

	_createClass(Triangle, [{
		key: 'reset',
		value: function reset() {
			this.phase = Triangle.phase_range;
			this.linear_counter = 0;
			Osc.prototype.reset.call(this);
		}
	}, {
		key: 'run',
		value: function run(time, end_time) {
			if (!this.output) return;

			// to do: track phase when period < 3
			// to do: Output 7.5 on dac when period < 2? More accurate, but results in more clicks.

			var delta = this.update_amp(this.calc_amp());
			if (delta) {
				this.synth.offset(time, delta, this.output);
			}

			time += this.delay;
			var timer_period = this.period() + 1;
			if (this.length_counter === 0 || this.linear_counter === 0 || timer_period < 3) {
				time = end_time;
			} else if (time < end_time) {
				var volume = 1;
				if (this.phase > Triangle.phase_range) {
					this.phase -= Triangle.phase_range;
					volume = -volume;
				}

				do {
					if (--this.phase === 0) {
						this.phase = Triangle.phase_range;
						volume = -volume;
					} else {
						this.synth.offset_inline(time, volume, this.output);
					}

					time += timer_period;
				} while (time < end_time);

				if (volume < 0) {
					this.phase += Triangle.phase_range;
				}
				this.last_amp = this.calc_amp();
			}
			this.delay = time - end_time;
		}
	}, {
		key: 'clock_linear_counter',
		value: function clock_linear_counter() {
			if (this.reg_written[3]) {
				this.linear_counter = this.regs[0] & 0x7f;
			} else if (this.linear_counter) {
				this.linear_counter--;
			}

			if (!(this.regs[0] & 0x80)) {
				this.reg_written[3] = false;
			}
		}
	}, {
		key: 'calc_amp',
		value: function calc_amp() {
			var amp = Triangle.phase_range - this.phase;
			if (amp < 0) {
				amp = this.phase - (Triangle.phase_range + 1);
			}
			return amp;
		}
	}]);

	return Triangle;
}(Osc);

Triangle.phase_range = 16;


var noise_period_table = [0x004, 0x008, 0x010, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0CA, 0x0FE, 0x17C, 0x1FC, 0x2FA, 0x3F8, 0x7F2, 0xFE4];

var Noise = exports.Noise = function (_Envelope2) {
	_inherits(Noise, _Envelope2);

	function Noise() {
		_classCallCheck(this, Noise);

		var _this4 = _possibleConstructorReturn(this, (Noise.__proto__ || Object.getPrototypeOf(Noise)).call(this));

		_this4.noise = 0x4000;
		_this4.synth = new _BlipSynth2.default(_BlipSynth2.default.blip_med_quality, 15);
		return _this4;
	}

	_createClass(Noise, [{
		key: 'run',
		value: function run(time, end_time) {
			if (!this.output) return;

			var volume = this.volume();
			var amp = this.noise & 1 ? volume : 0;
			var delta = this.update_amp(amp);
			if (delta) {
				this.synth.offset(time, delta, this.output);
			}

			time += this.delay;
			if (time < end_time) {
				var mode_flag = 0x80;

				var period = noise_period_table[this.regs[2] & 15];
				if (!volume) {
					// round to next multiple of period
					time += Math.floor((end_time - time + period - 1) / period) * period;

					// approximate noise cycling while muted, by shuffling up noise register
					// to do: precise muted noise cycling?
					if (!(this.regs[2] & mode_flag)) {
						var feedback = this.noise << 13 ^ this.noise << 14;
						this.noise = feedback & 0x4000 | this.noise >> 1;
					}
				} else {
					// using resampled time avoids conversion in synth.offset()
					var rperiod = this.output.resampled_duration(period);
					var rtime = this.output.resampled_time(time);

					delta = amp * 2 - volume;
					var tap = this.regs[2] & mode_flag ? 8 : 13;

					do {
						var feedback2 = this.noise << tap ^ this.noise << 14;
						time += period;

						if (this.noise + 1 & 2) {
							// bits 0 and 1 of noise differ
							delta = -delta;
							this.synth.offset_resampled(rtime, delta, this.output);
						}

						rtime += rperiod;
						this.noise = feedback2 & 0x4000 | this.noise >> 1;
					} while (time < end_time);

					this.last_amp = delta + volume >> 1;
				}
			}

			this.delay = time - end_time;
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.noise = 0x4000;
			Envelope.prototype.reset.call(this);
		}
	}]);

	return Noise;
}(Envelope);

var dmc_period_table = [[0x1ac, 0x17c, 0x154, 0x140, 0x11e, 0x0fe, 0x0e2, 0x0d6, // NTSC
0x0be, 0x0a0, 0x08e, 0x080, 0x06a, 0x054, 0x048, 0x036], [0x18e, 0x161, 0x13c, 0x129, 0x10a, 0x0ec, 0x0d2, 0x0c7, // PAL (totally untested)
0x0b1, 0x095, 0x084, 0x077, 0x062, 0x04e, 0x043, 0x032 // to do: verify PAL periods
]];

var dac_table = [0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 40, 40, 40, 41, 41, 42, 42, 42, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57];

var loop_flag = 0x40;

var Dmc = exports.Dmc = function (_Osc3) {
	_inherits(Dmc, _Osc3);

	function Dmc(apu) {
		_classCallCheck(this, Dmc);

		var _this5 = _possibleConstructorReturn(this, (Dmc.__proto__ || Object.getPrototypeOf(Dmc)).call(this));

		_this5.apu = apu;
		_this5.address = 0;
		_this5.dac = 0;
		_this5.buf = 0;
		_this5.bits_remain = 1;
		_this5.bits = 0;
		_this5.buf_empty = true;
		_this5.silence = true;
		_this5.next_irq = no_irq;
		_this5.irq_flag = false;
		_this5.irq_enabled = false;
		_this5.periodValue = 0;
		_this5.pal_mode = 0;
		_this5.nonlinear = false;

		_this5.rom_reader = null;

		_this5.synth = new _BlipSynth2.default(_BlipSynth2.default.blip_med_quality, 127);
		//Blip_Synth<blip_med_quality,127> synth;
		return _this5;
	}

	_createClass(Dmc, [{
		key: 'run',
		value: function run(time, end_time) {
			if (!this.output) return;

			var delta = this.update_amp(this.dac);
			if (delta) {
				this.synth.offset(time, delta, this.output);
			}

			time += this.delay;
			if (time < end_time) {
				var bits_remain_copy = this.bits_remain;
				if (this.silence && this.buf_empty) {
					var count = Math.floor((end_time - time + this.periodValue - 1) / this.periodValue);
					bits_remain_copy = (bits_remain_copy - 1 + 8 - count % 8) % 8 + 1;
					time += count * this.periodValue;
				} else {
					var bits_copy = this.bits;
					var dac_copy = this.dac;
					do {
						if (!this.silence) {
							var step = (bits_copy & 1) * 4 - 2;
							bits_copy >>= 1;
							var tot_step = dac_copy + step >>> 0; // converts to unsigned, see http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it
							if (tot_step <= 0x7F) {
								dac_copy += step;
								this.synth.offset_inline(time, step, this.output);
							}
						}

						time += this.periodValue;

						if (--bits_remain_copy === 0) {
							bits_remain_copy = 8;
							if (this.buf_empty) {
								this.silence = true;
							} else {
								this.silence = false;
								bits_copy = this.buf;
								this.buf_empty = true;
								this.fill_buffer();
							}
						}
					} while (time < end_time);

					this.last_amp = dac_copy;
					this.dac = dac_copy;
					this.bits = bits_copy;
				}
				this.bits_remain = bits_remain_copy;
			}
			this.delay = time - end_time;
		}
	}, {
		key: 'reset',
		value: function reset() {

			this.address = 0;
			this.dac = 0;
			this.buf = 0;
			this.bits_remain = 1;
			this.bits = 0;
			this.buf_empty = true;
			this.silence = true;
			this.next_irq = no_irq;
			this.irq_flag = false;
			this.irq_enabled = false;
			Osc.prototype.reset.call(this);
			this.periodValue = 0x036;
		}
	}, {
		key: 'start',
		value: function start() {
			this.reload_sample();
			this.fill_buffer();
			this.recalc_irq();
		}
	}, {
		key: 'write_register',
		value: function write_register(addr, data) {
			if (addr === 0) {
				this.periodValue = dmc_period_table[this.pal_mode][data & 15];
				this.irq_enabled = (data & 0xc0) === 0x80; // enabled only if loop disabled
				this.irq_flag = this.irq_flag && this.irq_enabled;
				this.recalc_irq();
			} else if (addr === 1) {
				if (!this.nonlinear) {
					// adjust last_amp so that "pop" amplitude will be properly non-linear
					// with respect to change in dac
					var old_amp = dac_table[this.dac];
					this.dac = data & 0x7F;
					var diff = dac_table[this.dac] - old_amp;
					this.last_amp = this.dac - diff;
				}

				this.dac = data & 0x7F;
			}
		}
	}, {
		key: 'recalc_irq',
		value: function recalc_irq() {
			var irq = no_irq;
			if (this.irq_enabled && this.length_counter) {
				irq = this.apu.last_time + this.delay + ((this.length_counter - 1) * 8 + this.bits_remain - 1) * this.periodValue + 1;
			}
			if (irq !== this.next_irq) {
				this.next_irq = irq;
				this.apu.irq_changed();
			}
		}
	}, {
		key: 'fill_buffer',
		value: function fill_buffer() {
			if (this.buf_empty && this.length_counter) {
				//require( rom_reader ); // rom_reader must be set
				this.buf = this.rom_reader(0x8000 + this.address);
				this.address = this.address + 1 & 0x7FFF;
				this.buf_empty = false;
				if (--this.length_counter === 0) {
					if ((this.regs[0] & loop_flag) > 0) {
						this.reload_sample();
					} else {
						this.apu.osc_enables &= 0xEF;
						this.irq_flag = this.irq_enabled;
						this.next_irq = no_irq;
						this.apu.irq_changed();
					}
				}
			}
		}
	}, {
		key: 'reload_sample',
		value: function reload_sample() {
			this.address = 0x4000 + this.regs[2] * 0x40;
			this.length_counter = this.regs[3] * 0x10 + 1;
		}
	}]);

	return Dmc;
}(Osc);

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // CPU 6502


var _Trace = __webpack_require__(32);

var _fastInstructions = __webpack_require__(139);

var _fastInstructions2 = _interopRequireDefault(_fastInstructions);

var _traceInstructions = __webpack_require__(140);

var _cpuTraceString = __webpack_require__(138);

var _cpuTraceString2 = _interopRequireDefault(_cpuTraceString);

var _consts = __webpack_require__(5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var maximumTracesToStoreForLoopDetection = 32;

var Cpu6502 = function () {
	function Cpu6502(mainboard) {
		_classCallCheck(this, Cpu6502);

		this.mainboard = mainboard;
		this.mainboard.connect('reset', this.reset.bind(this));
		this.executeCallback = null;
		this.cmosVersion = false;
		this.isRunning = true;
		this._traceEnabled = false;
		this._previousTraceProgramCounters = new Uint16Array(maximumTracesToStoreForLoopDetection); // used to detect loops in cpu traces
		this._previousTraceProgramCountersIndex = 0;
		this._inTraceLoop = false;
		this._traceLoopCount = 0;

		//var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

		this._useSwitchStatement = false; // isFirefox;
		this._instructionSet = _fastInstructions2.default; // Default to 'fast' versions
		this.resetVariables();
	}

	_createClass(Cpu6502, [{
		key: 'breakPoint',
		value: function breakPoint(resume) {

			this.isRunning = resume;
		}
	}, {
		key: 'enableTrace',
		value: function enableTrace(enabled) {

			this._traceEnabled = enabled === undefined ? true : enabled;
			if (this._traceEnabled) {
				this._instructionSet = _traceInstructions.cpuInstructionsTrace; // use slow instructions
			} else {
				this._instructionSet = _fastInstructions2.default; // use fast instructions
			}
		}
	}, {
		key: 'resetVariables',
		value: function resetVariables() {
			this.programCounter = 0;
			this.subcycle = 0;

			this.waitOneInstructionAfterCli = false;
			this.resetPending = false;
			this.nmiPending = false;
			this.irqLineLow = 0;
			this.triggerNmiAfterNextInstruction = false;

			this._flagCarry = false;
			this._flagZero = false;
			this._flagInterrupt = false;
			this._flagDecimal = false;
			this._flagBreak = true;
			this._flagUnused = true;
			this._flagOverflow = false;
			this._flagSign = false;

			this.regS = 0;
			this.regX = 0;
			this.regY = 0;
			this.regA = 0;
			this.SAYHighByte = 0;
		}
	}, {
		key: 'incrementSubcycle',
		value: function incrementSubcycle() {
			this.subcycle++;
		}
	}, {
		key: 'getPC',
		value: function getPC() {
			return this.programCounter;
		}
	}, {
		key: 'setPC',
		value: function setPC(pc) {
			this.programCounter = pc;
		}
	}, {
		key: 'getZero',
		value: function getZero() {
			return this._flagZero;
		}
	}, {
		key: 'setZero',
		value: function setZero(zero) {
			this._flagZero = zero;
		}
	}, {
		key: 'getOverflow',
		value: function getOverflow() {
			return this._flagOverflow;
		}
	}, {
		key: 'setOverflow',
		value: function setOverflow(f) {
			this._flagOverflow = f;
		}
	}, {
		key: 'getInterrupt',
		value: function getInterrupt() {
			return this._flagInterrupt;
		}
	}, {
		key: 'setInterrupt',
		value: function setInterrupt(f) {
			this._flagInterrupt = f;
		}
	}, {
		key: 'getBreak',
		value: function getBreak() {
			return this._flagBreak;
		}
	}, {
		key: 'setBreak',
		value: function setBreak(f) {
			this._flagBreak = f;
		}
	}, {
		key: 'getDecimal',
		value: function getDecimal() {
			return this._flagDecimal;
		}
	}, {
		key: 'setDecimal',
		value: function setDecimal(f) {
			this._flagDecimal = f;
		}
	}, {
		key: 'getUnused',
		value: function getUnused() {
			return this._flagUnused;
		}
	}, {
		key: 'setUnused',
		value: function setUnused(f) {
			this._flagUnused = f;
		}
	}, {
		key: 'getCarry',
		value: function getCarry() {
			return this._flagCarry;
		}
	}, {
		key: 'setCarry',
		value: function setCarry(f) {
			this._flagCarry = f;
		}
	}, {
		key: 'getSign',
		value: function getSign() {
			return this._flagSign;
		}
	}, {
		key: 'setSign',
		value: function setSign(f) {
			this._flagSign = f;
		}
	}, {
		key: 'getRegA',
		value: function getRegA() {
			return this.regA;
		}
	}, {
		key: 'setRegA',
		value: function setRegA(f) {
			this.regA = f;
		}
	}, {
		key: 'getRegX',
		value: function getRegX() {
			return this.regX;
		}
	}, {
		key: 'setRegX',
		value: function setRegX(f) {
			this.regX = f;
		}
	}, {
		key: 'getRegY',
		value: function getRegY() {
			return this.regY;
		}
	}, {
		key: 'setRegY',
		value: function setRegY(f) {
			this.regY = f;
		}
	}, {
		key: 'setExecuteCallback',
		value: function setExecuteCallback(cb) {
			this.executeCallback = cb;
		}
	}, {
		key: 'getSubCycle',
		value: function getSubCycle() {
			return this.subcycle;
		}
	}, {
		key: 'handlePendingInterrupts',
		value: function handlePendingInterrupts() {

			// TODO: if an NMI interrupt is interrupted by a BRK, dont execute the BRK (6502 bug - fixed in the CMOS version)
			if (this.resetPending) {
				for (var i = 0; i < 3; ++i) {
					this.incrementStackReg();
				} // increment stack pointer but dont write to memory

				this.setBreak(false);
				this.setInterrupt(true);

				if (this.cmosVersion) this._flagDecimal = false;

				this.programCounter = this.mainboard.memory.read16NoZeroPageWrap(_consts.CPU_RESET_ADDRESS);
				//this.programCounter = 0xC000;
				this.resetPending = false;
				return 0;
			}

			if (this.nmiPending) {
				if (this.triggerNmiAfterNextInstruction) {
					this.triggerNmiAfterNextInstruction = false;
					return 0;
				}

				// NMI interrupt
				this.pushStack(this.programCounter >> 8 & 0xFF);
				this.incrementStackReg();
				this.pushStack(this.programCounter & 0xFF);
				this.incrementStackReg();

				this._flagBreak = false;

				this.pushStack(this.statusRegToByte());
				this.incrementStackReg();

				this._flagInterrupt = true;
				if (this.cmosVersion) this._flagDecimal = false;
				this.programCounter = this.mainboard.memory.read16NoZeroPageWrap(_consts.CPU_NMI_ADDRESS);
				this.nmiPending = false;
				return 7;
			}

			if (this.irqLineLow > 0 && !this.waitOneInstructionAfterCli && !this._flagInterrupt) {
				// IRQ interrupt
				this.pushStack(this.programCounter >> 8 & 0xFF);
				this.incrementStackReg();
				this.pushStack(this.programCounter & 0xFF);
				this.incrementStackReg();

				this._flagBreak = false;

				this.pushStack(this.statusRegToByte());
				this.incrementStackReg();

				this._flagInterrupt = true;
				if (this.cmosVersion) this._flagDecimal = false;
				this.programCounter = this.mainboard.memory.read16NoZeroPageWrap(_consts.CPU_IRQ_ADDRESS);
				return 7;
			}
			return 0;
		}
	}, {
		key: 'nonMaskableInterrupt',
		value: function nonMaskableInterrupt(ppuMasterTickCount) {
			(0, _Trace.writeLine)(_Trace.trace_cpu, 'NMI triggered');
			this.nmiPending = true;
			if (this.mainboard.synchroniser.isPpuTickOnLastCycleOfCpuInstruction(ppuMasterTickCount)) {
				// CPU is *always* either ahead or equal to the PPU master tick count.
				// Perform 1-instruction delay if NMI is triggered in the last cycle of an instruction
				this.triggerNmiAfterNextInstruction = true;
			}
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.resetVariables();
			this.resetPending = true;
		}
	}, {
		key: 'holdIrqLineLow',
		value: function holdIrqLineLow(low) {
			if (low) {
				this.irqLineLow++;
			} else {
				if (this.irqLineLow > 0) {
					this.irqLineLow--;
				}
			}
		}
	}, {
		key: 'statusRegToByte',
		value: function statusRegToByte() {
			var b = 0;
			b |= this._flagCarry ? 0x1 : 0;
			b |= this._flagZero ? 0x2 : 0;
			b |= this._flagInterrupt ? 0x4 : 0;
			b |= this._flagDecimal ? 0x8 : 0;
			b |= this._flagBreak ? 0x10 : 0;
			b |= this._flagUnused ? 0x20 : 0;
			b |= this._flagOverflow ? 0x40 : 0;
			b |= this._flagSign ? 0x80 : 0;
			return b;
		}
	}, {
		key: 'statusRegFromByte',
		value: function statusRegFromByte(b) {
			this._flagCarry = (b & 0x1) > 0;
			this._flagZero = (b & 0x2) > 0;
			this._flagInterrupt = (b & 0x4) > 0;
			this._flagDecimal = (b & 0x8) > 0;
			this._flagBreak = (b & 0x10) > 0;
			this._flagUnused = (b & 0x20) > 0;
			this._flagOverflow = (b & 0x40) > 0;
			this._flagSign = (b & 0x80) > 0;
		}
	}, {
		key: 'incrementStackReg',
		value: function incrementStackReg() {
			this.regS--;
			if (this.regS < 0) this.regS = 0xFF;
		}
	}, {
		key: 'decrementStackReg',
		value: function decrementStackReg() {
			this.regS++;
			if (this.regS > 0xFF) this.regS = 0;
		}
	}, {
		key: 'pushStack',
		value: function pushStack(value) {
			this.mainboard.memory.write8(0x100 + this.regS, value & 0xFF);
		}
	}, {
		key: 'popStack',
		value: function popStack(value) {
			return this.mainboard.memory.read8(0x100 + this.regS);
		}
	}, {
		key: 'read16FromMemNoWrap',
		value: function read16FromMemNoWrap(offsetAddress) {

			this.incrementSubcycle();
			var ret = this.mainboard.memory.read8(offsetAddress) & 0xFF;
			this.incrementSubcycle();
			var secondByte = this.mainboard.memory.read8(offsetAddress + 1 & 0xFFFF);
			ret |= (secondByte & 0xFF) << 8;
			return ret & 0xFFFF;
		}
	}, {
		key: 'read16FromMemWithWrap',
		value: function read16FromMemWithWrap(offsetAddress) {
			this.incrementSubcycle();
			var ret = this.mainboard.memory.read8(offsetAddress);
			var newoffset;
			if ((offsetAddress & 0xFF) === 0xFF) {
				newoffset = offsetAddress & 0xFF00;
			} else {
				newoffset = offsetAddress + 1;
			}
			this.incrementSubcycle();
			var secondByte = this.mainboard.memory.read8(newoffset & 0xFFFF);
			ret |= (secondByte & 0xFF) << 8;
			return ret & 0xFFFF;
		}
	}, {
		key: 'calculateRelativeDifference',
		value: function calculateRelativeDifference(pc, b) {
			var isSigned = (b & 0x80) > 0;
			if (isSigned) {
				var inverse = (b ^ 0xFF) + 1 & 0xFF;
				return pc - inverse;
			} else return pc + b;
		}
	}, {
		key: 'execute',
		value: function execute() {
			this.subcycle = 0;
			if (this.waitOneInstructionAfterCli) this.waitOneInstructionAfterCli = false;

			var opcode = this.mainboard.memory.read8(this.programCounter);
			var cyclesTaken = this._instructionSet[opcode](this, this.mainboard.memory);
			this.subcycle = 0;
			return cyclesTaken;
		}
	}, {
		key: '_hasProgramCounterBeenSeenBefore',
		value: function _hasProgramCounterBeenSeenBefore(pg) {

			for (var i = 0; i < this._previousTraceProgramCounters.length; ++i) {
				if (this._previousTraceProgramCounters[i] === pg) {
					return i;
				}
			}
			return -1;
		}
	}, {
		key: '_doTrace',
		value: function _doTrace() {
			var instructionData = _traceInstructions.cpuTrace;
			// check previous instructions for the same program counter
			var prevIndex = this._hasProgramCounterBeenSeenBefore(instructionData.programCounter);
			if (prevIndex >= 0) {
				// if it's the same loop as the one that's already detected, don't report.
				if (!this._inTraceLoop) {
					this._inTraceLoop = true;
					this._traceLoopCount = 0;
				}
				this._traceLoopCount++;
			} else {
				if (this._inTraceLoop) {
					this._inTraceLoop = false;
					(0, _Trace.writeLine)(_Trace.trace_cpuInstructions, "LOOP " + this._traceLoopCount + " TIMES");
					this._traceLoopCount = 0;
				}
			}

			if (!this._inTraceLoop) {
				this._previousTraceProgramCounters[this._previousTraceProgramCountersIndex] = instructionData.programCounter;
				this._previousTraceProgramCountersIndex = this._previousTraceProgramCountersIndex + 1 & 0x1F;
				(0, _Trace.writeLine)(_Trace.trace_cpuInstructions, _cpuTraceString2.default[instructionData.opcode](instructionData));
				//$.extend( true, {}, instructionData );
			}
		}
	}, {
		key: 'saveState',
		value: function saveState() {

			var data = {};
			data.programCounter = this.programCounter;
			data.subcycle = this.subcycle;
			data.waitOneInstructionAfterCli = this.waitOneInstructionAfterCli;
			data.resetPending = this.resetPending;
			data.nmiPending = this.nmiPending;
			data.irqLineLow = this.irqLineLow;
			data.triggerNmiAfterNextInstruction = this.triggerNmiAfterNextInstruction;

			data._flagCarry = this._flagCarry;
			data._flagZero = this._flagZero;
			data._flagInterrupt = this._flagInterrupt;
			data._flagDecimal = this._flagDecimal;
			data._flagBreak = this._flagBreak;
			data._flagUnused = this._flagUnused;
			data._flagOverflow = this._flagOverflow;
			data._flagSign = this._flagSign;

			data.regS = this.regS;
			data.regX = this.regX;
			data.regY = this.regY;
			data.regA = this.regA;
			data.SAYHighByte = this.SAYHighByte;
			return data;
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {

			this.programCounter = state.programCounter;
			this.subcycle = state.subcycle;
			this.waitOneInstructionAfterCli = state.waitOneInstructionAfterCli;
			this.resetPending = state.resetPending;
			this.nmiPending = state.nmiPending;
			this.irqLineLow = state.irqLineLow;
			this.triggerNmiAfterNextInstruction = state.triggerNmiAfterNextInstruction;

			this._flagCarry = state._flagCarry;
			this._flagZero = state._flagZero;
			this._flagInterrupt = state._flagInterrupt;
			this._flagDecimal = state._flagDecimal;
			this._flagBreak = state._flagBreak;
			this._flagUnused = state._flagUnused;
			this._flagOverflow = state._flagOverflow;
			this._flagSign = state._flagSign;

			this.regS = state.regS;
			this.regX = state.regX;
			this.regY = state.regY;
			this.regA = state.regA;
			this.SAYHighByte = state.SAYHighByte;
		}
	}]);

	return Cpu6502;
}();

exports.default = Cpu6502;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var formatCpuTraceString = [];
var formatStr;
formatCpuTraceString[0] = function (formatData) {
	// BRK NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BRK ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[1] = function (formatData) {
	// ORA INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[2] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[3] = function (formatData) {
	// ASO INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASO ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[4] = function (formatData) {
	// SKB ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[5] = function (formatData) {
	// ORA ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[6] = function (formatData) {
	// ASL ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[7] = function (formatData) {
	// ASO ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASO ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[8] = function (formatData) {
	// PHP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " PHP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[9] = function (formatData) {
	// ORA IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[10] = function (formatData) {
	// ASL ACCUMULATOR
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASL ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[11] = function (formatData) {
	// ANC IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ANC ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[12] = function (formatData) {
	// SKW ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKW ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[13] = function (formatData) {
	// ORA ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[14] = function (formatData) {
	// ASL ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[15] = function (formatData) {
	// ASO ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASO ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[16] = function (formatData) {
	// BPL RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BPL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[17] = function (formatData) {
	// ORA INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[18] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[19] = function (formatData) {
	// ASO INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASO ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[20] = function (formatData) {
	// SKB ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[21] = function (formatData) {
	// ORA ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[22] = function (formatData) {
	// ASL ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[23] = function (formatData) {
	// ASO ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASO ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[24] = function (formatData) {
	// CLC NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CLC ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[25] = function (formatData) {
	// ORA ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[26] = function (formatData) {
	// NOP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " NOP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[27] = function (formatData) {
	// ASO ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASO ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[28] = function (formatData) {
	// SKW ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKW ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[29] = function (formatData) {
	// ORA ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ORA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[30] = function (formatData) {
	// ASL ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[31] = function (formatData) {
	// ASO ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ASO ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[32] = function (formatData) {
	// JSR IMMEDIATE16
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " JSR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[33] = function (formatData) {
	// AND INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[34] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[35] = function (formatData) {
	// RLA INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RLA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[36] = function (formatData) {
	// BIT ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BIT ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[37] = function (formatData) {
	// AND ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[38] = function (formatData) {
	// ROL ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[39] = function (formatData) {
	// RLA ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RLA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[40] = function (formatData) {
	// PLP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " PLP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[41] = function (formatData) {
	// AND IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[42] = function (formatData) {
	// ROL ACCUMULATOR
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROL ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[43] = function (formatData) {
	// ANC IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ANC ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[44] = function (formatData) {
	// BIT ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BIT ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[45] = function (formatData) {
	// AND ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[46] = function (formatData) {
	// ROL ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[47] = function (formatData) {
	// RLA ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RLA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[48] = function (formatData) {
	// BMI RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BMI ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[49] = function (formatData) {
	// AND INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[50] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[51] = function (formatData) {
	// RLA INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RLA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[52] = function (formatData) {
	// SKB ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[53] = function (formatData) {
	// AND ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[54] = function (formatData) {
	// ROL ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[55] = function (formatData) {
	// RLA ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RLA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[56] = function (formatData) {
	// SEC NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SEC ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[57] = function (formatData) {
	// AND ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[58] = function (formatData) {
	// NOP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " NOP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[59] = function (formatData) {
	// RLA ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RLA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[60] = function (formatData) {
	// SKW ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKW ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[61] = function (formatData) {
	// AND ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AND ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[62] = function (formatData) {
	// ROL ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROL ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[63] = function (formatData) {
	// RLA ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RLA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[64] = function (formatData) {
	// RTI NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RTI ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[65] = function (formatData) {
	// EOR INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[66] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[67] = function (formatData) {
	// LSE INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSE ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[68] = function (formatData) {
	// SKB ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[69] = function (formatData) {
	// EOR ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[70] = function (formatData) {
	// LSR ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[71] = function (formatData) {
	// LSE ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSE ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[72] = function (formatData) {
	// PHA NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " PHA ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[73] = function (formatData) {
	// EOR IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[74] = function (formatData) {
	// LSR ACCUMULATOR
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSR ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[75] = function (formatData) {
	// ALR IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ALR ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[76] = function (formatData) {
	// JMP IMMEDIATE16
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " JMP ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[77] = function (formatData) {
	// EOR ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[78] = function (formatData) {
	// LSR ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[79] = function (formatData) {
	// LSE ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSE ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[80] = function (formatData) {
	// BVC RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BVC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[81] = function (formatData) {
	// EOR INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[82] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[83] = function (formatData) {
	// LSE INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSE ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[84] = function (formatData) {
	// SKB ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[85] = function (formatData) {
	// EOR ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[86] = function (formatData) {
	// LSR ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[87] = function (formatData) {
	// LSE ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSE ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[88] = function (formatData) {
	// CLI NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CLI ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[89] = function (formatData) {
	// EOR ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[90] = function (formatData) {
	// NOP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " NOP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[91] = function (formatData) {
	// LSE ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSE ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[92] = function (formatData) {
	// SKW ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKW ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[93] = function (formatData) {
	// EOR ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " EOR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[94] = function (formatData) {
	// LSR ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[95] = function (formatData) {
	// LSE ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LSE ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[96] = function (formatData) {
	// RTS NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RTS ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[97] = function (formatData) {
	// ADC INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[98] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[99] = function (formatData) {
	// RRA INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RRA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[100] = function (formatData) {
	// SKB ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[101] = function (formatData) {
	// ADC ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[102] = function (formatData) {
	// ROR ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[103] = function (formatData) {
	// RRA ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RRA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[104] = function (formatData) {
	// PLA NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " PLA ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[105] = function (formatData) {
	// ADC IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[106] = function (formatData) {
	// ROR ACCUMULATOR
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROR ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[107] = function (formatData) {
	// ARR IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ARR ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[108] = function (formatData) {
	// JMP INDIRECT
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " JMP ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ") = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[109] = function (formatData) {
	// ADC ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[110] = function (formatData) {
	// ROR ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[111] = function (formatData) {
	// RRA ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RRA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[112] = function (formatData) {
	// BVS RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BVS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[113] = function (formatData) {
	// ADC INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[114] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[115] = function (formatData) {
	// RRA INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RRA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[116] = function (formatData) {
	// SKB ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[117] = function (formatData) {
	// ADC ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[118] = function (formatData) {
	// ROR ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[119] = function (formatData) {
	// RRA ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RRA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[120] = function (formatData) {
	// SEI NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SEI ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[121] = function (formatData) {
	// ADC ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[122] = function (formatData) {
	// NOP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " NOP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[123] = function (formatData) {
	// RRA ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RRA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[124] = function (formatData) {
	// SKW ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKW ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[125] = function (formatData) {
	// ADC ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ADC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[126] = function (formatData) {
	// ROR ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " ROR ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[127] = function (formatData) {
	// RRA ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " RRA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[128] = function (formatData) {
	// SKB IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[129] = function (formatData) {
	// STA INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[130] = function (formatData) {
	// SKB IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[131] = function (formatData) {
	// AXS INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AXS ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[132] = function (formatData) {
	// STY ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[133] = function (formatData) {
	// STA ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[134] = function (formatData) {
	// STX ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[135] = function (formatData) {
	// AXS ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AXS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[136] = function (formatData) {
	// DEY NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DEY ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[137] = function (formatData) {
	// SKB IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[138] = function (formatData) {
	// TXA NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " TXA ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[139] = function (formatData) {
	// XAA IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " XAA ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[140] = function (formatData) {
	// STY ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[141] = function (formatData) {
	// STA ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[142] = function (formatData) {
	// STX ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[143] = function (formatData) {
	// AXS ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AXS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[144] = function (formatData) {
	// BCC RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BCC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[145] = function (formatData) {
	// STA INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[146] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[147] = function (formatData) {
	// AXA INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AXA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[148] = function (formatData) {
	// STY ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[149] = function (formatData) {
	// STA ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[150] = function (formatData) {
	// STX ZEROPAGEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[151] = function (formatData) {
	// AXS ZEROPAGEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AXS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[152] = function (formatData) {
	// TYA NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " TYA ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[153] = function (formatData) {
	// STA ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[154] = function (formatData) {
	// TXS NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " TXS ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[155] = function (formatData) {
	// TAS ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " TAS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[156] = function (formatData) {
	// SAY SAY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SAY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[157] = function (formatData) {
	// STA ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " STA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[158] = function (formatData) {
	// XAS ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " XAS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[159] = function (formatData) {
	// AXA ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " AXA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[160] = function (formatData) {
	// LDY IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDY ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[161] = function (formatData) {
	// LDA INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[162] = function (formatData) {
	// LDX IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDX ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[163] = function (formatData) {
	// LAX INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LAX ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[164] = function (formatData) {
	// LDY ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[165] = function (formatData) {
	// LDA ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[166] = function (formatData) {
	// LDX ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[167] = function (formatData) {
	// LAX ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LAX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[168] = function (formatData) {
	// TAY NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " TAY ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[169] = function (formatData) {
	// LDA IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[170] = function (formatData) {
	// TAX NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " TAX ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[171] = function (formatData) {
	// OAL IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " OAL ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[172] = function (formatData) {
	// LDY ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[173] = function (formatData) {
	// LDA ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[174] = function (formatData) {
	// LDX ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[175] = function (formatData) {
	// LAX ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LAX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[176] = function (formatData) {
	// BCS RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BCS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[177] = function (formatData) {
	// LDA INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[178] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[179] = function (formatData) {
	// LAX INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LAX ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[180] = function (formatData) {
	// LDY ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[181] = function (formatData) {
	// LDA ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[182] = function (formatData) {
	// LDX ZEROPAGEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[183] = function (formatData) {
	// LAX ZEROPAGEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LAX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[184] = function (formatData) {
	// CLV NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CLV ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[185] = function (formatData) {
	// LDA ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[186] = function (formatData) {
	// TSX NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " TSX ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[187] = function (formatData) {
	// LAS ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LAS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[188] = function (formatData) {
	// LDY ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[189] = function (formatData) {
	// LDA ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDA ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[190] = function (formatData) {
	// LDX ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LDX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[191] = function (formatData) {
	// LAX ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " LAX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[192] = function (formatData) {
	// CPY IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CPY ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[193] = function (formatData) {
	// CMP INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[194] = function (formatData) {
	// SKB IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[195] = function (formatData) {
	// DCM INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DCM ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[196] = function (formatData) {
	// CPY ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CPY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[197] = function (formatData) {
	// CMP ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[198] = function (formatData) {
	// DEC ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DEC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[199] = function (formatData) {
	// DCM ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DCM ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[200] = function (formatData) {
	// INY NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INY ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[201] = function (formatData) {
	// CMP IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[202] = function (formatData) {
	// DEX NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DEX ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[203] = function (formatData) {
	// SAX IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SAX ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[204] = function (formatData) {
	// CPY ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CPY ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[205] = function (formatData) {
	// CMP ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[206] = function (formatData) {
	// DEC ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DEC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[207] = function (formatData) {
	// DCM ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DCM ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[208] = function (formatData) {
	// BNE RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BNE ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[209] = function (formatData) {
	// CMP INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[210] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[211] = function (formatData) {
	// DCM INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DCM ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[212] = function (formatData) {
	// SKB ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[213] = function (formatData) {
	// CMP ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[214] = function (formatData) {
	// DEC ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DEC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[215] = function (formatData) {
	// DCM ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DCM ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[216] = function (formatData) {
	// CLD NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CLD ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[217] = function (formatData) {
	// CMP ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[218] = function (formatData) {
	// NOP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " NOP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[219] = function (formatData) {
	// DCM ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DCM ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[220] = function (formatData) {
	// SKW ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKW ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[221] = function (formatData) {
	// CMP ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CMP ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[222] = function (formatData) {
	// DEC ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DEC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[223] = function (formatData) {
	// DCM ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " DCM ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[224] = function (formatData) {
	// CPX IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CPX ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[225] = function (formatData) {
	// SBC INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[226] = function (formatData) {
	// SKB IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[227] = function (formatData) {
	// INS INDIRECTX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INS ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X) = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[228] = function (formatData) {
	// CPX ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CPX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[229] = function (formatData) {
	// SBC ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[230] = function (formatData) {
	// INC ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[231] = function (formatData) {
	// INS ZEROPAGE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[232] = function (formatData) {
	// INX NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INX ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[233] = function (formatData) {
	// SBC IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[234] = function (formatData) {
	// NOP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " NOP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[235] = function (formatData) {
	// SBC IMMEDIATE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "#$" + ZERO_PAD_HEX(formatData.opcodeParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[236] = function (formatData) {
	// CPX ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " CPX ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[237] = function (formatData) {
	// SBC ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[238] = function (formatData) {
	// INC ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[239] = function (formatData) {
	// INS ABSOLUTE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + " = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[240] = function (formatData) {
	// BEQ RELATIVE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " BEQ ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.operationParam, 4);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[241] = function (formatData) {
	// SBC INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[242] = function (formatData) {
	// HLT NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " HLT ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[243] = function (formatData) {
	// INS INDIRECTY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INS ";
	formatStr += "($" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + "), Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[244] = function (formatData) {
	// SKB ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKB ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[245] = function (formatData) {
	// SBC ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[246] = function (formatData) {
	// INC ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[247] = function (formatData) {
	// INS ZEROPAGEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 2) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[248] = function (formatData) {
	// SED NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SED ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[249] = function (formatData) {
	// SBC ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[250] = function (formatData) {
	// NOP NONE
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " NOP ";
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[251] = function (formatData) {
	// INS ABSOLUTEY
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", Y = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[252] = function (formatData) {
	// SKW ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SKW ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[253] = function (formatData) {
	// SBC ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " SBC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[254] = function (formatData) {
	// INC ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INC ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};
formatCpuTraceString[255] = function (formatData) {
	// INS ABSOLUTEX
	formatStr = ZERO_PAD_HEX(formatData.programCounter, 4) + " INS ";
	formatStr += "$" + ZERO_PAD_HEX(formatData.opcodeParam, 4) + ", X = " + ZERO_PAD_HEX(formatData.operationParam, 2);
	while (formatStr.length < 47) {
		formatStr += " ";
	}
	formatStr += " A:" + ZERO_PAD_HEX(formatData.regs.a, 2);
	formatStr += " X:" + ZERO_PAD_HEX(formatData.regs.x, 2);
	formatStr += " Y:" + ZERO_PAD_HEX(formatData.regs.y, 2);
	formatStr += " P:" + ZERO_PAD_HEX(formatData.regs.p, 2);
	formatStr += " SP:" + ZERO_PAD_HEX(formatData.regs.sp, 2);
	return formatStr;
};

var traceFunctions = exports.traceFunctions = formatCpuTraceString;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _consts = __webpack_require__(5);

var instructions = [];

function BRK_NONE_0(cpu, memory) {
	var cyclesTaken = 7;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	// dummy read of opcode after brk
	memory.read8(cpu.getPC());
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, cpu.getPC() >> 8 & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, cpu.programCounter & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, (cpu.statusRegToByte() | 0x30) & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.setPC(cpu.read16FromMemNoWrap(_consts.CPU_IRQ_ADDRESS));
	cpu.setInterrupt(true);
	return cyclesTaken;
};
instructions[0] = BRK_NONE_0;
function ORA_INDIRECTX_1(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[1] = ORA_INDIRECTX_1;
function HLT_NONE_2(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_2 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[2] = HLT_NONE_2;
function ASO_INDIRECTX_3(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[3] = ASO_INDIRECTX_3;
function SKB_ZEROPAGE_4(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[4] = SKB_ZEROPAGE_4;
function ORA_ZEROPAGE_5(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[5] = ORA_ZEROPAGE_5;
function ASL_ZEROPAGE_6(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[6] = ASL_ZEROPAGE_6;
function ASO_ZEROPAGE_7(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[7] = ASO_ZEROPAGE_7;
function PHP_NONE_8(cpu, memory) {
	var cyclesTaken = 3;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, (cpu.statusRegToByte() | 0x10) & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	return cyclesTaken;
};
instructions[8] = PHP_NONE_8;
function ORA_IMMEDIATE_9(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA |= readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[9] = ORA_IMMEDIATE_9;
function ASL_ACCUMULATOR_10(cpu, memory) {
	var cyclesTaken = 2;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry((readInValue & 0x80) > 0);
	var result = (readInValue & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions[10] = ASL_ACCUMULATOR_10;
function ANC_IMMEDIATE_11(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.setCarry(cpu.getSign());
	return cyclesTaken;
};
instructions[11] = ANC_IMMEDIATE_11;
function SKW_ABSOLUTE_12(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[12] = SKW_ABSOLUTE_12;
function ORA_ABSOLUTE_13(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[13] = ORA_ABSOLUTE_13;
function ASL_ABSOLUTE_14(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[14] = ASL_ABSOLUTE_14;
function ASO_ABSOLUTE_15(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[15] = ASO_ABSOLUTE_15;
function BPL_RELATIVE_16(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = !cpu.getSign();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[16] = BPL_RELATIVE_16;
function ORA_INDIRECTY_17(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[17] = ORA_INDIRECTY_17;
function HLT_NONE_18(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_18 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[18] = HLT_NONE_18;
function ASO_INDIRECTY_19(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[19] = ASO_INDIRECTY_19;
function SKB_ZEROPAGEX_20(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[20] = SKB_ZEROPAGEX_20;
function ORA_ZEROPAGEX_21(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[21] = ORA_ZEROPAGEX_21;
function ASL_ZEROPAGEX_22(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[22] = ASL_ZEROPAGEX_22;
function ASO_ZEROPAGEX_23(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[23] = ASO_ZEROPAGEX_23;
function CLC_NONE_24(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry(false);
	return cyclesTaken;
};
instructions[24] = CLC_NONE_24;
function ORA_ABSOLUTEY_25(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[25] = ORA_ABSOLUTEY_25;
function NOP_NONE_26(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions[26] = NOP_NONE_26;
function ASO_ABSOLUTEY_27(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[27] = ASO_ABSOLUTEY_27;
function SKW_ABSOLUTEX_28(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[28] = SKW_ABSOLUTEX_28;
function ORA_ABSOLUTEX_29(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[29] = ORA_ABSOLUTEX_29;
function ASL_ABSOLUTEX_30(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[30] = ASL_ABSOLUTEX_30;
function ASO_ABSOLUTEX_31(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[31] = ASO_ABSOLUTEX_31;
function JSR_IMMEDIATE16_32(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.getPC() - 1;
	if (result < 0) result = 0xFFFF;
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, result >> 8 & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, result & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	cpu.setPC(readInValue & 0xFFFF);
	return cyclesTaken;
};
instructions[32] = JSR_IMMEDIATE16_32;
function AND_INDIRECTX_33(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[33] = AND_INDIRECTX_33;
function HLT_NONE_34(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_34 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[34] = HLT_NONE_34;
function RLA_INDIRECTX_35(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[35] = RLA_INDIRECTX_35;
function BIT_ZEROPAGE_36(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	if ((readInValue & 0xE007) === 0x2002) {
		cpu.mainboard.ppu.bitOperationHappening();
	} // BIT 2002 optimisation
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.setSign((operationModeData & 0xFF & 0x80) > 0);
	cpu.setZero((cpu.regA & (operationModeData & 0xFF) & 0xFF) === 0);
	cpu.setOverflow((operationModeData & 0x40) > 0); // Copy bit 6 to OVERFLOW flag.
	return cyclesTaken;
};
instructions[36] = BIT_ZEROPAGE_36;
function AND_ZEROPAGE_37(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[37] = AND_ZEROPAGE_37;
function ROL_ZEROPAGE_38(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[38] = ROL_ZEROPAGE_38;
function RLA_ZEROPAGE_39(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[39] = RLA_ZEROPAGE_39;
function PLP_NONE_40(cpu, memory) {
	var cyclesTaken = 4;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.waitOneInstructionAfterCli = cpu.getInterrupt() === true;
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	var temp = memory.read8(0x100 + cpu.regS);
	cpu.statusRegFromByte(temp);
	cpu.setBreak(true); // TODO: this was true before in original port, put it back for some reason?
	cpu.setUnused(true);
	if (cpu.waitOneInstructionAfterCli) cpu.waitOneInstructionAfterCli = cpu.getInterrupt() === false;
	return cyclesTaken;
};
instructions[40] = PLP_NONE_40;
function AND_IMMEDIATE_41(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[41] = AND_IMMEDIATE_41;
function ROL_ACCUMULATOR_42(cpu, memory) {
	var cyclesTaken = 2;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	var result = (readInValue & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions[42] = ROL_ACCUMULATOR_42;
function ANC_IMMEDIATE_43(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.setCarry(cpu.getSign());
	return cyclesTaken;
};
instructions[43] = ANC_IMMEDIATE_43;
function BIT_ABSOLUTE_44(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	if ((readInValue & 0xE007) === 0x2002) {
		cpu.mainboard.ppu.bitOperationHappening();
	} // BIT 2002 optimisation
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.setSign((operationModeData & 0xFF & 0x80) > 0);
	cpu.setZero((cpu.regA & (operationModeData & 0xFF) & 0xFF) === 0);
	cpu.setOverflow((operationModeData & 0x40) > 0); // Copy bit 6 to OVERFLOW flag.
	return cyclesTaken;
};
instructions[44] = BIT_ABSOLUTE_44;
function AND_ABSOLUTE_45(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[45] = AND_ABSOLUTE_45;
function ROL_ABSOLUTE_46(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[46] = ROL_ABSOLUTE_46;
function RLA_ABSOLUTE_47(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[47] = RLA_ABSOLUTE_47;
function BMI_RELATIVE_48(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = cpu.getSign();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[48] = BMI_RELATIVE_48;
function AND_INDIRECTY_49(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[49] = AND_INDIRECTY_49;
function HLT_NONE_50(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_50 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[50] = HLT_NONE_50;
function RLA_INDIRECTY_51(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[51] = RLA_INDIRECTY_51;
function SKB_ZEROPAGEX_52(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[52] = SKB_ZEROPAGEX_52;
function AND_ZEROPAGEX_53(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[53] = AND_ZEROPAGEX_53;
function ROL_ZEROPAGEX_54(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[54] = ROL_ZEROPAGEX_54;
function RLA_ZEROPAGEX_55(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[55] = RLA_ZEROPAGEX_55;
function SEC_NONE_56(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry(true);
	return cyclesTaken;
};
instructions[56] = SEC_NONE_56;
function AND_ABSOLUTEY_57(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[57] = AND_ABSOLUTEY_57;
function NOP_NONE_58(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions[58] = NOP_NONE_58;
function RLA_ABSOLUTEY_59(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[59] = RLA_ABSOLUTEY_59;
function SKW_ABSOLUTEX_60(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[60] = SKW_ABSOLUTEX_60;
function AND_ABSOLUTEX_61(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[61] = AND_ABSOLUTEX_61;
function ROL_ABSOLUTEX_62(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[62] = ROL_ABSOLUTEX_62;
function RLA_ABSOLUTEX_63(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[63] = RLA_ABSOLUTEX_63;
function RTI_NONE_64(cpu, memory) {
	var cyclesTaken = 6;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	// dummy read
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC());
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	var temp = memory.read8(0x100 + cpu.regS);
	cpu.statusRegFromByte(temp);
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	cpu.programCounter = memory.read8(0x100 + cpu.regS);
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	temp = memory.read8(0x100 + cpu.regS);
	cpu.programCounter |= (temp & 0xFF) << 8;
	cpu.setBreak(true);
	cpu.setUnused(true);
	return cyclesTaken;
};
instructions[64] = RTI_NONE_64;
function EOR_INDIRECTX_65(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[65] = EOR_INDIRECTX_65;
function HLT_NONE_66(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_66 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[66] = HLT_NONE_66;
function LSE_INDIRECTX_67(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[67] = LSE_INDIRECTX_67;
function SKB_ZEROPAGE_68(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[68] = SKB_ZEROPAGE_68;
function EOR_ZEROPAGE_69(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[69] = EOR_ZEROPAGE_69;
function LSR_ZEROPAGE_70(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[70] = LSR_ZEROPAGE_70;
function LSE_ZEROPAGE_71(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[71] = LSE_ZEROPAGE_71;
function PHA_NONE_72(cpu, memory) {
	var cyclesTaken = 3;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, cpu.regA & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	return cyclesTaken;
};
instructions[72] = PHA_NONE_72;
function EOR_IMMEDIATE_73(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA = (cpu.regA ^ readInValue & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[73] = EOR_IMMEDIATE_73;
function LSR_ACCUMULATOR_74(cpu, memory) {
	var cyclesTaken = 2;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry((readInValue & 0x01) > 0);
	var result = (readInValue & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions[74] = LSR_ACCUMULATOR_74;
function ALR_IMMEDIATE_75(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue;
	cpu.setCarry((cpu.regA & 0x01) > 0);
	cpu.regA = cpu.regA >> 1 & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[75] = ALR_IMMEDIATE_75;
function JMP_IMMEDIATE16_76(cpu, memory) {
	var cyclesTaken = 3;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.setPC(readInValue & 0xFFFF);
	return cyclesTaken;
};
instructions[76] = JMP_IMMEDIATE16_76;
function EOR_ABSOLUTE_77(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[77] = EOR_ABSOLUTE_77;
function LSR_ABSOLUTE_78(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[78] = LSR_ABSOLUTE_78;
function LSE_ABSOLUTE_79(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[79] = LSE_ABSOLUTE_79;
function BVC_RELATIVE_80(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = !cpu.getOverflow();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[80] = BVC_RELATIVE_80;
function EOR_INDIRECTY_81(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[81] = EOR_INDIRECTY_81;
function HLT_NONE_82(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_82 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[82] = HLT_NONE_82;
function LSE_INDIRECTY_83(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[83] = LSE_INDIRECTY_83;
function SKB_ZEROPAGEX_84(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[84] = SKB_ZEROPAGEX_84;
function EOR_ZEROPAGEX_85(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[85] = EOR_ZEROPAGEX_85;
function LSR_ZEROPAGEX_86(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[86] = LSR_ZEROPAGEX_86;
function LSE_ZEROPAGEX_87(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[87] = LSE_ZEROPAGEX_87;
function CLI_NONE_88(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.waitOneInstructionAfterCli = cpu.getInterrupt() === true;
	cpu.setInterrupt(false);
	return cyclesTaken;
};
instructions[88] = CLI_NONE_88;
function EOR_ABSOLUTEY_89(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[89] = EOR_ABSOLUTEY_89;
function NOP_NONE_90(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions[90] = NOP_NONE_90;
function LSE_ABSOLUTEY_91(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[91] = LSE_ABSOLUTEY_91;
function SKW_ABSOLUTEX_92(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[92] = SKW_ABSOLUTEX_92;
function EOR_ABSOLUTEX_93(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[93] = EOR_ABSOLUTEX_93;
function LSR_ABSOLUTEX_94(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[94] = LSR_ABSOLUTEX_94;
function LSE_ABSOLUTEX_95(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[95] = LSE_ABSOLUTEX_95;
function RTS_NONE_96(cpu, memory) {
	var cyclesTaken = 6;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	// dummy read
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC());
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	cpu.programCounter = memory.read8(0x100 + cpu.regS);
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	var temp = memory.read8(0x100 + cpu.regS);
	cpu.programCounter |= (temp & 0xFF) << 8;
	cpu.incrementSubcycle();
	cpu.programCounter = cpu.getPC() + 1 & 0xFFFF;
	return cyclesTaken;
};
instructions[96] = RTS_NONE_96;
function ADC_INDIRECTX_97(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[97] = ADC_INDIRECTX_97;
function HLT_NONE_98(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_98 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[98] = HLT_NONE_98;
function RRA_INDIRECTX_99(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[99] = RRA_INDIRECTX_99;
function SKB_ZEROPAGE_100(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[100] = SKB_ZEROPAGE_100;
function ADC_ZEROPAGE_101(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[101] = ADC_ZEROPAGE_101;
function ROR_ZEROPAGE_102(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[102] = ROR_ZEROPAGE_102;
function RRA_ZEROPAGE_103(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[103] = RRA_ZEROPAGE_103;
function PLA_NONE_104(cpu, memory) {
	var cyclesTaken = 4;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	cpu.regA = memory.read8(0x100 + cpu.regS);
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[104] = PLA_NONE_104;
function ADC_IMMEDIATE_105(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = (readInValue & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (readInValue ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[105] = ADC_IMMEDIATE_105;
function ROR_ACCUMULATOR_106(cpu, memory) {
	var cyclesTaken = 2;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	var result = (readInValue & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(readInValue & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions[106] = ROR_ACCUMULATOR_106;
function ARR_IMMEDIATE_107(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue & 0xFF;
	cpu.regA = cpu.regA >> 1 & 0xFF | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((cpu.regA & 0x1) > 0);
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.setOverflow(false);
	cpu.setCarry(false);
	switch (cpu.regA & 0x60) {
		case 0x20:
			cpu.setOverflow(true);break;
		case 0x40:
			cpu.setOverflow(true);
			cpu.setCarry(true);break;
		case 0x60:
			cpu.setCarry(true);break;
	}
	return cyclesTaken;
};
instructions[107] = ARR_IMMEDIATE_107;
function JMP_INDIRECT_108(cpu, memory) {
	var cyclesTaken = 5;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.setPC(readInValue & 0xFFFF);
	return cyclesTaken;
};
instructions[108] = JMP_INDIRECT_108;
function ADC_ABSOLUTE_109(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[109] = ADC_ABSOLUTE_109;
function ROR_ABSOLUTE_110(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[110] = ROR_ABSOLUTE_110;
function RRA_ABSOLUTE_111(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[111] = RRA_ABSOLUTE_111;
function BVS_RELATIVE_112(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = cpu.getOverflow();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[112] = BVS_RELATIVE_112;
function ADC_INDIRECTY_113(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[113] = ADC_INDIRECTY_113;
function HLT_NONE_114(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_114 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[114] = HLT_NONE_114;
function RRA_INDIRECTY_115(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[115] = RRA_INDIRECTY_115;
function SKB_ZEROPAGEX_116(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[116] = SKB_ZEROPAGEX_116;
function ADC_ZEROPAGEX_117(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[117] = ADC_ZEROPAGEX_117;
function ROR_ZEROPAGEX_118(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[118] = ROR_ZEROPAGEX_118;
function RRA_ZEROPAGEX_119(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[119] = RRA_ZEROPAGEX_119;
function SEI_NONE_120(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setInterrupt(true);
	return cyclesTaken;
};
instructions[120] = SEI_NONE_120;
function ADC_ABSOLUTEY_121(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[121] = ADC_ABSOLUTEY_121;
function NOP_NONE_122(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions[122] = NOP_NONE_122;
function RRA_ABSOLUTEY_123(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[123] = RRA_ABSOLUTEY_123;
function SKW_ABSOLUTEX_124(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[124] = SKW_ABSOLUTEX_124;
function ADC_ABSOLUTEX_125(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[125] = ADC_ABSOLUTEX_125;
function ROR_ABSOLUTEX_126(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[126] = ROR_ABSOLUTEX_126;
function RRA_ABSOLUTEX_127(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[127] = RRA_ABSOLUTEX_127;
function SKB_IMMEDIATE_128(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions[128] = SKB_IMMEDIATE_128;
function STA_INDIRECTX_129(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[129] = STA_INDIRECTX_129;
function SKB_IMMEDIATE_130(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions[130] = SKB_IMMEDIATE_130;
function AXS_INDIRECTX_131(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[131] = AXS_INDIRECTX_131;
function STY_ZEROPAGE_132(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regY;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[132] = STY_ZEROPAGE_132;
function STA_ZEROPAGE_133(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[133] = STA_ZEROPAGE_133;
function STX_ZEROPAGE_134(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[134] = STX_ZEROPAGE_134;
function AXS_ZEROPAGE_135(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[135] = AXS_ZEROPAGE_135;
function DEY_NONE_136(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regY--;
	if (cpu.regY < 0) cpu.regY = 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[136] = DEY_NONE_136;
function SKB_IMMEDIATE_137(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions[137] = SKB_IMMEDIATE_137;
function TXA_NONE_138(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regA = cpu.regX;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[138] = TXA_NONE_138;
function XAA_IMMEDIATE_139(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA = cpu.regX & readInValue;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[139] = XAA_IMMEDIATE_139;
function STY_ABSOLUTE_140(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regY;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[140] = STY_ABSOLUTE_140;
function STA_ABSOLUTE_141(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[141] = STA_ABSOLUTE_141;
function STX_ABSOLUTE_142(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[142] = STX_ABSOLUTE_142;
function AXS_ABSOLUTE_143(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[143] = AXS_ABSOLUTE_143;
function BCC_RELATIVE_144(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = !cpu.getCarry();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[144] = BCC_RELATIVE_144;
function STA_INDIRECTY_145(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[145] = STA_INDIRECTY_145;
function HLT_NONE_146(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_146 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[146] = HLT_NONE_146;
function AXA_INDIRECTY_147(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regX & cpu.regA & 0x7;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[147] = AXA_INDIRECTY_147;
function STY_ZEROPAGEX_148(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regY;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[148] = STY_ZEROPAGEX_148;
function STA_ZEROPAGEX_149(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[149] = STA_ZEROPAGEX_149;
function STX_ZEROPAGEY_150(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[150] = STX_ZEROPAGEY_150;
function AXS_ZEROPAGEY_151(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[151] = AXS_ZEROPAGEY_151;
function TYA_NONE_152(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regA = cpu.regY;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[152] = TYA_NONE_152;
function STA_ABSOLUTEY_153(cpu, memory) {
	var cyclesTaken = 5;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[153] = STA_ABSOLUTEY_153;
function TXS_NONE_154(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regS = cpu.regX;
	return cyclesTaken;
};
instructions[154] = TXS_NONE_154;
function TAS_ABSOLUTEY_155(cpu, memory) {
	var cyclesTaken = 5;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.regS = cpu.regX & cpu.regA;
	return cyclesTaken;
};
instructions[155] = TAS_ABSOLUTEY_155;
function SAY_SAY_156(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.SAYHighByte = memory.read8(cpu.getPC() + 2 & 0xFFFF);
	address |= cpu.SAYHighByte << 8;
	var readInValue = address + cpu.regX & 0xFFFF; // SAY writes to absolute X but needs the high byte of the address to operate on
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = cpu.regY & (cpu.SAYHighByte + 1 & 0xFF);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[156] = SAY_SAY_156;
function STA_ABSOLUTEX_157(cpu, memory) {
	var cyclesTaken = 5;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[157] = STA_ABSOLUTEX_157;
function XAS_ABSOLUTEY_158(cpu, memory) {
	var cyclesTaken = 5;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction XAS not implemented");
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions[158] = XAS_ABSOLUTEY_158;
function AXA_ABSOLUTEY_159(cpu, memory) {
	var cyclesTaken = 5;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = cpu.regX & cpu.regA & 0x7;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[159] = AXA_ABSOLUTEY_159;
function LDY_IMMEDIATE_160(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regY = readInValue & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[160] = LDY_IMMEDIATE_160;
function LDA_INDIRECTX_161(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[161] = LDA_INDIRECTX_161;
function LDX_IMMEDIATE_162(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regX = readInValue & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[162] = LDX_IMMEDIATE_162;
function LAX_INDIRECTX_163(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[163] = LAX_INDIRECTX_163;
function LDY_ZEROPAGE_164(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[164] = LDY_ZEROPAGE_164;
function LDA_ZEROPAGE_165(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[165] = LDA_ZEROPAGE_165;
function LDX_ZEROPAGE_166(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[166] = LDX_ZEROPAGE_166;
function LAX_ZEROPAGE_167(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[167] = LAX_ZEROPAGE_167;
function TAY_NONE_168(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regY = cpu.regA;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[168] = TAY_NONE_168;
function LDA_IMMEDIATE_169(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA = readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[169] = LDA_IMMEDIATE_169;
function TAX_NONE_170(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX = cpu.regA;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[170] = TAX_NONE_170;
function OAL_IMMEDIATE_171(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regX = cpu.regA = readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[171] = OAL_IMMEDIATE_171;
function LDY_ABSOLUTE_172(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[172] = LDY_ABSOLUTE_172;
function LDA_ABSOLUTE_173(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[173] = LDA_ABSOLUTE_173;
function LDX_ABSOLUTE_174(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[174] = LDX_ABSOLUTE_174;
function LAX_ABSOLUTE_175(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[175] = LAX_ABSOLUTE_175;
function BCS_RELATIVE_176(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = cpu.getCarry();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[176] = BCS_RELATIVE_176;
function LDA_INDIRECTY_177(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[177] = LDA_INDIRECTY_177;
function HLT_NONE_178(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_178 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[178] = HLT_NONE_178;
function LAX_INDIRECTY_179(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[179] = LAX_INDIRECTY_179;
function LDY_ZEROPAGEX_180(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[180] = LDY_ZEROPAGEX_180;
function LDA_ZEROPAGEX_181(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[181] = LDA_ZEROPAGEX_181;
function LDX_ZEROPAGEY_182(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[182] = LDX_ZEROPAGEY_182;
function LAX_ZEROPAGEY_183(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[183] = LAX_ZEROPAGEY_183;
function CLV_NONE_184(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setOverflow(false);
	return cyclesTaken;
};
instructions[184] = CLV_NONE_184;
function LDA_ABSOLUTEY_185(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[185] = LDA_ABSOLUTEY_185;
function TSX_NONE_186(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX = cpu.regS & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[186] = TSX_NONE_186;
function LAS_ABSOLUTEY_187(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var result = 0;
	console.log("illegal instruction LAS not implemented");
	return cyclesTaken;
};
instructions[187] = LAS_ABSOLUTEY_187;
function LDY_ABSOLUTEX_188(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[188] = LDY_ABSOLUTEX_188;
function LDA_ABSOLUTEX_189(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[189] = LDA_ABSOLUTEX_189;
function LDX_ABSOLUTEY_190(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[190] = LDX_ABSOLUTEY_190;
function LAX_ABSOLUTEY_191(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions[191] = LAX_ABSOLUTEY_191;
function CPY_IMMEDIATE_192(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regY - readInValue; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[192] = CPY_IMMEDIATE_192;
function CMP_INDIRECTX_193(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[193] = CMP_INDIRECTX_193;
function SKB_IMMEDIATE_194(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions[194] = SKB_IMMEDIATE_194;
function DCM_INDIRECTX_195(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[195] = DCM_INDIRECTX_195;
function CPY_ZEROPAGE_196(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regY - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[196] = CPY_ZEROPAGE_196;
function CMP_ZEROPAGE_197(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[197] = CMP_ZEROPAGE_197;
function DEC_ZEROPAGE_198(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[198] = DEC_ZEROPAGE_198;
function DCM_ZEROPAGE_199(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[199] = DCM_ZEROPAGE_199;
function INY_NONE_200(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regY++;
	if (cpu.regY > 0xFF) cpu.regY = 0;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions[200] = INY_NONE_200;
function CMP_IMMEDIATE_201(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regA - readInValue;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[201] = CMP_IMMEDIATE_201;
function DEX_NONE_202(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX--;
	if (cpu.regX < 0) cpu.regX = 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[202] = DEX_NONE_202;
function SAX_IMMEDIATE_203(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = (cpu.regA & cpu.regX) - readInValue;
	cpu.regX = temp & 0xFF;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[203] = SAX_IMMEDIATE_203;
function CPY_ABSOLUTE_204(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regY - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[204] = CPY_ABSOLUTE_204;
function CMP_ABSOLUTE_205(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[205] = CMP_ABSOLUTE_205;
function DEC_ABSOLUTE_206(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[206] = DEC_ABSOLUTE_206;
function DCM_ABSOLUTE_207(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[207] = DCM_ABSOLUTE_207;
function BNE_RELATIVE_208(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = !cpu.getZero();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[208] = BNE_RELATIVE_208;
function CMP_INDIRECTY_209(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[209] = CMP_INDIRECTY_209;
function HLT_NONE_210(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_210 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[210] = HLT_NONE_210;
function DCM_INDIRECTY_211(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[211] = DCM_INDIRECTY_211;
function SKB_ZEROPAGEX_212(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[212] = SKB_ZEROPAGEX_212;
function CMP_ZEROPAGEX_213(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[213] = CMP_ZEROPAGEX_213;
function DEC_ZEROPAGEX_214(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[214] = DEC_ZEROPAGEX_214;
function DCM_ZEROPAGEX_215(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[215] = DCM_ZEROPAGEX_215;
function CLD_NONE_216(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setDecimal(false);
	return cyclesTaken;
};
instructions[216] = CLD_NONE_216;
function CMP_ABSOLUTEY_217(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[217] = CMP_ABSOLUTEY_217;
function NOP_NONE_218(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions[218] = NOP_NONE_218;
function DCM_ABSOLUTEY_219(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[219] = DCM_ABSOLUTEY_219;
function SKW_ABSOLUTEX_220(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[220] = SKW_ABSOLUTEX_220;
function CMP_ABSOLUTEX_221(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[221] = CMP_ABSOLUTEX_221;
function DEC_ABSOLUTEX_222(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[222] = DEC_ABSOLUTEX_222;
function DCM_ABSOLUTEX_223(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[223] = DCM_ABSOLUTEX_223;
function CPX_IMMEDIATE_224(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regX - readInValue; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[224] = CPX_IMMEDIATE_224;
function SBC_INDIRECTX_225(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[225] = SBC_INDIRECTX_225;
function SKB_IMMEDIATE_226(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions[226] = SKB_IMMEDIATE_226;
function INS_INDIRECTX_227(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[227] = INS_INDIRECTX_227;
function CPX_ZEROPAGE_228(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regX - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[228] = CPX_ZEROPAGE_228;
function SBC_ZEROPAGE_229(cpu, memory) {
	var cyclesTaken = 3;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[229] = SBC_ZEROPAGE_229;
function INC_ZEROPAGE_230(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[230] = INC_ZEROPAGE_230;
function INS_ZEROPAGE_231(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[231] = INS_ZEROPAGE_231;
function INX_NONE_232(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX++;
	if (cpu.regX > 0xFF) cpu.regX = 0;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions[232] = INX_NONE_232;
function SBC_IMMEDIATE_233(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regA - readInValue - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ readInValue) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[233] = SBC_IMMEDIATE_233;
function NOP_NONE_234(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions[234] = NOP_NONE_234;
function SBC_IMMEDIATE_235(cpu, memory) {
	var cyclesTaken = 2;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regA - readInValue - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ readInValue) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[235] = SBC_IMMEDIATE_235;
function CPX_ABSOLUTE_236(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regX - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions[236] = CPX_ABSOLUTE_236;
function SBC_ABSOLUTE_237(cpu, memory) {
	var cyclesTaken = 4;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[237] = SBC_ABSOLUTE_237;
function INC_ABSOLUTE_238(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[238] = INC_ABSOLUTE_238;
function INS_ABSOLUTE_239(cpu, memory) {
	var cyclesTaken = 6;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[239] = INS_ABSOLUTE_239;
function BEQ_RELATIVE_240(cpu, memory) {
	var cyclesTaken = 2;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	var branchTaken = cpu.getZero();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions[240] = BEQ_RELATIVE_240;
function SBC_INDIRECTY_241(cpu, memory) {
	var cyclesTaken = 5;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[241] = SBC_INDIRECTY_241;
function HLT_NONE_242(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("HLT_NONE_242 illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions[242] = HLT_NONE_242;
function INS_INDIRECTY_243(cpu, memory) {
	var cyclesTaken = 8;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[243] = INS_INDIRECTY_243;
function SKB_ZEROPAGEX_244(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[244] = SKB_ZEROPAGEX_244;
function SBC_ZEROPAGEX_245(cpu, memory) {
	var cyclesTaken = 4;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[245] = SBC_ZEROPAGEX_245;
function INC_ZEROPAGEX_246(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[246] = INC_ZEROPAGEX_246;
function INS_ZEROPAGEX_247(cpu, memory) {
	var cyclesTaken = 6;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[247] = INS_ZEROPAGEX_247;
function SED_NONE_248(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setDecimal(true);
	return cyclesTaken;
};
instructions[248] = SED_NONE_248;
function SBC_ABSOLUTEY_249(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[249] = SBC_ABSOLUTEY_249;
function NOP_NONE_250(cpu, memory) {
	var cyclesTaken = 2;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions[250] = NOP_NONE_250;
function INS_ABSOLUTEY_251(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[251] = INS_ABSOLUTEY_251;
function SKW_ABSOLUTEX_252(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	return cyclesTaken;
};
instructions[252] = SKW_ABSOLUTEX_252;
function SBC_ABSOLUTEX_253(cpu, memory) {
	var cyclesTaken = 4;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions[253] = SBC_ABSOLUTEX_253;
function INC_ABSOLUTEX_254(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[254] = INC_ABSOLUTEX_254;
function INS_ABSOLUTEX_255(cpu, memory) {
	var cyclesTaken = 7;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions[255] = INS_ABSOLUTEX_255;

exports.default = instructions;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var instructions_TRACE = [];
var formatData = { programCounter: 0, opcode: 0, opcodeParam: 0, operationParam: 0, regs: {} };

function BRK_NONE_0_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 0;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	// dummy read of opcode after brk
	memory.read8(cpu.getPC());
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, cpu.getPC() >> 8 & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, cpu.programCounter & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, (cpu.statusRegToByte() | 0x30) & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.setPC(cpu.read16FromMemNoWrap(CPU_IRQ_ADDRESS));
	cpu.setInterrupt(true);
	return cyclesTaken;
};
instructions_TRACE[0] = BRK_NONE_0_TRACE;
function ORA_INDIRECTX_1_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 1;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[1] = ORA_INDIRECTX_1_TRACE;
function HLT_NONE_2_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 2;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[2] = HLT_NONE_2_TRACE;
function ASO_INDIRECTX_3_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 3;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[3] = ASO_INDIRECTX_3_TRACE;
function SKB_ZEROPAGE_4_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 4;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[4] = SKB_ZEROPAGE_4_TRACE;
function ORA_ZEROPAGE_5_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 5;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[5] = ORA_ZEROPAGE_5_TRACE;
function ASL_ZEROPAGE_6_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 6;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[6] = ASL_ZEROPAGE_6_TRACE;
function ASO_ZEROPAGE_7_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 7;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[7] = ASO_ZEROPAGE_7_TRACE;
function PHP_NONE_8_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 8;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, (cpu.statusRegToByte() | 0x10) & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	return cyclesTaken;
};
instructions_TRACE[8] = PHP_NONE_8_TRACE;
function ORA_IMMEDIATE_9_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 9;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA |= readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[9] = ORA_IMMEDIATE_9_TRACE;
function ASL_ACCUMULATOR_10_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 10;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry((readInValue & 0x80) > 0);
	var result = (readInValue & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[10] = ASL_ACCUMULATOR_10_TRACE;
function ANC_IMMEDIATE_11_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 11;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.setCarry(cpu.getSign());
	return cyclesTaken;
};
instructions_TRACE[11] = ANC_IMMEDIATE_11_TRACE;
function SKW_ABSOLUTE_12_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 12;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[12] = SKW_ABSOLUTE_12_TRACE;
function ORA_ABSOLUTE_13_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 13;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[13] = ORA_ABSOLUTE_13_TRACE;
function ASL_ABSOLUTE_14_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 14;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[14] = ASL_ABSOLUTE_14_TRACE;
function ASO_ABSOLUTE_15_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 15;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[15] = ASO_ABSOLUTE_15_TRACE;
function BPL_RELATIVE_16_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 16;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = !cpu.getSign();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[16] = BPL_RELATIVE_16_TRACE;
function ORA_INDIRECTY_17_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 17;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[17] = ORA_INDIRECTY_17_TRACE;
function HLT_NONE_18_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 18;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[18] = HLT_NONE_18_TRACE;
function ASO_INDIRECTY_19_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 19;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[19] = ASO_INDIRECTY_19_TRACE;
function SKB_ZEROPAGEX_20_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 20;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[20] = SKB_ZEROPAGEX_20_TRACE;
function ORA_ZEROPAGEX_21_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 21;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[21] = ORA_ZEROPAGEX_21_TRACE;
function ASL_ZEROPAGEX_22_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 22;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[22] = ASL_ZEROPAGEX_22_TRACE;
function ASO_ZEROPAGEX_23_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 23;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[23] = ASO_ZEROPAGEX_23_TRACE;
function CLC_NONE_24_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 24;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry(false);
	return cyclesTaken;
};
instructions_TRACE[24] = CLC_NONE_24_TRACE;
function ORA_ABSOLUTEY_25_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 25;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[25] = ORA_ABSOLUTEY_25_TRACE;
function NOP_NONE_26_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 26;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions_TRACE[26] = NOP_NONE_26_TRACE;
function ASO_ABSOLUTEY_27_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 27;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[27] = ASO_ABSOLUTEY_27_TRACE;
function SKW_ABSOLUTEX_28_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 28;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[28] = SKW_ABSOLUTEX_28_TRACE;
function ORA_ABSOLUTEX_29_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 29;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA |= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[29] = ORA_ABSOLUTEX_29_TRACE;
function ASL_ABSOLUTEX_30_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 30;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = (operationModeData & 0xFF) << 1 & 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[30] = ASL_ABSOLUTEX_30_TRACE;
function ASO_ABSOLUTEX_31_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 31;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x80) > 0);
	var result = operationModeData << 1 & 0xFF;
	cpu.regA |= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[31] = ASO_ABSOLUTEX_31_TRACE;
function JSR_IMMEDIATE16_32_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 32;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.getPC() - 1;
	if (result < 0) result = 0xFFFF;
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, result >> 8 & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, result & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	cpu.incrementSubcycle();
	cpu.setPC(readInValue & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[32] = JSR_IMMEDIATE16_32_TRACE;
function AND_INDIRECTX_33_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 33;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[33] = AND_INDIRECTX_33_TRACE;
function HLT_NONE_34_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 34;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[34] = HLT_NONE_34_TRACE;
function RLA_INDIRECTX_35_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 35;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[35] = RLA_INDIRECTX_35_TRACE;
function BIT_ZEROPAGE_36_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 36;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	if ((readInValue & 0xE007) === 0x2002) {
		cpu.mainboard.ppu.bitOperationHappening();
	} // BIT 2002 optimisation
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.setSign((operationModeData & 0xFF & 0x80) > 0);
	cpu.setZero((cpu.regA & (operationModeData & 0xFF) & 0xFF) === 0);
	cpu.setOverflow((operationModeData & 0x40) > 0); // Copy bit 6 to OVERFLOW flag.
	return cyclesTaken;
};
instructions_TRACE[36] = BIT_ZEROPAGE_36_TRACE;
function AND_ZEROPAGE_37_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 37;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[37] = AND_ZEROPAGE_37_TRACE;
function ROL_ZEROPAGE_38_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 38;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[38] = ROL_ZEROPAGE_38_TRACE;
function RLA_ZEROPAGE_39_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 39;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[39] = RLA_ZEROPAGE_39_TRACE;
function PLP_NONE_40_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 40;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.waitOneInstructionAfterCli = cpu.getInterrupt() === true;
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	var temp = memory.read8(0x100 + cpu.regS);
	cpu.statusRegFromByte(temp);
	cpu.setBreak(true); // TODO: this was true before in original port, put it back for some reason?
	cpu.setUnused(true);
	if (cpu.waitOneInstructionAfterCli) cpu.waitOneInstructionAfterCli = cpu.getInterrupt() === false;
	return cyclesTaken;
};
instructions_TRACE[40] = PLP_NONE_40_TRACE;
function AND_IMMEDIATE_41_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 41;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[41] = AND_IMMEDIATE_41_TRACE;
function ROL_ACCUMULATOR_42_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 42;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	var result = (readInValue & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[42] = ROL_ACCUMULATOR_42_TRACE;
function ANC_IMMEDIATE_43_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 43;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.setCarry(cpu.getSign());
	return cyclesTaken;
};
instructions_TRACE[43] = ANC_IMMEDIATE_43_TRACE;
function BIT_ABSOLUTE_44_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 44;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	if ((readInValue & 0xE007) === 0x2002) {
		cpu.mainboard.ppu.bitOperationHappening();
	} // BIT 2002 optimisation
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.setSign((operationModeData & 0xFF & 0x80) > 0);
	cpu.setZero((cpu.regA & (operationModeData & 0xFF) & 0xFF) === 0);
	cpu.setOverflow((operationModeData & 0x40) > 0); // Copy bit 6 to OVERFLOW flag.
	return cyclesTaken;
};
instructions_TRACE[44] = BIT_ABSOLUTE_44_TRACE;
function AND_ABSOLUTE_45_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 45;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[45] = AND_ABSOLUTE_45_TRACE;
function ROL_ABSOLUTE_46_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 46;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[46] = ROL_ABSOLUTE_46_TRACE;
function RLA_ABSOLUTE_47_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 47;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[47] = RLA_ABSOLUTE_47_TRACE;
function BMI_RELATIVE_48_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 48;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = cpu.getSign();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[48] = BMI_RELATIVE_48_TRACE;
function AND_INDIRECTY_49_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 49;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[49] = AND_INDIRECTY_49_TRACE;
function HLT_NONE_50_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 50;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[50] = HLT_NONE_50_TRACE;
function RLA_INDIRECTY_51_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 51;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[51] = RLA_INDIRECTY_51_TRACE;
function SKB_ZEROPAGEX_52_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 52;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[52] = SKB_ZEROPAGEX_52_TRACE;
function AND_ZEROPAGEX_53_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 53;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[53] = AND_ZEROPAGEX_53_TRACE;
function ROL_ZEROPAGEX_54_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 54;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[54] = ROL_ZEROPAGEX_54_TRACE;
function RLA_ZEROPAGEX_55_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 55;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[55] = RLA_ZEROPAGEX_55_TRACE;
function SEC_NONE_56_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 56;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry(true);
	return cyclesTaken;
};
instructions_TRACE[56] = SEC_NONE_56_TRACE;
function AND_ABSOLUTEY_57_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 57;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[57] = AND_ABSOLUTEY_57_TRACE;
function NOP_NONE_58_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 58;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions_TRACE[58] = NOP_NONE_58_TRACE;
function RLA_ABSOLUTEY_59_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 59;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[59] = RLA_ABSOLUTEY_59_TRACE;
function SKW_ABSOLUTEX_60_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 60;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[60] = SKW_ABSOLUTEX_60_TRACE;
function AND_ABSOLUTEX_61_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 61;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA &= operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[61] = AND_ABSOLUTEX_61_TRACE;
function ROL_ABSOLUTEX_62_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 62;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[62] = ROL_ABSOLUTEX_62_TRACE;
function RLA_ABSOLUTEX_63_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 63;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData << 1 | (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(result > 0xFF);
	result &= 0xff;
	cpu.regA &= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[63] = RLA_ABSOLUTEX_63_TRACE;
function RTI_NONE_64_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 64;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	// dummy read
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC());
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	var temp = memory.read8(0x100 + cpu.regS);
	cpu.statusRegFromByte(temp);
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	cpu.programCounter = memory.read8(0x100 + cpu.regS);
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	temp = memory.read8(0x100 + cpu.regS);
	cpu.programCounter |= (temp & 0xFF) << 8;
	cpu.setBreak(true);
	cpu.setUnused(true);
	return cyclesTaken;
};
instructions_TRACE[64] = RTI_NONE_64_TRACE;
function EOR_INDIRECTX_65_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 65;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[65] = EOR_INDIRECTX_65_TRACE;
function HLT_NONE_66_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 66;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[66] = HLT_NONE_66_TRACE;
function LSE_INDIRECTX_67_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 67;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[67] = LSE_INDIRECTX_67_TRACE;
function SKB_ZEROPAGE_68_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 68;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[68] = SKB_ZEROPAGE_68_TRACE;
function EOR_ZEROPAGE_69_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 69;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[69] = EOR_ZEROPAGE_69_TRACE;
function LSR_ZEROPAGE_70_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 70;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[70] = LSR_ZEROPAGE_70_TRACE;
function LSE_ZEROPAGE_71_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 71;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[71] = LSE_ZEROPAGE_71_TRACE;
function PHA_NONE_72_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 72;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.write8(0x100 + cpu.regS, cpu.regA & 0xFF);
	if (cpu.regS === 0) {
		cpu.regS = 0xFF;
	} else {
		cpu.regS--;
	}
	return cyclesTaken;
};
instructions_TRACE[72] = PHA_NONE_72_TRACE;
function EOR_IMMEDIATE_73_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 73;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA = (cpu.regA ^ readInValue & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[73] = EOR_IMMEDIATE_73_TRACE;
function LSR_ACCUMULATOR_74_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 74;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setCarry((readInValue & 0x01) > 0);
	var result = (readInValue & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[74] = LSR_ACCUMULATOR_74_TRACE;
function ALR_IMMEDIATE_75_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 75;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue;
	cpu.setCarry((cpu.regA & 0x01) > 0);
	cpu.regA = cpu.regA >> 1 & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[75] = ALR_IMMEDIATE_75_TRACE;
function JMP_IMMEDIATE16_76_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 76;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.setPC(readInValue & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[76] = JMP_IMMEDIATE16_76_TRACE;
function EOR_ABSOLUTE_77_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 77;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[77] = EOR_ABSOLUTE_77_TRACE;
function LSR_ABSOLUTE_78_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 78;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[78] = LSR_ABSOLUTE_78_TRACE;
function LSE_ABSOLUTE_79_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 79;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[79] = LSE_ABSOLUTE_79_TRACE;
function BVC_RELATIVE_80_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 80;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = !cpu.getOverflow();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[80] = BVC_RELATIVE_80_TRACE;
function EOR_INDIRECTY_81_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 81;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[81] = EOR_INDIRECTY_81_TRACE;
function HLT_NONE_82_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 82;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[82] = HLT_NONE_82_TRACE;
function LSE_INDIRECTY_83_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 83;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[83] = LSE_INDIRECTY_83_TRACE;
function SKB_ZEROPAGEX_84_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 84;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[84] = SKB_ZEROPAGEX_84_TRACE;
function EOR_ZEROPAGEX_85_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 85;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[85] = EOR_ZEROPAGEX_85_TRACE;
function LSR_ZEROPAGEX_86_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 86;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[86] = LSR_ZEROPAGEX_86_TRACE;
function LSE_ZEROPAGEX_87_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 87;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[87] = LSE_ZEROPAGEX_87_TRACE;
function CLI_NONE_88_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 88;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.waitOneInstructionAfterCli = cpu.getInterrupt() === true;
	cpu.setInterrupt(false);
	return cyclesTaken;
};
instructions_TRACE[88] = CLI_NONE_88_TRACE;
function EOR_ABSOLUTEY_89_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 89;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[89] = EOR_ABSOLUTEY_89_TRACE;
function NOP_NONE_90_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 90;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions_TRACE[90] = NOP_NONE_90_TRACE;
function LSE_ABSOLUTEY_91_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 91;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[91] = LSE_ABSOLUTEY_91_TRACE;
function SKW_ABSOLUTEX_92_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 92;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[92] = SKW_ABSOLUTEX_92_TRACE;
function EOR_ABSOLUTEX_93_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 93;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = (cpu.regA ^ operationModeData & 0xFF) & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[93] = EOR_ABSOLUTEX_93_TRACE;
function LSR_ABSOLUTEX_94_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 94;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = (operationModeData & 0xFF) >> 1;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[94] = LSR_ABSOLUTEX_94_TRACE;
function LSE_ABSOLUTEX_95_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 95;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	cpu.setCarry((operationModeData & 0x01) > 0);
	var result = operationModeData >> 1 & 0xFF;
	cpu.regA ^= result;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[95] = LSE_ABSOLUTEX_95_TRACE;
function RTS_NONE_96_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 96;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	// dummy read
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC());
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	cpu.programCounter = memory.read8(0x100 + cpu.regS);
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	var temp = memory.read8(0x100 + cpu.regS);
	cpu.programCounter |= (temp & 0xFF) << 8;
	cpu.incrementSubcycle();
	cpu.programCounter = cpu.getPC() + 1 & 0xFFFF;
	return cyclesTaken;
};
instructions_TRACE[96] = RTS_NONE_96_TRACE;
function ADC_INDIRECTX_97_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 97;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[97] = ADC_INDIRECTX_97_TRACE;
function HLT_NONE_98_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 98;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[98] = HLT_NONE_98_TRACE;
function RRA_INDIRECTX_99_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 99;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[99] = RRA_INDIRECTX_99_TRACE;
function SKB_ZEROPAGE_100_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 100;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[100] = SKB_ZEROPAGE_100_TRACE;
function ADC_ZEROPAGE_101_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 101;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[101] = ADC_ZEROPAGE_101_TRACE;
function ROR_ZEROPAGE_102_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 102;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[102] = ROR_ZEROPAGE_102_TRACE;
function RRA_ZEROPAGE_103_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 103;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[103] = RRA_ZEROPAGE_103_TRACE;
function PLA_NONE_104_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 104;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	memory.read8(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	if (cpu.regS === 0xFF) {
		cpu.regS = 0;
	} else {
		cpu.regS++;
	}
	cpu.incrementSubcycle();
	cpu.regA = memory.read8(0x100 + cpu.regS);
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[104] = PLA_NONE_104_TRACE;
function ADC_IMMEDIATE_105_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 105;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = (readInValue & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (readInValue ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[105] = ADC_IMMEDIATE_105_TRACE;
function ROR_ACCUMULATOR_106_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 106;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.regA;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	var result = (readInValue & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(readInValue & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.regA = result & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[106] = ROR_ACCUMULATOR_106_TRACE;
function ARR_IMMEDIATE_107_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 107;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA &= readInValue & 0xFF;
	cpu.regA = cpu.regA >> 1 & 0xFF | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((cpu.regA & 0x1) > 0);
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	cpu.setOverflow(false);
	cpu.setCarry(false);
	switch (cpu.regA & 0x60) {
		case 0x20:
			cpu.setOverflow(true);break;
		case 0x40:
			cpu.setOverflow(true);
			cpu.setCarry(true);break;
		case 0x60:
			cpu.setCarry(true);break;
	}
	return cyclesTaken;
};
instructions_TRACE[107] = ARR_IMMEDIATE_107_TRACE;
function JMP_INDIRECT_108_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 108;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.setPC(readInValue & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[108] = JMP_INDIRECT_108_TRACE;
function ADC_ABSOLUTE_109_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 109;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[109] = ADC_ABSOLUTE_109_TRACE;
function ROR_ABSOLUTE_110_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 110;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[110] = ROR_ABSOLUTE_110_TRACE;
function RRA_ABSOLUTE_111_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 111;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[111] = RRA_ABSOLUTE_111_TRACE;
function BVS_RELATIVE_112_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 112;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = cpu.getOverflow();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[112] = BVS_RELATIVE_112_TRACE;
function ADC_INDIRECTY_113_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 113;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[113] = ADC_INDIRECTY_113_TRACE;
function HLT_NONE_114_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 114;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[114] = HLT_NONE_114_TRACE;
function RRA_INDIRECTY_115_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 115;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[115] = RRA_INDIRECTY_115_TRACE;
function SKB_ZEROPAGEX_116_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 116;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[116] = SKB_ZEROPAGEX_116_TRACE;
function ADC_ZEROPAGEX_117_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 117;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[117] = ADC_ZEROPAGEX_117_TRACE;
function ROR_ZEROPAGEX_118_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 118;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[118] = ROR_ZEROPAGEX_118_TRACE;
function RRA_ZEROPAGEX_119_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 119;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[119] = RRA_ZEROPAGEX_119_TRACE;
function SEI_NONE_120_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 120;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setInterrupt(true);
	return cyclesTaken;
};
instructions_TRACE[120] = SEI_NONE_120_TRACE;
function ADC_ABSOLUTEY_121_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 121;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[121] = ADC_ABSOLUTEY_121_TRACE;
function NOP_NONE_122_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 122;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions_TRACE[122] = NOP_NONE_122_TRACE;
function RRA_ABSOLUTEY_123_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 123;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[123] = RRA_ABSOLUTEY_123_TRACE;
function SKW_ABSOLUTEX_124_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 124;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[124] = SKW_ABSOLUTEX_124_TRACE;
function ADC_ABSOLUTEX_125_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 125;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = (operationModeData & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (operationModeData ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[125] = ADC_ABSOLUTEX_125_TRACE;
function ROR_ABSOLUTEX_126_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 126;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = (operationModeData & 0xFF) >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry(operationModeData & 0x1);
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[126] = ROR_ABSOLUTEX_126_TRACE;
function RRA_ABSOLUTEX_127_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 127;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData >> 1 | (cpu.getCarry() ? 0x80 : 0);
	cpu.setCarry((operationModeData & 0x1) > 0);
	var temp = (result & 0xFF) + cpu.regA + (cpu.getCarry() ? 1 : 0);
	cpu.setCarry(temp > 0xFF);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ (result ^ 0xFF)) & 0x80);
	cpu.regA = temp & 0xFF;
	result &= 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[127] = RRA_ABSOLUTEX_127_TRACE;
function SKB_IMMEDIATE_128_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 128;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[128] = SKB_IMMEDIATE_128_TRACE;
function STA_INDIRECTX_129_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 129;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[129] = STA_INDIRECTX_129_TRACE;
function SKB_IMMEDIATE_130_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 130;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[130] = SKB_IMMEDIATE_130_TRACE;
function AXS_INDIRECTX_131_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 131;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[131] = AXS_INDIRECTX_131_TRACE;
function STY_ZEROPAGE_132_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 132;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regY;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[132] = STY_ZEROPAGE_132_TRACE;
function STA_ZEROPAGE_133_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 133;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[133] = STA_ZEROPAGE_133_TRACE;
function STX_ZEROPAGE_134_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 134;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[134] = STX_ZEROPAGE_134_TRACE;
function AXS_ZEROPAGE_135_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 135;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[135] = AXS_ZEROPAGE_135_TRACE;
function DEY_NONE_136_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 136;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regY--;
	if (cpu.regY < 0) cpu.regY = 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[136] = DEY_NONE_136_TRACE;
function SKB_IMMEDIATE_137_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 137;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[137] = SKB_IMMEDIATE_137_TRACE;
function TXA_NONE_138_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 138;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regA = cpu.regX;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[138] = TXA_NONE_138_TRACE;
function XAA_IMMEDIATE_139_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 139;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA = cpu.regX & readInValue;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[139] = XAA_IMMEDIATE_139_TRACE;
function STY_ABSOLUTE_140_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 140;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regY;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[140] = STY_ABSOLUTE_140_TRACE;
function STA_ABSOLUTE_141_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 141;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[141] = STA_ABSOLUTE_141_TRACE;
function STX_ABSOLUTE_142_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 142;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[142] = STX_ABSOLUTE_142_TRACE;
function AXS_ABSOLUTE_143_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 143;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[143] = AXS_ABSOLUTE_143_TRACE;
function BCC_RELATIVE_144_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 144;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = !cpu.getCarry();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[144] = BCC_RELATIVE_144_TRACE;
function STA_INDIRECTY_145_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 145;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[145] = STA_INDIRECTY_145_TRACE;
function HLT_NONE_146_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 146;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[146] = HLT_NONE_146_TRACE;
function AXA_INDIRECTY_147_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 147;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regX & cpu.regA & 0x7;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[147] = AXA_INDIRECTY_147_TRACE;
function STY_ZEROPAGEX_148_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 148;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regY;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[148] = STY_ZEROPAGEX_148_TRACE;
function STA_ZEROPAGEX_149_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 149;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[149] = STA_ZEROPAGEX_149_TRACE;
function STX_ZEROPAGEY_150_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 150;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[150] = STX_ZEROPAGEY_150_TRACE;
function AXS_ZEROPAGEY_151_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 151;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var result = cpu.regA & cpu.regX;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[151] = AXS_ZEROPAGEY_151_TRACE;
function TYA_NONE_152_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 152;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regA = cpu.regY;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[152] = TYA_NONE_152_TRACE;
function STA_ABSOLUTEY_153_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 153;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[153] = STA_ABSOLUTEY_153_TRACE;
function TXS_NONE_154_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 154;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regS = cpu.regX;
	return cyclesTaken;
};
instructions_TRACE[154] = TXS_NONE_154_TRACE;
function TAS_ABSOLUTEY_155_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 155;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.regS = cpu.regX & cpu.regA;
	return cyclesTaken;
};
instructions_TRACE[155] = TAS_ABSOLUTEY_155_TRACE;
function SAY_SAY_156_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 156;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.SAYHighByte = memory.read8(cpu.getPC() + 2 & 0xFFFF);
	address |= cpu.SAYHighByte << 8;
	var readInValue = address + cpu.regX & 0xFFFF; // SAY writes to absolute X but needs the high byte of the address to operate on
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = cpu.regY & (cpu.SAYHighByte + 1 & 0xFF);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[156] = SAY_SAY_156_TRACE;
function STA_ABSOLUTEX_157_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 157;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = cpu.regA;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[157] = STA_ABSOLUTEX_157_TRACE;
function XAS_ABSOLUTEY_158_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 158;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction XAS not implemented");
	cpu.incrementSubcycle();
	memory.write8(readInValue, result);
	return cyclesTaken;
};
instructions_TRACE[158] = XAS_ABSOLUTEY_158_TRACE;
function AXA_ABSOLUTEY_159_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 159;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = cpu.regX & cpu.regA & 0x7;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[159] = AXA_ABSOLUTEY_159_TRACE;
function LDY_IMMEDIATE_160_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 160;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regY = readInValue & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[160] = LDY_IMMEDIATE_160_TRACE;
function LDA_INDIRECTX_161_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 161;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[161] = LDA_INDIRECTX_161_TRACE;
function LDX_IMMEDIATE_162_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 162;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regX = readInValue & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[162] = LDX_IMMEDIATE_162_TRACE;
function LAX_INDIRECTX_163_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 163;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[163] = LAX_INDIRECTX_163_TRACE;
function LDY_ZEROPAGE_164_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 164;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[164] = LDY_ZEROPAGE_164_TRACE;
function LDA_ZEROPAGE_165_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 165;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[165] = LDA_ZEROPAGE_165_TRACE;
function LDX_ZEROPAGE_166_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 166;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[166] = LDX_ZEROPAGE_166_TRACE;
function LAX_ZEROPAGE_167_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 167;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[167] = LAX_ZEROPAGE_167_TRACE;
function TAY_NONE_168_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 168;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regY = cpu.regA;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[168] = TAY_NONE_168_TRACE;
function LDA_IMMEDIATE_169_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 169;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regA = readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[169] = LDA_IMMEDIATE_169_TRACE;
function TAX_NONE_170_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 170;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX = cpu.regA;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[170] = TAX_NONE_170_TRACE;
function OAL_IMMEDIATE_171_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 171;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.regX = cpu.regA = readInValue & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[171] = OAL_IMMEDIATE_171_TRACE;
function LDY_ABSOLUTE_172_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 172;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[172] = LDY_ABSOLUTE_172_TRACE;
function LDA_ABSOLUTE_173_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 173;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[173] = LDA_ABSOLUTE_173_TRACE;
function LDX_ABSOLUTE_174_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 174;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[174] = LDX_ABSOLUTE_174_TRACE;
function LAX_ABSOLUTE_175_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 175;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[175] = LAX_ABSOLUTE_175_TRACE;
function BCS_RELATIVE_176_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 176;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = cpu.getCarry();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[176] = BCS_RELATIVE_176_TRACE;
function LDA_INDIRECTY_177_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 177;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[177] = LDA_INDIRECTY_177_TRACE;
function HLT_NONE_178_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 178;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[178] = HLT_NONE_178_TRACE;
function LAX_INDIRECTY_179_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 179;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[179] = LAX_INDIRECTY_179_TRACE;
function LDY_ZEROPAGEX_180_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 180;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[180] = LDY_ZEROPAGEX_180_TRACE;
function LDA_ZEROPAGEX_181_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 181;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[181] = LDA_ZEROPAGEX_181_TRACE;
function LDX_ZEROPAGEY_182_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 182;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[182] = LDX_ZEROPAGEY_182_TRACE;
function LAX_ZEROPAGEY_183_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 183;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[183] = LAX_ZEROPAGEY_183_TRACE;
function CLV_NONE_184_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 184;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setOverflow(false);
	return cyclesTaken;
};
instructions_TRACE[184] = CLV_NONE_184_TRACE;
function LDA_ABSOLUTEY_185_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 185;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[185] = LDA_ABSOLUTEY_185_TRACE;
function TSX_NONE_186_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 186;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX = cpu.regS & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[186] = TSX_NONE_186_TRACE;
function LAS_ABSOLUTEY_187_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 187;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var result = 0;
	console.log("illegal instruction LAS not implemented");
	return cyclesTaken;
};
instructions_TRACE[187] = LAS_ABSOLUTEY_187_TRACE;
function LDY_ABSOLUTEX_188_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 188;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regY = operationModeData & 0xFF;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[188] = LDY_ABSOLUTEX_188_TRACE;
function LDA_ABSOLUTEX_189_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 189;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData & 0xFF;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[189] = LDA_ABSOLUTEX_189_TRACE;
function LDX_ABSOLUTEY_190_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 190;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regX = operationModeData & 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[190] = LDX_ABSOLUTEY_190_TRACE;
function LAX_ABSOLUTEY_191_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 191;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.regA = operationModeData;
	cpu.regX = operationModeData;
	cpu.setSign((cpu.regA & 0x80) > 0);
	cpu.setZero((cpu.regA & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[191] = LAX_ABSOLUTEY_191_TRACE;
function CPY_IMMEDIATE_192_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 192;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regY - readInValue; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[192] = CPY_IMMEDIATE_192_TRACE;
function CMP_INDIRECTX_193_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 193;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[193] = CMP_INDIRECTX_193_TRACE;
function SKB_IMMEDIATE_194_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 194;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[194] = SKB_IMMEDIATE_194_TRACE;
function DCM_INDIRECTX_195_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 195;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[195] = DCM_INDIRECTX_195_TRACE;
function CPY_ZEROPAGE_196_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 196;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regY - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[196] = CPY_ZEROPAGE_196_TRACE;
function CMP_ZEROPAGE_197_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 197;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[197] = CMP_ZEROPAGE_197_TRACE;
function DEC_ZEROPAGE_198_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 198;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[198] = DEC_ZEROPAGE_198_TRACE;
function DCM_ZEROPAGE_199_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 199;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[199] = DCM_ZEROPAGE_199_TRACE;
function INY_NONE_200_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 200;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regY++;
	if (cpu.regY > 0xFF) cpu.regY = 0;
	cpu.setSign((cpu.regY & 0x80) > 0);
	cpu.setZero((cpu.regY & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[200] = INY_NONE_200_TRACE;
function CMP_IMMEDIATE_201_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 201;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regA - readInValue;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[201] = CMP_IMMEDIATE_201_TRACE;
function DEX_NONE_202_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 202;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX--;
	if (cpu.regX < 0) cpu.regX = 0xFF;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[202] = DEX_NONE_202_TRACE;
function SAX_IMMEDIATE_203_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 203;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = (cpu.regA & cpu.regX) - readInValue;
	cpu.regX = temp & 0xFF;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[203] = SAX_IMMEDIATE_203_TRACE;
function CPY_ABSOLUTE_204_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 204;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regY - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[204] = CPY_ABSOLUTE_204_TRACE;
function CMP_ABSOLUTE_205_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 205;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[205] = CMP_ABSOLUTE_205_TRACE;
function DEC_ABSOLUTE_206_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 206;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[206] = DEC_ABSOLUTE_206_TRACE;
function DCM_ABSOLUTE_207_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 207;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[207] = DCM_ABSOLUTE_207_TRACE;
function BNE_RELATIVE_208_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 208;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = !cpu.getZero();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[208] = BNE_RELATIVE_208_TRACE;
function CMP_INDIRECTY_209_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 209;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[209] = CMP_INDIRECTY_209_TRACE;
function HLT_NONE_210_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 210;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[210] = HLT_NONE_210_TRACE;
function DCM_INDIRECTY_211_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 211;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[211] = DCM_INDIRECTY_211_TRACE;
function SKB_ZEROPAGEX_212_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 212;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[212] = SKB_ZEROPAGEX_212_TRACE;
function CMP_ZEROPAGEX_213_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 213;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[213] = CMP_ZEROPAGEX_213_TRACE;
function DEC_ZEROPAGEX_214_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 214;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[214] = DEC_ZEROPAGEX_214_TRACE;
function DCM_ZEROPAGEX_215_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 215;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[215] = DCM_ZEROPAGEX_215_TRACE;
function CLD_NONE_216_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 216;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setDecimal(false);
	return cyclesTaken;
};
instructions_TRACE[216] = CLD_NONE_216_TRACE;
function CMP_ABSOLUTEY_217_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 217;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[217] = CMP_ABSOLUTEY_217_TRACE;
function NOP_NONE_218_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 218;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions_TRACE[218] = NOP_NONE_218_TRACE;
function DCM_ABSOLUTEY_219_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 219;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[219] = DCM_ABSOLUTEY_219_TRACE;
function SKW_ABSOLUTEX_220_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 220;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[220] = SKW_ABSOLUTEX_220_TRACE;
function CMP_ABSOLUTEX_221_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 221;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[221] = CMP_ABSOLUTEX_221_TRACE;
function DEC_ABSOLUTEX_222_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 222;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[222] = DEC_ABSOLUTEX_222_TRACE;
function DCM_ABSOLUTEX_223_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 223;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData - 1;
	if (result < 0) result = 0xFF;
	var temp = cpu.regA - result;
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[223] = DCM_ABSOLUTEX_223_TRACE;
function CPX_IMMEDIATE_224_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 224;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regX - readInValue; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[224] = CPX_IMMEDIATE_224_TRACE;
function SBC_INDIRECTX_225_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 225;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[225] = SBC_INDIRECTX_225_TRACE;
function SKB_IMMEDIATE_226_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 226;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	return cyclesTaken;
};
instructions_TRACE[226] = SKB_IMMEDIATE_226_TRACE;
function INS_INDIRECTX_227_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 227;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	cpu.incrementSubcycle();
	address = address + cpu.regX & 0xFF;
	var readInValue = cpu.read16FromMemWithWrap(address);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[227] = INS_INDIRECTX_227_TRACE;
function CPX_ZEROPAGE_228_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 228;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regX - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[228] = CPX_ZEROPAGE_228_TRACE;
function SBC_ZEROPAGE_229_TRACE(cpu, memory) {
	var cyclesTaken = 3;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 229;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[229] = SBC_ZEROPAGE_229_TRACE;
function INC_ZEROPAGE_230_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 230;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[230] = INC_ZEROPAGE_230_TRACE;
function INS_ZEROPAGE_231_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 231;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[231] = INS_ZEROPAGE_231_TRACE;
function INX_NONE_232_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 232;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.regX++;
	if (cpu.regX > 0xFF) cpu.regX = 0;
	cpu.setSign((cpu.regX & 0x80) > 0);
	cpu.setZero((cpu.regX & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[232] = INX_NONE_232_TRACE;
function SBC_IMMEDIATE_233_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 233;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regA - readInValue - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ readInValue) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[233] = SBC_IMMEDIATE_233_TRACE;
function NOP_NONE_234_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 234;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions_TRACE[234] = NOP_NONE_234_TRACE;
function SBC_IMMEDIATE_235_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 235;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var readInValue = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	var temp = cpu.regA - readInValue - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ readInValue) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[235] = SBC_IMMEDIATE_235_TRACE;
function CPX_ABSOLUTE_236_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 236;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regX - operationModeData; // purposely not wrapped
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	return cyclesTaken;
};
instructions_TRACE[236] = CPX_ABSOLUTE_236_TRACE;
function SBC_ABSOLUTE_237_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 237;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[237] = SBC_ABSOLUTE_237_TRACE;
function INC_ABSOLUTE_238_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 238;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[238] = INC_ABSOLUTE_238_TRACE;
function INS_ABSOLUTE_239_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 239;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var readInValue = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = readInValue;
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[239] = INS_ABSOLUTE_239_TRACE;
function BEQ_RELATIVE_240_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 240;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	var readInValue = cpu.calculateRelativeDifference(cpu.getPC() | 0, address | 0);
	formatData.opcodeParam = address;
	formatData.operationParam = readInValue + 2 & 0xFFFF;
	var branchTaken = cpu.getZero();
	if (branchTaken) {
		cpu.incrementSubcycle();
		if ((cpu.getPC() + 2 & 0xff00) !== (readInValue + 2 & 0xff00)) {
			cyclesTaken += 1;
			cpu.incrementSubcycle();
		}
		cyclesTaken += 1;
		cpu.incrementSubcycle();
		cpu.setPC(readInValue + 2 & 0xFFFF);
	} else {
		cpu.incrementSubcycle();
		memory.read8(cpu.getPC() + 1 & 0xFFFF);
		cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	}
	return cyclesTaken;
};
instructions_TRACE[240] = BEQ_RELATIVE_240_TRACE;
function SBC_INDIRECTY_241_TRACE(cpu, memory) {
	var cyclesTaken = 5;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 241;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[241] = SBC_INDIRECTY_241_TRACE;
function HLT_NONE_242_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 242;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	var result = 0;
	console.log("illegal instruction HLT not implemented");
	return cyclesTaken;
};
instructions_TRACE[242] = HLT_NONE_242_TRACE;
function INS_INDIRECTY_243_TRACE(cpu, memory) {
	var cyclesTaken = 8;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 243;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	address = cpu.read16FromMemWithWrap(address);
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[243] = INS_INDIRECTY_243_TRACE;
function SKB_ZEROPAGEX_244_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 244;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[244] = SKB_ZEROPAGEX_244_TRACE;
function SBC_ZEROPAGEX_245_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 245;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[245] = SBC_ZEROPAGEX_245_TRACE;
function INC_ZEROPAGEX_246_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 246;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[246] = INC_ZEROPAGEX_246_TRACE;
function INS_ZEROPAGEX_247_TRACE(cpu, memory) {
	var cyclesTaken = 6;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 247;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.incrementSubcycle();
	var address = memory.read8(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 2 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[247] = INS_ZEROPAGEX_247_TRACE;
function SED_NONE_248_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 248;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	cpu.setDecimal(true);
	return cyclesTaken;
};
instructions_TRACE[248] = SED_NONE_248_TRACE;
function SBC_ABSOLUTEY_249_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 249;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	if ((address + cpu.regY & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[249] = SBC_ABSOLUTEY_249_TRACE;
function NOP_NONE_250_TRACE(cpu, memory) {
	var cyclesTaken = 2;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 250;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	cpu.setPC(cpu.getPC() + 1 & 0xFFFF);
	cpu.incrementSubcycle();
	return cyclesTaken;
};
instructions_TRACE[250] = NOP_NONE_250_TRACE;
function INS_ABSOLUTEY_251_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 251;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regY & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regY & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[251] = INS_ABSOLUTEY_251_TRACE;
function SKW_ABSOLUTEX_252_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 252;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	return cyclesTaken;
};
instructions_TRACE[252] = SKW_ABSOLUTEX_252_TRACE;
function SBC_ABSOLUTEX_253_TRACE(cpu, memory) {
	var cyclesTaken = 4;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 253;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	if ((address + cpu.regX & 0xFF00) !== (address & 0xFF00)) {
		// Only do dummy read if page boundary crossed
		cyclesTaken++;
		cpu.incrementSubcycle();
		memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	}
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	var temp = cpu.regA - operationModeData - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ operationModeData) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	return cyclesTaken;
};
instructions_TRACE[253] = SBC_ABSOLUTEX_253_TRACE;
function INC_ABSOLUTEX_254_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 254;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[254] = INC_ABSOLUTEX_254_TRACE;
function INS_ABSOLUTEX_255_TRACE(cpu, memory) {
	var cyclesTaken = 7;
	formatData.programCounter = cpu.getPC();
	formatData.opcode = 255;
	formatData.regs.a = cpu.regA;
	formatData.regs.x = cpu.regX;
	formatData.regs.y = cpu.regY;
	formatData.regs.p = cpu.statusRegToByte();
	formatData.regs.sp = cpu.regS;
	var address = cpu.read16FromMemNoWrap(cpu.getPC() + 1 & 0xFFFF);
	formatData.opcodeParam = address;
	var readInValue = address + cpu.regX & 0xFFFF;
	cpu.incrementSubcycle();
	memory.read8(address & 0xFF00 | address + cpu.regX & 0xFF);
	cpu.setPC(cpu.getPC() + 3 & 0xFFFF);
	cpu.incrementSubcycle();
	var operationModeData = memory.read8(readInValue);
	formatData.operationParam = operationModeData;
	cpu.incrementSubcycle();
	memory.write8(readInValue, operationModeData);
	var result = operationModeData + 1;
	if (result > 0xFF) result = 0;
	cpu.setSign((result & 0x80) > 0);
	cpu.setZero((result & 0xFF) === 0);
	var temp = cpu.regA - result - (cpu.getCarry() ? 0 : 1);
	cpu.setSign((temp & 0x80) > 0);
	cpu.setZero((temp & 0xFF) === 0);
	cpu.setOverflow((cpu.regA ^ temp) & 0x80 && (cpu.regA ^ result) & 0x80);
	cpu.setCarry(temp >= 0 && temp < 0x100);
	cpu.regA = temp & 0xFF;
	cpu.incrementSubcycle();
	memory.write8(readInValue, result & 0xFF);
	return cyclesTaken;
};
instructions_TRACE[255] = INS_ABSOLUTEX_255_TRACE;

var cpuInstructionsTrace = exports.cpuInstructionsTrace = instructions_TRACE;
var cpuTrace = exports.cpuTrace = formatData;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sha = __webpack_require__(214);

var _sha2 = _interopRequireDefault(_sha);

var _consts = __webpack_require__(5);

var _mapperFactory = __webpack_require__(157);

var _mapperFactory2 = _interopRequireDefault(_mapperFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cartridge = function () {
	function Cartridge(mainboard) {
		_classCallCheck(this, Cartridge);

		this.mainboard = mainboard;
		this.memoryMapper = null;
		this._sha1 = '';
		this._name = '';
		this._colourEncodingType = _consts.g_DefaultColourEncoding;
	}

	_createClass(Cartridge, [{
		key: 'getHighestFrequencyElement',
		value: function getHighestFrequencyElement(map) {
			var mostFrequent = null;
			var frequency = 0;
			for (var mapperId in map) {
				if (map.hasOwnProperty(mapperId)) {
					if (map[mapperId] > frequency) {
						frequency = map[mapperId];
						mostFrequent = mapperId;
					}
				}
			}
			return mostFrequent;
		}
	}, {
		key: '_determineColourEncodingType',
		value: function _determineColourEncodingType(filename) {
			var value = _consts.g_DefaultColourEncoding;

			if (filename.match(/[\[\(][E][\]\)]/i)) {
				value = 'PAL';
			} else if (filename.match(/[\[\(][JU][\]\)]/i)) {
				value = 'NTSC';
			}

			this._colourEncodingType = value;
		}
	}, {
		key: 'getName',
		value: function getName() {
			return this._name;
		}
	}, {
		key: 'getHash',
		value: function getHash() {
			return this._sha1;
		}
	}, {
		key: 'create32IntArray',
		value: function create32IntArray(array, length) {
			var a = new Int32Array(length);
			for (var i = 0; i < length; ++i) {
				a[i] = array[i] | 0;
			}
			return a;
		}
	}, {
		key: 'loadRom',
		value: function loadRom(_ref) {
			var _this = this;

			var name = _ref.name,
			    binaryString = _ref.binaryString,
			    fileSize = _ref.fileSize;

			return new Promise(function (resolve, reject) {
				_this._name = name;
				var stringIndex = 0;
				var correctHeader = [78, 69, 83, 26];

				for (var i = 0; i < correctHeader.length; ++i) {
					if (correctHeader[i] !== binaryString[stringIndex++]) {
						throw new Error('Invalid NES header for file!');
					}
				}

				var prgPageCount = binaryString[stringIndex++] || 1;
				var chrPageCount = binaryString[stringIndex++];
				var controlByte1 = binaryString[stringIndex++];
				var controlByte2 = binaryString[stringIndex++];

				var horizontalMirroring = (controlByte1 & 0x01) === 0;
				var sramEnabled = (controlByte1 & 0x02) > 0;
				var hasTrainer = (controlByte1 & 0x04) > 0;
				var fourScreenRamLayout = (controlByte1 & 0x08) > 0;

				var mirroringMethod = 0;
				if (fourScreenRamLayout) {
					mirroringMethod = PPU_MIRRORING_FOURSCREEN;
				} else if (!horizontalMirroring) {
					mirroringMethod = _consts.PPU_MIRRORING_VERTICAL;
				} else {
					mirroringMethod = _consts.PPU_MIRRORING_HORIZONTAL;
				}

				var mapperId = (controlByte1 & 0xF0) >> 4 | controlByte2 & 0xF0;

				stringIndex = 16;
				if (hasTrainer) stringIndex += 512;

				// calculate SHA1 on PRG and CHR data, look it up in the db, then load it
				_this._sha1 = (0, _sha2.default)(binaryString, stringIndex);
				_this.memoryMapper = (0, _mapperFactory2.default)(mapperId, _this.mainboard, mirroringMethod);

				// read in program code
				var prg8kChunkCount = prgPageCount * 2; // read in 8k chunks, prgPageCount is 16k chunks
				var prgSize = 0x2000 * prg8kChunkCount;
				_this.memoryMapper.setPrgData(_this.create32IntArray(binaryString.subarray(stringIndex, stringIndex + prgSize), prgSize), prg8kChunkCount);
				stringIndex += prgSize;

				// read in character maps
				var chr1kChunkCount = chrPageCount * 8; // 1kb per pattern table, chrPageCount is the 8kb count
				var chrSize = 0x400 * chr1kChunkCount;
				_this.memoryMapper.setChrData(_this.create32IntArray(binaryString.subarray(stringIndex, stringIndex + chrSize), chrSize), chr1kChunkCount);
				stringIndex += chrSize;

				// determine NTSC or PAL
				_this._determineColourEncodingType(name);
				(0, _consts.setColourEncodingType)(_this._colourEncodingType);
				var prgKb = prg8kChunkCount * 8;
				console.log('Cartridge \'' + name + '\' loaded. \n\nSHA1: \t\t' + _this._sha1 + ' \nFile Size: \t' + fileSize + ' KB \nMapper:\t\t' + mapperId + ' \nMirroring:\t' + (0, _consts.mirroringMethodToString)(mirroringMethod) + ' \nPRG:\t\t' + prgKb + 'kb \nCHR:\t\t' + chr1kChunkCount + 'kb \nEncoding:\t' + _this._colourEncodingType);

				resolve();
			});
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.memoryMapper.reset();
		}
	}]);

	return Cartridge;
}();

exports.default = Cartridge;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Event = __webpack_require__(52);

var _Memory = __webpack_require__(143);

var _Memory2 = _interopRequireDefault(_Memory);

var _PPU = __webpack_require__(147);

var _PPU2 = _interopRequireDefault(_PPU);

var _RenderBuffer = __webpack_require__(146);

var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);

var _APULegacy = __webpack_require__(132);

var _APULegacy2 = _interopRequireDefault(_APULegacy);

var _InputDeviceBus = __webpack_require__(149);

var _InputDeviceBus2 = _interopRequireDefault(_InputDeviceBus);

var _Synchroniser = __webpack_require__(148);

var _Synchroniser2 = _interopRequireDefault(_Synchroniser);

var _Cpu = __webpack_require__(137);

var _Cpu2 = _interopRequireDefault(_Cpu);

var _Trace = __webpack_require__(32);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Mainboard = function () {
  function Mainboard(renderSurface) {
    _classCallCheck(this, Mainboard);

    this.running = false;
    this.cart = null;
    this._eventBus = new _Event.EventBus();

    this.memory = new _Memory2.default(this);
    this.ppu = new _PPU2.default(this);
    this.apu = new _APULegacy2.default(this);
    this.inputdevicebus = new _InputDeviceBus2.default();
    this.cpu = new _Cpu2.default(this);

    this.renderBuffer = new _RenderBuffer2.default(this, renderSurface);

    this.synchroniser = new _Synchroniser2.default(this);
    this.synchroniser.connect('frameEnd', this._onFrameEnd.bind(this));
    this.synchroniser.addObject('ppu', this.ppu);
    this.synchroniser.addObject('apu', this.apu);

    this.ppu.hookSyncEvents(this.synchroniser);

    this.enableSound(true);
  }

  _createClass(Mainboard, [{
    key: 'connect',
    value: function connect(name, cb) {
      this._eventBus.connect(name, cb);
    }
  }, {
    key: 'enableSound',
    value: function enableSound(enable) {
      this.apu.enableSound(enable);
      this._eventBus.invoke('soundEnabled', this.apu.soundEnabled(), this.apu.soundSupported());
    }
  }, {
    key: 'setVolume',
    value: function setVolume(val) {
      this.apu.setVolume(val);
    }
  }, {
    key: 'setTraceOption',
    value: function setTraceOption(traceType, checked) {
      if (traceType === _Trace.trace_all || traceType === _Trace.trace_cpuInstructions) {
        this.cpu.enableTrace(checked); // cpu instructions require different code path, needs to be invoked seperately
      }
      (0, _Trace.enableType)(traceType, checked);
    }
  }, {
    key: '_onFrameEnd',
    value: function _onFrameEnd() {
      this.running = false;
      this._eventBus.invoke('frameEnd');
    }
  }, {
    key: 'doFrame',
    value: function doFrame() {
      if (this.cart) {
        this.running = true;
        while (this.running) {
          // keep going until a frame is rendered
          this.synchroniser.runCycle();
        }
      }
    }
  }, {
    key: 'loadCartridge',
    value: function loadCartridge(cart) {
      this.cart = cart;
      this.synchroniser.addObject('mapper', this.cart.memoryMapper);

      this.reset(true);
      this._eventBus.invoke('romLoaded', this.cart);
    }
  }, {
    key: 'powerButton',
    value: function powerButton(on) {
      var isOn = on && this.cart;
      if (isOn) {
        this.reset();
      } else {
        this.running = false;
        this.cart = null;
      }
      this._eventBus.invoke('power', isOn);
    }
  }, {
    key: 'reset',
    value: function reset(cold) {
      cold = cold === undefined ? true : cold;
      if (this.cart) this.cart.reset(cold);
      this._eventBus.invoke('reset', cold);
    }
  }, {
    key: 'saveState',
    value: function saveState() {
      var data = {};
      data.memory = this.memory.saveState();
      data.ppu = this.ppu.saveState();
      data.apu = this.apu.saveState();
      //  data.joypad1 = this.joypad1.saveState();
      data.cpu = this.cpu.saveState();
      data.synchroniser = this.synchroniser.saveState();
      data.renderBuffer = this.renderBuffer.saveState();
      if (this.cart && this.cart.memoryMapper) {
        data.memoryMapper = this.cart.memoryMapper.saveState();
      }
      return data;
    }
  }, {
    key: 'loadState',
    value: function loadState(data) {
      this.memory.loadState(data.memory);
      this.ppu.loadState(data.ppu);
      this.apu.loadState(data.apu);
      //  this.joypad1.loadState( data.joypad1 );
      this.cpu.loadState(data.cpu);
      this.renderBuffer.loadState(data.renderBuffer);
      this.synchroniser.loadState(data.synchroniser);
      if (this.cart && this.cart.memoryMapper) {
        this.cart.memoryMapper.loadState(data.memoryMapper);
      }
    }
  }]);

  return Mainboard;
}();

exports.default = Mainboard;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _serialisation = __webpack_require__(14);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Memory = function () {
	function Memory(mainboard) {
		_classCallCheck(this, Memory);

		this.mainboard = mainboard;
		this.mainboard.connect('reset', this.reset.bind(this));
		this.ramPage = new Int32Array(0x800);
		this.gppu = null;
		this.gmapper = null;
		this.ginput = null;
		this.gapu = null;
	}

	_createClass(Memory, [{
		key: 'reset',
		value: function reset(cold) {
			if (cold) {
				// these memory locations are set to various values on power-up
				for (var i = 0; i < this.ramPage.length; ++i) {
					this.ramPage[i] = 0xFF;
				}
				this.ramPage[0x0008] = 0xF7;
				this.ramPage[0x0009] = 0xEF;
				this.ramPage[0x000a] = 0xDF;
				this.ramPage[0x000f] = 0xBF;
			}
			this.gppu = this.mainboard.ppu;
			this.gmapper = this.mainboard.cart.memoryMapper;
			this.ginput = this.mainboard.inputdevicebus;
			this.gapu = this.mainboard.apu;
		}
	}, {
		key: 'read8',
		value: function read8(offset) {
			return this._properRead8(offset & 0xFFFF) & 0xFF;
		}
	}, {
		key: '_readRegister4000',
		value: function _readRegister4000(offset) {
			var offset4000 = offset & 0x1FE0;
			if (offset4000 === 0) {
				// testing top 11 bits - if it's zero it's between 4000 -> 4020
				if (offset === 0x4016 || offset === 0x4017) {
					//				return 0;
					return this.ginput.readFromRegister(offset);
				} else {
					return 0;
					//			return gapu.readFromRegister( offset ) | 0;
				}
			} else {
				return this.gmapper.read8EXRam(offset);
				//			return 0;
			}
			return 0;
		}
	}, {
		key: '_properRead8',
		value: function _properRead8(offset) {
			// Faster: Top 3 bits are equal to 0x2000 for inbetween 2000 -> 4000, equal to 0 for < 2000 and so on
			var topbits = offset & 0xE000;
			var bot3 = offset & 0x7;
			var rampageOffset = offset & 0x7FF;
			switch (topbits) {
				case 0:
					// address is within RAM boundaries, account for 4x mirroring
					return this.ramPage[rampageOffset];
				case 0x2000:
					// IS_INT_BETWEEN( offset, 0x2000, 0x4000 )
					return this.gppu.readFromRegister(bot3);
				case 0x4000:
					return this._readRegister4000(offset);
				case 0x6000:
					// IS_INT_BETWEEN( offset, 0x6000, 0x8000 )
					return this.gmapper.read8SRam(offset);
				default:
					// IS_INT_BETWEEN( offset, 0x8000, 0x10000 )
					return this.gmapper.read8PrgRom(offset);
			}
			return 0;
		}
	}, {
		key: 'read16NoZeroPageWrap',
		value: function read16NoZeroPageWrap(offset) {
			return this.read8(offset) | this.read8(offset + 1) << 8;
		}
	}, {
		key: 'write8',
		value: function write8(offset, data) {
			switch (offset & 0xE000) {
				case 0:
					// IS_INT_BETWEEN( offset, 0, 0x2000 ) address is within RAM boundaries, account for 4x mirroring
					this.ramPage[offset & 0x7FF] = data;
					break;
				case 0x2000:
					// IS_INT_BETWEEN( offset, 0x2000, 0x4000 )
					this.mainboard.ppu.writeToRegister(offset & 0x07, data);
					break;
				case 0x4000:
					{
						if ((offset & 0x1FE0) === 0) {
							// testing top 11 bits - if it's zero it's between 4000 -> 4020
							switch (offset) {
								case 0x4014:
									// sprite DMA access
									this.mainboard.ppu.writeToSpriteDMARegister(data);
									break;
								case 0x4016: // input
								case 0x4017:
									this.mainboard.inputdevicebus.writeToRegister(offset, data);
									break;
							}
							// APU (write input 4016 + 4017 to APU as well) <-- is that right??
							this.mainboard.apu.writeToRegister(offset, data);
						} else {
							// IS_INT_BETWEEN( offset, 0x4020, 0x6000 )
							this.mainboard.cart.memoryMapper.write8EXRam(offset, data);
						}
					}
					break;
				case 0x6000:
					// IS_INT_BETWEEN( offset, 0x6000, 0x8000 )
					this.mainboard.cart.memoryMapper.write8SRam(offset, data);
					break;
				default:
				case 0x8000:
					// IS_INT_BETWEEN( offset, 0x8000, 0x10000 )
					this.mainboard.cart.memoryMapper.write8PrgRom(offset, data);
					break;
			}
		}
	}, {
		key: 'saveState',
		value: function saveState() {
			return {
				ramPage: (0, _serialisation.uintArrayToString)(this.ramPage)
			};
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {
			this.ramPage = (0, _serialisation.stringToUintArray)(state.ramPage);
		}
	}]);

	return Memory;
}();

exports.default = Memory;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Trace = __webpack_require__(32);

var _consts = __webpack_require__(5);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// consts use by renderPartialScanline
var ScrollReloadTime = 304; // pre-render SL only
var XReloadTime = 257;
var SecondLastTileReloadTime = 324;
var LastTileReloadTime = 332;

var ticksPerTile = 8;
var ticksFirstTile = 3;
var ticksLastTile = ticksFirstTile + 31 * ticksPerTile;

var YIncrementTime = 251;
var YIncrementTimeRendering = (YIncrementTime + 17) * _consts.MASTER_CYCLES_PER_PPU;
var XReloadTimeRendering = (XReloadTime + 17) * _consts.MASTER_CYCLES_PER_PPU;

var backgroundRenderingStart = 0;
var backgroundRenderingEnd = 0;
var backgroundScrollReloadTime = 0;
var backgroundTileCount = 34;

var PPURenderBG = function () {
	function PPURenderBG(ppu) {
		_classCallCheck(this, PPURenderBG);

		this.ppu = ppu;
		this._spriteZeroHit = false;
		this._useMMC2Latch = false;
	}

	_createClass(PPURenderBG, [{
		key: 'reset',
		value: function reset() {
			backgroundRenderingStart = this.ppu.screenCoordinatesToTicks(ScrollReloadTime - 1, -1);
			backgroundRenderingEnd = this.ppu.screenCoordinatesToTicks(SecondLastTileReloadTime - 1, 239);
			backgroundScrollReloadTime = this.ppu.screenCoordinatesToTicks(ScrollReloadTime, -1);

			this._bgTableAddress = 0;
			this._spriteZeroHit = false;
			this._renderBuffer = this.ppu.mainboard.renderBuffer;
			this._useMMC2Latch = this.ppu.mainboard.cart.memoryMapper.MMC2Latch !== undefined;
		}
	}, {
		key: 'onControl1Change',
		value: function onControl1Change(control1) {
			this._bgTableAddress = (control1 & 0x10) > 0 ? 0x1000 : 0;
		}
	}, {
		key: 'onEndFrame',
		value: function onEndFrame() {
			this._spriteZeroHit = false;
		}
	}, {
		key: 'saveState',
		value: function saveState(data) {
			data._spriteZeroHit = this._spriteZeroHit;
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {
			this._spriteZeroHit = state._spriteZeroHit;
		}
	}, {
		key: '_renderTile',
		value: function _renderTile(ppuReadAddress, tilenum, posy, clippingEnabled) {
			var triggerTime = 0;
			var renderScanline = posy | 0; // ( tilenum <= 2 ? posy + 1 : posy );
			var startXRendering = clippingEnabled ? 8 : 0;
			var baseindex = (tilenum | 0) * 8;

			var htile = ppuReadAddress & 0x001F;
			var vtile = (ppuReadAddress & 0x03E0) >> 5;
			//var finey = ((this.ppu.ppuReadAddress & 0x7000) >> 12);

			var nameTableAddress = 0x2000 + (ppuReadAddress & 0x0FFF) & 0xFFFF;
			var tileNumber = this.ppu.readNameTable(nameTableAddress, 0);

			// (screen address) + (tilenumber * 16) + finey
			var tileAddress = this._bgTableAddress + tileNumber * 16 + ((ppuReadAddress & 0x7000) >> 12);
			var attributeByte = this.ppu.readNameTable(0x23C0 | ppuReadAddress & 0x0C00 | (vtile & 0x1C) << 1 | htile >> 2 & 0x7, 1);

			var mergeByte = 0;
			if ((htile & 0x2) === 0) {
				if ((vtile & 0x2) === 0) {
					mergeByte = (attributeByte & 0x3) << 2;
				} else {
					mergeByte = (attributeByte & 0x30) >> 2;
				}
			} else {
				if ((vtile & 0x2) === 0) {
					mergeByte = attributeByte & 0xC;
				} else {
					mergeByte = (attributeByte & 0xC0) >> 4;
				}
			}

			// pattern table reads
			var firstByte = this.ppu.read8(tileAddress, false, 2);
			var secondByte = this.ppu.read8(tileAddress + 8, false, 3);

			if (this._useMMC2Latch) {
				this.ppu.mainboard.cart.memoryMapper.MMC2Latch(tileAddress + 8);
			}

			// render tiles from right-most pixel first - allows us to shift the first & second pattern table byte to get the palette
			// index we want.

			var startPixel = baseindex - this.ppu.fineX;
			var endPixel = startPixel + 7;
			var realStartPixel = Math.max(startPixel, 0);
			var startPixelIndex = realStartPixel - startPixel;
			var paletteIndex = 0;
			var byteMask = 0x80 >> startPixelIndex;
			var x = realStartPixel;
			for (; x <= endPixel; ++x) {
				paletteIndex = (firstByte & byteMask) > 0 ? 0x1 : 0;
				paletteIndex |= (secondByte & byteMask) > 0 ? 0x2 : 0;

				byteMask >>= 1;

				if (x >= startXRendering && x < _consts.SCREEN_WIDTH) {
					if (paletteIndex > 0) {
						paletteIndex |= mergeByte;

						if ((paletteIndex & 0x3) === 0) paletteIndex = 0;

						if (this._renderBuffer.renderPixel(x, renderScanline, this.ppu.paletteTables[0][paletteIndex & 0xF] | 0)) {
							// Sprite zero hit - will happen in the future as this is the prefetch
							if (!this._spriteZeroHit) {
								triggerTime = this.ppu.screenCoordinatesToTicks(x, renderScanline);
								(0, _Trace.writeLine)(_Trace.trace_ppu, "[" + this.ppu.frameCounter + "] PPU sprite hit scheduled for @ " + x + "x" + renderScanline + " (" + triggerTime + ")");
								this._spriteZeroHit = true;
								this.ppu.mainboard.synchroniser.changeEventTime(this.ppu._spriteZeroEventId, triggerTime);
							}
						}
					}
				}
			}
		}
	}, {
		key: '_incrementY',
		value: function _incrementY(ppuReadAddress) {
			/*
   	Y increment
   	At dot 256 of each scanline, fine Y is incremented, overflowing to coarse Y, and finally adjusted to wrap among the nametables vertically.
   	Bits 12-14 are fine Y. Bits 5-9 are coarse Y. Bit 11 selects the vertical nametable.
   		if ((v & 0x7000) != 0x7000)        // if fine Y < 7
   			v += 0x1000                      // increment fine Y
   		else
   			v &= ~0x7000                     // fine Y = 0
   			int y = (v & 0x03E0) >> 5        // let y = coarse Y
   			if y == 29
   				y = 0                          // coarse Y = 0
   				v ^= 0x0800                    // switch vertical nametable
   			else if y == 31
   				y = 0                          // coarse Y = 0, nametable not switched
   			else
   				y += 1                         // increment coarse Y
   			v = (v & ~0x03E0) | (y << 5)     // put coarse Y back into v
   */
			// INCREMENT Y LOGIC
			if ((ppuReadAddress & 0x7000) === 0x7000) {
				// wrap when tile y offset = 7
				//ppuReadAddress &= ~0x7000;
				ppuReadAddress &= 0x8FFF;

				if ((ppuReadAddress & 0x03E0) === 0x03A0) {
					// wrap tile y and switch name table bit 11, if tile y is 29
					ppuReadAddress ^= 0x0800;
					ppuReadAddress &= 0xFC1F;
				} else if ((ppuReadAddress & 0x03E0) === 0x03E0) {
					// wrap tile y if it is 31
					ppuReadAddress &= 0xFC1F;
				} else {
					// just increment tile y
					ppuReadAddress += 0x0020;
				}
			} else {
				// increment tile y offset
				ppuReadAddress += 0x1000;
			}
			return ppuReadAddress;
		}
	}, {
		key: '_incrementX',
		value: function _incrementX(ppuReadAddress) {
			/*
   The coarse X component of v needs to be incremented when the next tile is reached. Bits 0-4 are incremented, with overflow toggling bit 10. This means that bits 0-4 count from 0 to 31 across a single nametable, and bit 10 selects the current nametable horizontally.
   if ((v & 0x001F) == 31) // if coarse X == 31
     v &= ~0x001F          // coarse X = 0
     v ^= 0x0400           // switch horizontal nametable
   else
     v += 1                // increment coarse X
   */
			// INCREMENT X LOGIC
			if ((ppuReadAddress & 0x001F) === 0x001F) {
				// switch name tables (bit 10) and reset tile x to 0
				ppuReadAddress = (ppuReadAddress ^ 0x0400) & 0xFFE0;
			} else {
				// next tile
				ppuReadAddress = ppuReadAddress + 1 & 0xFFFF;
			}
			return ppuReadAddress;
		}
	}, {
		key: 'renderTo',
		value: function renderTo(startTicks, endTicks, ppuReadAddress, ppuLatchAddress) {
			(0, _Trace.writeLine)(_Trace.trace_ppu, 'sync: startTicks=' + startTicks + ' endTicks=' + endTicks);

			var ticksInFirstLine = 0;
			var ticksAtFirstScanline = 0;
			var tileTickPosition = 0;
			var tilenum = 0;
			var ticksAtFirstRenderingScanline = 0;
			var ticksAtFirstRenderingScanlineEnd = 0;
			var scanlineStart = 0;
			var posy = 0;
			var clippingEnabled = (this.ppu.control2 & 0x2) === 0 /*ppuControl2.backgroundClipping*/;
			var backgroundRenderingEnabled = (this.ppu.control2 & 0x8) > 0 /* ppuControl2.backgroundSwitch */;
			var reloadTime = 0;
			var incrementYTime = 0;
			var scanline = 0;

			if (startTicks < backgroundRenderingStart) {
				startTicks = backgroundRenderingStart;
			}
			if (endTicks > backgroundRenderingEnd) {
				endTicks = backgroundRenderingEnd;
			}
			if (endTicks <= startTicks) {
				return ppuReadAddress;
			}

			ticksInFirstLine = startTicks % _consts.MASTER_CYCLES_PER_SCANLINE;
			ticksAtFirstScanline = startTicks - ticksInFirstLine;
			ticksAtFirstRenderingScanline = ticksAtFirstScanline - _consts.MASTER_CYCLES_PER_SCANLINE + SecondLastTileReloadTime * _consts.MASTER_CYCLES_PER_PPU;
			ticksAtFirstRenderingScanlineEnd = ticksAtFirstRenderingScanline + _consts.MASTER_CYCLES_PER_SCANLINE; // ( 34 * 8 * MASTER_CYCLES_PER_PPU );

			while (ticksAtFirstRenderingScanlineEnd < startTicks || ticksAtFirstRenderingScanline < backgroundRenderingStart) {
				ticksAtFirstRenderingScanline += _consts.MASTER_CYCLES_PER_SCANLINE;
				ticksAtFirstRenderingScanlineEnd += _consts.MASTER_CYCLES_PER_SCANLINE;
			}

			if (backgroundScrollReloadTime > startTicks && backgroundScrollReloadTime <= endTicks) {
				// reset ppu address on cycle 304 of pre-render scanline
				ppuReadAddress = ppuReadAddress & 0x41F | ppuLatchAddress & 0x7BE0;
			}

			scanlineStart = ticksAtFirstRenderingScanline;
			scanline = Math.floor((ticksAtFirstRenderingScanline - backgroundRenderingStart) / _consts.MASTER_CYCLES_PER_SCANLINE) | 0;

			// tile prefetches between SecondLastTileReloadTime (previous line) for 34 tiles
			while (scanlineStart <= endTicks) {
				incrementYTime = scanlineStart + YIncrementTimeRendering;
				reloadTime = scanlineStart + XReloadTimeRendering;

				for (tilenum = 0; tilenum < backgroundTileCount; ++tilenum) {
					tileTickPosition = scanlineStart + tilenum * 8 * _consts.MASTER_CYCLES_PER_PPU;

					if (tileTickPosition > endTicks || tileTickPosition > backgroundRenderingEnd) {
						break;
					}
					if (tileTickPosition <= startTicks) {
						continue;
					}

					if (backgroundRenderingEnabled) {
						this._renderTile(ppuReadAddress, tilenum, scanline, clippingEnabled);
					}
					ppuReadAddress = this._incrementX(ppuReadAddress);
				}

				// render last tile on screen, increment Y
				if (incrementYTime < backgroundRenderingEnd && incrementYTime > startTicks && incrementYTime <= endTicks) {
					ppuReadAddress = this._incrementY(ppuReadAddress);
				}

				if (reloadTime < backgroundRenderingEnd && reloadTime > startTicks && reloadTime <= endTicks) {
					ppuReadAddress = ppuReadAddress & 0xFBE0 | ppuLatchAddress & 0x041F;
				}

				scanlineStart += _consts.MASTER_CYCLES_PER_SCANLINE;
				scanline++;
			}
			return ppuReadAddress;
		}
	}]);

	return PPURenderBG;
}();

exports.default = PPURenderBG;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _consts = __webpack_require__(5);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PPURenderSprites = function () {
	function PPURenderSprites(ppu) {
		_classCallCheck(this, PPURenderSprites);

		this.ppu = ppu;
		this._overflowSet = false;
		this._useMMC2Latch = false;
	}

	_createClass(PPURenderSprites, [{
		key: 'reset',
		value: function reset() {
			this._overflowSet = false;
			this._useMMC2Latch = this.ppu.mainboard.cart.memoryMapper.MMC2Latch !== undefined;
		}
	}, {
		key: 'onEndFrame',
		value: function onEndFrame() {
			this._overflowSet = false;
		}
	}, {
		key: 'saveState',
		value: function saveState(data) {
			data._overflowSet = this._overflowSet;
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {
			this._overflowSet = state._overflowSet;
		}
	}, {
		key: 'isRangeOverlapping',
		value: function isRangeOverlapping(a1, a2, b1, b2) {
			// http://stackoverflow.com/questions/3269434/whats-the-most-efficient-way-to-test-two-integer-ranges-for-overlap
			return a2 >= b1 && a1 <= b2;
		}
	}, {
		key: '_renderSprite',
		value: function _renderSprite(spriteHeight, spritenum, startline, endline, spritey) {
			var spriteIndex = spritenum * 4;
			var patternnum = this.ppu.spriteMemory[spriteIndex + 1];
			var attribs = this.ppu.spriteMemory[spriteIndex + 2];
			var sx = this.ppu.spriteMemory[spriteIndex + 3];

			var behindBackground = (attribs & 0x20) > 0;
			var flipHorz = (attribs & 0x40) > 0;
			var flipVert = (attribs & 0x80) > 0;

			var renderScanlineStart = Math.max(spritey, startline);
			var renderScanlineEnd = Math.min(spritey + spriteHeight - 1, endline);
			var ppuAddress = 0;
			var absSy = 0;
			var mask = 0;
			var topsprite = false;
			var firstByte = 0;
			var secondByte = 0;
			var paletteMergeByte = 0;
			var absx = 0;
			var x = 0;

			for (var scanline = renderScanlineStart; scanline <= renderScanlineEnd; ++scanline) {
				ppuAddress = 0;
				absSy = scanline - spritey;

				if (spriteHeight === 8 /*!ppuControl1.spriteSize*/) {
						ppuAddress = patternnum * 16 + ((flipVert ? 7 - absSy : absSy) & 0x7) + ((this.ppu.control1 & 0x8) > 0 /*ppuControl1.spritePatternTableAddress*/ ? 0x1000 : 0);
					} else // big sprites - if sprite num is even, use 0x0 else use 0x1000
					{
						ppuAddress = (patternnum & 0xFE) * 16 + (patternnum & 0x01) * 0x1000;

						topsprite = (0, _consts.IS_INT_BETWEEN)(scanline, spritey, spritey + 8);

						if (!topsprite) {
							// on flipped, put top sprite on bottom & vis versa
							if (flipVert) ppuAddress += 15 - scanline + spritey;else ppuAddress += 8 + absSy;
						} else {
							if (flipVert) ppuAddress += 23 - scanline + spritey;else ppuAddress += absSy;
						}
					}

				firstByte = this.ppu.read8(ppuAddress, true, 0);
				secondByte = this.ppu.read8(ppuAddress + 8, true, 0);
				paletteMergeByte = (attribs & 3) << 2;

				if (this._useMMC2Latch) {
					this.ppu.mainboard.cart.memoryMapper.MMC2Latch(ppuAddress + 8);
				}

				for (x = 0; x < 8; ++x) {
					absx = x + sx;

					// check sprite clipping
					if ((this.ppu.control2 & 0x4) === 0 && absx < 8) {
						continue;
					}
					if (absx > 255) {
						break;
					}

					mask = 0x80 >> (flipHorz ? 7 - x : x);

					// get 2 lower bits from the pattern table for the colour index
					var paletteindex = (firstByte & mask) > 0 ? 1 : 0; // first bit
					paletteindex |= (secondByte & mask) > 0 ? 2 : 0; // second bit

					// add 2 upper bits
					if (paletteindex > 0) {
						paletteindex |= paletteMergeByte;
						this.ppu.mainboard.renderBuffer.renderSpritePixel(spritenum, behindBackground, absx, scanline, this.ppu.paletteTables[1][paletteindex & 0xF] | 0);
					}
				}
			}
		}

		//*** Cycles 0-63: Secondary OAM (32-byte buffer for current sprites on scanline) is initialized to $FF - attempting to read $2004 will return $FF
		//*** Cycles 64-255: Sprite evaluation
		//* On even cycles, data is read from (primary) OAM
		//* On odd cycles, data is written to secondary OAM (unless writes are inhibited, in which case it will read the value in secondary OAM instead)
		//1. Starting at n = 0, read a sprite's Y-coordinate (OAM[n][0], copying it to the next open slot in secondary OAM (unless 8 sprites have been found, in which case the write is ignored).
		//1a. If Y-coordinate is in range, copy remaining bytes of sprite data (OAM[n][1] thru OAM[n][3]) into secondary OAM.
		//2. Increment n
		//2a. If n has overflowed back to zero (all 64 sprites evaluated), go to 4
		//2b. If less than 8 sprites have been found, go to 1
		//2c. If exactly 8 sprites have been found, disable writes to secondary OAM
		//3. Starting at m = 0, evaluate OAM[n][m] as a Y-coordinate.
		//3a. If the value is in range, set the sprite overflow flag in $2002 and read the next 3 entries of OAM (incrementing 'm' after each byte and incrementing 'n' when 'm' overflows); if m = 3, increment n
		//3b. If the value is not in range, increment n AND m (without carry). If n overflows to 0, go to 4; otherwise go to 3
		//4. Attempt (and fail) to copy OAM[n][0] into the next free slot in secondary OAM, and increment n (repeat until HBLANK is reached)
		//*** Cycles 256-319: Sprite fetches (8 sprites total, 8 cycles per sprite)
		//1-4: Read the Y-coordinate, tile number, attributes, and X-coordinate of the selected sprite
		//5-8: Read the X-coordinate of the selected sprite 4 times.
		//* On the first empty sprite slot, read the Y-coordinate of sprite #63 followed by $FF for the remaining 7 cycles
		//* On all subsequent empty sprite slots, read $FF for all 8 reads
		//*** Cycles 320-340: Background render pipeline initialization
		//* Read the first byte in secondary OAM (the Y-coordinate of the first sprite found, sprite #63 if no sprites were found)

	}, {
		key: 'renderTo',
		value: function renderTo(startTicks, endTicks) {
			// Further optimisations can be made: Keep list of visible sprites, update on memory changes -
			// don't need to iterate over 64 of them each time then
			// (dont think this'll work as you need to go over 64 sprites anyway for overflow check)
			var spriteEvaluationStart = 64;

			var firstSpriteEvaluation = this.ppu.screenCoordinatesToTicks(spriteEvaluationStart - 1, -1);
			var lastSpriteEvaluation = this.ppu.screenCoordinatesToTicks(spriteEvaluationStart, 238);
			var spritesVisible = (this.ppu.control2 & 0x10) > 0;
			var ticksIntoCurrentLine = startTicks % _consts.MASTER_CYCLES_PER_SCANLINE;
			var nextSpriteEval = startTicks - ticksIntoCurrentLine + spriteEvaluationStart * _consts.MASTER_CYCLES_PER_PPU;
			var startline = 0;
			var endline = 0;
			var spriteHeight = (this.ppu.control1 & 0x20) > 0 ? 16 : 8;
			var nextScanlineSpritesCount = 0;
			var readFromY = 0;
			var spritenum = 0;
			var spritey = 0;
			var that = this;

			if (!spritesVisible) {
				return;
			}

			if (startTicks < firstSpriteEvaluation) {
				startTicks = firstSpriteEvaluation;
			}
			if (endTicks > lastSpriteEvaluation) {
				endTicks = lastSpriteEvaluation;
			}

			if (endTicks <= startTicks) {
				return;
			}

			// work out when sprites are next due to be evaluated
			while (nextSpriteEval <= startTicks) {
				nextSpriteEval += _consts.MASTER_CYCLES_PER_SCANLINE;
			}

			if (nextSpriteEval > endTicks) {
				return; // not yet time for the next evaluation period
			}

			startline = this.ppu.ticksToScreenCoordinates(nextSpriteEval).y + 1;
			endline = startline;
			while (nextSpriteEval <= endTicks) {
				nextSpriteEval += _consts.MASTER_CYCLES_PER_SCANLINE;
				endline++;
			}
			endline = Math.min(endline, 239);

			// check each sprite to see which fall within the area to check.
			for (spritenum = 0; spritenum < 64; ++spritenum) {
				spritey = this.ppu.spriteMemory[spritenum * 4] + 1;

				if (spritey > 0 && spritey < _consts.SCREEN_HEIGHT) {
					if (this.isRangeOverlapping(startline, endline, spritey, spritey + spriteHeight)) {
						this._renderSprite(spriteHeight, spritenum, startline, endline, spritey);
					}
				}
			}
		}
	}]);

	return PPURenderSprites;
}();

exports.default = PPURenderSprites;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _consts = __webpack_require__(5);

var _serialisation = __webpack_require__(14);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RenderBuffer = function () {
	function RenderBuffer(mainboard, renderSurface) {
		_classCallCheck(this, RenderBuffer);

		this._mainboard = mainboard;
		this._renderSurface = renderSurface;

		var paletteArray = [0x808080, 0xA63D00, 0xB01200, 0x960044, 0x5E00A1, 0x2800C7, 0x0006BA, 0x00178C, 0x002F5C, 0x004510, 0x004A05, 0x2E4700, 0x664100, 0x000000, 0x050505, 0x050505, 0xC7C7C7, 0xFF7700, 0xFF5521, 0xFA3782, 0xB52FEB, 0x5029FF, 0x0022FF, 0x0032D6, 0x0062C4, 0x008035, 0x008F05, 0x558A00, 0xCC9900, 0x212121, 0x090909, 0x090909, 0xFFFFFF, 0xFFD70F, 0xFFA269, 0xFF80D4, 0xF345FF, 0x8B61FF, 0x3388FF, 0x129CFF, 0x20BCFA, 0x0EE39F, 0x35F02B, 0xA4F00C, 0xFFFB05, 0x5E5E5E, 0x0D0D0D, 0x0D0D0D, 0xFFFFFF, 0xFFFCA6, 0xFFECB3, 0xEBABDA, 0xF9A8FF, 0xB3ABFF, 0xB0D2FF, 0xA6EFFF, 0x9CF7FF, 0x95E8D7, 0xAFEDA6, 0xDAF2A2, 0xFCFF99, 0xDDDDDD, 0x111111, 0x111111, 0x000000];

		this.defaultPalette32BitVals = new Uint32Array(paletteArray.length);

		for (var i = 0; i < paletteArray.length; ++i) {
			this.defaultPalette32BitVals[i] = paletteArray[i];
		}

		var that = this;
		this._clipTopAndBottomY = false;
		this._mainboard.connect('reset', function (cold) {
			that._reset(cold);
		});
		this.priorityBuffer = new Int32Array(_consts.SCREEN_WIDTH * _consts.SCREEN_HEIGHT);
		this.clearBuffer();
	}

	_createClass(RenderBuffer, [{
		key: '_reset',
		value: function _reset(cold) {

			this._clipTopAndBottomY = _consts.COLOUR_ENCODING_NAME === "NTSC";
		}
	}, {
		key: 'clearBuffer',
		value: function clearBuffer() {

			this.priorityBuffer.set(_consts.g_ClearScreenArray);
		}
	}, {
		key: 'pickColour',
		value: function pickColour(paletteIndex) {
			this.colorHash = this.colorHash || {};
			if (this.colorHash[paletteIndex]) {
				return this.colorHash[paletteIndex];
			}
			this.uintPalette = this.uintPalette || new Uint32Array(this.defaultPalette32BitVals);

			var pindex = 0;
			if (paletteIndex < 64) {
				pindex = paletteIndex;
			} else {
				pindex = 64;
			}
			this.colorHash[paletteIndex] = this.uintPalette[pindex];

			return this.colorHash[paletteIndex];
		}
	}, {
		key: '_renderPixel',
		value: function _renderPixel(bufferIndex, insertIndex, y, paletteIndex) {

			if (this._clipTopAndBottomY && (y < 8 || y > 231)) {
				return;
			}

			var colour = this.pickColour(paletteIndex | 0);
			this._renderSurface.writeToBuffer(bufferIndex, insertIndex, colour);
		}
	}, {
		key: 'renderSpritePixelDebug',
		value: function renderSpritePixelDebug(spritenum, x, y) {

			//this._renderSurface.writeToBuffer( 2, x, y, 0xFFE92BFF );
		}
	}, {
		key: 'renderSpritePixel',
		value: function renderSpritePixel(spritenum, isBehind, x, y, paletteIndex) {
			var index = y * _consts.SCREEN_WIDTH + x;
			var bufferIndex = isBehind ? 0 : 2;
			if (this.priorityBuffer[index] === 0) {
				this.priorityBuffer[index] = spritenum + 1;
				this._renderPixel(bufferIndex, index, y, paletteIndex);
			}
		}
	}, {
		key: 'renderPixel',
		value: function renderPixel(x, y, paletteIndex) {
			var hitzero = false;
			var index = y * _consts.SCREEN_WIDTH + x;
			if (this.priorityBuffer[index] === 1 && x < _consts.SCREEN_WIDTH - 1) {
				hitzero = true;
			}
			this._renderPixel(1, index, y, paletteIndex);
			return hitzero;
		}
	}, {
		key: 'saveState',
		value: function saveState() {

			return {
				priorityBuffer: (0, _serialisation.uintArrayToString)(this.priorityBuffer)
			};
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {

			this.priorityBuffer = (0, _serialisation.stringToUintArray)(state.priorityBuffer);
		}
	}]);

	return RenderBuffer;
}();

exports.default = RenderBuffer;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _serialisation = __webpack_require__(14);

var _Trace = __webpack_require__(32);

var _consts = __webpack_require__(5);

var _PPURenderBG = __webpack_require__(144);

var _PPURenderBG2 = _interopRequireDefault(_PPURenderBG);

var _PPURenderSprites = __webpack_require__(145);

var _PPURenderSprites2 = _interopRequireDefault(_PPURenderSprites);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PPU = function () {
	function PPU(mainboard) {
		_classCallCheck(this, PPU);

		var that = this;
		this.mainboard = mainboard;
		this.mainboard.connect('reset', this.reset.bind(this));
		this.lastTransferredValue = 0;
		this.mirroringMethod = null;
		this.spriteMemory = new Int32Array(0x100);
		this._invokeA12Latch = false;
		this._bitOperationOn2002 = false;

		this.nameTablesMap = new Int32Array(4);
		this.nameTables = [];
		for (var i = 0; i < 4; ++i) {
			this.nameTables.push(new Int32Array(0x400));
		}this.paletteTables = [new Int32Array(0x10), new Int32Array(0x10)];
		this.frameCounter = 0;
		this._ppuRenderBg = new _PPURenderBG2.default(this);
		this._ppuRenderSprites = new _PPURenderSprites2.default(this);

		this.resetVariables();
	}

	// Recycles a static return object to save creating an object per call (sloooow...) be warned using this method, dont call more than once at a time
	// else the values will be overwritten


	_createClass(PPU, [{
		key: 'reset',
		value: function reset(cold) {

			this._useMapperNameTableRead = this.mainboard.cart.memoryMapper.nameTableRead !== undefined;
			this._sync = this.mainboard.synchroniser;
			this.resetVariables(cold);
			this._invokeA12Latch = this.mainboard.cart.memoryMapper.ppuA12Latch !== undefined;
			this._ppuRenderBg.reset();
			this._ppuRenderSprites.reset();
		}
	}, {
		key: 'bitOperationHappening',
		value: function bitOperationHappening() {

			this._bitOperationOn2002 = true;
		}
	}, {
		key: 'resetVariables',
		value: function resetVariables(cold) {
			if (cold) this.control1 = this.control2 = this.status = 0;else this.control1 &= 0x7F; // ppuControl1.vBlankNmi = false;
			this.status |= 0x80; // vblank

			this.isOddFrame = false;
			this.suppressNmi = this.suppressVblank = false;
			this.forceNmi = false;

			this.doSpriteTransferAfterNextCpuInstruction = false;
			this.spriteTransferArgument = 0;

			this.fineX = 0;
			this.bufferedppuread = 0;
			this.ppuSecondAddressWrite = false;
			this.ppuReadAddress = 0;
			this.ppuLatchAddress = 0;
			this.spriteaddress = 0;

			this.frameCounter = 0;
		}
	}, {
		key: 'hookSyncEvents',
		value: function hookSyncEvents(synchroniser) {

			var that = this;
			this._clockSkipEventId = synchroniser.addEvent('ppu clockskip', this.getMasterTicksTillClockSkip(), function () {
				that._eventClockskip();
			});
			this._vblankClearEventId = synchroniser.addEvent('ppu vblank clear', _consts.COLOUR_ENCODING_VBLANK_MTC, function (eventTime) {
				that._eventVblankClear(eventTime);
			});
			this._ppuNmiEventId = synchroniser.addEvent('ppu NMI', -1, function (eventTime) {
				that._eventNmiTrigger(eventTime);
			});
			this._spriteZeroEventId = synchroniser.addEvent('ppu sprite zero hit', -1, function (eventTime) {
				that._eventSpriteZeroHit(eventTime);
			});
		}
	}, {
		key: '_eventClockskip',
		value: function _eventClockskip() {

			// Skip a PPU clock cycle if the background is enabled
			if (this.isOddFrame && (this.control2 & 0x8) > 0 /*ppuControl2.backgroundSwitch*/ && _consts.COLOUR_ENCODING_NAME === "NTSC") {
				this._sync.advanceCpuMTC(_consts.MASTER_CYCLES_PER_PPU);
			}
		}
	}, {
		key: '_eventVblankClear',
		value: function _eventVblankClear(eventTime) {

			// clear vblank flags after vblank period (in this emultor, at the start of the frame)
			// clear bits 5,6,7 in 0x2002
			//console.log( "CLEAR VBLANK: " + eventTime );
			this.status &= 0x1F;
		}
	}, {
		key: '_eventNmiTrigger',
		value: function _eventNmiTrigger(eventTime) {

			if ((this.control1 & 0x80) > 0 /* ppuControl1.vBlankNmi*/ && (this.status & 0x80) > 0 /* ppuStatus.vBlank*/) {
					this.mainboard.cpu.nonMaskableInterrupt(eventTime);
				}

			this._sync.changeEventTime(this._ppuNmiEventId, -1);
		}
	}, {
		key: '_eventSpriteZeroHit',
		value: function _eventSpriteZeroHit(eventTime) {

			(0, _Trace.writeLine)(_Trace.trace_ppu, "PPU sprite hit set");
			// var realmtc = this._sync.getCpuMTC();
			// console.log( "[" + this.frameCounter + "] Sprite hit at: " + realmtc + " [" + JSON.stringify( this.ticksToScreenCoordinates( realmtc ) )
			// + " due: " + eventTime + " [" + JSON.stringify( this.ticksToScreenCoordinates( eventTime ) ) + "]" );
			this.status |= 0x40;
			this._sync.changeEventTime(this._spriteZeroEventId, -1);
		}
	}, {
		key: '_eventSpriteOverflow',
		value: function _eventSpriteOverflow(eventTime) {

			//var realmtc = this._sync.getCpuMTC();
			//console.log( "Sprite overflow at: " + realmtc + " [" + JSON.stringify( this.ticksToScreenCoordinates( realmtc ) )
			//	+ " due: " + eventTime + " [" + JSON.stringify( this.ticksToScreenCoordinates( eventTime ) ) + "]" );
			this.status |= 0x20; /*ppuStatus.spriteOverflow = true;*/
		}
	}, {
		key: 'getMasterTicksTillVBlankClearDue',
		value: function getMasterTicksTillVBlankClearDue(tickCount) {
			tickCount = tickCount || 0;
			return _consts.COLOUR_ENCODING_VBLANK_MTC - tickCount;
		}
	}, {
		key: 'getMasterTicksTillClockSkip',
		value: function getMasterTicksTillClockSkip(tickCount) {
			tickCount = tickCount || 0;
			return _consts.COLOUR_ENCODING_VBLANK_MTC + _consts.MASTER_CYCLES_PER_PPU * (328 + 9) - tickCount;
		}
	}, {
		key: 'ticksToScreenCoordinates',
		value: function ticksToScreenCoordinates(tickCount) {
			tickCount = tickCount || this._sync.getCpuMTC();
			tickCount = Math.floor(tickCount / _consts.MASTER_CYCLES_PER_PPU) | 0;
			PPU.screenPos.x = tickCount % _consts.PPU_TICKS_PER_SCANLINE;
			PPU.screenPos.y = Math.floor(tickCount / _consts.PPU_TICKS_PER_SCANLINE) - _consts.COLOUR_ENCODING_VBLANK_SCANLINES - 1 | 0;
			return PPU.screenPos;
		}
	}, {
		key: 'screenCoordinatesToTicks',
		value: function screenCoordinatesToTicks(x, y) {

			return x * _consts.MASTER_CYCLES_PER_PPU + (y + _consts.COLOUR_ENCODING_VBLANK_SCANLINES + 1) * _consts.MASTER_CYCLES_PER_SCANLINE;
		}
	}, {
		key: 'isRenderingEnabled',
		value: function isRenderingEnabled() {
			return (this.control2 & 0x18) > 0;
		}
	}, {
		key: 'isRendering',
		value: function isRendering(tickCount, includeHblank) {
			if (this.isRenderingEnabled()) {
				var pos = this.ticksToScreenCoordinates(tickCount);
				return (includeHblank ? (0, _consts.IS_INT_BETWEEN)(pos.x, 0, 256) : true) && (0, _consts.IS_INT_BETWEEN)(pos.y, -1, 241);
			} else return false;
		}
	}, {
		key: 'updatePPUReadAddress',
		value: function updatePPUReadAddress(newAddress, invokedFromRegisterWrite) {
			if (invokedFromRegisterWrite && this._invokeA12Latch) {
				if ((newAddress & 0x1000) > 0) {
					this.mainboard.cart.memoryMapper.ppuA12Latch();
				}
			}
			this.ppuReadAddress = newAddress;
		}
	}, {
		key: 'changeMirroringMethod',
		value: function changeMirroringMethod(method) {

			if (method !== this.mirroringMethod) {
				this.mirroringMethod = method;
				var name = '';
				switch (this.mirroringMethod) {
					default:
					case _consts.PPU_MIRRORING_HORIZONTAL:
						// mirrors 3 & 4 point to the second nametable
						this.nameTablesMap[0] = 0;
						this.nameTablesMap[1] = 0;
						this.nameTablesMap[2] = 1;
						this.nameTablesMap[3] = 1;
						//name = 'horizontal';
						break;
					case _consts.PPU_MIRRORING_VERTICAL:
						// mirrors 2 & 4 point to the second nametable
						this.nameTablesMap[0] = 0;
						this.nameTablesMap[1] = 1;
						this.nameTablesMap[2] = 0;
						this.nameTablesMap[3] = 1;
						//name = 'vertical';
						break;
					case PPU_MIRRORING_FOURSCREEN:
						// no mirroring done, requires an extra 0x800 of memory kept on cart
						for (var i = 0; i < 4; ++i) {
							this.nameTablesMap[i] = i;
						} //name = 'four screen';
						break;
					case PPU_MIRRORING_SINGLESCREEN_NT0:
						for (var j = 0; j < 4; ++j) {
							this.nameTablesMap[j] = 0;
						} //name = 'single 0';
						break;
					case PPU_MIRRORING_SINGLESCREEN_NT1:
						for (var k = 0; k < 4; ++k) {
							this.nameTablesMap[k] = 1;
						} //name = 'single 1';
						break;
				}
				//console.log( 'PPU nametable mirroring set to ' + name );
			}
		}
	}, {
		key: 'getMirroringMethod',
		value: function getMirroringMethod() {
			return this.mirroringMethod;
		}
	}, {
		key: 'handleSpriteTransfer',
		value: function handleSpriteTransfer() {
			/*
   SPR DMA should take 513 cycles if it starts on an even cycle, 514 if it starts on an odd cycle.
   	Remember that SPR DMA only takes place when the instruction has finished executing, and not at the write cycle of the instruction! You can check this behavior by using a RMW instruction with $4014, it will only do one sprite dma at the end of the instruction.
   	I m able to pass irq and dma, as well as both spr and dma tests using this implementation.
   */
			var baseReadAddress = this.spriteTransferArgument * 0x100;
			if (this.doSpriteTransferAfterNextCpuInstruction) {
				this.doSpriteTransferAfterNextCpuInstruction = false;
				this._sync.synchronise();
				// TODO: Optimise
				this._sync.advanceCpuMTC(1 * _consts.COLOUR_ENCODING_MTC_PER_CPU);
				this.spriteaddress &= 0xFF;
				for (var i = 0; i < 0x100; ++i) {
					var dmaData = this.mainboard.memory.read8(baseReadAddress + i);
					this._sync.advanceCpuMTC(1 * _consts.COLOUR_ENCODING_MTC_PER_CPU);
					this.spriteMemory[this.spriteaddress] = dmaData;
					this.spriteaddress = this.spriteaddress + 1 & 0xFF;
					//this.lastTransferredValue = dmaData;
					this._sync.advanceCpuMTC(1 * _consts.COLOUR_ENCODING_MTC_PER_CPU);
				}
				// add extra cycle on odd frame
				if (this.isOddFrame) this._sync.advanceCpuMTC(1 * _consts.COLOUR_ENCODING_MTC_PER_CPU);
			}
		}
	}, {
		key: '_writeTo2000',
		value: function _writeTo2000(offset, data) {
			var cpuMtc = this._sync.getCpuMTC();
			var vblankSetTime = _consts.COLOUR_ENCODING_FRAME_MTC;
			var ticksTillSet = vblankSetTime - cpuMtc;

			if ((data & 0x80) === 0) {
				// vblank nmi cleared
				// special case code for disabling NMI when disabled near vblank set
				// NMI should occur when disabled 2, 3 or 4 PPU clocks after VBL set
				if (ticksTillSet <= -_consts.MASTER_CYCLES_PER_PPU * 2 && ticksTillSet >= -_consts.MASTER_CYCLES_PER_PPU * 4) {
					this.forceNmi = true;
				} else if (ticksTillSet >= -_consts.MASTER_CYCLES_PER_PPU * 1 && ticksTillSet <= _consts.MASTER_CYCLES_PER_PPU * 1) {
					this.suppressNmi = true;
				}
			} else {
				// NMI should occur if enabled when VBL already set
				// vblank = true && vblanknmi = false
				if ((this.status & 0x80) > 0 && (this.control1 & 0x80) === 0) {
					// there be a 1-PPU clock latency for this
					var triggerTime = this._sync.getCpuMTC() + _consts.MASTER_CYCLES_PER_PPU * 1;
					//console.log( "NMI trigger due: " + triggerTime );
					this._sync.changeEventTime(this._ppuNmiEventId, triggerTime);
				}
			}

			this._sync.synchronise();

			// update nametable switch
			this.ppuLatchAddress &= 0xF3FF;
			this.ppuLatchAddress |= (data & 3) << 10;

			var spriteScreenAddressChanged = (this.control1 & 0x18) !== (data & 0x18);
			//var spriteSizeOrSpriteAddressChanged = ( this.control1 & 0x28 ) !== ( data & 0x28 );
			var spriteSizeChanged = (this.control1 & 0x20) !== (data & 0x20);

			this.control1 = data;

			if (spriteScreenAddressChanged) {
				this.mainboard.cart.memoryMapper.spriteScreenEnabledUpdate((this.control1 & 0x8) > 0, (this.control1 & 0x10) > 0);
				this._ppuRenderBg.onControl1Change(this.control1);
			}
			if (spriteSizeChanged && this.mainboard.cart.memoryMapper.spriteSizeChanged) {
				// used by MMC5
				this.mainboard.cart.memoryMapper.spriteSizeChanged((this.control1 & 0x20) > 0);
			}
		}
	}, {
		key: '_writeTo2001',
		value: function _writeTo2001(offset, data) {
			this._sync.synchronise();
			var renderingEnabledChanged = (this.control2 & 0x18) > 0 !== (data & 0x18) > 0;
			//var spriteVisibleOrClippingChanged = ( ( this.control2 & 0x14 ) > 0 ) !== ( ( data & 0x14 ) > 0 );

			this.control2 = data;

			if (renderingEnabledChanged) this.mainboard.cart.memoryMapper.renderingEnabledChanged((this.control2 & 0x18) > 0);
		}
	}, {
		key: '_writeTo2005',
		value: function _writeTo2005(offset, data) {
			this._sync.synchronise();

			/*
   I don't know anything about this game in particular, but bear in mind when examining
   $2005 writes that changes to bits 0-2 take effect immediately, while changes to bits 3-7
   (as well as bit 0 of $2000) don't have any effect until the start of the next H-Blank
   (cycle 257 to be specific).
   Thus, if $2005 were written in the middle of H-Blank, bits 0-2 will affect the next scanline,
   but bits 3-7 won't take effect until the scanline afterwards.
   Emulators that don't use cycle-accurate PPU rendering will not correctly handle this condition.
   */

			// bottom 3 bits are "fine" scroll value, top 5 are tile number
			// first write is horizontal value, second is vertical
			if (!this.ppuSecondAddressWrite) {
				this.ppuLatchAddress &= 0xFFE0;
				this.ppuLatchAddress |= (data & 0xF8) >> 3;
				this.fineX = data & 0x07 | 0;
				//var pos = this.ticksToScreenCoordinates();
				//console.log( "changed fineX at " + pos.x + "x" + pos.y + "=" + this.fineX );
			} else {
				this.ppuLatchAddress &= 0xFC1F;
				this.ppuLatchAddress |= (data & 0xF8) << 2;
				this.ppuLatchAddress &= 0x8FFF;
				this.ppuLatchAddress |= (data & 0x07) << 12;
			}

			this.ppuSecondAddressWrite = !this.ppuSecondAddressWrite;

			//writeLine( 'ppu', '2005 write: ' + data.toString( 16 ) );
		}
	}, {
		key: '_writeTo2006',
		value: function _writeTo2006(offset, data) {
			// first write is upper byte of address, second is lower
			this._sync.synchronise();

			if (!this.ppuSecondAddressWrite) {
				this.control1 &= 0xFC; // TODO: is this correct?
				this.control1 |= (data & 0x0C) >> 2; // nametable
				this.ppuLatchAddress &= 0x00FF;
				this.ppuLatchAddress |= (data & 0x3F) << 8;
			} else {
				this.ppuLatchAddress &= 0xFF00;
				this.ppuLatchAddress |= data;

				this.updatePPUReadAddress(this.ppuLatchAddress, true);
			}

			this.ppuSecondAddressWrite = !this.ppuSecondAddressWrite;

			//writeLine( 'ppu', '2006 write: ' + data.toString( 16 ) );
		}
	}, {
		key: '_writeTo2007',
		value: function _writeTo2007(offset, data) {
			/*
   $2007 reads and writes:
   Outside of rendering, reads from or writes to $2007 will add either 1 or 32 to v depending on the VRAM increment bit set via $2000.
   During rendering (on the pre-render line and the visible lines 0-239, provided either background or sprite rendering is enabled),
   it will update v in an odd way, triggering a coarse X increment and a Y increment simultaneously (with normal wrapping behaviour).
   Internally, this is caused by the carry inputs to various sections of v being set up for rendering, and the $2007 access triggering a
   "load next value" signal for all of v (when not rendering, the carry inputs are set up to linearly increment v by either 1 or 32).
   This behaviour is not affected by the status of the increment bit. The Young Indiana Jones Chronicles uses this for some effects to adjust
   the Y scroll during rendering. If the $2007 access happens to coincide with a standard VRAM address increment (either horizontal or vertical),
   it will presumably not double-increment the relevant counter.
   */
			this._sync.synchronise();

			var bufferedAddress = 0;
			var newAddress = 0;

			if (!this.isRendering(this._sync.getCpuMTC(), false)) {
				bufferedAddress = this.ppuReadAddress;

				// increment PPU address as according to bit 2 of 0x2000
				newAddress = this.ppuReadAddress + ((this.control1 & 0x04) > 0 ? 32 : 1); // verticalwrite flag
				this.updatePPUReadAddress(newAddress, true);
				this.write8(bufferedAddress /*& 0x3FFF*/, data);
			} else {
				// TODO: disallow if due to occur this tick anyway
				//	this.background_IncrementXTile();
				//	this.background_IncrementYTile();
			}

			if (this.mainboard.cart.memoryMapper.MMC2Latch) {
				this.mainboard.cart.memoryMapper.MMC2Latch(this.ppuReadAddress);
			}

			//writeLine( 'ppu', '2007 write: ' + data.toString( 16 ) );
		}
	}, {
		key: 'writeToRegister',
		value: function writeToRegister(offset, data) {

			this.lastTransferredValue = data;

			switch (offset) {
				case 0:
					this._writeTo2000(offset, data);
					break;
				case 0x01:
					this._writeTo2001(offset, data);
					break;
				case 0x03:
					// sprite memory address, no need to synchronise
					this.spriteaddress = data & 0xFF;
					break;
				case 0x04:
					// sprite memory data
					this._sync.synchronise();
					this.spriteMemory[this.spriteaddress & 0xFF] = data;
					this.spriteaddress = this.spriteaddress + 1 & 0xFF;
					break;
				case 0x05:
					// PPU scrolling
					this._writeTo2005(offset, data);
					break;
				case 0x06:
					// PPU memory address
					this._writeTo2006(offset, data);
					break;
				case 0x07:
					// PPU memory data
					this._writeTo2007(offset, data);
					break;
			}
		}
	}, {
		key: 'writeToSpriteDMARegister',
		value: function writeToSpriteDMARegister(data) {
			this.doSpriteTransferAfterNextCpuInstruction = true;
			this.spriteTransferArgument = data;
		}
	}, {
		key: '_readFromRegister2002',
		value: function _readFromRegister2002() {
			var cpuMtc = this._sync.getCpuMTC();
			var vblankSetTime = _consts.COLOUR_ENCODING_FRAME_MTC;
			var ticksTillSet = vblankSetTime - cpuMtc;
			var suppress = false;

			// check that vblank flag isn't tried to be set 1 PPU clock before VBlank is due
			if (ticksTillSet === _consts.MASTER_CYCLES_PER_PPU) {
				this.suppressVblank = true;
				this.suppressNmi = true;
				suppress = true;
			}
			// Suppress NMI on the tick VBlank is read and the one after
			else if (ticksTillSet <= 0 && ticksTillSet >= -_consts.MASTER_CYCLES_PER_PPU * 1) {
					this.suppressNmi = true;
				}

			// If we are performing a BIT on 2002, then we can optimise by not needing
			// to synchronise (as it is only looking at the vblank flag, and we always know
			// when that is due to happen)
			//if ( !this._bitOperationOn2002 ) {
			//writeLine( 'ppu', '2002 read sync - pre: ' + cpuMtc );
			this._sync.synchronise();
			//writeLine( 'ppu', '2002 read sync - post ' + cpuMtc );
			// } else {
			// if ( ticksTillSet < MASTER_CYCLES_PER_PPU * 5 ) { // if it's about to clear, synchronise
			// this._sync.synchronise();
			// }
			// this._bitOperationOn2002 = false;
			// }

			var ret = this.status;
			//console.log( "0x2002 read : " + Number( ret ) + " status: " + Number( this.status ) );
			this.ppuSecondAddressWrite = false; // reset latch on read to 0x2002

			// wipe vblank flag from status reg
			if (suppress) ret &= 0x7F;else this.status &= 0x7F;
			return ret;
		}
	}, {
		key: '_readFromRegister2007',
		value: function _readFromRegister2007() {
			var ret = 0;
			// dont buffer reads from palette space
			var bufferedaddress = this.ppuReadAddress;
			var newAddress = 0;

			if (!this.isRendering(this._sync.getCpuMTC(), true)) {
				newAddress = this.ppuReadAddress + ((this.control1 & 0x4) > 0 /*ppuControl1.verticalWrite*/ ? 32 : 1) & 0xFFFF;
				this.updatePPUReadAddress(newAddress, true);

				if ((bufferedaddress & 0xFF00) === 0x3F00) //IS_INT_BETWEEN( bufferedaddress, 0x3F00, 0x4000 ) )
					{
						ret = this.read8(bufferedaddress, false, 0);
						this.bufferedppuread = this.read8(bufferedaddress - 0x1000, false, 0);
					} else {
					ret = this.bufferedppuread;
					this.bufferedppuread = this.read8(bufferedaddress, false, 0);
				}
			} else {
				ret = this.bufferedppuread;
				this.bufferedppuread = 0;
			}
			return ret;
		}
	}, {
		key: 'readFromRegister',
		value: function readFromRegister(offset) {
			var ret = 0;

			switch (offset) {// offset is 0x2000 -> 0x2008
				case 0x2:
					ret = this._readFromRegister2002();
					break;

				case 0x4:
					// sprite memory data
					ret = this.spriteMemory[this.spriteaddress & 0xFF] | 0;
					break;

				case 0x7:
					// PPU memory data
					ret = this._readFromRegister2007();
					break;

				//case 0x2005:
				//	Log::Write( LOG_ERROR, "Read from PPU register 0x2005 - Emulation may be inaccurate and problematic" );
				//	ret = mLastTransferredValue;
				//	throw std::runtime_error( "Read to 0x2005" );
				//case 0x2006:
				//	Log::Write( LOG_ERROR, "Read from PPU register 0x2006 - Emulation may be inaccurate and problematic" );
				//	ret = mLastTransferredValue;
				//	throw std::runtime_error( "Read to 0x2006" );
				default:
					ret = this.lastTransferredValue;
					break;
			}

			this.lastTransferredValue = ret;
			return ret;
		}
	}, {
		key: 'write8',
		value: function write8(offset, data) {

			if ((offset & 0x2000) === 0) {
				// IS_INT_BETWEEN( offset, 0, 0x2000 )
				this.mainboard.cart.memoryMapper.write8ChrRom(offset & 0x1FFF, data);
			} else {
				// IS_INT_BETWEEN( offset, 0x2000, 0x4000 )
				if ((offset & 0x3F00) === 0x3F00) {
					// IS_INT_BETWEEN( offset, 0x3F00, 0x4000 )
					// image and sprite palettes (both mirror each other)
					var paletteOffset = offset & 0xF;
					var targetPalette = (offset & 0x10) >> 4; // whether its a sprite or background palette
					var newColour = data & 0x3F;

					this.paletteTables[targetPalette][paletteOffset] = newColour;
					if ((paletteOffset & 0x3) === 0) {
						var otherPalette = targetPalette === 1 ? 0 : 1;
						this.paletteTables[otherPalette][paletteOffset] = newColour;
					}
				} else {
					// IS_INT_BETWEEN( offset, 0x2000, 0x3F00 )
					// name tables
					var pageid = (offset & 0xC00) >> 10;
					if (this.mainboard.cart.memoryMapper.nameTableWrite) {
						this.mainboard.cart.memoryMapper.nameTableWrite(this.nameTables, pageid, offset & 0x3FF, data);
					} else {
						var pagepos = this.nameTablesMap[pageid];
						this.nameTables[pagepos][offset & 0x3FF] = data;
					}
				}
			}
		}
	}, {
		key: 'read8',
		value: function read8(offset, renderingSprites, readType) {

			var pageid = 0;
			var pagepos = 0;
			var paletteOffset = 0;
			var targetPalette = 0;

			if ((offset & 0x2000) === 0) {
				// IS_INT_BETWEEN( offset, 0, 0x2000 )
				// pattern tables
				return this.mainboard.cart.memoryMapper.read8ChrRom(offset & 0x1FFF, renderingSprites, readType) | 0;
			} else {
				if ((offset & 0x3F00) === 0x3F00) {
					// IS_INT_BETWEEN( offset, 0x3F00, 0x4000 )
					// palettes
					paletteOffset = offset & 0xF;
					targetPalette = (offset & 0x10) >> 4;
					return this.paletteTables[targetPalette][paletteOffset] | 0;
				} else {
					// IS_INT_BETWEEN( offset, 0x2000, 0x3F00 )
					// name tables
					pageid = (offset & 0xC00) >> 10;
					if (this._useMapperNameTableRead) {
						return this.mainboard.cart.memoryMapper.nameTableRead(this.nameTables, pageid, offset & 0x3FF) | 0;
					} else {
						pagepos = this.nameTablesMap[pageid];
						return this.nameTables[pagepos][offset & 0x3FF] | 0;
					}
				}
			}
		}
	}, {
		key: 'synchronise',
		value: function synchronise(startTicks, endTicks) {

			if (this.isRenderingEnabled()) {
				this._ppuRenderSprites.renderTo(startTicks, endTicks);
				this.ppuReadAddress = this._ppuRenderBg.renderTo(startTicks, endTicks, this.ppuReadAddress, this.ppuLatchAddress);
			}
		}
	}, {
		key: 'onEndFrame',
		value: function onEndFrame() {

			// start vblank period
			if (!this.suppressVblank) {
				this.status |= 0x80; // set vblank
			}

			if (this.forceNmi || !this.suppressNmi && (this.control1 & 0x80) > 0) {
				(0, _Trace.writeLine)(_Trace.trace_ppu, 'this.mainboard.cpu.nonMaskableInterrupt: ' + (_consts.COLOUR_ENCODING_FRAME_MTC + _consts.MASTER_CYCLES_PER_PPU));
				this.mainboard.cpu.nonMaskableInterrupt(_consts.COLOUR_ENCODING_FRAME_MTC + _consts.MASTER_CYCLES_PER_PPU);
			}

			this.suppressNmi = false;
			this.suppressVblank = false;
			this.forceNmi = false;
			this.isOddFrame = !this.isOddFrame;
			this.frameCounter++;
			this._ppuRenderBg.onEndFrame();
			this._ppuRenderSprites.onEndFrame();

			if (_consts.TRACE_ENABLED) {
				(0, _Trace.writeLine)(_Trace.trace_ppu, '[' + this.frameCounter + '] Frame finished');
			}
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}, {
		key: 'getBackgroundPaletteIndex',
		value: function getBackgroundPaletteIndex() {
			return this.paletteTables[0][0] | 0;
		}
	}, {
		key: 'readNameTable',
		value: function readNameTable(address, readType) {
			var pageid = address >> 10 & 3;
			if (this._useMapperNameTableRead) {
				return this.mainboard.cart.memoryMapper.nameTableRead(this.nameTables, pageid, address & 0x3FF, readType) | 0;
			} else {
				var pagepos = this.nameTablesMap[pageid];
				return this.nameTables[pagepos][address & 0x3FF] | 0;
			}
		}
	}, {
		key: 'formatStatusString',
		value: function formatStatusString() {

			var pos = this.ticksToScreenCoordinates();
			var str = "";
			str += "CYC:" + ZERO_PAD(pos.x, 3, ' ') + " SL:" + pos.y + " F:" + this.frameCounter;
			str += " S:" + ZERO_PAD_HEX(this.status, 2) + " C1:" + ZERO_PAD_HEX(this.control1, 2) + " C2:" + ZERO_PAD_HEX(this.control2, 2);
			return str;
		}
	}, {
		key: 'saveState',
		value: function saveState() {

			var data = {};
			data.mirroringMethod = this.mirroringMethod;
			data.isOddFrame = this.isOddFrame;
			data.suppressNmi = this.suppressNmi;
			data.suppressVblank = this.suppressVblank;
			data.forceNmi = this.forceNmi;

			data.control1 = this.control1;
			data.control2 = this.control2;
			data.status = this.status;

			data.bufferedppuread = this.bufferedppuread;
			data.ppuReadAddress = this.ppuReadAddress;
			data.ppuLatchAddress = this.ppuLatchAddress;

			data.spriteaddress = this.spriteaddress;
			data.ppuSecondAddressWrite = this.ppuSecondAddressWrite;

			data.fineX = this.fineX;

			data.lastTransferredValue = this.lastTransferredValue;
			data.frameCounter = this.frameCounter;
			data._invokeA12Latch = this._invokeA12Latch;

			data.doSpriteTransferAfterNextCpuInstruction = this.doSpriteTransferAfterNextCpuInstruction;
			data.spriteTransferArgument = this.spriteTransferArgument;

			data.spriteMemory = (0, _serialisation.uintArrayToString)(this.spriteMemory);
			data.nameTables = [];
			for (var i = 0; i < this.nameTables.length; ++i) {
				data.nameTables.push((0, _serialisation.uintArrayToString)(this.nameTables[i]));
			}
			data.paletteTables = [];
			for (var i = 0; i < this.paletteTables.length; ++i) {
				data.paletteTables.push((0, _serialisation.uintArrayToString)(this.paletteTables[i]));
			}
			data.nameTablesMap = (0, _serialisation.uintArrayToString)(this.nameTablesMap);

			this._ppuRenderBg.saveState(data);
			this._ppuRenderSprites.saveState(data);
			return data;
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {
			this.mirroringMethod = state.mirroringMethod;
			this.isOddFrame = state.isOddFrame;
			this.suppressNmi = state.suppressNmi;
			this.suppressVblank = state.suppressVblank;
			this.forceNmi = state.forceNmi;

			this.control1 = state.control1;
			this.control2 = state.control2;
			this.status = state.status;

			this.bufferedppuread = state.bufferedppuread;
			this.ppuReadAddress = state.ppuReadAddress;
			this.ppuLatchAddress = state.ppuLatchAddress;

			this.spriteaddress = state.spriteaddress;
			this.ppuSecondAddressWrite = state.ppuSecondAddressWrite;

			this.fineX = state.fineX;

			this.lastTransferredValue = state.lastTransferredValue;
			this.frameCounter = state.frameCounter;

			this.doSpriteTransferAfterNextCpuInstruction = state.doSpriteTransferAfterNextCpuInstruction;
			this.spriteTransferArgument = state.spriteTransferArgument;
			this._invokeA12Latch = state._invokeA12Latch;

			this.spriteMemory = (0, _serialisation.stringToUintArray)(state.spriteMemory);
			this.nameTables = [];
			for (var i = 0; i < state.nameTables.length; ++i) {
				this.nameTables.push((0, _serialisation.stringToUintArray)(state.nameTables[i]));
			}
			this.paletteTables = [];
			for (var i = 0; i < state.paletteTables.length; ++i) {
				this.paletteTables.push((0, _serialisation.stringToUintArray)(state.paletteTables[i]));
			}
			this.nameTablesMap = (0, _serialisation.stringToUintArray)(state.nameTablesMap);

			this._ppuRenderBg.loadState(state);
			this._ppuRenderSprites.loadState(state);
		}
	}]);

	return PPU;
}();

PPU.screenPos = {
	x: 0,
	y: 0
};
exports.default = PPU;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Event = __webpack_require__(52);

var _consts = __webpack_require__(5);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SyncEvent = function SyncEvent(name, tickCount, callback) {
	_classCallCheck(this, SyncEvent);

	this.name = name;
	this.tickCount = tickCount;
	this.callback = callback;
};

var Synchroniser = function () {
	function Synchroniser(mainboard) {
		_classCallCheck(this, Synchroniser);

		this.mainboard = mainboard;
		this.mainboard.connect('reset', this.reset.bind(this));
		this.cpu = mainboard.cpu;
		this.cpuMtc = 0;
		this._lastSynchronisedMtc = 0;
		this._isSynchronising = false;
		this._newEventInserted = false;
		this._eventBus = new _Event.EventBus();
		this._cpuMTCatEndOfInstruction = new Int32Array(8); // Array of ppu MTC counts which the last X instructions have ended on.
		this._cpuMTCatEndOfInstructionIndex = 0; // This is for determining if an NMI trigger should delay by an instruction or not.

		this._events = [];
		this._objects = [];
	}

	_createClass(Synchroniser, [{
		key: 'reset',
		value: function reset(cold) {
			this.cpuMtc = 0;
			this._lastSynchronisedMtc = 0;
			this._cpuMTCatEndOfInstructionIndex = 0;
			this._isSynchronising = false;
			this._newEventInserted = false;
		}
	}, {
		key: 'connect',
		value: function connect(name, callback) {
			this._eventBus.connect(name, callback);
		}
	}, {
		key: 'changeEventTime',
		value: function changeEventTime(eventId, tickCount) {

			var obj = this._getEvent(eventId);
			obj.tickCount = tickCount;
			this._executeCallbackIfSynchronising(obj);
			this._newEventInserted = true;
		}
	}, {
		key: '_removeEvent',
		value: function _removeEvent(name) {

			for (var i = 0; i < this._events.length; ++i) {
				var ev = this._events[i];
				if (ev.name === name) {
					return this._events.splice(i, 1)[0];
				}
			}
			return null;
		}
	}, {
		key: '_getEvent',
		value: function _getEvent(eventId) {

			return this._events[eventId];
		}
	}, {
		key: 'addEvent',
		value: function addEvent(name, tickCount, callback) {

			this._removeEvent(name);
			var obj = new SyncEvent(name, tickCount, callback);
			this._executeCallbackIfSynchronising(obj);
			this._events.push(obj);
			this._newEventInserted = true;
			return this._events.length - 1;
		}
	}, {
		key: '_executeCallbackIfSynchronising',
		value: function _executeCallbackIfSynchronising(event) {
			if (this._isSynchronising && event.tickCount >= 0) {
				// if a new event has been added during synchronisation, execute it immediately if it is due
				if (this._lastSynchronisedMtc < event.tickCount && this._currentSyncValue >= event.tickCount) {
					event.callback(event.tickCount);
				}
			}
		}
	}, {
		key: 'addObject',
		value: function addObject(name, obj) {

			this._objects.push({ name: name, object: obj, lastSynchronisedTickCount: 0 });
		}
	}, {
		key: 'synchronise',
		value: function synchronise() {

			var frameEnd = _consts.COLOUR_ENCODING_FRAME_MTC;

			if (this._isSynchronising) {
				//debugger;
				throw new Error("Cannot call synchronise synchronisation phase");
			}

			var syncTo = this.getCpuMTC();

			// work out when the next scheduled event is to occur. Then synchronise all objects to that event, then execute the event.
			// Then move onto the next one.
			var objIndex = 0;
			var keepRunning = true;
			while (keepRunning) {
				var nextEventTime = this.getNextEventTime();
				if (nextEventTime <= syncTo && nextEventTime < frameEnd) {
					syncTo = nextEventTime;
				} else {
					keepRunning = false; // no more events until requested syncTo value: we can finish the sync loop
					syncTo = Math.min(syncTo, frameEnd);
				}

				if (this._lastSynchronisedMtc >= syncTo) {
					return;
				}

				this._isSynchronising = true;
				this._currentSyncValue = syncTo;

				for (objIndex = 0; objIndex < this._objects.length; ++objIndex) {
					// TODO: Objects should be forbidden from calling synchroniser.synchronise() whilst in the synchronise phase - if they
					// want to force a synchronise they should do so using an event
					var obj = this._objects[objIndex];
					if (obj.lastSynchronisedTickCount < syncTo) {
						obj.object.synchronise(obj.lastSynchronisedTickCount, syncTo);
						obj.lastSynchronisedTickCount = syncTo;
					}
				}
				this._isSynchronising = false;

				this._executeEvents(this._lastSynchronisedMtc, syncTo);
				this._lastSynchronisedMtc = syncTo;

				// TODO: this should be an event: do end frame stuff if that time has come
				if (syncTo >= frameEnd) {
					for (objIndex = 0; objIndex < this._objects.length; ++objIndex) {
						this._objects[objIndex].object.onEndFrame(syncTo);
						this._objects[objIndex].lastSynchronisedTickCount = 0;
					}

					this.cpuMtc -= frameEnd;
					this._lastSynchronisedMtc = 0;
					this._eventBus.invoke('frameEnd');
				}
			}
		}
	}, {
		key: 'getNextEventTime',
		value: function getNextEventTime(currentTime) {

			var frameEnd = _consts.COLOUR_ENCODING_FRAME_MTC;
			currentTime = currentTime || this._lastSynchronisedMtc;
			var closestObj = null;
			for (var eventIndex = 0; eventIndex < this._events.length; ++eventIndex) {
				var ev = this._events[eventIndex];
				if (ev.tickCount >= 0 && ev.tickCount > currentTime) {
					if (closestObj === null || ev.tickCount < closestObj.tickCount) {
						closestObj = ev;
					}
				}
			}
			return closestObj !== null ? closestObj.tickCount : frameEnd;
		}
	}, {
		key: '_executeEvents',
		value: function _executeEvents(startTime, endTime) {

			for (var eventIndex = 0; eventIndex < this._events.length; ++eventIndex) {
				var ev = this._events[eventIndex];
				if (ev.tickCount >= 0 && ev.tickCount > startTime && ev.tickCount <= endTime) {
					ev.callback(ev.tickCount);
				}
			}
		}
	}, {
		key: 'runCycle',
		value: function runCycle() {

			var nextEventTime = this.getNextEventTime();

			// run cpu
			while (this.cpuMtc < nextEventTime) {
				var cpuTicks = this.cpu.handlePendingInterrupts();
				if (cpuTicks === 0) {
					cpuTicks = this.cpu.execute();
				}
				this.mainboard.ppu.handleSpriteTransfer();
				this.cpuMtc += cpuTicks * _consts.COLOUR_ENCODING_MTC_PER_CPU;
				this._cpuMTCatEndOfInstruction[this._cpuMTCatEndOfInstructionIndex] = this.cpuMtc;
				this._cpuMTCatEndOfInstructionIndex = this._cpuMTCatEndOfInstructionIndex + 1 & 0x7;

				if (this._newEventInserted) {
					this._newEventInserted = false;
					nextEventTime = this.getNextEventTime();
				}
			}

			// run all other components to the cpu mtc
			this.synchronise(this.cpuMtc);
		}
	}, {
		key: 'isPpuTickOnLastCycleOfCpuInstruction',
		value: function isPpuTickOnLastCycleOfCpuInstruction(ppuCount) {

			for (var i = 0; i < this._cpuMTCatEndOfInstruction.length; ++i) {
				var cpuCount = this._cpuMTCatEndOfInstruction[i];
				if (cpuCount - _consts.COLOUR_ENCODING_MTC_PER_CPU <= ppuCount && cpuCount + _consts.MASTER_CYCLES_PER_PPU >= ppuCount) {
					return true;
				}
			}
			return false;
		}
	}, {
		key: 'advanceCpuMTC',
		value: function advanceCpuMTC(advance) {
			this.cpuMtc += advance;
		}
	}, {
		key: 'getCpuMTC',
		value: function getCpuMTC() {
			return this.cpuMtc + this.cpu.getSubCycle() * _consts.COLOUR_ENCODING_MTC_PER_CPU | 0;
		}
	}, {
		key: 'saveState',
		value: function saveState() {
			// TODO: save event data in state, maybe not necessary as save state is done on the end of a frame?
			var data = {};
			data.cpuMtc = this.cpuMtc;
			data._lastSynchronisedMtc = this._lastSynchronisedMtc;
			return data;
		}
	}, {
		key: 'loadState',
		value: function loadState(state) {
			this.cpuMtc = state.cpuMtc;
			this._lastSynchronisedMtc = state._lastSynchronisedMtc;
		}
	}]);

	return Synchroniser;
}();

exports.default = Synchroniser;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Joypad = __webpack_require__(150);

var _Joypad2 = _interopRequireDefault(_Joypad);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InputDeviceBus = function () {
  function InputDeviceBus() {
    _classCallCheck(this, InputDeviceBus);

    this.j1 = new _Joypad2.default();
    this.j2 = new _Joypad2.default();
  }

  _createClass(InputDeviceBus, [{
    key: 'getJoypad',
    value: function getJoypad(index) {
      switch (index) {
        case 0:
          return this.j1;
        case 1:
          return this.j2;
        default:
          return null;
      }
    }
  }, {
    key: 'writeToRegister',
    value: function writeToRegister(offset, data) {
      switch (offset) {
        case 0x4016:
          this.j1.writeToRegister(offset, data);
          break;
        case 0x4017:
          this.j2.writeToRegister(offset, data);
          break;
      }
    }
  }, {
    key: 'readFromRegister',
    value: function readFromRegister(offset) {
      var ret = 0;
      switch (offset) {
        case 0x4016:
          ret = this.j1.readFromRegister(offset) | 0;
          break;
        case 0x4017:
          ret = this.j2.readFromRegister(offset) | 0;
          break;
      }
      return ret;
    }
  }]);

  return InputDeviceBus;
}();

exports.default = InputDeviceBus;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Joypad = function () {
  function Joypad() {
    _classCallCheck(this, Joypad);

    this._currentState = 0;
    this._strobedState = 0;
    this._strobeByte = 0;
    this._readCount = 0;
  }

  _createClass(Joypad, [{
    key: "writeToRegister",
    value: function writeToRegister(offset, data) {
      var firstBit = data & 1;
      if (this._strobeByte === 1 || firstBit === 1) {
        this._strobeByte = firstBit | 0;
        this._strobedState = this._currentState;
        this._readCount = 0;
      }
    }
  }, {
    key: "readFromRegister",
    value: function readFromRegister(offset) {

      var ret = 0;
      if (this._strobeByte === 1) {
        this._strobedState = this._currentState;
        this._readCount = 0;
        ret = this._strobedState & 1 | 0;
      } else {
        ret = this._strobedState >> this._readCount & 1 | 0;
        this._readCount++;
        ret |= 0x40;
      }
      return ret | 0;
    }
  }, {
    key: "_getDuplicateMask",
    value: function _getDuplicateMask(buttonIndex) {

      // disallow pressing up+down and left+right at the same time - always keep the button that is already pressed
      switch (buttonIndex) {
        case 4:
          // UP
          return 0xDF; // ~( 0x20 );
        case 5:
          // DOWN
          return 0xEF; // ~( 0x10 );
        case 6:
          // LEFT
          return 0x7F; // ~( 0x80 );
        case 7:
          // RIGHT
          return 0xBF; // ~( 0x40 );
      }
      return 0xFF;
    }
  }, {
    key: "pressButton",
    value: function pressButton(buttonIndex, pressed) {

      if (pressed) {
        this._currentState |= 1 << buttonIndex;
        this._currentState &= this._getDuplicateMask(buttonIndex); // this prevents up+down and left+right being pressed
      } else {
        this._currentState &= 0xFF ^ 1 << buttonIndex;
      }
    }
  }, {
    key: "saveState",
    value: function saveState() {
      return {
        _currentState: this._currentState,
        _strobedState: this._strobedState,
        _strobeByte: this._strobeByte,
        _readCount: this._readCount
      };
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this._currentState = state._currentState;
      this._strobedState = state._strobedState;
      this._readCount = state._readCount;
      this._strobeByte = state._strobeByte;
    }
  }]);

  return Joypad;
}();

exports.default = Joypad;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseMapper2 = __webpack_require__(31);

var _BaseMapper3 = _interopRequireDefault(_BaseMapper2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mapper0 = function (_BaseMapper) {
	_inherits(Mapper0, _BaseMapper);

	function Mapper0() {
		_classCallCheck(this, Mapper0);

		return _possibleConstructorReturn(this, (Mapper0.__proto__ || Object.getPrototypeOf(Mapper0)).apply(this, arguments));
	}

	_createClass(Mapper0, [{
		key: 'reset',
		value: function reset() {
			if (this.get32kPrgBankCount() >= 1) {
				this.switch32kPrgBank(0);
			} else if (this.get16kPrgBankCount() == 1) {
				this.switch16kPrgBank(0, true);
				this.switch16kPrgBank(0, false);
			}

			if (this.get1kChrBankCount() === 0) {
				this.useVRAM();
			} else {
				this.switch8kChrBank(0);
			}

			this.mainboard.ppu.changeMirroringMethod(this.mirroringMethod);
		}
	}]);

	return Mapper0;
}(_BaseMapper3.default);

exports.default = Mapper0;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseMapper2 = __webpack_require__(31);

var _BaseMapper3 = _interopRequireDefault(_BaseMapper2);

var _consts = __webpack_require__(5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mapper1 = function (_BaseMapper) {
  _inherits(Mapper1, _BaseMapper);

  function Mapper1(mainboard, mirroringMethod) {
    _classCallCheck(this, Mapper1);

    var _this = _possibleConstructorReturn(this, (Mapper1.__proto__ || Object.getPrototypeOf(Mapper1)).call(this, mainboard, mirroringMethod));

    _this.registers = new Int32Array(4); // size 4
    _this.registers[0] = 0x0C;
    _this.registers[1] = _this.registers[2] = _this.registers[3] = 0;

    // below might be needed here, not sure -prater
    // this.val = 0;
    // this.count = 0;
    // this.lastWriteMTC = -1;
    //
    // this.wRamEnabled = true;
    // this.soromlatch = false;
    //
    return _this;
  }

  _createClass(Mapper1, [{
    key: 'mapperSaveState',
    value: function mapperSaveState(state) {
      state.val = this.val;
      state.count = this.count;
      state.lastWriteMTC = this.lastWriteMTC;
      state.registers = Nes.uintArrayToString(this.registers);
      state.wRamEnabled = this.wRamEnabled;
      state.soromlatch = this.soromlatch;
    }
  }, {
    key: 'mapperLoadState',
    value: function mapperLoadState(state) {
      this.val = state.val;
      this.count = state.count;
      this.lastWriteMTC = state.lastWriteMTC;
      this.registers = Nes.stringToUintArray(state.registers);
      this.wRamEnabled = state.wRamEnabled;
      this.soromlatch = state.soromlatch;
    }
  }, {
    key: 'onEndFrame',
    value: function onEndFrame() {
      this.lastWriteMTC = -1;
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.switch16kPrgBank(0, true);
      this.switch16kPrgBank(this.get16kPrgBankCount() - 1, false);

      if (this.get8kChrBankCount() === 0) {
        this.useVRAM();
      } else {
        this.switch8kChrBank(0);
      }

      this.mainboard.ppu.changeMirroringMethod(this.mirroringMethod);
    }
  }, {
    key: 'syncChrMirrors',
    value: function syncChrMirrors() {
      if ((this.registers[0] & 0x10) > 0) {
        this.switch4kChrBank(this.registers[1] & 0x1F, true);
        this.switch4kChrBank(this.registers[2] & 0x1F, false);
      } else {
        this.switch8kChrBank((this.registers[1] & 0x1F) >> 1);
      }
    }
  }, {
    key: 'syncPrgMirrors',
    value: function syncPrgMirrors() {
      var offset = this.soromlatch ? 16 : 0; //if more than 256k ROM AND SOROM latch is on
      var reg = this.registers[3];
      if ((this.registers[0] & 0x8) > 0) {
        // 16k / 32k prg switch
        if ((this.registers[0] & 0x4) > 0) {
          // high/low prg switch
          var last = Math.min(this.get16kPrgBankCount() - 1, 15); // this.get16kPrgBankCount() - 1;
          this.switch16kPrgBank(reg + offset, true);
          this.switch16kPrgBank(last + offset, false);
        } else {
          this.switch16kPrgBank(0 + offset, true);
          this.switch16kPrgBank(reg + offset, false);
        }
      } else {
        this.switch32kPrgBank((reg >> 1) + (this.soromlatch ? 8 : 0));
      }
    }
  }, {
    key: 'write8PrgRom',
    value: function write8PrgRom(offset, data) {
      // To get Bill&Ted to work, we need to ignore calls that are less than 2 cpu calls from each other.
      // see http://wiki.nesdev.com/w/index.php/INES_Mapper_001
      var currTime = this.mainboard.synchroniser.getCpuMTC();
      var minTime = this.lastWriteMTC + _consts.COLOUR_ENCODING_MTC_PER_CPU * 2;
      var valid = this.lastWriteMTC >= 0;
      this.lastWriteMTC = currTime;
      if (valid && minTime >= currTime) {
        return;
      }

      if ((data & 0x80) > 0) {
        this.val = 0;
        this.count = 0;
        this.registers[0] |= 0x0C;
        //this.syncChrMirrors();
        //this.syncPrgMirrors();
        return;
      }

      this.val |= (data & 0x01) << this.count;
      this.count = this.count + 1;

      if (this.count >= 5) {
        this.mainboard.synchroniser.synchronise();
        var top3Bits = offset & 0xE000;
        switch (top3Bits) {
          case 0x8000:
            // IS_INT_BETWEEN( offset, 0x8000, 0xA000 )
            this.registers[0] = this.val & 0x1F;

            // bit 0 - Horizontal / vertical mirror switch
            var mirroringMethod;
            switch (this.val & 0x3) {
              case 0:
                mirroringMethod = PPU_MIRRORING_SINGLESCREEN_NT0;
                break;
              case 1:
                mirroringMethod = PPU_MIRRORING_SINGLESCREEN_NT1;
                break;
              case 2:
                mirroringMethod = _consts.PPU_MIRRORING_VERTICAL;
                break;
              case 3:
                mirroringMethod = PPU_MIRRORING_HORIZONTAL;
                break;
            }

            this.mainboard.ppu.changeMirroringMethod(mirroringMethod);
            break;
          case 0xA000:
            this.registers[1] = this.val & 0x1F;
            //SOROM boards use the high bit of CHR to switch between 1st and last
            //256k of the PRG ROM
            if (this.get16kPrgBankCount() > 16) {
              this.soromlatch = (this.val & 0x10) > 0;
              this.syncPrgMirrors();
            }
            break;
          case 0xC000:
            this.registers[2] = this.val & 0x1F;
            if (this.get16kPrgBankCount() > 16) {
              this.registers[2] &= 0xF;
            }
            break;
          case 0xE000:
            this.registers[3] = this.val & 0xF;
            this.wRamEnabled = (this.val & 0x10) === 0;
            break;
        }

        this.syncChrMirrors();
        this.syncPrgMirrors();

        this.count = 0;
        this.val = 0;
      }
    }
  }]);

  return Mapper1;
}(_BaseMapper3.default);

exports.default = Mapper1;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseMapper2 = __webpack_require__(31);

var _BaseMapper3 = _interopRequireDefault(_BaseMapper2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mapper2 = function (_BaseMapper) {
	_inherits(Mapper2, _BaseMapper);

	function Mapper2() {
		_classCallCheck(this, Mapper2);

		return _possibleConstructorReturn(this, (Mapper2.__proto__ || Object.getPrototypeOf(Mapper2)).apply(this, arguments));
	}

	_createClass(Mapper2, [{
		key: 'reset',
		value: function reset() {
			this.switch16kPrgBank(0, true);
			this.switch16kPrgBank(this.get16kPrgBankCount() - 1, false);
			this.useVRAM();
			this.mainboard.ppu.changeMirroringMethod(this.mirroringMethod);
		}
	}, {
		key: 'write8PrgRom',
		value: function write8PrgRom(offset, data) {
			//	this.mainboard.synchroniser.synchronise();
			this.switch16kPrgBank(data, true);
		}
	}]);

	return Mapper2;
}(_BaseMapper3.default);

exports.default = Mapper2;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseMapper2 = __webpack_require__(31);

var _BaseMapper3 = _interopRequireDefault(_BaseMapper2);

var _consts = __webpack_require__(5);

var _serialisation = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mapper4 = function (_BaseMapper) {
	_inherits(Mapper4, _BaseMapper);

	function Mapper4() {
		_classCallCheck(this, Mapper4);

		return _possibleConstructorReturn(this, (Mapper4.__proto__ || Object.getPrototypeOf(Mapper4)).apply(this, arguments));
	}

	_createClass(Mapper4, [{
		key: 'init',
		value: function init() {
			this.bankSwapByte = 0;
			this.prgRamDisableWrite = false;
			this.chipEnable = this.interruptsEnabled = true;
			this.irqCounter = this.irqLatch = 0;
			this.mReloadFlag = false;
			this._isMMC6 = false;
			this._mmc6PrgRamWriteByte = 0;

			this.lastA12Raise = 0;
			this.mSpriteAddress = this.mScreenAddress = false;
			this.mRenderingEnabled = false;

			this.banks = new Int32Array(8);
			this.banks[0] = 0;
			this.banks[1] = 2;
			this.banks[2] = 4;
			this.banks[3] = 5;
			this.banks[4] = 6;
			this.banks[5] = 7;

			this.banks[6] = 0;
			this.banks[7] = 1;
		}
	}, {
		key: '_eventIrq',
		value: function _eventIrq() {
			// don't do anything - call to synchronise() will trigger the irq
			this.mainboard.synchroniser.changeEventTime(this._irqEventId, -1);
		}
	}, {
		key: 'mapperSaveState',
		value: function mapperSaveState(state) {
			state.bankSwapByte = this.bankSwapByte;
			state.prgRamDisableWrite = this.prgRamDisableWrite;
			state.chipEnable = this.chipEnable;
			state.interruptsEnabled = this.interruptsEnabled;
			state.irqCounter = this.irqCounter;
			state.irqLatch = this.irqLatch;
			state.mReloadFlag = this.mReloadFlag;
			state._isMMC6 = this._isMMC6;
			state._mmc6PrgRamWriteByte = this._mmc6PrgRamWriteByte;
			state.lastA12Raise = this.lastA12Raise;
			state.mSpriteAddress = this.mSpriteAddress;
			state.mScreenAddress = this.mScreenAddress;
			state.mRenderingEnabled = this.mRenderingEnabled;
			state.banks = (0, _serialisation.uintArrayToString)(this.banks);
			state._interruptInProgress = this._interruptInProgress;
		}
	}, {
		key: 'mapperLoadState',
		value: function mapperLoadState(state) {

			this.bankSwapByte = state.bankSwapByte;
			this.prgRamDisableWrite = state.prgRamDisableWrite;
			this.chipEnable = state.chipEnable;
			this.interruptsEnabled = state.interruptsEnabled;
			this.irqCounter = state.irqCounter;
			this.irqLatch = state.irqLatch;
			this.mReloadFlag = state.mReloadFlag;
			this._isMMC6 = state._isMMC6;
			this._mmc6PrgRamWriteByte = state._mmc6PrgRamWriteByte;
			this.lastA12Raise = state.lastA12Raise;
			this.mSpriteAddress = state.mSpriteAddress;
			this.mScreenAddress = state.mScreenAddress;
			this.mRenderingEnabled = state.mRenderingEnabled;
			this.banks = (0, _serialisation.stringToUintArray)(state.banks);
			this._interruptInProgress = state._interruptInProgress;
		}
	}, {
		key: 'syncBanks',
		value: function syncBanks(doPrg, doChr) {

			if (doPrg) {
				this.switch8kPrgBank(this.banks[7], 1);
				this.switch8kPrgBank(this.get8kPrgBankCount() - 1, 3);

				if ((this.bankSwapByte & 0x40) > 0) {
					this.switch8kPrgBank(this.get8kPrgBankCount() - 2, 0);
					this.switch8kPrgBank(this.banks[6], 2);
				} else {
					this.switch8kPrgBank(this.banks[6], 0);
					this.switch8kPrgBank(this.get8kPrgBankCount() - 2, 2);
				}
			}
			/*
   		   0: Select 2 KB CHR bank at PPU $0000-$07FF (or $1000-$17FF);
   		   1: Select 2 KB CHR bank at PPU $0800-$0FFF (or $1800-$1FFF);
   		   2: Select 1 KB CHR bank at PPU $1000-$13FF (or $0000-$03FF);
   		   3: Select 1 KB CHR bank at PPU $1400-$17FF (or $0400-$07FF);
   		   4: Select 1 KB CHR bank at PPU $1800-$1BFF (or $0800-$0BFF);
   		   5: Select 1 KB CHR bank at PPU $1C00-$1FFF (or $0C00-$0FFF);
   */
			if (doChr) {
				this.mainboard.synchroniser.synchronise();

				var bank0 = this.banks[0] & 0xFE;
				var bank1 = this.banks[1] & 0xFE;
				if ((this.bankSwapByte & 0x80) > 0) {
					this.switch1kChrBank(this.banks[2], 0);
					this.switch1kChrBank(this.banks[3], 1);
					this.switch1kChrBank(this.banks[4], 2);
					this.switch1kChrBank(this.banks[5], 3);

					this.switch1kChrBank(bank0, 4);
					this.switch1kChrBank(bank0 + 1, 5);
					this.switch1kChrBank(bank1, 6);
					this.switch1kChrBank(bank1 + 1, 7);
				} else {
					this.switch1kChrBank(bank0, 0);
					this.switch1kChrBank(bank0 + 1, 1);
					this.switch1kChrBank(bank1, 2);
					this.switch1kChrBank(bank1 + 1, 3);

					this.switch1kChrBank(this.banks[2], 4);
					this.switch1kChrBank(this.banks[3], 5);
					this.switch1kChrBank(this.banks[4], 6);
					this.switch1kChrBank(this.banks[5], 7);
				}
			}
		}
	}, {
		key: '_lookInDbForMMC6',
		value: function _lookInDbForMMC6() {

			if (this.mainboard.cart && this.mainboard.cart._dbData) {
				var db = this.mainboard.cart._dbData;
				if (db['cartridge'] && db['cartridge'][0]['board'] && db['cartridge'][0]['board'][0]) {
					var board = db['cartridge'][0]['board'][0];
					if (board['chip'] && board['chip'][0]) {
						var chip = board['chip'][0];
						if (chip['$'] && chip['$']['type']) {
							return chip['$']['type'] === "MMC6B";
						}
					}
				}
			}
			return false;
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.prgRamDisableWrite = false;
			this.chipEnable = this.interruptsEnabled = true;
			this._interruptInProgress = false;

			this._A12LowerLimit = _consts.COLOUR_ENCODING_VBLANK_SCANLINES * _consts.MASTER_CYCLES_PER_SCANLINE;
			this._A12UpperLimit = (_consts.COLOUR_ENCODING_FRAME_SCANLINES - 1) * _consts.MASTER_CYCLES_PER_SCANLINE;

			this.lastA12Raise = 0;

			this.mSpriteAddress = this.mScreenAddress = false;
			this.mRenderingEnabled = false;
			this.irqCounter = 0xFF;
			this.irqLatch = 0xFF;
			this.mReloadFlag = false;
			this.lastA12Raise = 0;
			this._isMMC6 = this._lookInDbForMMC6();
			this._mmc6PrgRamWriteByte = 0;
			this.bankSwapByte = 0;
			this.banks[0] = 0;
			this.banks[1] = 2;
			this.banks[2] = 4;
			this.banks[3] = 5;
			this.banks[4] = 6;
			this.banks[5] = 7;

			this.banks[6] = 0;
			this.banks[7] = 1;

			if (this.get1kChrBankCount() === 0) {
				this.useVRAM(8);
			}

			var that = this;
			// TODO: Need to remove this event on mapper unload
			this._irqEventId = this.mainboard.synchroniser.addEvent('mmc3 irq', -1, function () {
				that._eventIrq();
			});

			this.syncBanks(true, true);
			this.mainboard.ppu.changeMirroringMethod(this.mirroringMethod);
		}
	}, {
		key: 'write8PrgRom',
		value: function write8PrgRom(offset, data) {

			var top3Bits = offset & 0xE000;
			switch (top3Bits) {
				case 0x8000:
					if ((offset & 0x1) === 0) {
						// even
						if (this.bankSwapByte !== data & 0xFF) {
							this.bankSwapByte = data & 0xFF;

							if (this._isMMC6) {
								var prgRamEnabled = (this.bankSwapByte & 0x20) > 0;
								if (!prgRamEnabled) {
									this._mmc6PrgRamWriteByte = 0;
								}
							}

							this.syncBanks(true, true);
						}
					} else {
						// odd
						var swapByte = this.bankSwapByte & 0x7;
						if (this.banks[swapByte] !== data & 0xFF) {
							this.banks[swapByte] = data & 0xFF;
							this.syncBanks(swapByte >= 6, swapByte <= 5);
						}
					}
					break;
				case 0xA000:
					if ((offset & 0x1) === 0) {
						// even
						var mirroringMethod = (data & 0x1) > 0 ? _consts.PPU_MIRRORING_HORIZONTAL : _consts.PPU_MIRRORING_VERTICAL;
						if (mirroringMethod !== this.mainboard.ppu.getMirroringMethod()) {
							this.mainboard.synchroniser.synchronise();
							this.mainboard.ppu.changeMirroringMethod(mirroringMethod);
						}
					} else {
						// odd
						if (this._isMMC6) {
							var prgRamEnabled = (this.bankSwapByte & 0x20) > 0;
							if (prgRamEnabled) {
								this._mmc6PrgRamWriteByte = data;
							}
						} else {
							this.prgRamDisableWrite = (data & 0x40) > 0;
							this.chipEnable = (data & 0x80) > 0;
						}
					}
					break;
				case 0xC000:
					if ((offset & 0x1) === 0) {
						// even
						if (this.irqLatch !== data) {
							this.mainboard.synchroniser.synchronise();
						}
						this.irqLatch = data;
					} else {
						// odd
						if (!this.mReloadFlag) {
							this.mainboard.synchroniser.synchronise();
						}
						this.mReloadFlag = true;
					}
					this.updateIRQTime(this.mainboard.synchroniser.getCpuMTC(), true);
					break;
				case 0xE000:
					if ((offset & 0x1) === 0) {
						// even - "Writing any value to this register will disable MMC3 interrupts AND acknowledge any pending interrupts."
						this.interruptsEnabled = false;
						if (this._interruptInProgress) {
							this.mainboard.cpu.holdIrqLineLow(false);
							this._interruptInProgress = false;
						}
						//				Log::Write( LOG_MAPPER, ( boost::format( "Interrupts disabled on mapper" ) ).str() );
					} else {
						// odd
						if (!this.interruptsEnabled) {
							this.mainboard.synchroniser.synchronise();
						}
						this.interruptsEnabled = true;
						//				Log::Write( LOG_MAPPER, ( boost::format( "Interrupts enabled on mapper" ) ).str() );
					}
					this.updateIRQTime(this.mainboard.synchroniser.getCpuMTC(), true);
					break;
			}
		}
	}, {
		key: 'decrementIrqCounter',
		value: function decrementIrqCounter(tickCount) {

			//var pos = this.mainboard.ppu.ticksToScreenCoordinates( tickCount );
			//var cpupos = this.mainboard.ppu.ticksToScreenCoordinates( this.mainboard.synchroniser.getCpuMTC() );

			this.lastA12Raise = tickCount;
			var doIrq = false;

			//console.log( "[" + this.mainboard.ppu.frameCounter + "] Doing decrement at " + pos.x + "x" + pos.y + " cpu: " + cpupos.x + "x" + cpupos.y + " : " + this.irqCounter );

			if (this.mReloadFlag) {
				doIrq = this.irqLatch === 0; // MMC3 revA behaviour
				this.irqCounter = this.irqLatch;
				this.mReloadFlag = false;
			} else if (this.irqCounter === 0) {
				this.irqCounter = this.irqLatch;
				if (this._isMMC6) {
					doIrq = false;
				} else {
					if (this.irqCounter === 0) doIrq = true;
				}
			} else {
				if (this.irqCounter > 0) this.irqCounter--;
				doIrq = this.irqCounter === 0;
			}

			if (doIrq && this.interruptsEnabled && !this._interruptInProgress) {
				//	if ( this.mainboard.ppu.frameCounter === 43 && pos.x === 260 && pos.y === 0 ) {
				//				debugger;
				//		}
				//console.log( "[" + this.mainboard.ppu.frameCounter + "]" + pos.x + "x" + pos.y + " IRQ cpu: " + cpupos.x + "x" + cpupos.y );
				this._interruptInProgress = true;
				this.mainboard.cpu.holdIrqLineLow(true);
			}
		}
	}, {
		key: 'ppuA12Latch',
		value: function ppuA12Latch() {
			this.mainboard.synchroniser.synchronise();
			var cpuMtc = this.mainboard.synchroniser.getCpuMTC();
			if (this.lastA12Raise > 0 && cpuMtc - this.lastA12Raise <= 16 * _consts.MASTER_CYCLES_PER_PPU) {
				return; // Required for Bill & Ted to work: Ignore A12 raises that are too close together
			}
			this.decrementIrqCounter(cpuMtc);
			this.updateIRQTime(cpuMtc, true);
		}
	}, {
		key: 'calculateNextA12Raise',
		value: function calculateNextA12Raise(cpuMTC) {

			// TODO: refactor this - could be more efficient
			var pixelEvent = -1;
			var firstScanline = 0;
			if (this.mRenderingEnabled) {
				if (this.mSpriteAddress && !this.mScreenAddress) {
					pixelEvent = 265; // 260
					firstScanline = 0;
				}
				// else if ( this.mSpriteAddress && this.mScreenAddress )
				// {
				// pixelEvent = 340;//324;
				// firstScanline = -1;
				// }
				else //if ( this.mScreenAddress && !this.mSpriteAddress )
					{
						pixelEvent = 9; // 324; // 9;
						firstScanline = 0; // -1;
					}
			}

			if (cpuMTC >= this._A12UpperLimit || pixelEvent < 0) {
				return -1;
			}

			var modmtc = cpuMTC % _consts.MASTER_CYCLES_PER_SCANLINE; // ticks from the start of the current scanline
			var scanlineEvent = _consts.MASTER_CYCLES_PER_PPU * pixelEvent; // ticks from the start of the scanline when IRQ is decremented

			var startMtc = cpuMTC - modmtc + scanlineEvent; // ticks till next irq decrement event

			if (startMtc <= cpuMTC) startMtc += _consts.MASTER_CYCLES_PER_SCANLINE; // if we have already passed the irq event, move onto next scanline
			if (this._A12UpperLimit <= startMtc) return -1;

			if (startMtc < this._A12LowerLimit) startMtc = this._A12LowerLimit + scanlineEvent;

			return startMtc;
		}
	}, {
		key: 'updateIRQTime',
		value: function updateIRQTime(cpuTime, doSync) {

			if (doSync) {
				this.mainboard.synchroniser.synchronise();
			}

			// tickLimit is the start of the rendering frame - only started being clocked when rendering
			var newEvent = -1;
			var nextRaise = 0;
			var scanlines = 0;
			if (this.interruptsEnabled) {
				nextRaise = this.calculateNextA12Raise(cpuTime);
				if (nextRaise === -1) {
					newEvent = -1;
				} else {
					scanlines = this.mReloadFlag ? 0 : Math.max(this.irqCounter - 1, 0);
					newEvent = nextRaise + scanlines * _consts.MASTER_CYCLES_PER_SCANLINE;
					if (newEvent > this._A12UpperLimit) {
						newEvent = -1;
					} else {
						//var pos = this.mainboard.ppu.ticksToScreenCoordinates( newEvent );
						//var cpupos = this.mainboard.ppu.ticksToScreenCoordinates( this.mainboard.synchroniser.getCpuMTC() );
						// if ( this.mainboard.ppu.frameCounter === 43 && pos.x === 260 && pos.y === 0 ) {
						// debugger;
						// }
						//console.log( "Predicting next IRQ at " + pos.x + "x" + pos.y + " cpu: " + cpupos.x + "x" + cpupos.y );
					}
				}
			}
			this.mainboard.synchroniser.changeEventTime(this._irqEventId, newEvent);
		}
	}, {
		key: 'spriteScreenEnabledUpdate',
		value: function spriteScreenEnabledUpdate(spriteAddress, screenAddress) {
			this.mSpriteAddress = spriteAddress;
			this.mScreenAddress = screenAddress;
			this.updateIRQTime(this.mainboard.synchroniser.getCpuMTC(), true);
		}
	}, {
		key: 'renderingEnabledChanged',
		value: function renderingEnabledChanged(enabled) {
			this.mRenderingEnabled = enabled;
			this.updateIRQTime(this.mainboard.synchroniser.getCpuMTC(), true);
		}
	}, {
		key: 'synchronise',
		value: function synchronise(startTicks, endTicks) {
			/*
   The heart of the MMC3. The PPU will cause A12 to rise when it fetches CHR from the right pattern table ($1xxx).
   In "normal" conditions (BG uses $0xxx, all sprites use $1xxx), this will occur 8 times per scanline (once for each sprite).
   However the BG could also be the culprit (if BG uses $1xxx and all sprites use $0xxx -- ?as seen in Armadillo?), in which case A12 will rise 34 times.
   These 42 times per scanline are key times which I call "rise points":
   BG rise points: 4, 12, 20, ... , 244, 252
   Sp rise points: 260, 268, ..., 308, 316
   BG rise points: 324, 332
   If sprites are set to $1000-1FFF and the background is set to $0000-0FFF, then A12 will change from 0 to 1 at cycle 260 of each scanline, then change from 1 to 0 at cycle 320 of each scanline.
   If sprites are set to $0000-0FFF and the background is set to $1000-1FFF, then A12 will change from 1 to 0 at cycle 256 of each scanline, then change from 0 to 1 at cycle 324 of each scanline.
   */
			// tickLimit is the start of the rendering frame - only started being clocked when rendering
			var startMtc = this.calculateNextA12Raise(startTicks + 1);
			if (startMtc >= 0) {
				for (var mtc = startMtc; mtc <= Math.min(this._A12UpperLimit, endTicks); mtc += _consts.MASTER_CYCLES_PER_SCANLINE) {
					this.decrementIrqCounter(mtc);
				}
			}
			this.updateIRQTime(endTicks, false);
		}
	}, {
		key: 'onEndFrame',
		value: function onEndFrame() {
			this.lastA12Raise = 0;
		}
	}, {
		key: 'write8SRam',
		value: function write8SRam(offset, data) {

			if (this._isMMC6) {
				if (offset >= 0x7000) {
					var mirroredOffset = offset & 0x3FF;
					var lowHalf = (mirroredOffset & 0x200) === 0;
					var offsetMask = lowHalf ? 0x30 : 0xC0; // writing requires both the write and read bits set
					if ((this._mmc6PrgRamWriteByte & offsetMask) === offsetMask) {
						_BaseMapper3.default.prototype.write8SRam.call(this, mirroredOffset, data);
					}
				}
			} else {
				if (this.chipEnable && !this.prgRamDisableWrite) {
					_BaseMapper3.default.prototype.write8SRam.call(this, offset, data);
				}
			}
		}
	}, {
		key: 'read8SRam',
		value: function read8SRam(offset) {

			if (this._isMMC6 && offset >= 0x7000) {
				if (offset >= 0x7000) {
					var mirroredOffset = offset & 0x3FF;
					var lowHalf = (mirroredOffset & 0x200) === 0;
					var offsetMask = lowHalf ? 0x20 : 0x80;
					if ((this._mmc6PrgRamWriteByte & offsetMask) > 0) {
						return _BaseMapper3.default.prototype.read8SRam.call(this, mirroredOffset);
					}
				}
			} else {
				if (this.chipEnable) {
					return _BaseMapper3.default.prototype.read8SRam.call(this, offset);
				}
			}
			return 0;
		}
	}]);

	return Mapper4;
}(_BaseMapper3.default);

exports.default = Mapper4;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseMapper2 = __webpack_require__(31);

var _BaseMapper3 = _interopRequireDefault(_BaseMapper2);

var _serialisation = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mapper5 = function (_BaseMapper) {
	_inherits(Mapper5, _BaseMapper);

	function Mapper5() {
		_classCallCheck(this, Mapper5);

		return _possibleConstructorReturn(this, (Mapper5.__proto__ || Object.getPrototypeOf(Mapper5)).apply(this, arguments));
	}

	_createClass(Mapper5, [{
		key: 'init',
		value: function init() {
			this.mRenderingEnabled = false;

			this._chrMode = 0;
			this._prgMode = 0;
			this._exRamMode = 0;
			this._prgRegisters = new Int32Array(4);
			this._nameTableFill = new Int32Array(1024);
			this._internalExRam = new Int32Array(1024);
			this._prgRam = new Int32Array(0x10000); // 64kb
			this._prgRamPage = 0;
			this._bigSpritesEnabled = false;

			this._writeProtectA = false;
			this._writeProtectB = false;
			this._currentScanline = 0;
			this._irqEnabled = false;
			this._irqActive = false;
			this._irqScanlineTrigger = 0;
			this._triggerMtc = -1;
			this._multiplier1 = 0;
			this._multiplier2 = 0;

			this._prgRamMap = new Int32Array(4); // 8k ram banks that map to 0x8000 -> 0x10000
			this._prgRamIsActive = new Int32Array(4);
			this._nameTableMap = new Int32Array(4);

			this._chrRegsA = new Int32Array(8);
			this._chrRegsB = new Int32Array(4);
			this._chrUseBMap = false;
			this._chrMapA = new Int32Array(8);
			this._chrMapB = new Int32Array(4);
			this._chrHighBits = 0;
		}
	}, {
		key: 'mapperSaveState',
		value: function mapperSaveState(state) {

			state.mRenderingEnabled = this.mRenderingEnabled;
			state._chrMode = this._chrMode;
			state._prgMode = this._prgMode;
			state._exRamMode = this._exRamMode;

			state._prgRegisters = (0, _serialisation.uintArrayToString)(this._prgRegisters);
			state._nameTableFill = (0, _serialisation.uintArrayToString)(this._nameTableFill);
			state._internalExRam = (0, _serialisation.uintArrayToString)(this._internalExRam);
			state._prgRam = (0, _serialisation.uintArrayToString)(this._prgRam);

			state._prgRamPage = this._prgRamPage;
			state._bigSpritesEnabled = this._bigSpritesEnabled;

			state._writeProtectA = this._writeProtectA;
			state._writeProtectB = this._writeProtectB;
			state._currentScanline = this._currentScanline;
			state._irqEnabled = this._irqEnabled;
			state._irqActive = this._irqActive;
			state._irqScanlineTrigger = this._irqScanlineTrigger;
			state._triggerMtc = this._triggerMtc;
			state._multiplier1 = this._multiplier1;
			state._multiplier2 = this._multiplier2;

			state._prgRamMap = (0, _serialisation.uintArrayToString)(this._prgRamMap);
			state._prgRamIsActive = (0, _serialisation.uintArrayToString)(this._prgRamIsActive);
			state._nameTableMap = (0, _serialisation.uintArrayToString)(this._nameTableMap);

			state._chrRegsA = (0, _serialisation.uintArrayToString)(this._chrRegsA);
			state._chrRegsB = (0, _serialisation.uintArrayToString)(this._chrRegsB);

			state._chrUseBMap = this._chrUseBMap;
			state._chrMapA = (0, _serialisation.uintArrayToString)(this._chrMapA);
			state._chrMapB = (0, _serialisation.uintArrayToString)(this._chrMapB);
			state._chrHighBits = this._chrHighBits;
		}
	}, {
		key: 'mapperLoadState',
		value: function mapperLoadState(state) {

			this.mRenderingEnabled = state.mRenderingEnabled;
			this._chrMode = state._chrMode;
			this._prgMode = state._prgMode;
			this._exRamMode = state._exRamMode;

			this._prgRegisters = (0, _serialisation.stringToUintArray)(state._prgRegisters);
			this._nameTableFill = (0, _serialisation.stringToUintArray)(state._nameTableFill);
			this._internalExRam = (0, _serialisation.stringToUintArray)(state._internalExRam);
			this._prgRam = (0, _serialisation.stringToUintArray)(state._prgRam);

			this._prgRamPage = state._prgRamPage;
			this._bigSpritesEnabled = state._bigSpritesEnabled;

			this._writeProtectA = state._writeProtectA;
			this._writeProtectB = state._writeProtectB;
			this._currentScanline = state._currentScanline;
			this._irqEnabled = state._irqEnabled;
			this._irqActive = state._irqActive;
			this._irqScanlineTrigger = state._irqScanlineTrigger;
			this._triggerMtc = state._triggerMtc;
			this._multiplier1 = state._multiplier1;
			this._multiplier2 = state._multiplier2;

			this._prgRamMap = (0, _serialisation.stringToUintArray)(state._prgRamMap);
			this._prgRamIsActive = (0, _serialisation.stringToUintArray)(state._prgRamIsActive);
			this._nameTableMap = (0, _serialisation.stringToUintArray)(state._nameTableMap);

			this._chrRegsA = (0, _serialisation.stringToUintArray)(state._chrRegsA);
			this._chrRegsB = (0, _serialisation.stringToUintArray)(state._chrRegsB);

			this._chrUseBMap = state._chrUseBMap;
			this._chrMapA = (0, _serialisation.stringToUintArray)(state._chrMapA);
			this._chrMapB = (0, _serialisation.stringToUintArray)(state._chrMapB);
			this._chrHighBits = state._chrHighBits;
		}
	}, {
		key: 'reset',
		value: function reset() {

			this.mRenderingEnabled = false;
			this._chrMode = 0;
			this._prgMode = 3;
			this._exRamMode = 0;
			this._chrHighBits = 0;
			this._prgRamPage = 0;
			this._writeProtectA = false;
			this._writeProtectB = false;
			this._irqEnabled = false;
			this._irqScanlineTrigger = 0;
			this._irqActive = false;
			this._multiplier1 = 0;
			this._multiplier2 = 0;
			this._currentScanline = 0;
			this._triggerMtc = -1;
			this._chrUseBMap = false;
			this._bigSpritesEnabled = false;

			for (var i = 0; i < this._prgRamMap.length; ++i) {
				this._prgRamMap[i] = 0;
				this._prgRamIsActive[i] = 0;
			}
			for (var i = 0; i < this._nameTableMap.length; ++i) {
				this._nameTableMap[i] = 0;
			}

			for (var i = 0; i < this._prgRegisters.length; ++i) {
				this._prgRegisters[i] = this.get8kPrgBankCount() - 4 + i;
			}
			for (var i = 0; i < this._chrRegsA.length; ++i) {
				this._chrRegsA[i] = 0;
			}
			for (var i = 0; i < this._chrRegsB.length; ++i) {
				this._chrRegsB[i] = 0;
			}
			for (var i = 0; i < this._chrMapA.length; ++i) {
				this._chrMapA[i] = 0;
			}
			for (var i = 0; i < this._chrMapB.length; ++i) {
				this._chrMapB[i] = 0;
			}
			this._syncPrg();
			this._syncChr();
			this.switch8kChrBank(0);

			this.mainboard.ppu.changeMirroringMethod(this.mirroringMethod);

			// TODO: Need to remove this event on mapper unload
			var that = this;
			this._irqEventId = this.mainboard.synchroniser.addEvent('mmc5 irq', -1, function (eventTime) {
				that._irqEvent(eventTime);
			});
		}
	}, {
		key: 'renderingEnabledChanged',
		value: function renderingEnabledChanged(enabled) {
			this.mRenderingEnabled = enabled;
			this._predictIrq(this.mainboard.synchroniser.getCpuMTC());
		}
	}, {
		key: '_irqEvent',
		value: function _irqEvent(eventTime) {

			if (this.mRenderingEnabled && !this._irqActive && this._irqEnabled && this._irqScanlineTrigger > 0) {
				this._irqActive = true;
				this.mainboard.cpu.holdIrqLineLow(true);
			}
			this._predictIrq(eventTime);
		}
	}, {
		key: '_syncPrg',
		value: function _syncPrg() {

			this.mainboard.synchroniser.synchronise();

			for (var i = 0; i < this._prgRamMap.length; ++i) {
				this._prgRamMap[i] = 0;
				this._prgRamIsActive[i] = 0;
			}

			switch (this._prgMode) {
				default:
				case 0:
					// 32k bank at 0x8000
					this.switch32kPrgBank((this._prgRegisters[3] & 0x7f) >> 2);
					break;
				case 1:
					// 16k bank at 0x8000
					if ((this._prgRegisters[1] & 0x80) === 0) {
						this._prgRamIsActive[0] = 1;
						this._prgRamIsActive[1] = 1;
						this._prgRamMap[0] = ((this._prgRegisters[1] & 0xE) >> 1) * 2;
						this._prgRamMap[1] = this._prgRamMap[0] + 1;
					} else {
						this.switch16kPrgBank((this._prgRegisters[1] & 0x7f) >> 1, true);
					}
					// 16k bank at 0xC000
					this.switch16kPrgBank((this._prgRegisters[3] & 0x7f) >> 1, false);
					break;
				case 2:
					// 8k bank at 0xE000
					this.switch8kPrgBank(this._prgRegisters[3] & 0x7f, 3);

					// 8k bank at 0xC000
					if ((this._prgRegisters[2] & 0x80) === 0) {
						this._prgRamIsActive[2] = 1;
						this._prgRamMap[2] = this._prgRegisters[2] & 0x7;
					} else {
						this.switch8kPrgBank(this._prgRegisters[2] & 0x7f, 2);
					}

					// 16k bank at 0x8000
					if ((this._prgRegisters[1] & 0x80) === 0) {
						this._prgRamIsActive[0] = 1;
						this._prgRamIsActive[1] = 1;
						this._prgRamMap[0] = ((this._prgRegisters[1] & 0xE) >> 1) * 2;
						this._prgRamMap[1] = this._prgRamMap[0] + 1;
					} else {
						this.switch16kPrgBank((this._prgRegisters[1] & 0x7f) >> 1, true);
					}
					break;
				case 3:
					// 8k bank at 0xE000
					this.switch8kPrgBank(this._prgRegisters[3] & 0x7f, 3);
					// 8k bank at 0xC000
					if ((this._prgRegisters[2] & 0x80) === 0) {
						this._prgRamIsActive[2] = 1;
						this._prgRamMap[2] = this._prgRegisters[2] & 0x7;
					} else {
						this.switch8kPrgBank(this._prgRegisters[2] & 0x7f, 2);
					}
					// 8k bank at 0xA000
					if ((this._prgRegisters[1] & 0x80) === 0) {
						this._prgRamIsActive[1] = 1;
						this._prgRamMap[1] = this._prgRegisters[1] & 0x7;
					} else {
						this.switch8kPrgBank(this._prgRegisters[1] & 0x7f, 1);
					}
					// 8k bank at 0x8000
					if ((this._prgRegisters[0] & 0x80) === 0) {
						this._prgRamIsActive[0] = 1;
						this._prgRamMap[0] = this._prgRegisters[0] & 0x7;
					} else {
						this.switch8kPrgBank(this._prgRegisters[0] & 0x7f, 0);
					}
					break;
			}
		}
	}, {
		key: '_chrBank',
		value: function _chrBank(chrMap, banksize, bankpos, banknum) {

			for (var i = 0; i < banksize; ++i) {
				chrMap[i + bankpos] = (banknum + i) % this.get1kChrBankCount();
			}
		}
	}, {
		key: '_syncChr',
		value: function _syncChr() {

			this.mainboard.synchroniser.synchronise();

			switch (this._chrMode) {
				default:
				case 0:
					this._chrBank(this._chrMapA, 8, 0, this._chrRegsA[7]);
					this._chrBank(this._chrMapB, 4, 0, this._chrRegsB[3]);
					break;
				case 1:
					this._chrBank(this._chrMapA, 4, 0, this._chrRegsA[3]);
					this._chrBank(this._chrMapA, 4, 4, this._chrRegsA[7]);
					this._chrBank(this._chrMapB, 4, 0, this._chrRegsB[3]);
					break;
				case 2:
					this._chrBank(this._chrMapA, 2, 0, this._chrRegsA[1]);
					this._chrBank(this._chrMapA, 2, 2, this._chrRegsA[3]);
					this._chrBank(this._chrMapA, 2, 4, this._chrRegsA[5]);
					this._chrBank(this._chrMapA, 2, 6, this._chrRegsA[7]);
					this._chrBank(this._chrMapB, 2, 0, this._chrRegsB[1]);
					this._chrBank(this._chrMapB, 2, 2, this._chrRegsB[3]);
					break;
				case 3:
					for (var i = 0; i < 8; ++i) {
						this._chrBank(this._chrMapA, 1, i, this._chrRegsA[i]);
					}
					for (var i = 0; i < 4; ++i) {
						this._chrBank(this._chrMapB, 1, i, this._chrRegsB[i]);
					}
					break;
			}
		}
	}, {
		key: 'write8PrgRom',
		value: function write8PrgRom(offset, data) {
			if (this._writeProtectA && this._writeProtectB) {
				var top3Bits = (offset & 0xE000) >> 13;
				if (this._prgRamIsActive[top3Bits] === 1) {
					this._prgRam[this._prgRamMap[top3Bits] << 13 | offset & 0x1FFF] = data;
				} else {
					_BaseMapper3.default.prototype.write8PrgRom.call(this, offset, data);
				}
			}
		}
	}, {
		key: 'read8PrgRom',
		value: function read8PrgRom(offset) {
			var top3Bits = (offset & 0xE000) >> 13;
			if (this._prgRamIsActive[top3Bits] === 1) {
				return this._prgRam[this._prgRamMap[top3Bits] << 13 | offset & 0x1FFF]; // this._prgRamMap[0] * 0x2000 + ( offset % 0x2000 ) ];
			}
			return _BaseMapper3.default.prototype.read8PrgRom.call(this, offset);
		}
	}, {
		key: 'onEndFrame',
		value: function onEndFrame() {
			this._predictIrq(0);
		}
	}, {
		key: '_predictIrq',
		value: function _predictIrq(cpuMTC) {

			// TODO: Check if MMC5 counter includes pre-render scanline
			if (this.mRenderingEnabled && !this._irqActive && this._irqEnabled && this._irqScanlineTrigger > 0) {
				var targetScanline = this._irqScanlineTrigger;
				var triggerMtc = this.mainboard.ppu.screenCoordinatesToTicks(0, targetScanline);
				if (triggerMtc > cpuMTC) {
					if (this._triggerMtc !== triggerMtc) {
						//var pos = this.mainboard.ppu.ticksToScreenCoordinates( triggerMtc );
						this.mainboard.synchroniser.changeEventTime(this._irqEventId, triggerMtc);
						this._triggerMtc = triggerMtc;
					}
				}
				return;
			}

			if (this._triggerMtc !== -1) {
				this._triggerMtc = -1;
				this.mainboard.synchroniser.changeEventTime(this._irqEventId, -1);
			}
		}
	}, {
		key: 'write8EXRam',
		value: function write8EXRam(offset, data) {
			// 0x4018 -> 0x6000
			switch (offset) {
				case 0x5100:
					// PRG mode
					this._prgMode = data & 0x3;
					this._syncPrg();
					break;
				case 0x5101:
					// CHR mode
					this._chrMode = data & 0x3;
					this._syncChr();
					break;
				case 0x5102:
					// PRG RAM write protect 1
					this._writeProtectA = (data & 0x3) === 0x2;
					break;
				case 0x5103:
					// PRG RAM write protect 2
					this._writeProtectB = (data & 0x3) === 0x1;
					break;
				case 0x5104:
					// extended RAM mode
					this.mainboard.synchroniser.synchronise();
					this._exRamMode = data & 0x3;
					break;
				case 0x5105:
					// nametable mode
					this.mainboard.synchroniser.synchronise();
					this._setNametableMirroring(data);
					break;
				case 0x5106:
					// fill mode tile number
					this.mainboard.synchroniser.synchronise();
					for (var i = 0; i < 32 * 30; ++i) {
						this._nameTableFill[i] = data;
					}
					break;
				case 0x5107:
					// fill mode colour
					this.mainboard.synchroniser.synchronise();
					var attribute = data & 0x3 + (data & 3) << 2 + (data & 3) << 4 + (data & 3) << 6;
					for (var i = 32 * 30; i < this._nameTableFill.length; ++i) {
						this._nameTableFill[i] = attribute;
					}
					break;
				case 0x5113:
					// prg ram bank
					this._prgRamPage = data & 0x7;
					break;
				case 0x5114:
					// prg bank 0
					this._prgRegisters[0] = data;
					this._syncPrg();
					break;
				case 0x5115:
					// prg bank 1
					this._prgRegisters[1] = data;
					this._syncPrg();
					break;
				case 0x5116:
					// prg bank 2
					this._prgRegisters[2] = data;
					this._syncPrg();
					break;
				case 0x5117:
					// prg bank 3
					this._prgRegisters[3] = data;
					this._syncPrg();
					break;
				case 0x5120:
					// chr registers A
					this._chrRegsA[0] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5121:
					this._chrRegsA[1] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5122:
					this._chrRegsA[2] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5123:
					this._chrRegsA[3] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5124:
					this._chrRegsA[4] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5125:
					this._chrRegsA[5] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5126:
					this._chrRegsA[6] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5127:
					this._chrRegsA[7] = data | this._chrHighBits;
					this._chrUseBMap = false;
					this._syncChr();
					break;
				case 0x5128:
					// Chr registers B
					this._chrRegsB[0] = data | this._chrHighBits;
					this._chrUseBMap = true;
					this._syncChr();
					break;
				case 0x5129:
					this._chrRegsB[1] = data | this._chrHighBits;
					this._chrUseBMap = true;
					this._syncChr();
					break;
				case 0x512A:
					this._chrRegsB[2] = data | this._chrHighBits;
					this._chrUseBMap = true;
					this._syncChr();
					break;
				case 0x512B:
					this._chrRegsB[3] = data | this._chrHighBits;
					this._chrUseBMap = true;
					this._syncChr();
					break;
				case 0x5130:
					// CHR bank high bits
					this.mainboard.synchroniser.synchronise();
					this._chrHighBits = (data & 0x3) << 8;
					break;
				case 0x5200:
					// vertical split mode
					// dont bother with vertical mode as it was only used once in commercial games, for the intro sequence
					break;
				case 0x5201:
					// vertical split scroll
					break;
				case 0x5202:
					// vertical split chr page
					break;
				case 0x5203:
					// irq scanline number trigger
					this.mainboard.synchroniser.synchronise();
					this._irqScanlineTrigger = data;
					this._predictIrq(this.mainboard.synchroniser.getCpuMTC());
					break;
				case 0x5204:
					// irq enable (different behaviour on read)
					this.mainboard.synchroniser.synchronise();
					this._irqEnabled = (data & 0x80) > 0;
					this._predictIrq(this.mainboard.synchroniser.getCpuMTC());
					break;
				case 0x5205:
					//  Writes specify the eight-bit multiplicand; reads return the lower eight bits of the product
					this._multiplier1 = data;
					break;
				case 0x5206:
					// Writes specify the eight-bit multiplier; reads return the upper eight bits of the product
					this._multiplier2 = data;
					break;
			}

			if (offset >= 0x5C00) {
				// TODO: Remove synchronise and work out isRendering by mtc
				this.mainboard.synchroniser.synchronise();
				if (this._exRamMode === 0 || this._exRamMode === 1) {
					// only allow writing during rendering, otherwise write 0
					if (this.mainboard.ppu.isRendering(this.mainboard.synchroniser.getCpuMTC(), false)) {
						this._internalExRam[offset - 0x5C00] = data;
					} else {
						this._internalExRam[offset - 0x5C00] = 0;
					}
				} else if (this._exRamMode === 2) {
					// always write
					this._internalExRam[offset - 0x5C00] = data;
				}
			}

			//BaseMapper.prototype.write8EXRam.call( this, offset, data );
		}
	}, {
		key: 'read8EXRam',
		value: function read8EXRam(offset) {
			// 0x4018 -> 0x6000
			switch (offset) {
				case 0x5015:
					//sound status
					//			return soundchip.status();
					break;
				case 0x5204:
					//irq status
					this.mainboard.synchroniser.synchronise();
					var scan = this.mainboard.ppu.ticksToScreenCoordinates(this.mainboard.synchroniser.getCpuMTC());
					var stat = (this._irqActive ? 0x80 : 0) + (scan.y >= 0 && scan.y < 240 ? 0x40 : 0);
					if (this._irqActive) {
						this._irqActive = false;
						this.mainboard.cpu.holdIrqLineLow(false);
					}
					this._predictIrq(this.mainboard.synchroniser.getCpuMTC());
					return stat;
				case 0x5205:
					//  Writes specify the eight-bit multiplicand; reads return the lower eight bits of the product
					return this._multiplier1 * this._multiplier2 & 0xff;
					break;
				case 0x5206:
					// Writes specify the eight-bit multiplier; reads return the upper eight bits of the product
					return this._multiplier1 * this._multiplier2 >> 8 & 0xff;
					break;
			}

			if (offset >= 0x5C00) {
				if (this._exRamMode === 2 || this._exRamMode === 3) {
					return this._internalExRam[offset - 0x5C00];
				}
			}

			return 0; // supposed to be open bus
		}
	}, {
		key: 'write8SRam',
		value: function write8SRam(offset, data) {
			// 0x6000 -> 0x8000
			this._prgRam[this._prgRamPage << 13 | offset & 0x1FFF] = data; // this._prgRamPage * 0x2000 + ( offset % 0x2000 ) ] = data;
		}
	}, {
		key: 'read8SRam',
		value: function read8SRam(offset) {
			// 0x6000 -> 0x8000
			return this._prgRam[this._prgRamPage << 13 | offset & 0x1FFF];
		}
	}, {
		key: '_setNametableMirroring',
		value: function _setNametableMirroring(data) {

			for (var nt = 0; nt < 4; ++nt) {
				this._nameTableMap[nt] = data & 0x3;
				data >>= 2;
			}
		}
	}, {
		key: 'read8ChrRom',
		value: function read8ChrRom(offset, renderingSprites, readType) {
			this.int32ChrData = this.int32ChrData || new Int32Array(this._chrData);
			// Pattern table read < 0x2000
			if (renderingSprites) {
				var pageid = (offset & 0x1C00) >> 10; // Math.floor( offset / 0x400 );
				var pagepos = this._chrMapA[pageid & 0x7];
				var chrOffset = pagepos * 0x400 + (offset & 0x3FF);
				return this.int32ChrData[chrOffset];
			}

			var useMapB = false;

			if (this._bigSpritesEnabled) {
				useMapB = !renderingSprites;
			} else {
				useMapB = this._chrUseBMap;
			}

			var pageid = (offset & 0x1C00) >> 10; // Math.floor( offset / 0x400 );
			var pagepos = useMapB ? this._chrMapB[pageid & 0x3] : this._chrMapA[pageid & 0x7];
			var chrOffset = pagepos * 0x400 + (offset & 0x3FF);
			return this.int32ChrData[chrOffset];
		}
	}, {
		key: 'nameTableRead',
		value: function nameTableRead(nameTables, pageId, pageOffset) {

			switch (this._nameTableMap[pageId]) {
				default:
				case 0:
					return nameTables[0][pageOffset];
				case 1:
					return nameTables[1][pageOffset];
				case 2:
					if (this._exRamMode === 0 || this._exRamMode === 1) {
						return this._internalExRam[pageOffset];
					} else {
						return 0;
					}
				case 3:
					return this._nameTableFill[pageOffset];
			}
		}
	}, {
		key: 'nameTableWrite',
		value: function nameTableWrite(nameTables, pageId, pageOffset, data) {

			switch (this._nameTableMap[pageId]) {
				default:
				case 0:
					nameTables[0][pageOffset] = data;
					break;
				case 1:
					nameTables[1][pageOffset] = data;
					break;
				case 2:
					if (this._exRamMode === 0 || this._exRamMode === 1) {
						this._internalExRam[pageOffset] = data;
					}
					break;
				case 3:
					this._nameTableFill[pageOffset] = data;
					break;
			}
		}
	}, {
		key: 'spriteSizeChanged',
		value: function spriteSizeChanged(bigSprites) {

			this._bigSpritesEnabled = bigSprites;
		}
	}]);

	return Mapper5;
}(_BaseMapper3.default);

exports.default = Mapper5;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseMapper2 = __webpack_require__(31);

var _BaseMapper3 = _interopRequireDefault(_BaseMapper2);

var _consts = __webpack_require__(5);

var _serialisation = __webpack_require__(14);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mapper9 = function (_BaseMapper) {
	_inherits(Mapper9, _BaseMapper);

	function Mapper9() {
		_classCallCheck(this, Mapper9);

		return _possibleConstructorReturn(this, (Mapper9.__proto__ || Object.getPrototypeOf(Mapper9)).apply(this, arguments));
	}

	_createClass(Mapper9, [{
		key: 'init',
		value: function init() {
			this._banks = new Int32Array(4);
		}
	}, {
		key: 'mapperSaveState',
		value: function mapperSaveState(state) {

			state._banks = Nes.uintArrayToString(this._banks);
			state._latches = this._latches.slice(0);
		}
	}, {
		key: 'mapperLoadState',
		value: function mapperLoadState(state) {

			this._banks = Nes.stringToUintArray(state._banks);
			this._latches = state._latches.slice(0);
		}
	}, {
		key: 'reset',
		value: function reset() {

			this._latches = [true, false];
			for (var i = 0; i < this._banks.length; ++i) {
				this._banks[i] = 0;
			}

			this.switch32kPrgBank(this.get32kPrgBankCount() - 1);
			for (var i = 0; i < 8; ++i) {
				this.switch1kChrBank(0, i);
			}
			//	this.switch8kChrBank( 0 );
			this.mainboard.ppu.changeMirroringMethod(this.mirroringMethod);
		}
	}, {
		key: '_syncChrBanks',
		value: function _syncChrBanks(performSync) {

			if (performSync === undefined ? true : performSync) {
				this.mainboard.synchroniser.synchronise();
			}
			var lowerBankId = this._latches[0] ? 1 : 0;
			this.switch4kChrBank(this._banks[lowerBankId], true);
			var upperBankId = this._latches[1] ? 3 : 2;
			this.switch4kChrBank(this._banks[upperBankId], false);
		}
	}, {
		key: 'MMC2Latch',
		value: function MMC2Latch(ppuReadAddress) {

			// http://wiki.nesdev.com/w/index.php/MMC2
			if (ppuReadAddress === 0xFD8) {
				this._latches[0] = false;
				this._syncChrBanks(false);
			} else if (ppuReadAddress === 0xFE8) {
				this._latches[0] = true;
				this._syncChrBanks(false);
			} else if (ppuReadAddress >= 0x1FD8 && ppuReadAddress <= 0x1FDF) {
				this._latches[1] = false;
				this._syncChrBanks(false);
			} else if (ppuReadAddress >= 0x1FE8 && ppuReadAddress <= 0x1FEF) {
				this._latches[1] = true;
				this._syncChrBanks(false);
			}
			// var latchId = ( ppuReadAddress & 0x1000 ) > 0 ? 1 : 0;
			// var tilenum = ( ppuReadAddress >> 4 ) & 0xFF;
			// var isFE = tilenum === 0xFE;
			// if ( tilenum === 0xFD || isFE ) {
			// this._latches[ latchId ] = isFE;
			// this._syncChrBanks();
			// }
		}
	}, {
		key: 'write8PrgRom',
		value: function write8PrgRom(offset, data) {

			var top4Bits = offset & 0xF000;
			switch (top4Bits) {
				case 0xA000:
					this.mainboard.synchroniser.synchronise();
					this.switch8kPrgBank(data & 0xf, 0);
					break;
				case 0xB000:
					this._banks[0] = data & 0x1F;
					this._syncChrBanks();
					break;
				case 0xC000:
					this._banks[1] = data & 0x1F;
					this._syncChrBanks();
					break;
				case 0xD000:
					this._banks[2] = data & 0x1F;
					this._syncChrBanks();
					break;
				case 0xE000:
					this._banks[3] = data & 0x1F;
					this._syncChrBanks();
					break;
				case 0xF000:
					this.mainboard.synchroniser.synchronise();
					this.mainboard.ppu.changeMirroringMethod((data & 0x1) > 0 ? _consts.PPU_MIRRORING_HORIZONTAL : _consts.PPU_MIRRORING_VERTICAL);
					break;
				default:
					Nes.basemapper.prototype.write8PrgRom.call(this, offset, data);
					break;
			}
		}
	}]);

	return Mapper9;
}(_BaseMapper3.default);

exports.default = Mapper9;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = mapperFactory;

var _Mapper = __webpack_require__(151);

var _Mapper2 = _interopRequireDefault(_Mapper);

var _Mapper3 = __webpack_require__(152);

var _Mapper4 = _interopRequireDefault(_Mapper3);

var _Mapper5 = __webpack_require__(153);

var _Mapper6 = _interopRequireDefault(_Mapper5);

var _Mapper7 = __webpack_require__(154);

var _Mapper8 = _interopRequireDefault(_Mapper7);

var _Mapper9 = __webpack_require__(155);

var _Mapper10 = _interopRequireDefault(_Mapper9);

var _Mapper11 = __webpack_require__(156);

var _Mapper12 = _interopRequireDefault(_Mapper11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Estimated number of games with mapper (other mappers had <10 games)
Mapper 004: 569
Mapper 001: 481
Mapper 000: 260
Mapper 002: 200
Mapper 003: 145
Mapper 007: 56
Mapper 011: 35
Mapper 019: 32
Mapper 016: 26
Mapper 099: 25
Mapper 005: 24
Mapper 018: 16
Mapper 066: 16
Mapper 033: 15
Mapper 079: 15
Mapper 045: 14
Mapper 071: 14
Mapper 113: 12
Mapper 245: 11
Mapper 023: 11
Mapper 069: 11
*/

var mapperDict = {
	0: _Mapper2.default,
	1: _Mapper4.default,
	2: _Mapper6.default,
	4: _Mapper8.default,
	5: _Mapper10.default,
	9: _Mapper12.default
};

function mapperFactory(mapperId, mainboard, mirroringMethod) {
	var MapperClass = mapperDict[mapperId];
	if (!mapperDict.hasOwnProperty(mapperId) || !MapperClass) {
		throw new Error('Mapper id ' + mapperId + ' is not supported');
	}
	var mapper = new MapperClass(mainboard, mirroringMethod);
	if (mapper.init) {
		mapper.init();
	}
	return mapper;
}

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.stringToCodeArray = stringToCodeArray;
exports.processGenieCode = processGenieCode;
var codes = {
	'A': 0x00, // 0000
	'P': 0x01, // 0001
	'Z': 0x02, // 0010
	'L': 0x03, // 0011
	'G': 0x04, // 0100
	'I': 0x05, // 0101
	'T': 0x06, // 0110
	'Y': 0x07, // 0111
	'E': 0x08, // 1000
	'O': 0x09, // 1001
	'X': 0x0A, // 1010
	'U': 0x0B, // 1011
	'K': 0x0C, // 1100
	'S': 0x0D, // 1101
	'V': 0x0E, // 1110
	'N': 0x0F // 1111
};

var ggcodeArray = new Int32Array(8);

function stringToCodeArray(codeString) {
	for (var i = 0; i < codeString.length; ++i) {
		var code = codes[codeString[i]];
		if (code === undefined) {
			throw new Error("Invalid character in game genie code");
		}
		ggcodeArray[i] = code;
	}
	return ggcodeArray;
}

function processGenieCode(mainboard, codeString, enable) {
	if (codeString.length !== 6 && codeString.length !== 8) {
		throw new Error("Invalid game genie code entered '" + codeString + "'");
	}

	if (enable) {
		var code = GameGenie.stringToCodeArray(codeString);

		// Char # |   0   |   1   |   2   |   3   |   4   |   5   |
		// Bit  # |3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|
		// maps to|1|6|7|8|H|2|3|4|-|I|J|K|L|A|B|C|D|M|N|O|5|E|F|G|
		if (codeString.length === 6) {
			var value = code[0] & 0x7; // 678
			value |= code[5] & 0x8; // 5
			value |= (code[1] & 0x7) << 4; // 234
			value |= (code[0] & 0x8) << 4; // 1

			var address = code[4] & 0x7; // MNO
			address |= code[3] & 0x8; // L
			address |= (code[2] & 0x7) << 4; // IJK
			address |= (code[1] & 0x8) << 4; // H
			address |= (code[5] & 0x7) << 8; // EFG
			address |= (code[4] & 0x8) << 8; // D
			address |= (code[3] & 0x7) << 12; // ABC

			mainboard.cart.memoryMapper.gameGeniePoke(codeString, address + 0x8000, value, -1);
		} else if (codeString.length === 8) {
			// Note: Similar to 6 character code but '5' is in different place
			// Char # |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |
			// Bit  # |3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|3|2|1|0|
			// maps to|1|6|7|8|H|2|3|4|-|I|J|K|L|A|B|C|D|M|N|O|%|E|F|G|!|^|&|*|5|@|#|$|
			// compareValue = !@#$%^&*
			var value = code[0] & 0x7; // 678
			value |= code[7] & 0x8; // 5
			value |= (code[1] & 0x7) << 4; // 234
			value |= (code[0] & 0x8) << 4; // 1

			var address = code[4] & 0x7; // MNO
			address |= code[3] & 0x8; // L
			address |= (code[2] & 0x7) << 4; // IJK
			address |= (code[1] & 0x8) << 4; // H
			address |= (code[5] & 0x7) << 8; // EFG
			address |= (code[4] & 0x8) << 8; // D
			address |= (code[3] & 0x7) << 12; // ABC

			var compareValue = code[6] & 0x7; // ^&*
			compareValue |= code[5] & 0x8; // %
			compareValue |= (code[7] & 0x7) << 4; // @#$
			compareValue |= (code[6] & 0x8) << 4; // !

			// It then checks the value to be replaced with the compare
			// value, if they are the same it replaces the original value with the new
			// value if not the value remains the same.
			mainboard.cart.memoryMapper.gameGeniePoke(codeString, address + 0x8000, value, compareValue);
		}
	} else {
		mainboard.cart.memoryMapper.removeGameGeniePoke(codeString);
	}
}

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.decompressIfNecessary = decompressIfNecessary;
exports.getRomNameFromUrl = getRomNameFromUrl;
exports.loadRomFromUrl = loadRomFromUrl;
function decompressIfNecessary(name, binaryString, completeCallback) {
	if (name.match(/\.nes$/i)) {
		// uncompressed file
		completeCallback(null, binaryString);
	} else {
		throw new Error("Unsupported file extension for file " + name);
	}
}

function getRomNameFromUrl(url) {
	var slashIndex = url.lastIndexOf('/');
	if (slashIndex >= 0) {
		return url.slice(slashIndex + 1);
	}
	return url;
}

function loadRomFromUrl(url, callback) {
	// Load using a bog standard XHR request as then we can load as binary
	var that = this;
	var xhr = new XMLHttpRequest();
	xhr.open('GET', url, true);
	xhr.responseType = 'arraybuffer';
	xhr.overrideMimeType("application/octet-stream");
	xhr.onerror = function (err) {
		callback(err);
	};
	xhr.onload = function (err) {
		if (xhr.status === 200) {
			// The raw response is cast appropriately later
			callback(null, getRomNameFromUrl(url), this.response);
		} else {
			callback('Error loading rom file from URL: ' + url + ' HTTP code: ' + xhr.status);
		}
	};

	xhr.send();
}

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = validateObject;
// There is almost definitely a better way/library to do this sort of validation.
// But, it works for now!

function validateObject(schema, object) {
  var passing = true;
  var reason = '';

  var _loop = function _loop(prop) {
    var givenValue = object[prop];

    if (schema.hasOwnProperty(prop)) {
      var typeWanted = schema[prop];

      // if the validation has `is/with` properties, we check that the given value
      // _IS_ an instance of the type given, filled _WITH_ instances of whatever we need
      if (typeWanted.is) {
        passing = givenValue instanceof typeWanted.is || givenValue === typeWanted.is || (typeof givenValue === 'undefined' ? 'undefined' : _typeof(givenValue)) === (typeWanted.is.name || '').toLowerCase();

        // not passing = dont bother checking contents
        if (passing && typeWanted.with) {
          givenValue.forEach(function (val) {
            if (!(val instanceof typeWanted.with)) {
              passing = false;
              reason = '- Expected "' + typeWanted.with.name + '" inside array';
            }
          });
        }
        // if the validation is an array, they are a list acceptable values
      } else if (typeWanted instanceof Array) {
        passing = !!typeWanted.find(function (requiredValue) {
          return givenValue === requiredValue;
        });
        reason = '- Expected a value of: ["' + typeWanted.join('", "') + '"]';
        // if the validation is a function, it's a custom deal that we just test
        // against the given value
      } else if (typeWanted instanceof Function) {
        passing = typeWanted(givenValue);
        // anything else, and we missed it!
      } else {
        throw new Error('Validation error checking "' + prop + '"');
      }

      if (!passing) {
        throw new Error('Invalid value for nES6 option "' + prop + '" ' + reason);
      }
    } else if (!schema.hasOwnProperty(prop)) {
      throw new Error('Unrecognized nES6 option "' + prop + '"');
    }
  };

  for (var prop in object) {
    _loop(prop);
  }

  return passing;
}

/***/ }),
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */
/***/ (function(module, exports) {

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();


/***/ }),
/* 190 */
/***/ (function(module, exports) {

module.exports = adjoint;

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/***/ }),
/* 191 */
/***/ (function(module, exports) {

module.exports = clone;

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 192 */
/***/ (function(module, exports) {

module.exports = copy;

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 193 */
/***/ (function(module, exports) {

module.exports = create;

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
    var out = new Float32Array(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/***/ }),
/* 194 */
/***/ (function(module, exports) {

module.exports = determinant;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/***/ }),
/* 195 */
/***/ (function(module, exports) {

module.exports = fromQuat;

/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/***/ }),
/* 196 */
/***/ (function(module, exports) {

module.exports = fromRotationTranslation;

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/***/ }),
/* 197 */
/***/ (function(module, exports) {

module.exports = frustum;

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  create: __webpack_require__(193)
  , clone: __webpack_require__(191)
  , copy: __webpack_require__(192)
  , identity: __webpack_require__(77)
  , transpose: __webpack_require__(212)
  , invert: __webpack_require__(199)
  , adjoint: __webpack_require__(190)
  , determinant: __webpack_require__(194)
  , multiply: __webpack_require__(201)
  , translate: __webpack_require__(211)
  , scale: __webpack_require__(209)
  , rotate: __webpack_require__(205)
  , rotateX: __webpack_require__(206)
  , rotateY: __webpack_require__(207)
  , rotateZ: __webpack_require__(208)
  , fromRotationTranslation: __webpack_require__(196)
  , fromQuat: __webpack_require__(195)
  , frustum: __webpack_require__(197)
  , perspective: __webpack_require__(203)
  , perspectiveFromFieldOfView: __webpack_require__(204)
  , ortho: __webpack_require__(202)
  , lookAt: __webpack_require__(200)
  , str: __webpack_require__(210)
}

/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports = invert;

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(77);

module.exports = lookAt;

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < 0.000001 &&
        Math.abs(eyey - centery) < 0.000001 &&
        Math.abs(eyez - centerz) < 0.000001) {
        return identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/***/ }),
/* 201 */
/***/ (function(module, exports) {

module.exports = multiply;

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = ortho;

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = perspective;

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 204 */
/***/ (function(module, exports) {

module.exports = perspectiveFromFieldOfView;

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}



/***/ }),
/* 205 */
/***/ (function(module, exports) {

module.exports = rotate;

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < 0.000001) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/***/ }),
/* 206 */
/***/ (function(module, exports) {

module.exports = rotateX;

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = rotateY;

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = rotateZ;

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = scale;

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 210 */
/***/ (function(module, exports) {

module.exports = str;

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = translate;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/***/ }),
/* 212 */
/***/ (function(module, exports) {

module.exports = transpose;

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function () {
    var /*
 * Rusha, a JavaScript implementation of the Secure Hash Algorithm, SHA-1,
 * as defined in FIPS PUB 180-1, tuned for high performance with large inputs.
 * (http://github.com/srijs/rusha)
 *
 * Inspired by Paul Johnstons implementation (http://pajhome.org.uk/crypt/md5).
 *
 * Copyright (c) 2013 Sam Rijs (http://awesam.de).
 * Released under the terms of the MIT license as follows:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
    util = {
        getDataType: function (data) {
            if (typeof data === 'string') {
                return 'string';
            }
            if (data instanceof Array) {
                return 'array';
            }
            if (typeof global !== 'undefined' && global.Buffer && global.Buffer.isBuffer(data)) {
                return 'buffer';
            }
            if (data instanceof ArrayBuffer) {
                return 'arraybuffer';
            }
            if (data.buffer instanceof ArrayBuffer) {
                return 'view';
            }
            if (data instanceof Blob) {
                return 'blob';
            }
            throw new Error('Unsupported data type.');
        }
    };
    function Rusha(chunkSize) {
        'use strict';
        var // Private object structure.
        self$2 = { fill: 0 };
        var // Calculate the length of buffer that the sha1 routine uses
        // including the padding.
        padlen = function (len) {
            for (len += 9; len % 64 > 0; len += 1);
            return len;
        };
        var padZeroes = function (bin, len) {
            var h8 = new Uint8Array(bin.buffer);
            var om = len % 4, align = len - om;
            switch (om) {
            case 0:
                h8[align + 3] = 0;
            case 1:
                h8[align + 2] = 0;
            case 2:
                h8[align + 1] = 0;
            case 3:
                h8[align + 0] = 0;
            }
            for (var i$2 = (len >> 2) + 1; i$2 < bin.length; i$2++)
                bin[i$2] = 0;
        };
        var padData = function (bin, chunkLen, msgLen) {
            bin[chunkLen >> 2] |= 128 << 24 - (chunkLen % 4 << 3);
            // To support msgLen >= 2 GiB, use a float division when computing the
            // high 32-bits of the big-endian message length in bits.
            bin[((chunkLen >> 2) + 2 & ~15) + 14] = msgLen / (1 << 29) | 0;
            bin[((chunkLen >> 2) + 2 & ~15) + 15] = msgLen << 3;
        };
        var // Convert a binary string and write it to the heap.
        // A binary string is expected to only contain char codes < 256.
        convStr = function (H8, H32, start, len, off) {
            var str = this, i$2, om = off % 4, lm = (len + om) % 4, j = len - lm;
            switch (om) {
            case 0:
                H8[off] = str.charCodeAt(start + 3);
            case 1:
                H8[off + 1 - (om << 1) | 0] = str.charCodeAt(start + 2);
            case 2:
                H8[off + 2 - (om << 1) | 0] = str.charCodeAt(start + 1);
            case 3:
                H8[off + 3 - (om << 1) | 0] = str.charCodeAt(start);
            }
            if (len < lm + om) {
                return;
            }
            for (i$2 = 4 - om; i$2 < j; i$2 = i$2 + 4 | 0) {
                H32[off + i$2 >> 2] = str.charCodeAt(start + i$2) << 24 | str.charCodeAt(start + i$2 + 1) << 16 | str.charCodeAt(start + i$2 + 2) << 8 | str.charCodeAt(start + i$2 + 3);
            }
            switch (lm) {
            case 3:
                H8[off + j + 1 | 0] = str.charCodeAt(start + j + 2);
            case 2:
                H8[off + j + 2 | 0] = str.charCodeAt(start + j + 1);
            case 1:
                H8[off + j + 3 | 0] = str.charCodeAt(start + j);
            }
        };
        var // Convert a buffer or array and write it to the heap.
        // The buffer or array is expected to only contain elements < 256.
        convBuf = function (H8, H32, start, len, off) {
            var buf = this, i$2, om = off % 4, lm = (len + om) % 4, j = len - lm;
            switch (om) {
            case 0:
                H8[off] = buf[start + 3];
            case 1:
                H8[off + 1 - (om << 1) | 0] = buf[start + 2];
            case 2:
                H8[off + 2 - (om << 1) | 0] = buf[start + 1];
            case 3:
                H8[off + 3 - (om << 1) | 0] = buf[start];
            }
            if (len < lm + om) {
                return;
            }
            for (i$2 = 4 - om; i$2 < j; i$2 = i$2 + 4 | 0) {
                H32[off + i$2 >> 2 | 0] = buf[start + i$2] << 24 | buf[start + i$2 + 1] << 16 | buf[start + i$2 + 2] << 8 | buf[start + i$2 + 3];
            }
            switch (lm) {
            case 3:
                H8[off + j + 1 | 0] = buf[start + j + 2];
            case 2:
                H8[off + j + 2 | 0] = buf[start + j + 1];
            case 1:
                H8[off + j + 3 | 0] = buf[start + j];
            }
        };
        var convBlob = function (H8, H32, start, len, off) {
            var blob = this, i$2, om = off % 4, lm = (len + om) % 4, j = len - lm;
            var buf = new Uint8Array(reader.readAsArrayBuffer(blob.slice(start, start + len)));
            switch (om) {
            case 0:
                H8[off] = buf[3];
            case 1:
                H8[off + 1 - (om << 1) | 0] = buf[2];
            case 2:
                H8[off + 2 - (om << 1) | 0] = buf[1];
            case 3:
                H8[off + 3 - (om << 1) | 0] = buf[0];
            }
            if (len < lm + om) {
                return;
            }
            for (i$2 = 4 - om; i$2 < j; i$2 = i$2 + 4 | 0) {
                H32[off + i$2 >> 2 | 0] = buf[i$2] << 24 | buf[i$2 + 1] << 16 | buf[i$2 + 2] << 8 | buf[i$2 + 3];
            }
            switch (lm) {
            case 3:
                H8[off + j + 1 | 0] = buf[j + 2];
            case 2:
                H8[off + j + 2 | 0] = buf[j + 1];
            case 1:
                H8[off + j + 3 | 0] = buf[j];
            }
        };
        var convFn = function (data) {
            switch (util.getDataType(data)) {
            case 'string':
                return convStr.bind(data);
            case 'array':
                return convBuf.bind(data);
            case 'buffer':
                return convBuf.bind(data);
            case 'arraybuffer':
                return convBuf.bind(new Uint8Array(data));
            case 'view':
                return convBuf.bind(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));
            case 'blob':
                return convBlob.bind(data);
            }
        };
        var slice = function (data, offset) {
            switch (util.getDataType(data)) {
            case 'string':
                return data.slice(offset);
            case 'array':
                return data.slice(offset);
            case 'buffer':
                return data.slice(offset);
            case 'arraybuffer':
                return data.slice(offset);
            case 'view':
                return data.buffer.slice(offset);
            }
        };
        var // Precompute 00 - ff strings
        precomputedHex = new Array(256);
        for (var i = 0; i < 256; i++) {
            precomputedHex[i] = (i < 16 ? '0' : '') + i.toString(16);
        }
        var // Convert an ArrayBuffer into its hexadecimal string representation.
        hex = function (arrayBuffer) {
            var binarray = new Uint8Array(arrayBuffer);
            var res = new Array(arrayBuffer.byteLength);
            for (var i$2 = 0; i$2 < res.length; i$2++) {
                res[i$2] = precomputedHex[binarray[i$2]];
            }
            return res.join('');
        };
        var ceilHeapSize = function (v) {
            // The asm.js spec says:
            // The heap object's byteLength must be either
            // 2^n for n in [12, 24) or 2^24 * n for n ≥ 1.
            // Also, byteLengths smaller than 2^16 are deprecated.
            var p;
            if (// If v is smaller than 2^16, the smallest possible solution
                // is 2^16.
                v <= 65536)
                return 65536;
            if (// If v < 2^24, we round up to 2^n,
                // otherwise we round up to 2^24 * n.
                v < 16777216) {
                for (p = 1; p < v; p = p << 1);
            } else {
                for (p = 16777216; p < v; p += 16777216);
            }
            return p;
        };
        var // Initialize the internal data structures to a new capacity.
        init = function (size) {
            if (size % 64 > 0) {
                throw new Error('Chunk size must be a multiple of 128 bit');
            }
            self$2.offset = 0;
            self$2.maxChunkLen = size;
            self$2.padMaxChunkLen = padlen(size);
            // The size of the heap is the sum of:
            // 1. The padded input message size
            // 2. The extended space the algorithm needs (320 byte)
            // 3. The 160 bit state the algoritm uses
            self$2.heap = new ArrayBuffer(ceilHeapSize(self$2.padMaxChunkLen + 320 + 20));
            self$2.h32 = new Int32Array(self$2.heap);
            self$2.h8 = new Int8Array(self$2.heap);
            self$2.core = new Rusha._core({
                Int32Array: Int32Array,
                DataView: DataView
            }, {}, self$2.heap);
            self$2.buffer = null;
        };
        // Iinitializethe datastructures according
        // to a chunk siyze.
        init(chunkSize || 64 * 1024);
        var initState = function (heap, padMsgLen) {
            self$2.offset = 0;
            var io = new Int32Array(heap, padMsgLen + 320, 5);
            io[0] = 1732584193;
            io[1] = -271733879;
            io[2] = -1732584194;
            io[3] = 271733878;
            io[4] = -1009589776;
        };
        var padChunk = function (chunkLen, msgLen) {
            var padChunkLen = padlen(chunkLen);
            var view = new Int32Array(self$2.heap, 0, padChunkLen >> 2);
            padZeroes(view, chunkLen);
            padData(view, chunkLen, msgLen);
            return padChunkLen;
        };
        var // Write data to the heap.
        write = function (data, chunkOffset, chunkLen, off) {
            convFn(data)(self$2.h8, self$2.h32, chunkOffset, chunkLen, off || 0);
        };
        var // Initialize and call the RushaCore,
        // assuming an input buffer of length len * 4.
        coreCall = function (data, chunkOffset, chunkLen, msgLen, finalize) {
            var padChunkLen = chunkLen;
            write(data, chunkOffset, chunkLen);
            if (finalize) {
                padChunkLen = padChunk(chunkLen, msgLen);
            }
            self$2.core.hash(padChunkLen, self$2.padMaxChunkLen);
        };
        var getRawDigest = function (heap, padMaxChunkLen) {
            var io = new Int32Array(heap, padMaxChunkLen + 320, 5);
            var out = new Int32Array(5);
            var arr = new DataView(out.buffer);
            arr.setInt32(0, io[0], false);
            arr.setInt32(4, io[1], false);
            arr.setInt32(8, io[2], false);
            arr.setInt32(12, io[3], false);
            arr.setInt32(16, io[4], false);
            return out;
        };
        var // Calculate the hash digest as an array of 5 32bit integers.
        rawDigest = this.rawDigest = function (str) {
            var msgLen = str.byteLength || str.length || str.size || 0;
            initState(self$2.heap, self$2.padMaxChunkLen);
            var chunkOffset = 0, chunkLen = self$2.maxChunkLen, last;
            for (chunkOffset = 0; msgLen > chunkOffset + chunkLen; chunkOffset += chunkLen) {
                coreCall(str, chunkOffset, chunkLen, msgLen, false);
            }
            coreCall(str, chunkOffset, msgLen - chunkOffset, msgLen, true);
            return getRawDigest(self$2.heap, self$2.padMaxChunkLen);
        };
        // The digest and digestFrom* interface returns the hash digest
        // as a hex string.
        this.digest = this.digestFromString = this.digestFromBuffer = this.digestFromArrayBuffer = function (str) {
            return hex(rawDigest(str).buffer);
        };
        this.resetState = function () {
            initState(self$2.heap, self$2.padMaxChunkLen);
            return this;
        };
        this.append = function (chunk) {
            var chunkOffset = 0;
            var chunkLen = chunk.byteLength || chunk.length || chunk.size || 0;
            var turnOffset = self$2.offset % self$2.maxChunkLen;
            var inputLen;
            self$2.offset += chunkLen;
            while (chunkOffset < chunkLen) {
                inputLen = Math.min(chunkLen - chunkOffset, self$2.maxChunkLen - turnOffset);
                write(chunk, chunkOffset, inputLen, turnOffset);
                turnOffset += inputLen;
                chunkOffset += inputLen;
                if (turnOffset === self$2.maxChunkLen) {
                    self$2.core.hash(self$2.maxChunkLen, self$2.padMaxChunkLen);
                    turnOffset = 0;
                }
            }
            return this;
        };
        this.getState = function () {
            var turnOffset = self$2.offset % self$2.maxChunkLen;
            var heap;
            if (!turnOffset) {
                var io = new Int32Array(self$2.heap, self$2.padMaxChunkLen + 320, 5);
                heap = io.buffer.slice(io.byteOffset, io.byteOffset + io.byteLength);
            } else {
                heap = self$2.heap.slice(0);
            }
            return {
                offset: self$2.offset,
                heap: heap
            };
        };
        this.setState = function (state) {
            self$2.offset = state.offset;
            if (state.heap.byteLength === 20) {
                var io = new Int32Array(self$2.heap, self$2.padMaxChunkLen + 320, 5);
                io.set(new Int32Array(state.heap));
            } else {
                self$2.h32.set(new Int32Array(state.heap));
            }
            return this;
        };
        var rawEnd = this.rawEnd = function () {
            var msgLen = self$2.offset;
            var chunkLen = msgLen % self$2.maxChunkLen;
            var padChunkLen = padChunk(chunkLen, msgLen);
            self$2.core.hash(padChunkLen, self$2.padMaxChunkLen);
            var result = getRawDigest(self$2.heap, self$2.padMaxChunkLen);
            initState(self$2.heap, self$2.padMaxChunkLen);
            return result;
        };
        this.end = function () {
            return hex(rawEnd().buffer);
        };
    }
    ;
    // The low-level RushCore module provides the heart of Rusha,
    // a high-speed sha1 implementation working on an Int32Array heap.
    // At first glance, the implementation seems complicated, however
    // with the SHA1 spec at hand, it is obvious this almost a textbook
    // implementation that has a few functions hand-inlined and a few loops
    // hand-unrolled.
    Rusha._core = function RushaCore(stdlib, foreign, heap) {
        'use asm';
        var H = new stdlib.Int32Array(heap);
        function hash(k, x) {
            // k in bytes
            k = k | 0;
            x = x | 0;
            var i = 0, j = 0, y0 = 0, z0 = 0, y1 = 0, z1 = 0, y2 = 0, z2 = 0, y3 = 0, z3 = 0, y4 = 0, z4 = 0, t0 = 0, t1 = 0;
            y0 = H[x + 320 >> 2] | 0;
            y1 = H[x + 324 >> 2] | 0;
            y2 = H[x + 328 >> 2] | 0;
            y3 = H[x + 332 >> 2] | 0;
            y4 = H[x + 336 >> 2] | 0;
            for (i = 0; (i | 0) < (k | 0); i = i + 64 | 0) {
                z0 = y0;
                z1 = y1;
                z2 = y2;
                z3 = y3;
                z4 = y4;
                for (j = 0; (j | 0) < 64; j = j + 4 | 0) {
                    t1 = H[i + j >> 2] | 0;
                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | ~y1 & y3) | 0) + ((t1 + y4 | 0) + 1518500249 | 0) | 0;
                    y4 = y3;
                    y3 = y2;
                    y2 = y1 << 30 | y1 >>> 2;
                    y1 = y0;
                    y0 = t0;
                    H[k + j >> 2] = t1;
                }
                for (j = k + 64 | 0; (j | 0) < (k + 80 | 0); j = j + 4 | 0) {
                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | ~y1 & y3) | 0) + ((t1 + y4 | 0) + 1518500249 | 0) | 0;
                    y4 = y3;
                    y3 = y2;
                    y2 = y1 << 30 | y1 >>> 2;
                    y1 = y0;
                    y0 = t0;
                    H[j >> 2] = t1;
                }
                for (j = k + 80 | 0; (j | 0) < (k + 160 | 0); j = j + 4 | 0) {
                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 ^ y2 ^ y3) | 0) + ((t1 + y4 | 0) + 1859775393 | 0) | 0;
                    y4 = y3;
                    y3 = y2;
                    y2 = y1 << 30 | y1 >>> 2;
                    y1 = y0;
                    y0 = t0;
                    H[j >> 2] = t1;
                }
                for (j = k + 160 | 0; (j | 0) < (k + 240 | 0); j = j + 4 | 0) {
                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | y1 & y3 | y2 & y3) | 0) + ((t1 + y4 | 0) - 1894007588 | 0) | 0;
                    y4 = y3;
                    y3 = y2;
                    y2 = y1 << 30 | y1 >>> 2;
                    y1 = y0;
                    y0 = t0;
                    H[j >> 2] = t1;
                }
                for (j = k + 240 | 0; (j | 0) < (k + 320 | 0); j = j + 4 | 0) {
                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 ^ y2 ^ y3) | 0) + ((t1 + y4 | 0) - 899497514 | 0) | 0;
                    y4 = y3;
                    y3 = y2;
                    y2 = y1 << 30 | y1 >>> 2;
                    y1 = y0;
                    y0 = t0;
                    H[j >> 2] = t1;
                }
                y0 = y0 + z0 | 0;
                y1 = y1 + z1 | 0;
                y2 = y2 + z2 | 0;
                y3 = y3 + z3 | 0;
                y4 = y4 + z4 | 0;
            }
            H[x + 320 >> 2] = y0;
            H[x + 324 >> 2] = y1;
            H[x + 328 >> 2] = y2;
            H[x + 332 >> 2] = y3;
            H[x + 336 >> 2] = y4;
        }
        return { hash: hash };
    };
    if (// If we'e running in Node.JS, export a module.
        true) {
        module.exports = Rusha;
    } else if (// If we're running in a DOM context, export
        // the Rusha object to toplevel.
        typeof window !== 'undefined') {
        window.Rusha = Rusha;
    }
    if (// If we're running in a webworker, accept
        // messages containing a jobid and a buffer
        // or blob object, and return the hash result.
        typeof FileReaderSync !== 'undefined') {
        var reader = new FileReaderSync(), hasher = new Rusha(4 * 1024 * 1024);
        self.onmessage = function onMessage(event) {
            var hash, data = event.data.data;
            try {
                hash = hasher.digest(data);
                self.postMessage({
                    id: event.data.id,
                    hash: hash
                });
            } catch (e) {
                self.postMessage({
                    id: event.data.id,
                    error: e.name
                });
            }
        };
    }
}());
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {(function() {
  var crypt = __webpack_require__(189),
      utf8 = __webpack_require__(76).utf8,
      bin = __webpack_require__(76).bin,

  // The core
  sha1 = function (message) {
    // Convert to byte array
    if (message.constructor == String)
      message = utf8.stringToBytes(message);
    else if (typeof Buffer !== 'undefined' && typeof Buffer.isBuffer == 'function' && Buffer.isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();

    // otherwise assume byte array

    var m  = crypt.bytesToWords(message),
        l  = message.length * 8,
        w  = [],
        H0 =  1732584193,
        H1 = -271733879,
        H2 = -1732584194,
        H3 =  271733878,
        H4 = -1009589776;

    // Padding
    m[l >> 5] |= 0x80 << (24 - l % 32);
    m[((l + 64 >>> 9) << 4) + 15] = l;

    for (var i = 0; i < m.length; i += 16) {
      var a = H0,
          b = H1,
          c = H2,
          d = H3,
          e = H4;

      for (var j = 0; j < 80; j++) {

        if (j < 16)
          w[j] = m[i + j];
        else {
          var n = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
          w[j] = (n << 1) | (n >>> 31);
        }

        var t = ((H0 << 5) | (H0 >>> 27)) + H4 + (w[j] >>> 0) + (
                j < 20 ? (H1 & H2 | ~H1 & H3) + 1518500249 :
                j < 40 ? (H1 ^ H2 ^ H3) + 1859775393 :
                j < 60 ? (H1 & H2 | H1 & H3 | H2 & H3) - 1894007588 :
                         (H1 ^ H2 ^ H3) - 899497514);

        H4 = H3;
        H3 = H2;
        H2 = (H1 << 30) | (H1 >>> 2);
        H1 = H0;
        H0 = t;
      }

      H0 += a;
      H1 += b;
      H2 += c;
      H3 += d;
      H4 += e;
    }

    return [H0, H1, H2, H3, H4];
  },

  // Public API
  api = function (message, options) {
    var digestbytes = crypt.wordsToBytes(sha1(message));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

  api._blocksize = 16;
  api._digestsize = 20;

  module.exports = api;
})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

// stats.js - http://github.com/mrdoob/stats.js
(function(f,e){ true?module.exports=e():"function"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();
u(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/
1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);
b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});


/***/ }),
/* 216 */,
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__(30);

asn1.define = __webpack_require__(495).define;
asn1.base = __webpack_require__(116);
asn1.constants = __webpack_require__(436);
asn1.decoders = __webpack_require__(499);
asn1.encoders = __webpack_require__(501);


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 219 */
/***/ (function(module, exports) {

exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(118)

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 221 */
/***/ (function(module, exports) {


module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(122)
exports.createHash = exports.Hash = __webpack_require__(111)
exports.createHmac = exports.Hmac = __webpack_require__(238)

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(__webpack_require__(448)))
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(473)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(511)
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = __webpack_require__(528)
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = __webpack_require__(514)
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = __webpack_require__(521)

var publicEncrypt = __webpack_require__(599)

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(531);
curve.short = __webpack_require__(534);
curve.mont = __webpack_require__(533);
curve.edwards = __webpack_require__(532);


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(551);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {
var zlib = __webpack_require__(450);

var AVAILABLE_WINDOW_BITS = [8, 9, 10, 11, 12, 13, 14, 15];
var DEFAULT_WINDOW_BITS = 15;
var DEFAULT_MEM_LEVEL = 8;

PerMessageDeflate.extensionName = 'permessage-deflate';

/**
 * Per-message Compression Extensions implementation
 */

function PerMessageDeflate(options, isServer,maxPayload) {
  if (this instanceof PerMessageDeflate === false) {
    throw new TypeError("Classes can't be function-called");
  }

  this._options = options || {};
  this._isServer = !!isServer;
  this._inflate = null;
  this._deflate = null;
  this.params = null;
  this._maxPayload = maxPayload || 0;
}

/**
 * Create extension parameters offer
 *
 * @api public
 */

PerMessageDeflate.prototype.offer = function() {
  var params = {};
  if (this._options.serverNoContextTakeover) {
    params.server_no_context_takeover = true;
  }
  if (this._options.clientNoContextTakeover) {
    params.client_no_context_takeover = true;
  }
  if (this._options.serverMaxWindowBits) {
    params.server_max_window_bits = this._options.serverMaxWindowBits;
  }
  if (this._options.clientMaxWindowBits) {
    params.client_max_window_bits = this._options.clientMaxWindowBits;
  } else if (this._options.clientMaxWindowBits == null) {
    params.client_max_window_bits = true;
  }
  return params;
};

/**
 * Accept extension offer
 *
 * @api public
 */

PerMessageDeflate.prototype.accept = function(paramsList) {
  paramsList = this.normalizeParams(paramsList);

  var params;
  if (this._isServer) {
    params = this.acceptAsServer(paramsList);
  } else {
    params = this.acceptAsClient(paramsList);
  }

  this.params = params;
  return params;
};

/**
 * Releases all resources used by the extension
 *
 * @api public
 */

PerMessageDeflate.prototype.cleanup = function() {
  if (this._inflate) {
    if (this._inflate.writeInProgress) {
      this._inflate.pendingClose = true;
    } else {
      if (this._inflate.close) this._inflate.close();
      this._inflate = null;
    }
  }
  if (this._deflate) {
    if (this._deflate.writeInProgress) {
      this._deflate.pendingClose = true;
    } else {
      if (this._deflate.close) this._deflate.close();
      this._deflate = null;
    }
  }
};

/**
 * Accept extension offer from client
 *
 * @api private
 */

PerMessageDeflate.prototype.acceptAsServer = function(paramsList) {
  var accepted = {};
  var result = paramsList.some(function(params) {
    accepted = {};
    if (this._options.serverNoContextTakeover === false && params.server_no_context_takeover) {
      return;
    }
    if (this._options.serverMaxWindowBits === false && params.server_max_window_bits) {
      return;
    }
    if (typeof this._options.serverMaxWindowBits === 'number' &&
        typeof params.server_max_window_bits === 'number' &&
        this._options.serverMaxWindowBits > params.server_max_window_bits) {
      return;
    }
    if (typeof this._options.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {
      return;
    }

    if (this._options.serverNoContextTakeover || params.server_no_context_takeover) {
      accepted.server_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover) {
      accepted.client_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover !== false && params.client_no_context_takeover) {
      accepted.client_no_context_takeover = true;
    }
    if (typeof this._options.serverMaxWindowBits === 'number') {
      accepted.server_max_window_bits = this._options.serverMaxWindowBits;
    } else if (typeof params.server_max_window_bits === 'number') {
      accepted.server_max_window_bits = params.server_max_window_bits;
    }
    if (typeof this._options.clientMaxWindowBits === 'number') {
      accepted.client_max_window_bits = this._options.clientMaxWindowBits;
    } else if (this._options.clientMaxWindowBits !== false && typeof params.client_max_window_bits === 'number') {
      accepted.client_max_window_bits = params.client_max_window_bits;
    }
    return true;
  }, this);

  if (!result) {
    throw new Error('Doesn\'t support the offered configuration');
  }

  return accepted;
};

/**
 * Accept extension response from server
 *
 * @api privaye
 */

PerMessageDeflate.prototype.acceptAsClient = function(paramsList) {
  var params = paramsList[0];
  if (this._options.clientNoContextTakeover != null) {
    if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
      throw new Error('Invalid value for "client_no_context_takeover"');
    }
  }
  if (this._options.clientMaxWindowBits != null) {
    if (this._options.clientMaxWindowBits === false && params.client_max_window_bits) {
      throw new Error('Invalid value for "client_max_window_bits"');
    }
    if (typeof this._options.clientMaxWindowBits === 'number' &&
        (!params.client_max_window_bits || params.client_max_window_bits > this._options.clientMaxWindowBits)) {
      throw new Error('Invalid value for "client_max_window_bits"');
    }
  }
  return params;
};

/**
 * Normalize extensions parameters
 *
 * @api private
 */

PerMessageDeflate.prototype.normalizeParams = function(paramsList) {
  return paramsList.map(function(params) {
    Object.keys(params).forEach(function(key) {
      var value = params[key];
      if (value.length > 1) {
        throw new Error('Multiple extension parameters for ' + key);
      }

      value = value[0];

      switch (key) {
      case 'server_no_context_takeover':
      case 'client_no_context_takeover':
        if (value !== true) {
          throw new Error('invalid extension parameter value for ' + key + ' (' + value + ')');
        }
        params[key] = true;
        break;
      case 'server_max_window_bits':
      case 'client_max_window_bits':
        if (typeof value === 'string') {
          value = parseInt(value, 10);
          if (!~AVAILABLE_WINDOW_BITS.indexOf(value)) {
            throw new Error('invalid extension parameter value for ' + key + ' (' + value + ')');
          }
        }
        if (!this._isServer && value === true) {
          throw new Error('Missing extension parameter value for ' + key);
        }
        params[key] = value;
        break;
      default:
        throw new Error('Not defined extension parameter (' + key + ')');
      }
    }, this);
    return params;
  }, this);
};

/**
 * Decompress message
 *
 * @api public
 */

PerMessageDeflate.prototype.decompress = function (data, fin, callback) {
  var endpoint = this._isServer ? 'client' : 'server';

  if (!this._inflate) {
    var maxWindowBits = this.params[endpoint + '_max_window_bits'];
    this._inflate = zlib.createInflateRaw({
      windowBits: 'number' === typeof maxWindowBits ? maxWindowBits : DEFAULT_WINDOW_BITS
    });
  }
  this._inflate.writeInProgress = true;

  var self = this;
  var buffers = [];
  var cumulativeBufferLength=0;

  this._inflate.on('error', onError).on('data', onData);
  this._inflate.write(data);
  if (fin) {
    this._inflate.write(new Buffer([0x00, 0x00, 0xff, 0xff]));
  }
  this._inflate.flush(function() {
    cleanup();
    callback(null, Buffer.concat(buffers));
  });

  function onError(err) {
    cleanup();
    callback(err);
  }

  function onData(data) {
      if(self._maxPayload!==undefined && self._maxPayload!==null && self._maxPayload>0){
          cumulativeBufferLength+=data.length;
          if(cumulativeBufferLength>self._maxPayload){
            buffers=[];
            cleanup();
            var err={type:1009};
            callback(err);
            return;
          }
      }
      buffers.push(data);
  }

  function cleanup() {
    if (!self._inflate) return;
    self._inflate.removeListener('error', onError);
    self._inflate.removeListener('data', onData);
    self._inflate.writeInProgress = false;
    if ((fin && self.params[endpoint + '_no_context_takeover']) || self._inflate.pendingClose) {
      if (self._inflate.close) self._inflate.close();
      self._inflate = null;
    }
  }
};

/**
 * Compress message
 *
 * @api public
 */

PerMessageDeflate.prototype.compress = function (data, fin, callback) {
  var endpoint = this._isServer ? 'server' : 'client';

  if (!this._deflate) {
    var maxWindowBits = this.params[endpoint + '_max_window_bits'];
    this._deflate = zlib.createDeflateRaw({
      flush: zlib.Z_SYNC_FLUSH,
      windowBits: 'number' === typeof maxWindowBits ? maxWindowBits : DEFAULT_WINDOW_BITS,
      memLevel: this._options.memLevel || DEFAULT_MEM_LEVEL
    });
  }
  this._deflate.writeInProgress = true;

  var self = this;
  var buffers = [];

  this._deflate.on('error', onError).on('data', onData);
  this._deflate.write(data);
  this._deflate.flush(function() {
    cleanup();
    var data = Buffer.concat(buffers);
    if (fin) {
      data = data.slice(0, data.length - 4);
    }
    callback(null, data);
  });

  function onError(err) {
    cleanup();
    callback(err);
  }

  function onData(data) {
    buffers.push(data);
  }

  function cleanup() {
    if (!self._deflate) return;
    self._deflate.removeListener('error', onError);
    self._deflate.removeListener('data', onData);
    self._deflate.writeInProgress = false;
    if ((fin && self.params[endpoint + '_no_context_takeover']) || self._deflate.pendingClose) {
      if (self._deflate.close) self._deflate.close();
      self._deflate = null;
    }
  }
};

module.exports = PerMessageDeflate;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var md5 = __webpack_require__(452)
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/*
 * Module requirements.
 */

var isArray = __webpack_require__(569);

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      // see: https://github.com/Automattic/has-binary/pull/4
      if (obj.toJSON && 'function' == typeof obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 228 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}


/***/ }),
/* 229 */
/***/ (function(module, exports) {



/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var asn1 = __webpack_require__(595)
var aesid = __webpack_require__(594)
var fixProc = __webpack_require__(596)
var ciphers = __webpack_require__(235)
var compat = __webpack_require__(473)
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(621);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(632);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 234 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(509)
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = __webpack_require__(508)
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = __webpack_require__(219)
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(30);
var randomBytes = __webpack_require__(122);
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var buffer = __webpack_require__(1);
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var createHash = __webpack_require__(111);
var inherits = __webpack_require__(11)

var Transform = __webpack_require__(82).Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(527);
exports.Cipher = __webpack_require__(524);
exports.DES = __webpack_require__(525);
exports.CBC = __webpack_require__(523);
exports.EDE = __webpack_require__(526);


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var parser = __webpack_require__(62);
var Emitter = __webpack_require__(242);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(570);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var EventEmitter = __webpack_require__(41).EventEmitter;
var parser = __webpack_require__(62);
var util = __webpack_require__(37);
var debug = __webpack_require__(120)('engine:transport');

/**
 * Expose the constructor.
 */

module.exports = Transport;

/**
 * Noop function.
 *
 * @api private
 */

function noop () {}

/**
 * Transport constructor.
 *
 * @param {http.IncomingMessage} request
 * @api public
 */

function Transport (req) {
  this.readyState = 'open';
  this.discarded = false;
}

/**
 * Inherits from EventEmitter.
 */

util.inherits(Transport, EventEmitter);

/**
 * Flags the transport as discarded.
 *
 * @api private
 */

Transport.prototype.discard = function () {
  this.discarded = true;
};

/**
 * Called with an incoming HTTP request.
 *
 * @param {http.IncomingMessage} request
 * @api private
 */

Transport.prototype.onRequest = function (req) {
  debug('setting request');
  this.req = req;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function (fn) {
  if ('closed' === this.readyState || 'closing' === this.readyState) return;

  this.readyState = 'closing';
  this.doClose(fn || noop);
};

/**
 * Called with a transport error.
 *
 * @param {String} message error
 * @param {Object} error description
 * @api private
 */

Transport.prototype.onError = function (msg, desc) {
  if (this.listeners('error').length) {
    var err = new Error(msg);
    err.type = 'TransportError';
    err.description = desc;
    this.emit('error', err);
  } else {
    debug('ignored transport error %s (%s)', msg, desc);
  }
};

/**
 * Called with parsed out a packets from the data stream.
 *
 * @param {Object} packet
 * @api private
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called with the encoded packet data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  this.onPacket(parser.decodePacket(data));
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),
/* 244 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 245 */
/***/ (function(module, exports) {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(603);
exports.encode = exports.stringify = __webpack_require__(604);


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(80);

/*<replacement>*/
var util = __webpack_require__(119);
util.inherits = __webpack_require__(11);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/*<replacement>*/
var processNextTick = __webpack_require__(246);
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(119);
util.inherits = __webpack_require__(11);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(639)
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = __webpack_require__(82);
  } catch (_) {} finally {
    if (!Stream) Stream = __webpack_require__(41).EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = __webpack_require__(1).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(237);
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(80);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(80);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16), __webpack_require__(252).setImmediate))

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
  try {
    return __webpack_require__(82); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = __webpack_require__(478);
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(249);
exports.Duplex = __webpack_require__(80);
exports.Transform = __webpack_require__(248);
exports.PassThrough = __webpack_require__(477);

if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(1).Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(610);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(11);
var Reporter = __webpack_require__(116).Reporter;
var Buffer = __webpack_require__(1).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(498);


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(11);

var asn1 = __webpack_require__(217);
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(11);
var Buffer = __webpack_require__(1).Buffer;

var asn1 = __webpack_require__(217);
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(648);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(218)
var Transform = __webpack_require__(110)
var inherits = __webpack_require__(11)
var GHASH = __webpack_require__(510)
var xor = __webpack_require__(118)
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(118)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(118)

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 445 */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(118)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(218)
var Transform = __webpack_require__(110)
var inherits = __webpack_require__(11)

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
  sign: 'rsa',
  hash: 'sha1',
  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
  sign: 'ecdsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}

exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

exports['1.3.132.0.34'] = 'p384'

exports['1.3.132.0.35'] = 'p521'


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Transform = __webpack_require__(479);

var binding = __webpack_require__(517);
var util = __webpack_require__(37);
var assert = __webpack_require__(503).ok;

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = (16 * 1024);

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
Object.keys(binding).forEach(function(k) {
  if (k.match(/^Z/)) exports[k] = binding[k];
});

// translation table for return codes.
exports.codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

Object.keys(exports.codes).forEach(function(k) {
  exports.codes[exports.codes[k]] = k;
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function(o) {
  return new Deflate(o);
};

exports.createInflate = function(o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function(o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function(o) {
  return new InflateRaw(o);
};

exports.createGzip = function(o) {
  return new Gzip(o);
};

exports.createGunzip = function(o) {
  return new Gunzip(o);
};

exports.createUnzip = function(o) {
  return new Unzip(o);
};


// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function(buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function(buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf = Buffer.concat(buffers, nread);
    buffers = [];
    callback(null, buf);
    engine.close();
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string')
    buffer = new Buffer(buffer);
  if (!Buffer.isBuffer(buffer))
    throw new TypeError('Not a string or buffer');

  var flushFlag = binding.Z_FINISH;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}



// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}



// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}


// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}


// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush) {
    if (opts.flush !== binding.Z_NO_FLUSH &&
        opts.flush !== binding.Z_PARTIAL_FLUSH &&
        opts.flush !== binding.Z_SYNC_FLUSH &&
        opts.flush !== binding.Z_FULL_FLUSH &&
        opts.flush !== binding.Z_FINISH &&
        opts.flush !== binding.Z_BLOCK) {
      throw new Error('Invalid flush flag: ' + opts.flush);
    }
  }
  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
        opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL ||
        opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED &&
        opts.strategy != exports.Z_HUFFMAN_ONLY &&
        opts.strategy != exports.Z_RLE &&
        opts.strategy != exports.Z_FIXED &&
        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._binding = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._binding.onerror = function(message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    self._binding = null;
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                     level,
                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                     strategy,
                     opts.dictionary);

  this._buffer = new Buffer(this._chunkSize);
  this._offset = 0;
  this._closed = false;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function(level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL ||
      level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED &&
      strategy != exports.Z_HUFFMAN_ONLY &&
      strategy != exports.Z_RLE &&
      strategy != exports.Z_FIXED &&
      strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function() {
      self._binding.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function() {
  return this._binding.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function(callback) {
  this._transform(new Buffer(0), '', callback);
};

Zlib.prototype.flush = function(kind, callback) {
  var ws = this._writableState;

  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback)
      process.nextTick(callback);
  } else if (ws.ending) {
    if (callback)
      this.once('end', callback);
  } else if (ws.needDrain) {
    var self = this;
    this.once('drain', function() {
      self.flush(callback);
    });
  } else {
    this._flushFlag = kind;
    this.write(new Buffer(0), '', callback);
  }
};

Zlib.prototype.close = function(callback) {
  if (callback)
    process.nextTick(callback);

  if (this._closed)
    return;

  this._closed = true;

  this._binding.close();

  var self = this;
  process.nextTick(function() {
    self.emit('close');
  });
};

Zlib.prototype._transform = function(chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (!chunk === null && !Buffer.isBuffer(chunk))
    return cb(new Error('invalid input'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last)
    flushFlag = binding.Z_FINISH;
  else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  var self = this;
  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function(er) {
      error = er;
    });

    do {
      var res = this._binding.writeSync(flushFlag,
                                        chunk, // in
                                        inOff, // in_off
                                        availInBefore, // in_len
                                        this._buffer, // out
                                        this._offset, //out_off
                                        availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    var buf = Buffer.concat(buffers, nread);
    this.close();

    return buf;
  }

  var req = this._binding.write(flushFlag,
                                chunk, // in
                                inOff, // in_off
                                availInBefore, // in_len
                                this._buffer, // out
                                this._offset, //out_off
                                availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    if (self._hadError)
      return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = new Buffer(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      if (!async)
        return true;

      var newReq = self._binding.write(flushFlag,
                                       chunk,
                                       inOff,
                                       availInBefore,
                                       self._buffer,
                                       self._offset,
                                       self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async)
      return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, __webpack_require__(16)))

/***/ }),
/* 451 */
/***/ (function(module, exports) {

/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = __webpack_require__(522);

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(122);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(30);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(465);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(241);
var XHR = __webpack_require__(549);
var JSONP = __webpack_require__(548);
var websocket = __webpack_require__(550);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(240);
var parseqs = __webpack_require__(245);
var parser = __webpack_require__(62);
var inherit = __webpack_require__(221);
var yeast = __webpack_require__(488);
var debug = __webpack_require__(224)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(241);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Module dependencies.
 */

var EventEmitter = __webpack_require__(41).EventEmitter;
var util = __webpack_require__(37);
var debug = __webpack_require__(120)('engine:socket');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Client class (abstract).
 *
 * @api private
 */

function Socket (id, server, transport, req) {
  this.id = id;
  this.server = server;
  this.upgrading = false;
  this.upgraded = false;
  this.readyState = 'opening';
  this.writeBuffer = [];
  this.packetsFn = [];
  this.sentCallbackFn = [];
  this.cleanupFn = [];
  this.request = req;

  // Cache IP since it might not be in the req later
  this.remoteAddress = req.connection.remoteAddress;

  this.checkIntervalTimer = null;
  this.upgradeTimeoutTimer = null;
  this.pingTimeoutTimer = null;

  this.setTransport(transport);
  this.onOpen();
}

/**
 * Inherits from EventEmitter.
 */

util.inherits(Socket, EventEmitter);

/**
 * Called upon transport considered open.
 *
 * @api private
 */

Socket.prototype.onOpen = function () {
  this.readyState = 'open';

  // sends an `open` packet
  this.transport.sid = this.id;
  this.sendPacket('open', JSON.stringify({
    sid: this.id,
    upgrades: this.getAvailableUpgrades(),
    pingInterval: this.server.pingInterval,
    pingTimeout: this.server.pingTimeout
  }));

  this.emit('open');
  this.setPingTimeout();
};

/**
 * Called upon transport packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('open' === this.readyState) {
    // export packet event
    debug('packet');
    this.emit('packet', packet);

    // Reset ping timeout on any packet, incoming data is a good sign of
    // other side's liveness
    this.setPingTimeout();

    switch (packet.type) {

      case 'ping':
        debug('got ping');
        this.sendPacket('pong');
        this.emit('heartbeat');
        break;

      case 'error':
        this.onClose('parse error');
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with closed socket');
  }
};

/**
 * Called upon transport error.
 *
 * @param {Error} error object
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('transport error');
  this.onClose('transport error', err);
};

/**
 * Sets and resets ping timeout timer based on client pings.
 *
 * @api private
 */

Socket.prototype.setPingTimeout = function () {
  var self = this;
  clearTimeout(self.pingTimeoutTimer);
  self.pingTimeoutTimer = setTimeout(function () {
    self.onClose('ping timeout');
  }, self.server.pingInterval + self.server.pingTimeout);
};

/**
 * Attaches handlers for the given transport.
 *
 * @param {Transport} transport
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  var onError = this.onError.bind(this);
  var onPacket = this.onPacket.bind(this);
  var flush = this.flush.bind(this);
  var onClose = this.onClose.bind(this, 'transport close');

  this.transport = transport;
  this.transport.once('error', onError);
  this.transport.on('packet', onPacket);
  this.transport.on('drain', flush);
  this.transport.once('close', onClose);
  // this function will manage packet events (also message callbacks)
  this.setupSendCallback();

  this.cleanupFn.push(function () {
    transport.removeListener('error', onError);
    transport.removeListener('packet', onPacket);
    transport.removeListener('drain', flush);
    transport.removeListener('close', onClose);
  });
};

/**
 * Upgrades socket to the given transport
 *
 * @param {Transport} transport
 * @api private
 */

Socket.prototype.maybeUpgrade = function (transport) {
  debug('might upgrade socket transport from "%s" to "%s"'
    , this.transport.name, transport.name);

  this.upgrading = true;

  var self = this;

  // set transport upgrade timer
  self.upgradeTimeoutTimer = setTimeout(function () {
    debug('client did not complete upgrade - closing transport');
    cleanup();
    if ('open' === transport.readyState) {
      transport.close();
    }
  }, this.server.upgradeTimeout);

  function onPacket (packet) {
    if ('ping' === packet.type && 'probe' === packet.data) {
      transport.send([{ type: 'pong', data: 'probe' }]);
      self.emit('upgrading', transport);
      clearInterval(self.checkIntervalTimer);
      self.checkIntervalTimer = setInterval(check, 100);
    } else if ('upgrade' === packet.type && self.readyState !== 'closed') {
      debug('got upgrade packet - upgrading');
      cleanup();
      self.transport.discard();
      self.upgraded = true;
      self.clearTransport();
      self.setTransport(transport);
      self.emit('upgrade', transport);
      self.setPingTimeout();
      self.flush();
      if (self.readyState === 'closing') {
        transport.close(function () {
          self.onClose('forced close');
        });
      }
    } else {
      cleanup();
      transport.close();
    }
  }

  // we force a polling cycle to ensure a fast upgrade
  function check () {
    if ('polling' === self.transport.name && self.transport.writable) {
      debug('writing a noop packet to polling for fast upgrade');
      self.transport.send([{ type: 'noop' }]);
    }
  }

  function cleanup () {
    self.upgrading = false;

    clearInterval(self.checkIntervalTimer);
    self.checkIntervalTimer = null;

    clearTimeout(self.upgradeTimeoutTimer);
    self.upgradeTimeoutTimer = null;

    transport.removeListener('packet', onPacket);
    transport.removeListener('close', onTransportClose);
    transport.removeListener('error', onError);
    self.removeListener('close', onClose);
  }

  function onError (err) {
    debug('client did not complete upgrade - %s', err);
    cleanup();
    transport.close();
    transport = null;
  }

  function onTransportClose () {
    onError('transport closed');
  }

  function onClose () {
    onError('socket closed');
  }

  transport.on('packet', onPacket);
  transport.once('close', onTransportClose);
  transport.once('error', onError);

  self.once('close', onClose);
};

/**
 * Clears listeners and timers associated with current transport.
 *
 * @api private
 */

Socket.prototype.clearTransport = function () {
  var cleanup;

  var toCleanUp = this.cleanupFn.length;

  for (var i = 0; i < toCleanUp; i++) {
    cleanup = this.cleanupFn.shift();
    cleanup();
  }

  // silence further transport errors and prevent uncaught exceptions
  this.transport.on('error', function () {
    debug('error triggered by discarded transport');
  });

  // ensure transport won't stay open
  this.transport.close();

  clearTimeout(this.pingTimeoutTimer);
};

/**
 * Called upon transport considered closed.
 * Possible reasons: `ping timeout`, `client error`, `parse error`,
 * `transport error`, `server close`, `transport close`
 */

Socket.prototype.onClose = function (reason, description) {
  if ('closed' !== this.readyState) {
    this.readyState = 'closed';
    clearTimeout(this.pingTimeoutTimer);
    clearInterval(this.checkIntervalTimer);
    this.checkIntervalTimer = null;
    clearTimeout(this.upgradeTimeoutTimer);
    var self = this;
    // clean writeBuffer in next tick, so developers can still
    // grab the writeBuffer on 'close' event
    process.nextTick(function () {
      self.writeBuffer = [];
    });
    this.packetsFn = [];
    this.sentCallbackFn = [];
    this.clearTransport();
    this.emit('close', reason, description);
  }
};

/**
 * Setup and manage send callback
 *
 * @api private
 */

Socket.prototype.setupSendCallback = function () {
  var self = this;
  this.transport.on('drain', onDrain);

  this.cleanupFn.push(function () {
    self.transport.removeListener('drain', onDrain);
  });

  // the message was sent successfully, execute the callback
  function onDrain () {
    if (self.sentCallbackFn.length > 0) {
      var seqFn = self.sentCallbackFn.splice(0, 1)[0];
      if ('function' === typeof seqFn) {
        debug('executing send callback');
        seqFn(self.transport);
      } else if (Array.isArray(seqFn)) {
        debug('executing batch send callback');
        for (var l = seqFn.length, i = 0; i < l; i++) {
          if ('function' === typeof seqFn[i]) {
            seqFn[i](self.transport);
          }
        }
      }
    }
  }
};

/**
 * Sends a message packet.
 *
 * @param {String} message
 * @param {Object} options
 * @param {Function} callback
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.send =
Socket.prototype.write = function (data, options, callback) {
  this.sendPacket('message', data, options, callback);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type
 * @param {String} optional, data
 * @param {Object} options
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, callback) {
  if ('function' === typeof options) {
    callback = options;
    options = null;
  }

  options = options || {};
  options.compress = false !== options.compress;

  if ('closing' !== this.readyState) {
    debug('sending packet "%s" (%s)', type, data);

    var packet = {
      type: type,
      options: options
    };
    if (data) packet.data = data;

    // exports packetCreate event
    this.emit('packetCreate', packet);

    this.writeBuffer.push(packet);

    // add send callback to object, if defined
    if (callback) this.packetsFn.push(callback);

    this.flush();
  }
};

/**
 * Attempts to flush the packets buffer.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState &&
                this.transport.writable &&
                this.writeBuffer.length) {
    debug('flushing buffer to transport');
    this.emit('flush', this.writeBuffer);
    this.server.emit('flush', this, this.writeBuffer);
    var wbuf = this.writeBuffer;
    this.writeBuffer = [];
    if (!this.transport.supportsFraming) {
      this.sentCallbackFn.push(this.packetsFn);
    } else {
      this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);
    }
    this.packetsFn = [];
    this.transport.send(wbuf);
    this.emit('drain');
    this.server.emit('drain', this);
  }
};

/**
 * Get available upgrades for this socket.
 *
 * @api private
 */

Socket.prototype.getAvailableUpgrades = function () {
  var availableUpgrades = [];
  var allUpgrades = this.server.upgrades(this.transport.name);
  for (var i = 0, l = allUpgrades.length; i < l; ++i) {
    var upg = allUpgrades[i];
    if (this.server.transports.indexOf(upg) !== -1) {
      availableUpgrades.push(upg);
    }
  }
  return availableUpgrades;
};

/**
 * Closes the socket and underlying transport.
 *
 * @param {Boolean} optional, discard
 * @return {Socket} for chaining
 * @api public
 */

Socket.prototype.close = function (discard) {
  if ('open' !== this.readyState) return;

  this.readyState = 'closing';

  if (this.writeBuffer.length) {
    this.once('drain', this.closeTransport.bind(this, discard));
    return;
  }

  this.closeTransport(discard);
};

/**
 * Closes the underlying transport.
 *
 * @param {Boolean} discard
 * @api private
 */

Socket.prototype.closeTransport = function (discard) {
  if (discard) this.transport.discard();
  this.transport.close(this.onClose.bind(this, 'forced close'));
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var XHR = __webpack_require__(557);
var JSONP = __webpack_require__(556);

/**
 * Export transports.
 */

module.exports = exports = {
  polling: polling,
  websocket: __webpack_require__(558)
};

/**
 * Export upgrades map.
 */

exports.polling.upgradesTo = ['websocket'];

/**
 * Polling polymorphic constructor.
 *
 * @api private
 */

function polling (req) {
  if ('string' === typeof req._query.j) {
    return new JSONP(req);
  } else {
    return new XHR(req);
  }
}


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * Module requirements.
 */

var Transport = __webpack_require__(243);
var parser = __webpack_require__(62);
var zlib = __webpack_require__(450);
var accepts = __webpack_require__(492);
var util = __webpack_require__(37);
var debug = __webpack_require__(120)('engine:polling');

var compressionMethods = {
  gzip: zlib.createGzip,
  deflate: zlib.createDeflate
};

/**
 * Exports the constructor.
 */

module.exports = Polling;

/**
 * HTTP polling constructor.
 *
 * @api public.
 */

function Polling (req) {
  Transport.call(this, req);

  this.closeTimeout = 30 * 1000;
  this.maxHttpBufferSize = null;
  this.httpCompression = null;
}

/**
 * Inherits from Transport.
 *
 * @api public.
 */

util.inherits(Polling, Transport);

/**
 * Transport name
 *
 * @api public
 */

Polling.prototype.name = 'polling';

/**
 * Overrides onRequest.
 *
 * @param {http.IncomingMessage}
 * @api private
 */

Polling.prototype.onRequest = function (req) {
  var res = req.res;

  if ('GET' === req.method) {
    this.onPollRequest(req, res);
  } else if ('POST' === req.method) {
    this.onDataRequest(req, res);
  } else {
    res.writeHead(500);
    res.end();
  }
};

/**
 * The client sends a request awaiting for us to send data.
 *
 * @api private
 */

Polling.prototype.onPollRequest = function (req, res) {
  if (this.req) {
    debug('request overlap');
    // assert: this.res, '.req and .res should be (un)set together'
    this.onError('overlap from client');
    res.writeHead(500);
    res.end();
    return;
  }

  debug('setting request');

  this.req = req;
  this.res = res;

  var self = this;

  function onClose () {
    self.onError('poll connection closed prematurely');
  }

  function cleanup () {
    req.removeListener('close', onClose);
    self.req = self.res = null;
  }

  req.cleanup = cleanup;
  req.on('close', onClose);

  this.writable = true;
  this.emit('drain');

  // if we're still writable but had a pending close, trigger an empty send
  if (this.writable && this.shouldClose) {
    debug('triggering empty send to append close packet');
    this.send([{ type: 'noop' }]);
  }
};

/**
 * The client sends a request with data.
 *
 * @api private
 */

Polling.prototype.onDataRequest = function (req, res) {
  if (this.dataReq) {
    // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'
    this.onError('data request overlap from client');
    res.writeHead(500);
    res.end();
    return;
  }

  var isBinary = 'application/octet-stream' === req.headers['content-type'];

  this.dataReq = req;
  this.dataRes = res;

  var chunks = isBinary ? new Buffer(0) : '';
  var self = this;

  function cleanup () {
    chunks = isBinary ? new Buffer(0) : '';
    req.removeListener('data', onData);
    req.removeListener('end', onEnd);
    req.removeListener('close', onClose);
    self.dataReq = self.dataRes = null;
  }

  function onClose () {
    cleanup();
    self.onError('data request connection closed prematurely');
  }

  function onData (data) {
    var contentLength;
    if (typeof data === 'string') {
      chunks += data;
      contentLength = Buffer.byteLength(chunks);
    } else {
      chunks = Buffer.concat([chunks, data]);
      contentLength = chunks.length;
    }

    if (contentLength > self.maxHttpBufferSize) {
      chunks = '';
      req.connection.destroy();
    }
  }

  function onEnd () {
    self.onData(chunks);

    var headers = {
      // text/html is required instead of text/plain to avoid an
      // unwanted download dialog on certain user-agents (GH-43)
      'Content-Type': 'text/html',
      'Content-Length': 2
    };

    res.writeHead(200, self.headers(req, headers));
    res.end('ok');
    cleanup();
  }

  req.on('close', onClose);
  if (!isBinary) req.setEncoding('utf8');
  req.on('data', onData);
  req.on('end', onEnd);
};

/**
 * Processes the incoming data payload.
 *
 * @param {String} encoded payload
 * @api private
 */

Polling.prototype.onData = function (data) {
  debug('received "%s"', data);
  var self = this;
  var callback = function (packet) {
    if ('close' === packet.type) {
      debug('got xhr close packet');
      self.onClose();
      return false;
    }

    self.onPacket(packet);
  };

  parser.decodePayload(data, callback);
};

/**
 * Overrides onClose.
 *
 * @api private
 */

Polling.prototype.onClose = function () {
  if (this.writable) {
    // close pending poll request
    this.send([{ type: 'noop' }]);
  }
  Transport.prototype.onClose.call(this);
};

/**
 * Writes a packet payload.
 *
 * @param {Object} packet
 * @api private
 */

Polling.prototype.send = function (packets) {
  this.writable = false;

  if (this.shouldClose) {
    debug('appending close packet to payload');
    packets.push({ type: 'close' });
    this.shouldClose();
    this.shouldClose = null;
  }

  var self = this;
  parser.encodePayload(packets, this.supportsBinary, function (data) {
    var compress = packets.some(function (packet) {
      return packet.options && packet.options.compress;
    });
    self.write(data, { compress: compress });
  });
};

/**
 * Writes data as response to poll request.
 *
 * @param {String} data
 * @param {Object} options
 * @api private
 */

Polling.prototype.write = function (data, options) {
  debug('writing "%s"', data);
  var self = this;
  this.doWrite(data, options, function () {
    self.req.cleanup();
  });
};

/**
 * Performs the write.
 *
 * @api private
 */

Polling.prototype.doWrite = function (data, options, callback) {
  var self = this;

  // explicit UTF-8 is required for pages not served under utf
  var isString = typeof data === 'string';
  var contentType = isString
    ? 'text/plain; charset=UTF-8'
    : 'application/octet-stream';

  var headers = {
    'Content-Type': contentType
  };

  if (!this.httpCompression || !options.compress) {
    respond(data);
    return;
  }

  var len = isString ? Buffer.byteLength(data) : data.length;
  if (len < this.httpCompression.threshold) {
    respond(data);
    return;
  }

  var encoding = accepts(this.req).encodings(['gzip', 'deflate']);
  if (!encoding) {
    respond(data);
    return;
  }

  this.compress(data, encoding, function (err, data) {
    if (err) {
      self.res.writeHead(500);
      self.res.end();
      callback(err);
      return;
    }

    headers['Content-Encoding'] = encoding;
    respond(data);
  });

  function respond (data) {
    headers['Content-Length'] = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
    self.res.writeHead(200, self.headers(self.req, headers));
    self.res.end(data);
    callback();
  }
};

/**
 * Comparesses data.
 *
 * @api private
 */

Polling.prototype.compress = function (data, encoding, callback) {
  debug('compressing');

  var buffers = [];
  var nread = 0;

  compressionMethods[encoding](this.httpCompression)
    .on('error', callback)
    .on('data', function (chunk) {
      buffers.push(chunk);
      nread += chunk.length;
    })
    .on('end', function () {
      callback(null, Buffer.concat(buffers, nread));
    })
    .end(data);
};

/**
 * Closes the transport.
 *
 * @api private
 */

Polling.prototype.doClose = function (fn) {
  debug('closing');

  var self = this;
  var closeTimeoutTimer;

  if (this.dataReq) {
    debug('aborting ongoing data request');
    this.dataReq.destroy();
  }

  if (this.writable) {
    debug('transport writable - closing right away');
    this.send([{ type: 'close' }]);
    onClose();
  } else if (this.discarded) {
    debug('transport discarded - closing right away');
    onClose();
  } else {
    debug('transport not writable - buffering orderly close');
    this.shouldClose = onClose;
    closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);
  }

  function onClose () {
    clearTimeout(closeTimeoutTimer);
    fn();
    self.onClose();
  }
};

/**
 * Returns headers for a response.
 *
 * @param {http.IncomingMessage} request
 * @param {Object} extra headers
 * @api private
 */

Polling.prototype.headers = function (req, headers) {
  headers = headers || {};

  // prevent XSS warnings on IE
  // https://github.com/LearnBoost/socket.io/pull/1333
  var ua = req.headers['user-agent'];
  if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {
    headers['X-XSS-Protection'] = '0';
  }

  this.emit('headers', headers);
  return headers;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

try {
  module.exports = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"bufferutil\""); e.code = 'MODULE_NOT_FOUND';; throw e; }()));
} catch (e) {
  module.exports = __webpack_require__(563);
}


/***/ }),
/* 460 */
/***/ (function(module, exports) {

/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

module.exports = {
  isValidErrorCode: function(code) {
    return (code >= 1000 && code <= 1011 && code != 1004 && code != 1005 && code != 1006) ||
         (code >= 3000 && code <= 4999);
  },
  1000: 'normal',
  1001: 'going away',
  1002: 'protocol error',
  1003: 'unsupported data',
  1004: 'reserved',
  1005: 'reserved for extensions',
  1006: 'reserved for extensions',
  1007: 'inconsistent or invalid data',
  1008: 'policy violation',
  1009: 'message too big',
  1010: 'extension handshake missing',
  1011: 'an unexpected condition prevented the request from being fulfilled',
};

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {


var util = __webpack_require__(37);

/**
 * Module exports.
 */

exports.parse = parse;
exports.format = format;

/**
 * Parse extensions header value
 */

function parse(value) {
  value = value || '';

  var extensions = {};

  value.split(',').forEach(function(v) {
    var params = v.split(';');
    var token = params.shift().trim();
    var paramsList = extensions[token] = extensions[token] || [];
    var parsedParams = {};

    params.forEach(function(param) {
      var parts = param.trim().split('=');
      var key = parts[0];
      var value = parts[1];
      if (typeof value === 'undefined') {
        value = true;
      } else {
        // unquote value
        if (value[0] === '"') {
          value = value.slice(1);
        }
        if (value[value.length - 1] === '"') {
          value = value.slice(0, value.length - 1);
        }
      }
      (parsedParams[key] = parsedParams[key] || []).push(value);
    });

    paramsList.push(parsedParams);
  });

  return extensions;
}

/**
 * Format extensions header value
 */

function format(value) {
  return Object.keys(value).map(function(token) {
    var paramsList = value[token];
    if (!util.isArray(paramsList)) {
      paramsList = [paramsList];
    }
    return paramsList.map(function(params) {
      return [token].concat(Object.keys(params).map(function(k) {
        var p = params[k];
        if (!util.isArray(p)) p = [p];
        return p.map(function(v) {
          return v === true ? k : k + '=' + v;
        }).join('; ');
      })).join('; ');
    }).join(', ');
  }).join(', ');
}


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var util = __webpack_require__(37)
  , Validation = __webpack_require__(567).Validation
  , ErrorCodes = __webpack_require__(460)
  , BufferPool = __webpack_require__(562)
  , bufferUtil = __webpack_require__(459).BufferUtil
  , PerMessageDeflate = __webpack_require__(225);

/**
 * HyBi Receiver implementation
 */

function Receiver (extensions,maxPayload) {
  if (this instanceof Receiver === false) {
    throw new TypeError("Classes can't be function-called");
  }
  if(typeof extensions==='number'){
    maxPayload=extensions;
    extensions={};
  }


  // memory pool for fragmented messages
  var fragmentedPoolPrevUsed = -1;
  this.fragmentedBufferPool = new BufferPool(1024, function(db, length) {
    return db.used + length;
  }, function(db) {
    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ?
      Math.ceil((fragmentedPoolPrevUsed + db.used) / 2) :
      db.used;
  });

  // memory pool for unfragmented messages
  var unfragmentedPoolPrevUsed = -1;
  this.unfragmentedBufferPool = new BufferPool(1024, function(db, length) {
    return db.used + length;
  }, function(db) {
    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ?
      Math.ceil((unfragmentedPoolPrevUsed + db.used) / 2) :
      db.used;
  });
  this.extensions = extensions || {};
  this.maxPayload = maxPayload || 0;
  this.currentPayloadLength = 0;
  this.state = {
    activeFragmentedOperation: null,
    lastFragment: false,
    masked: false,
    opcode: 0,
    fragmentedOperation: false
  };
  this.overflow = [];
  this.headerBuffer = new Buffer(10);
  this.expectOffset = 0;
  this.expectBuffer = null;
  this.expectHandler = null;
  this.currentMessage = [];
  this.currentMessageLength = 0;
  this.messageHandlers = [];
  this.expectHeader(2, this.processPacket);
  this.dead = false;
  this.processing = false;

  this.onerror = function() {};
  this.ontext = function() {};
  this.onbinary = function() {};
  this.onclose = function() {};
  this.onping = function() {};
  this.onpong = function() {};
}

module.exports = Receiver;

/**
 * Add new data to the parser.
 *
 * @api public
 */

Receiver.prototype.add = function(data) {
  if (this.dead) return;
  var dataLength = data.length;
  if (dataLength == 0) return;
  if (this.expectBuffer == null) {
    this.overflow.push(data);
    return;
  }
  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);
  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);
  this.expectOffset += toRead;
  if (toRead < dataLength) {
    this.overflow.push(data.slice(toRead));
  }
  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {
    var bufferForHandler = this.expectBuffer;
    this.expectBuffer = null;
    this.expectOffset = 0;
    this.expectHandler.call(this, bufferForHandler);
  }
};

/**
 * Releases all resources used by the receiver.
 *
 * @api public
 */

Receiver.prototype.cleanup = function() {
  this.dead = true;
  this.overflow = null;
  this.headerBuffer = null;
  this.expectBuffer = null;
  this.expectHandler = null;
  this.unfragmentedBufferPool = null;
  this.fragmentedBufferPool = null;
  this.state = null;
  this.currentMessage = null;
  this.onerror = null;
  this.ontext = null;
  this.onbinary = null;
  this.onclose = null;
  this.onping = null;
  this.onpong = null;
};

/**
 * Waits for a certain amount of header bytes to be available, then fires a callback.
 *
 * @api private
 */

Receiver.prototype.expectHeader = function(length, handler) {
  if (length == 0) {
    handler(null);
    return;
  }
  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);
  this.expectHandler = handler;
  var toRead = length;
  while (toRead > 0 && this.overflow.length > 0) {
    var fromOverflow = this.overflow.pop();
    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));
    var read = Math.min(fromOverflow.length, toRead);
    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);
    this.expectOffset += read;
    toRead -= read;
  }
};

/**
 * Waits for a certain amount of data bytes to be available, then fires a callback.
 *
 * @api private
 */

Receiver.prototype.expectData = function(length, handler) {
  if (length == 0) {
    handler(null);
    return;
  }
  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);
  this.expectHandler = handler;
  var toRead = length;
  while (toRead > 0 && this.overflow.length > 0) {
    var fromOverflow = this.overflow.pop();
    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));
    var read = Math.min(fromOverflow.length, toRead);
    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);
    this.expectOffset += read;
    toRead -= read;
  }
};

/**
 * Allocates memory from the buffer pool.
 *
 * @api private
 */

Receiver.prototype.allocateFromPool = function(length, isFragmented) {
  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);
};

/**
 * Start processing a new packet.
 *
 * @api private
 */

Receiver.prototype.processPacket = function (data) {
  if (this.extensions[PerMessageDeflate.extensionName]) {
    if ((data[0] & 0x30) != 0) {
      this.error('reserved fields (2, 3) must be empty', 1002);
      return;
    }
  } else {
    if ((data[0] & 0x70) != 0) {
      this.error('reserved fields must be empty', 1002);
      return;
    }
  }
  this.state.lastFragment = (data[0] & 0x80) == 0x80;
  this.state.masked = (data[1] & 0x80) == 0x80;
  var compressed = (data[0] & 0x40) == 0x40;
  var opcode = data[0] & 0xf;
  if (opcode === 0) {
    if (compressed) {
      this.error('continuation frame cannot have the Per-message Compressed bits', 1002);
      return;
    }
    // continuation frame
    this.state.fragmentedOperation = true;
    this.state.opcode = this.state.activeFragmentedOperation;
    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {
      this.error('continuation frame cannot follow current opcode', 1002);
      return;
    }
  }
  else {
    if (opcode < 3 && this.state.activeFragmentedOperation != null) {
      this.error('data frames after the initial data frame must have opcode 0', 1002);
      return;
    }
    if (opcode >= 8 && compressed) {
      this.error('control frames cannot have the Per-message Compressed bits', 1002);
      return;
    }
    this.state.compressed = compressed;
    this.state.opcode = opcode;
    if (this.state.lastFragment === false) {
      this.state.fragmentedOperation = true;
      this.state.activeFragmentedOperation = opcode;
    }
    else this.state.fragmentedOperation = false;
  }
  var handler = opcodes[this.state.opcode];
  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);
  else {
    handler.start.call(this, data);
  }
};

/**
 * Endprocessing a packet.
 *
 * @api private
 */

Receiver.prototype.endPacket = function() {
  if (this.dead) return;
  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);
  else if (this.state.lastFragment) this.fragmentedBufferPool.reset(true);
  this.expectOffset = 0;
  this.expectBuffer = null;
  this.expectHandler = null;
  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {
    // end current fragmented operation
    this.state.activeFragmentedOperation = null;
  }
  this.currentPayloadLength = 0;
  this.state.lastFragment = false;
  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;
  this.state.masked = false;
  this.expectHeader(2, this.processPacket);
};

/**
 * Reset the parser state.
 *
 * @api private
 */

Receiver.prototype.reset = function() {
  if (this.dead) return;
  this.state = {
    activeFragmentedOperation: null,
    lastFragment: false,
    masked: false,
    opcode: 0,
    fragmentedOperation: false
  };
  this.fragmentedBufferPool.reset(true);
  this.unfragmentedBufferPool.reset(true);
  this.expectOffset = 0;
  this.expectBuffer = null;
  this.expectHandler = null;
  this.overflow = [];
  this.currentMessage = [];
  this.currentMessageLength = 0;
  this.messageHandlers = [];
  this.currentPayloadLength = 0;
};

/**
 * Unmask received data.
 *
 * @api private
 */

Receiver.prototype.unmask = function (mask, buf, binary) {
  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);
  if (binary) return buf;
  return buf != null ? buf.toString('utf8') : '';
};

/**
 * Handles an error
 *
 * @api private
 */

Receiver.prototype.error = function (reason, protocolErrorCode) {
  if (this.dead) return;
  this.reset();
  if(typeof reason == 'string'){
    this.onerror(new Error(reason), protocolErrorCode);
  }
  else if(reason.constructor == Error){
    this.onerror(reason, protocolErrorCode);
  }
  else{
    this.onerror(new Error("An error occured"),protocolErrorCode);
  }
  return this;
};

/**
 * Execute message handler buffers
 *
 * @api private
 */

Receiver.prototype.flush = function() {
  if (this.processing || this.dead) return;

  var handler = this.messageHandlers.shift();
  if (!handler) return;

  this.processing = true;
  var self = this;

  handler(function() {
    self.processing = false;
    self.flush();
  });
};

/**
 * Apply extensions to message
 *
 * @api private
 */

Receiver.prototype.applyExtensions = function(messageBuffer, fin, compressed, callback) {
  var self = this;
  if (compressed) {
    this.extensions[PerMessageDeflate.extensionName].decompress(messageBuffer, fin, function(err, buffer) {
      if (self.dead) return;
      if (err) {
        callback(new Error('invalid compressed data'));
        return;
      }
      callback(null, buffer);
    });
  } else {
    callback(null, messageBuffer);
  }
};

/**
* Checks payload size, disconnects socket when it exceeds maxPayload
*
* @api private
*/
Receiver.prototype.maxPayloadExceeded = function(length) {
  if (this.maxPayload=== undefined || this.maxPayload === null || this.maxPayload < 1) {
    return false;
  }
  var fullLength = this.currentPayloadLength + length;
  if (fullLength < this.maxPayload) {
    this.currentPayloadLength = fullLength;
    return false;
  }
  this.error('payload cannot exceed ' + this.maxPayload + ' bytes', 1009);
  this.messageBuffer=[];
  this.cleanup();

  return true;
};

/**
 * Buffer utilities
 */

function readUInt16BE(start) {
  return (this[start]<<8) +
         this[start+1];
}

function readUInt32BE(start) {
  return (this[start]<<24) +
         (this[start+1]<<16) +
         (this[start+2]<<8) +
         this[start+3];
}

function fastCopy(length, srcBuffer, dstBuffer, dstOffset) {
  switch (length) {
    default: srcBuffer.copy(dstBuffer, dstOffset, 0, length); break;
    case 16: dstBuffer[dstOffset+15] = srcBuffer[15];
    case 15: dstBuffer[dstOffset+14] = srcBuffer[14];
    case 14: dstBuffer[dstOffset+13] = srcBuffer[13];
    case 13: dstBuffer[dstOffset+12] = srcBuffer[12];
    case 12: dstBuffer[dstOffset+11] = srcBuffer[11];
    case 11: dstBuffer[dstOffset+10] = srcBuffer[10];
    case 10: dstBuffer[dstOffset+9] = srcBuffer[9];
    case 9: dstBuffer[dstOffset+8] = srcBuffer[8];
    case 8: dstBuffer[dstOffset+7] = srcBuffer[7];
    case 7: dstBuffer[dstOffset+6] = srcBuffer[6];
    case 6: dstBuffer[dstOffset+5] = srcBuffer[5];
    case 5: dstBuffer[dstOffset+4] = srcBuffer[4];
    case 4: dstBuffer[dstOffset+3] = srcBuffer[3];
    case 3: dstBuffer[dstOffset+2] = srcBuffer[2];
    case 2: dstBuffer[dstOffset+1] = srcBuffer[1];
    case 1: dstBuffer[dstOffset] = srcBuffer[0];
  }
}

function clone(obj) {
  var cloned = {};
  for (var k in obj) {
    if (obj.hasOwnProperty(k)) {
      cloned[k] = obj[k];
    }
  }
  return cloned;
}

/**
 * Opcode handlers
 */

var opcodes = {
  // text
  '1': {
    start: function(data) {
      var self = this;
      // decode length
      var firstLength = data[1] & 0x7f;
      if (firstLength < 126) {
        if (self.maxPayloadExceeded(firstLength)){
          self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);
          return;
        }
        opcodes['1'].getData.call(self, firstLength);
      }
      else if (firstLength == 126) {
        self.expectHeader(2, function(data) {
          var length = readUInt16BE.call(data, 0);
          if (self.maxPayloadExceeded(length)){
            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);
            return;
          }
          opcodes['1'].getData.call(self, length);
        });
      }
      else if (firstLength == 127) {
        self.expectHeader(8, function(data) {
          if (readUInt32BE.call(data, 0) != 0) {
            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);
            return;
          }
          var length = readUInt32BE.call(data, 4);
          if (self.maxPayloadExceeded(length)){
            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);
            return;
          }
          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));
        });
      }
    },
    getData: function(length) {
      var self = this;
      if (self.state.masked) {
        self.expectHeader(4, function(data) {
          var mask = data;
          self.expectData(length, function(data) {
            opcodes['1'].finish.call(self, mask, data);
          });
        });
      }
      else {
        self.expectData(length, function(data) {
          opcodes['1'].finish.call(self, null, data);
        });
      }
    },
    finish: function(mask, data) {
      var self = this;
      var packet = this.unmask(mask, data, true) || new Buffer(0);
      var state = clone(this.state);
      this.messageHandlers.push(function(callback) {
        self.applyExtensions(packet, state.lastFragment, state.compressed, function(err, buffer) {
          if (err) {
            if(err.type===1009){
                return self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);
            }
            return self.error(err.message, 1007);
          }
          if (buffer != null) {
            if( self.maxPayload==0 || (self.maxPayload > 0 && (self.currentMessageLength + buffer.length) < self.maxPayload) ){
              self.currentMessage.push(buffer);
            }
            else{
                self.currentMessage=null;
                self.currentMessage = [];
                self.currentMessageLength = 0;
                self.error(new Error('Maximum payload exceeded. maxPayload: '+self.maxPayload), 1009);
                return;
            }
            self.currentMessageLength += buffer.length;
          }
          if (state.lastFragment) {
            var messageBuffer = Buffer.concat(self.currentMessage);
            self.currentMessage = [];
            self.currentMessageLength = 0;
            if (!Validation.isValidUTF8(messageBuffer)) {
              self.error('invalid utf8 sequence', 1007);
              return;
            }
            self.ontext(messageBuffer.toString('utf8'), {masked: state.masked, buffer: messageBuffer});
          }
          callback();
        });
      });
      this.flush();
      this.endPacket();
    }
  },
  // binary
  '2': {
    start: function(data) {
      var self = this;
      // decode length
      var firstLength = data[1] & 0x7f;
      if (firstLength < 126) {
          if (self.maxPayloadExceeded(firstLength)){
            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);
            return;
          }
        opcodes['2'].getData.call(self, firstLength);
      }
      else if (firstLength == 126) {
        self.expectHeader(2, function(data) {
          var length = readUInt16BE.call(data, 0);
          if (self.maxPayloadExceeded(length)){
            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);
            return;
          }
          opcodes['2'].getData.call(self, length);
        });
      }
      else if (firstLength == 127) {
        self.expectHeader(8, function(data) {
          if (readUInt32BE.call(data, 0) != 0) {
            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);
            return;
          }
          var length = readUInt32BE.call(data, 4, true);
          if (self.maxPayloadExceeded(length)){
            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);
            return;
          }
          opcodes['2'].getData.call(self, length);
        });
      }
    },
    getData: function(length) {
      var self = this;
      if (self.state.masked) {
        self.expectHeader(4, function(data) {
          var mask = data;
          self.expectData(length, function(data) {
            opcodes['2'].finish.call(self, mask, data);
          });
        });
      }
      else {
        self.expectData(length, function(data) {
          opcodes['2'].finish.call(self, null, data);
        });
      }
    },
    finish: function(mask, data) {
      var self = this;
      var packet = this.unmask(mask, data, true) || new Buffer(0);
      var state = clone(this.state);
      this.messageHandlers.push(function(callback) {
        self.applyExtensions(packet, state.lastFragment, state.compressed, function(err, buffer) {
          if (err) {
            if(err.type===1009){
                return self.error('Max payload exceeded in compressed binary message. Aborting...', 1009);
            }
            return self.error(err.message, 1007);
          }
          if (buffer != null) {
            if( self.maxPayload==0 || (self.maxPayload > 0 && (self.currentMessageLength + buffer.length) < self.maxPayload) ){
              self.currentMessage.push(buffer);
            }
            else{
                self.currentMessage=null;
                self.currentMessage = [];
                self.currentMessageLength = 0;
                self.error(new Error('Maximum payload exceeded'), 1009);
                return;
            }
            self.currentMessageLength += buffer.length;
          }
          if (state.lastFragment) {
            var messageBuffer = Buffer.concat(self.currentMessage);
            self.currentMessage = [];
            self.currentMessageLength = 0;
            self.onbinary(messageBuffer, {masked: state.masked, buffer: messageBuffer});
          }
          callback();
        });
      });
      this.flush();
      this.endPacket();
    }
  },
  // close
  '8': {
    start: function(data) {
      var self = this;
      if (self.state.lastFragment == false) {
        self.error('fragmented close is not supported', 1002);
        return;
      }

      // decode length
      var firstLength = data[1] & 0x7f;
      if (firstLength < 126) {
        opcodes['8'].getData.call(self, firstLength);
      }
      else {
        self.error('control frames cannot have more than 125 bytes of data', 1002);
      }
    },
    getData: function(length) {
      var self = this;
      if (self.state.masked) {
        self.expectHeader(4, function(data) {
          var mask = data;
          self.expectData(length, function(data) {
            opcodes['8'].finish.call(self, mask, data);
          });
        });
      }
      else {
        self.expectData(length, function(data) {
          opcodes['8'].finish.call(self, null, data);
        });
      }
    },
    finish: function(mask, data) {
      var self = this;
      data = self.unmask(mask, data, true);

      var state = clone(this.state);
      this.messageHandlers.push(function() {
        if (data && data.length == 1) {
          self.error('close packets with data must be at least two bytes long', 1002);
          return;
        }
        var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;
        if (!ErrorCodes.isValidErrorCode(code)) {
          self.error('invalid error code', 1002);
          return;
        }
        var message = '';
        if (data && data.length > 2) {
          var messageBuffer = data.slice(2);
          if (!Validation.isValidUTF8(messageBuffer)) {
            self.error('invalid utf8 sequence', 1007);
            return;
          }
          message = messageBuffer.toString('utf8');
        }
        self.onclose(code, message, {masked: state.masked});
        self.reset();
      });
      this.flush();
    },
  },
  // ping
  '9': {
    start: function(data) {
      var self = this;
      if (self.state.lastFragment == false) {
        self.error('fragmented ping is not supported', 1002);
        return;
      }

      // decode length
      var firstLength = data[1] & 0x7f;
      if (firstLength < 126) {
        opcodes['9'].getData.call(self, firstLength);
      }
      else {
        self.error('control frames cannot have more than 125 bytes of data', 1002);
      }
    },
    getData: function(length) {
      var self = this;
      if (self.state.masked) {
        self.expectHeader(4, function(data) {
          var mask = data;
          self.expectData(length, function(data) {
            opcodes['9'].finish.call(self, mask, data);
          });
        });
      }
      else {
        self.expectData(length, function(data) {
          opcodes['9'].finish.call(self, null, data);
        });
      }
    },
    finish: function(mask, data) {
      var self = this;
      data = this.unmask(mask, data, true);
      var state = clone(this.state);
      this.messageHandlers.push(function(callback) {
        self.onping(data, {masked: state.masked, binary: true});
        callback();
      });
      this.flush();
      this.endPacket();
    }
  },
  // pong
  '10': {
    start: function(data) {
      var self = this;
      if (self.state.lastFragment == false) {
        self.error('fragmented pong is not supported', 1002);
        return;
      }

      // decode length
      var firstLength = data[1] & 0x7f;
      if (firstLength < 126) {
        opcodes['10'].getData.call(self, firstLength);
      }
      else {
        self.error('control frames cannot have more than 125 bytes of data', 1002);
      }
    },
    getData: function(length) {
      var self = this;
      if (this.state.masked) {
        this.expectHeader(4, function(data) {
          var mask = data;
          self.expectData(length, function(data) {
            opcodes['10'].finish.call(self, mask, data);
          });
        });
      }
      else {
        this.expectData(length, function(data) {
          opcodes['10'].finish.call(self, null, data);
        });
      }
    },
    finish: function(mask, data) {
      var self = this;
      data = self.unmask(mask, data, true);
      var state = clone(this.state);
      this.messageHandlers.push(function(callback) {
        self.onpong(data, {masked: state.masked, binary: true});
        callback();
      });
      this.flush();
      this.endPacket();
    }
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var events = __webpack_require__(41)
  , util = __webpack_require__(37)
  , crypto = __webpack_require__(222)
  , EventEmitter = events.EventEmitter
  , ErrorCodes = __webpack_require__(460)
  , bufferUtil = __webpack_require__(459).BufferUtil
  , PerMessageDeflate = __webpack_require__(225);

/**
 * HyBi Sender implementation
 */

function Sender(socket, extensions) {
  if (this instanceof Sender === false) {
    throw new TypeError("Classes can't be function-called");
  }

  events.EventEmitter.call(this);

  this._socket = socket;
  this.extensions = extensions || {};
  this.firstFragment = true;
  this.compress = false;
  this.messageHandlers = [];
  this.processing = false;
}

/**
 * Inherits from EventEmitter.
 */

util.inherits(Sender, events.EventEmitter);

/**
 * Sends a close instruction to the remote party.
 *
 * @api public
 */

Sender.prototype.close = function(code, data, mask, cb) {
  if (typeof code !== 'undefined') {
    if (typeof code !== 'number' ||
      !ErrorCodes.isValidErrorCode(code)) throw new Error('first argument must be a valid error code number');
  }
  code = code || 1000;
  var dataBuffer = new Buffer(2 + (data ? Buffer.byteLength(data) : 0));
  writeUInt16BE.call(dataBuffer, code, 0);
  if (dataBuffer.length > 2) dataBuffer.write(data, 2);

  var self = this;
  this.messageHandlers.push(function() {
    self.frameAndSend(0x8, dataBuffer, true, mask);
    if (typeof cb == 'function') cb();
  });
  this.flush();
};

/**
 * Sends a ping message to the remote party.
 *
 * @api public
 */

Sender.prototype.ping = function(data, options) {
  var mask = options && options.mask;
  var self = this;
  this.messageHandlers.push(function() {
    self.frameAndSend(0x9, data || '', true, mask);
  });
  this.flush();
};

/**
 * Sends a pong message to the remote party.
 *
 * @api public
 */

Sender.prototype.pong = function(data, options) {
  var mask = options && options.mask;
  var self = this;
  this.messageHandlers.push(function() {
    self.frameAndSend(0xa, data || '', true, mask);
  });
  this.flush();
};

/**
 * Sends text or binary data to the remote party.
 *
 * @api public
 */

Sender.prototype.send = function(data, options, cb) {
  var finalFragment = options && options.fin === false ? false : true;
  var mask = options && options.mask;
  var compress = options && options.compress;
  var opcode = options && options.binary ? 2 : 1;
  if (this.firstFragment === false) {
    opcode = 0;
    compress = false;
  } else {
    this.firstFragment = false;
    this.compress = compress;
  }
  if (finalFragment) this.firstFragment = true

  var compressFragment = this.compress;

  var self = this;
  this.messageHandlers.push(function() {
    if (!data || !compressFragment) {
      self.frameAndSend(opcode, data, finalFragment, mask, compress, cb);
      return;
    }

    self.processing = true;
    self.applyExtensions(data, finalFragment, compressFragment, function(err, data) {
      if (err) {
        if (typeof cb == 'function') cb(err);
        else self.emit('error', err);
        return;
      }
      self.frameAndSend(opcode, data, finalFragment, mask, compress, cb);
      self.processing = false;
      self.flush();
    });
  });
  this.flush();
};

/**
 * Frames and sends a piece of data according to the HyBi WebSocket protocol.
 *
 * @api private
 */

Sender.prototype.frameAndSend = function(opcode, data, finalFragment, maskData, compressed, cb) {
  var canModifyData = false;

  if (!data) {
    try {
      this._socket.write(new Buffer([opcode | (finalFragment ? 0x80 : 0), 0 | (maskData ? 0x80 : 0)].concat(maskData ? [0, 0, 0, 0] : [])), 'binary', cb);
    }
    catch (e) {
      if (typeof cb == 'function') cb(e);
      else this.emit('error', e);
    }
    return;
  }

  if (!Buffer.isBuffer(data)) {
    canModifyData = true;
    if (data && (typeof data.byteLength !== 'undefined' || typeof data.buffer !== 'undefined')) {
      data = getArrayBuffer(data);
    } else {
      //
      // If people want to send a number, this would allocate the number in
      // bytes as memory size instead of storing the number as buffer value. So
      // we need to transform it to string in order to prevent possible
      // vulnerabilities / memory attacks.
      //
      if (typeof data === 'number') data = data.toString();

      data = new Buffer(data);
    }
  }

  var dataLength = data.length
    , dataOffset = maskData ? 6 : 2
    , secondByte = dataLength;

  if (dataLength >= 65536) {
    dataOffset += 8;
    secondByte = 127;
  }
  else if (dataLength > 125) {
    dataOffset += 2;
    secondByte = 126;
  }

  var mergeBuffers = dataLength < 32768 || (maskData && !canModifyData);
  var totalLength = mergeBuffers ? dataLength + dataOffset : dataOffset;
  var outputBuffer = new Buffer(totalLength);
  outputBuffer[0] = finalFragment ? opcode | 0x80 : opcode;
  if (compressed) outputBuffer[0] |= 0x40;

  switch (secondByte) {
    case 126:
      writeUInt16BE.call(outputBuffer, dataLength, 2);
      break;
    case 127:
      writeUInt32BE.call(outputBuffer, 0, 2);
      writeUInt32BE.call(outputBuffer, dataLength, 6);
  }

  if (maskData) {
    outputBuffer[1] = secondByte | 0x80;
    var mask = getRandomMask();
    outputBuffer[dataOffset - 4] = mask[0];
    outputBuffer[dataOffset - 3] = mask[1];
    outputBuffer[dataOffset - 2] = mask[2];
    outputBuffer[dataOffset - 1] = mask[3];
    if (mergeBuffers) {
      bufferUtil.mask(data, mask, outputBuffer, dataOffset, dataLength);
      try {
        this._socket.write(outputBuffer, 'binary', cb);
      }
      catch (e) {
        if (typeof cb == 'function') cb(e);
        else this.emit('error', e);
      }
    }
    else {
      bufferUtil.mask(data, mask, data, 0, dataLength);
      try {
        this._socket.write(outputBuffer, 'binary');
        this._socket.write(data, 'binary', cb);
      }
      catch (e) {
        if (typeof cb == 'function') cb(e);
        else this.emit('error', e);
      }
    }
  }
  else {
    outputBuffer[1] = secondByte;
    if (mergeBuffers) {
      data.copy(outputBuffer, dataOffset);
      try {
        this._socket.write(outputBuffer, 'binary', cb);
      }
      catch (e) {
        if (typeof cb == 'function') cb(e);
        else this.emit('error', e);
      }
    }
    else {
      try {
        this._socket.write(outputBuffer, 'binary');
        this._socket.write(data, 'binary', cb);
      }
      catch (e) {
        if (typeof cb == 'function') cb(e);
        else this.emit('error', e);
      }
    }
  }
};

/**
 * Execute message handler buffers
 *
 * @api private
 */

Sender.prototype.flush = function() {
  while (!this.processing && this.messageHandlers.length) {
    this.messageHandlers.shift()();
  }
};

/**
 * Apply extensions to message
 *
 * @api private
 */

Sender.prototype.applyExtensions = function(data, fin, compress, callback) {
  if ((data.buffer || data) instanceof ArrayBuffer) {
    data = getArrayBuffer(data);
  }
  this.extensions[PerMessageDeflate.extensionName].compress(data, fin, callback);
};

module.exports = Sender;

function writeUInt16BE(value, offset) {
  this[offset] = (value & 0xff00)>>8;
  this[offset+1] = value & 0xff;
}

function writeUInt32BE(value, offset) {
  this[offset] = (value & 0xff000000)>>24;
  this[offset+1] = (value & 0xff0000)>>16;
  this[offset+2] = (value & 0xff00)>>8;
  this[offset+3] = value & 0xff;
}

function getArrayBuffer(data) {
  // data is either an ArrayBuffer or ArrayBufferView.
  var array = new Uint8Array(data.buffer || data)
    , l = data.byteLength || data.length
    , o = data.byteOffset || 0
    , buffer = new Buffer(l);
  for (var i = 0; i < l; ++i) {
    buffer[i] = array[o+i];
  }
  return buffer;
}

function getRandomMask() {
  return crypto.randomBytes(4);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var url = __webpack_require__(83)
  , util = __webpack_require__(37)
  , http = __webpack_require__(123)
  , https = __webpack_require__(577)
  , crypto = __webpack_require__(222)
  , stream = __webpack_require__(82)
  , Ultron = __webpack_require__(560)
  , Options = __webpack_require__(467)
  , Sender = __webpack_require__(463)
  , Receiver = __webpack_require__(462)
  , SenderHixie = __webpack_require__(565)
  , ReceiverHixie = __webpack_require__(564)
  , Extensions = __webpack_require__(461)
  , PerMessageDeflate = __webpack_require__(225)
  , EventEmitter = __webpack_require__(41).EventEmitter;

/**
 * Constants
 */

// Default protocol version

var protocolVersion = 13;

// Close timeout

var closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly

/**
 * WebSocket implementation
 *
 * @constructor
 * @param {String} address Connection address.
 * @param {String|Array} protocols WebSocket protocols.
 * @param {Object} options Additional connection options.
 * @api public
 */
function WebSocket(address, protocols, options) {
  if (this instanceof WebSocket === false) {
    return new WebSocket(address, protocols, options);
  }

  EventEmitter.call(this);

  if (protocols && !Array.isArray(protocols) && 'object' === typeof protocols) {
    // accept the "options" Object as the 2nd argument
    options = protocols;
    protocols = null;
  }

  if ('string' === typeof protocols) {
    protocols = [ protocols ];
  }

  if (!Array.isArray(protocols)) {
    protocols = [];
  }

  this._socket = null;
  this._ultron = null;
  this._closeReceived = false;
  this.bytesReceived = 0;
  this.readyState = null;
  this.supports = {};
  this.extensions = {};
  this._binaryType = 'nodebuffer';

  if (Array.isArray(address)) {
    initAsServerClient.apply(this, address.concat(options));
  } else {
    initAsClient.apply(this, [address, protocols, options]);
  }
}

/**
 * Inherits from EventEmitter.
 */
util.inherits(WebSocket, EventEmitter);

/**
 * Ready States
 */
["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function each(state, index) {
    WebSocket.prototype[state] = WebSocket[state] = index;
});

/**
 * Gracefully closes the connection, after sending a description message to the server
 *
 * @param {Object} data to be sent to the server
 * @api public
 */
WebSocket.prototype.close = function close(code, data) {
  if (this.readyState === WebSocket.CLOSED) return;

  if (this.readyState === WebSocket.CONNECTING) {
    this.readyState = WebSocket.CLOSED;
    return;
  }

  if (this.readyState === WebSocket.CLOSING) {
    if (this._closeReceived && this._isServer) {
      this.terminate();
    }
    return;
  }

  var self = this;
  try {
    this.readyState = WebSocket.CLOSING;
    this._closeCode = code;
    this._closeMessage = data;
    var mask = !this._isServer;
    this._sender.close(code, data, mask, function(err) {
      if (err) self.emit('error', err);

      if (self._closeReceived && self._isServer) {
        self.terminate();
      } else {
        // ensure that the connection is cleaned up even when no response of closing handshake.
        clearTimeout(self._closeTimer);
        self._closeTimer = setTimeout(cleanupWebsocketResources.bind(self, true), closeTimeout);
      }
    });
  } catch (e) {
    this.emit('error', e);
  }
};

/**
 * Pause the client stream
 *
 * @api public
 */
WebSocket.prototype.pause = function pauser() {
  if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');

  return this._socket.pause();
};

/**
 * Sends a ping
 *
 * @param {Object} data to be sent to the server
 * @param {Object} Members - mask: boolean, binary: boolean
 * @param {boolean} dontFailWhenClosed indicates whether or not to throw if the connection isnt open
 * @api public
 */
WebSocket.prototype.ping = function ping(data, options, dontFailWhenClosed) {
  if (this.readyState !== WebSocket.OPEN) {
    if (dontFailWhenClosed === true) return;
    throw new Error('not opened');
  }

  options = options || {};

  if (typeof options.mask === 'undefined') options.mask = !this._isServer;

  this._sender.ping(data, options);
};

/**
 * Sends a pong
 *
 * @param {Object} data to be sent to the server
 * @param {Object} Members - mask: boolean, binary: boolean
 * @param {boolean} dontFailWhenClosed indicates whether or not to throw if the connection isnt open
 * @api public
 */
WebSocket.prototype.pong = function(data, options, dontFailWhenClosed) {
  if (this.readyState !== WebSocket.OPEN) {
    if (dontFailWhenClosed === true) return;
    throw new Error('not opened');
  }

  options = options || {};

  if (typeof options.mask === 'undefined') options.mask = !this._isServer;

  this._sender.pong(data, options);
};

/**
 * Resume the client stream
 *
 * @api public
 */
WebSocket.prototype.resume = function resume() {
  if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');

  return this._socket.resume();
};

/**
 * Sends a piece of data
 *
 * @param {Object} data to be sent to the server
 * @param {Object} Members - mask: boolean, binary: boolean, compress: boolean
 * @param {function} Optional callback which is executed after the send completes
 * @api public
 */

WebSocket.prototype.send = function send(data, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  if (this.readyState !== WebSocket.OPEN) {
    if (typeof cb === 'function') cb(new Error('not opened'));
    else throw new Error('not opened');
    return;
  }

  if (!data) data = '';
  if (this._queue) {
    var self = this;
    this._queue.push(function() { self.send(data, options, cb); });
    return;
  }

  options = options || {};
  options.fin = true;

  if (typeof options.binary === 'undefined') {
    options.binary = (data instanceof ArrayBuffer || data instanceof Buffer ||
      data instanceof Uint8Array ||
      data instanceof Uint16Array ||
      data instanceof Uint32Array ||
      data instanceof Int8Array ||
      data instanceof Int16Array ||
      data instanceof Int32Array ||
      data instanceof Float32Array ||
      data instanceof Float64Array);
  }

  if (typeof options.mask === 'undefined') options.mask = !this._isServer;
  if (typeof options.compress === 'undefined') options.compress = true;
  if (!this.extensions[PerMessageDeflate.extensionName]) {
    options.compress = false;
  }

  var readable = typeof stream.Readable === 'function'
    ? stream.Readable
    : stream.Stream;

  if (data instanceof readable) {
    startQueue(this);
    var self = this;

    sendStream(this, data, options, function send(error) {
      process.nextTick(function tock() {
        executeQueueSends(self);
      });

      if (typeof cb === 'function') cb(error);
    });
  } else {
    this._sender.send(data, options, cb);
  }
};

/**
 * Streams data through calls to a user supplied function
 *
 * @param {Object} Members - mask: boolean, binary: boolean, compress: boolean
 * @param {function} 'function (error, send)' which is executed on successive ticks of which send is 'function (data, final)'.
 * @api public
 */
WebSocket.prototype.stream = function stream(options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  var self = this;

  if (typeof cb !== 'function') throw new Error('callback must be provided');

  if (this.readyState !== WebSocket.OPEN) {
    if (typeof cb === 'function') cb(new Error('not opened'));
    else throw new Error('not opened');
    return;
  }

  if (this._queue) {
    this._queue.push(function () { self.stream(options, cb); });
    return;
  }

  options = options || {};

  if (typeof options.mask === 'undefined') options.mask = !this._isServer;
  if (typeof options.compress === 'undefined') options.compress = true;
  if (!this.extensions[PerMessageDeflate.extensionName]) {
    options.compress = false;
  }

  startQueue(this);

  function send(data, final) {
    try {
      if (self.readyState !== WebSocket.OPEN) throw new Error('not opened');
      options.fin = final === true;
      self._sender.send(data, options);
      if (!final) process.nextTick(cb.bind(null, null, send));
      else executeQueueSends(self);
    } catch (e) {
      if (typeof cb === 'function') cb(e);
      else {
        delete self._queue;
        self.emit('error', e);
      }
    }
  }

  process.nextTick(cb.bind(null, null, send));
};

/**
 * Immediately shuts down the connection
 *
 * @api public
 */
WebSocket.prototype.terminate = function terminate() {
  if (this.readyState === WebSocket.CLOSED) return;

  if (this._socket) {
    this.readyState = WebSocket.CLOSING;

    // End the connection
    try { this._socket.end(); }
    catch (e) {
      // Socket error during end() call, so just destroy it right now
      cleanupWebsocketResources.call(this, true);
      return;
    }

    // Add a timeout to ensure that the connection is completely
    // cleaned up within 30 seconds, even if the clean close procedure
    // fails for whatever reason
    // First cleanup any pre-existing timeout from an earlier "terminate" call,
    // if one exists.  Otherwise terminate calls in quick succession will leak timeouts
    // and hold the program open for `closeTimout` time.
    if (this._closeTimer) { clearTimeout(this._closeTimer); }
    this._closeTimer = setTimeout(cleanupWebsocketResources.bind(this, true), closeTimeout);
  } else if (this.readyState === WebSocket.CONNECTING) {
    cleanupWebsocketResources.call(this, true);
  }
};

/**
 * Expose bufferedAmount
 *
 * @api public
 */
Object.defineProperty(WebSocket.prototype, 'bufferedAmount', {
  get: function get() {
    var amount = 0;
    if (this._socket) {
      amount = this._socket.bufferSize || 0;
    }
    return amount;
  }
});

/**
 * Expose binaryType
 *
 * This deviates from the W3C interface since ws doesn't support the required
 * default "blob" type (instead we define a custom "nodebuffer" type).
 *
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */
Object.defineProperty(WebSocket.prototype, 'binaryType', {
  get: function get() {
    return this._binaryType;
  },
  set: function set(type) {
    if (type === 'arraybuffer' || type === 'nodebuffer')
      this._binaryType = type;
    else
      throw new SyntaxError('unsupported binaryType: must be either "nodebuffer" or "arraybuffer"');
  }
});

/**
 * Emulates the W3C Browser based WebSocket interface using function members.
 *
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */
['open', 'error', 'close', 'message'].forEach(function(method) {
  Object.defineProperty(WebSocket.prototype, 'on' + method, {
    /**
     * Returns the current listener
     *
     * @returns {Mixed} the set function or undefined
     * @api public
     */
    get: function get() {
      var listener = this.listeners(method)[0];
      return listener ? (listener._listener ? listener._listener : listener) : undefined;
    },

    /**
     * Start listening for events
     *
     * @param {Function} listener the listener
     * @returns {Mixed} the set function or undefined
     * @api public
     */
    set: function set(listener) {
      this.removeAllListeners(method);
      this.addEventListener(method, listener);
    }
  });
});

/**
 * Emulates the W3C Browser based WebSocket interface using addEventListener.
 *
 * @see https://developer.mozilla.org/en/DOM/element.addEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */
WebSocket.prototype.addEventListener = function(method, listener) {
  var target = this;

  function onMessage (data, flags) {
    if (flags.binary && this.binaryType === 'arraybuffer')
        data = new Uint8Array(data).buffer;
    listener.call(target, new MessageEvent(data, !!flags.binary, target));
  }

  function onClose (code, message) {
    listener.call(target, new CloseEvent(code, message, target));
  }

  function onError (event) {
    event.type = 'error';
    event.target = target;
    listener.call(target, event);
  }

  function onOpen () {
    listener.call(target, new OpenEvent(target));
  }

  if (typeof listener === 'function') {
    if (method === 'message') {
      // store a reference so we can return the original function from the
      // addEventListener hook
      onMessage._listener = listener;
      this.on(method, onMessage);
    } else if (method === 'close') {
      // store a reference so we can return the original function from the
      // addEventListener hook
      onClose._listener = listener;
      this.on(method, onClose);
    } else if (method === 'error') {
      // store a reference so we can return the original function from the
      // addEventListener hook
      onError._listener = listener;
      this.on(method, onError);
    } else if (method === 'open') {
      // store a reference so we can return the original function from the
      // addEventListener hook
      onOpen._listener = listener;
      this.on(method, onOpen);
    } else {
      this.on(method, listener);
    }
  }
};

module.exports = WebSocket;
module.exports.buildHostHeader = buildHostHeader

/**
 * W3C MessageEvent
 *
 * @see http://www.w3.org/TR/html5/comms.html
 * @constructor
 * @api private
 */
function MessageEvent(dataArg, isBinary, target) {
  this.type = 'message';
  this.data = dataArg;
  this.target = target;
  this.binary = isBinary; // non-standard.
}

/**
 * W3C CloseEvent
 *
 * @see http://www.w3.org/TR/html5/comms.html
 * @constructor
 * @api private
 */
function CloseEvent(code, reason, target) {
  this.type = 'close';
  this.wasClean = (typeof code === 'undefined' || code === 1000);
  this.code = code;
  this.reason = reason;
  this.target = target;
}

/**
 * W3C OpenEvent
 *
 * @see http://www.w3.org/TR/html5/comms.html
 * @constructor
 * @api private
 */
function OpenEvent(target) {
  this.type = 'open';
  this.target = target;
}

// Append port number to Host header, only if specified in the url
// and non-default
function buildHostHeader(isSecure, hostname, port) {
  var headerHost = hostname;
  if (hostname) {
    if ((isSecure && (port != 443)) || (!isSecure && (port != 80))){
      headerHost = headerHost + ':' + port;
    }
  }
  return headerHost;
}

/**
 * Entirely private apis,
 * which may or may not be bound to a sepcific WebSocket instance.
 */
function initAsServerClient(req, socket, upgradeHead, options) {
  options = new Options({
    protocolVersion: protocolVersion,
    protocol: null,
    extensions: {},
    maxPayload: 0
  }).merge(options);

  // expose state properties
  this.protocol = options.value.protocol;
  this.protocolVersion = options.value.protocolVersion;
  this.extensions = options.value.extensions;
  this.supports.binary = (this.protocolVersion !== 'hixie-76');
  this.upgradeReq = req;
  this.readyState = WebSocket.CONNECTING;
  this._isServer = true;
  this.maxPayload = options.value.maxPayload;
  // establish connection
  if (options.value.protocolVersion === 'hixie-76') {
    establishConnection.call(this, ReceiverHixie, SenderHixie, socket, upgradeHead);
  } else {
    establishConnection.call(this, Receiver, Sender, socket, upgradeHead);
  }
}

function initAsClient(address, protocols, options) {
  options = new Options({
    origin: null,
    protocolVersion: protocolVersion,
    host: null,
    headers: null,
    protocol: protocols.join(','),
    agent: null,

    // ssl-related options
    pfx: null,
    key: null,
    passphrase: null,
    cert: null,
    ca: null,
    ciphers: null,
    rejectUnauthorized: null,
    perMessageDeflate: true,
    localAddress: null
  }).merge(options);

  if (options.value.protocolVersion !== 8 && options.value.protocolVersion !== 13) {
    throw new Error('unsupported protocol version');
  }

  // verify URL and establish http class
  var serverUrl = url.parse(address);
  var isUnixSocket = serverUrl.protocol === 'ws+unix:';
  if (!serverUrl.host && !isUnixSocket) throw new Error('invalid url');
  var isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';
  var httpObj = isSecure ? https : http;
  var port = serverUrl.port || (isSecure ? 443 : 80);
  var auth = serverUrl.auth;

  // prepare extensions
  var extensionsOffer = {};
  var perMessageDeflate;
  if (options.value.perMessageDeflate) {
    perMessageDeflate = new PerMessageDeflate(typeof options.value.perMessageDeflate !== true ? options.value.perMessageDeflate : {}, false);
    extensionsOffer[PerMessageDeflate.extensionName] = perMessageDeflate.offer();
  }

  // expose state properties
  this._isServer = false;
  this.url = address;
  this.protocolVersion = options.value.protocolVersion;
  this.supports.binary = (this.protocolVersion !== 'hixie-76');

  // begin handshake
  var key = new Buffer(options.value.protocolVersion + '-' + Date.now()).toString('base64');
  var shasum = crypto.createHash('sha1');
  shasum.update(key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11');
  var expectedServerKey = shasum.digest('base64');

  var agent = options.value.agent;

  var headerHost = buildHostHeader(isSecure, serverUrl.hostname, port)

  var requestOptions = {
    port: port,
    host: serverUrl.hostname,
    headers: {
      'Connection': 'Upgrade',
      'Upgrade': 'websocket',
      'Host': headerHost,
      'Sec-WebSocket-Version': options.value.protocolVersion,
      'Sec-WebSocket-Key': key
    }
  };

  // If we have basic auth.
  if (auth) {
    requestOptions.headers.Authorization = 'Basic ' + new Buffer(auth).toString('base64');
  }

  if (options.value.protocol) {
    requestOptions.headers['Sec-WebSocket-Protocol'] = options.value.protocol;
  }

  if (options.value.host) {
    requestOptions.headers.Host = options.value.host;
  }

  if (options.value.headers) {
    for (var header in options.value.headers) {
       if (options.value.headers.hasOwnProperty(header)) {
        requestOptions.headers[header] = options.value.headers[header];
       }
    }
  }

  if (Object.keys(extensionsOffer).length) {
    requestOptions.headers['Sec-WebSocket-Extensions'] = Extensions.format(extensionsOffer);
  }

  if (options.isDefinedAndNonNull('pfx')
   || options.isDefinedAndNonNull('key')
   || options.isDefinedAndNonNull('passphrase')
   || options.isDefinedAndNonNull('cert')
   || options.isDefinedAndNonNull('ca')
   || options.isDefinedAndNonNull('ciphers')
   || options.isDefinedAndNonNull('rejectUnauthorized')) {

    if (options.isDefinedAndNonNull('pfx')) requestOptions.pfx = options.value.pfx;
    if (options.isDefinedAndNonNull('key')) requestOptions.key = options.value.key;
    if (options.isDefinedAndNonNull('passphrase')) requestOptions.passphrase = options.value.passphrase;
    if (options.isDefinedAndNonNull('cert')) requestOptions.cert = options.value.cert;
    if (options.isDefinedAndNonNull('ca')) requestOptions.ca = options.value.ca;
    if (options.isDefinedAndNonNull('ciphers')) requestOptions.ciphers = options.value.ciphers;
    if (options.isDefinedAndNonNull('rejectUnauthorized')) requestOptions.rejectUnauthorized = options.value.rejectUnauthorized;

    if (!agent) {
        // global agent ignores client side certificates
        agent = new httpObj.Agent(requestOptions);
    }
  }

  requestOptions.path = serverUrl.path || '/';

  if (agent) {
    requestOptions.agent = agent;
  }

  if (isUnixSocket) {
    requestOptions.socketPath = serverUrl.pathname;
  }

  if (options.value.localAddress) {
    requestOptions.localAddress = options.value.localAddress;
  }

  if (options.value.origin) {
    if (options.value.protocolVersion < 13) requestOptions.headers['Sec-WebSocket-Origin'] = options.value.origin;
    else requestOptions.headers.Origin = options.value.origin;
  }

  var self = this;
  var req = httpObj.request(requestOptions);

  req.on('error', function onerror(error) {
    self.emit('error', error);
    cleanupWebsocketResources.call(self, error);
  });

  req.once('response', function response(res) {
    var error;

    if (!self.emit('unexpected-response', req, res)) {
      error = new Error('unexpected server response (' + res.statusCode + ')');
      req.abort();
      self.emit('error', error);
    }

    cleanupWebsocketResources.call(self, error);
  });

  req.once('upgrade', function upgrade(res, socket, upgradeHead) {
    if (self.readyState === WebSocket.CLOSED) {
      // client closed before server accepted connection
      self.emit('close');
      self.removeAllListeners();
      socket.end();
      return;
    }

    var serverKey = res.headers['sec-websocket-accept'];
    if (typeof serverKey === 'undefined' || serverKey !== expectedServerKey) {
      self.emit('error', 'invalid server key');
      self.removeAllListeners();
      socket.end();
      return;
    }

    var serverProt = res.headers['sec-websocket-protocol'];
    var protList = (options.value.protocol || "").split(/, */);
    var protError = null;

    if (!options.value.protocol && serverProt) {
      protError = 'server sent a subprotocol even though none requested';
    } else if (options.value.protocol && !serverProt) {
      protError = 'server sent no subprotocol even though requested';
    } else if (serverProt && protList.indexOf(serverProt) === -1) {
      protError = 'server responded with an invalid protocol';
    }

    if (protError) {
      self.emit('error', protError);
      self.removeAllListeners();
      socket.end();
      return;
    } else if (serverProt) {
      self.protocol = serverProt;
    }

    var serverExtensions = Extensions.parse(res.headers['sec-websocket-extensions']);
    if (perMessageDeflate && serverExtensions[PerMessageDeflate.extensionName]) {
      try {
        perMessageDeflate.accept(serverExtensions[PerMessageDeflate.extensionName]);
      } catch (err) {
        self.emit('error', 'invalid extension parameter');
        self.removeAllListeners();
        socket.end();
        return;
      }
      self.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
    }

    establishConnection.call(self, Receiver, Sender, socket, upgradeHead);

    // perform cleanup on http resources
    req.removeAllListeners();
    req = null;
    agent = null;
  });

  req.end();
  this.readyState = WebSocket.CONNECTING;
}

function establishConnection(ReceiverClass, SenderClass, socket, upgradeHead) {
  var ultron = this._ultron = new Ultron(socket)
    , called = false
    , self = this;

  socket.setTimeout(0);
  socket.setNoDelay(true);

  this._receiver = new ReceiverClass(this.extensions,this.maxPayload);
  this._socket = socket;

  // socket cleanup handlers
  ultron.on('end', cleanupWebsocketResources.bind(this));
  ultron.on('close', cleanupWebsocketResources.bind(this));
  ultron.on('error', cleanupWebsocketResources.bind(this));

  // ensure that the upgradeHead is added to the receiver
  function firstHandler(data) {
    if (called || self.readyState === WebSocket.CLOSED) return;

    called = true;
    socket.removeListener('data', firstHandler);
    ultron.on('data', realHandler);

    if (upgradeHead && upgradeHead.length > 0) {
      realHandler(upgradeHead);
      upgradeHead = null;
    }

    if (data) realHandler(data);
  }

  // subsequent packets are pushed straight to the receiver
  function realHandler(data) {
    self.bytesReceived += data.length;
    self._receiver.add(data);
  }

  ultron.on('data', firstHandler);

  // if data was passed along with the http upgrade,
  // this will schedule a push of that on to the receiver.
  // this has to be done on next tick, since the caller
  // hasn't had a chance to set event handlers on this client
  // object yet.
  process.nextTick(firstHandler);

  // receiver event handlers
  self._receiver.ontext = function ontext(data, flags) {
    flags = flags || {};

    self.emit('message', data, flags);
  };

  self._receiver.onbinary = function onbinary(data, flags) {
    flags = flags || {};

    flags.binary = true;
    self.emit('message', data, flags);
  };

  self._receiver.onping = function onping(data, flags) {
    flags = flags || {};

    self.pong(data, {
      mask: !self._isServer,
      binary: flags.binary === true
    }, true);

    self.emit('ping', data, flags);
  };

  self._receiver.onpong = function onpong(data, flags) {
    self.emit('pong', data, flags || {});
  };

  self._receiver.onclose = function onclose(code, data, flags) {
    flags = flags || {};

    self._closeReceived = true;
    self.close(code, data);
  };

  self._receiver.onerror = function onerror(reason, errorCode) {
    // close the connection when the receiver reports a HyBi error code
    self.close(typeof errorCode !== 'undefined' ? errorCode : 1002, '');
    self.emit('error', (reason instanceof Error) ? reason : (new Error(reason)));
  };

  // finalize the client
  this._sender = new SenderClass(socket, this.extensions);
  this._sender.on('error', function onerror(error) {
    self.close(1002, '');
    self.emit('error', error);
  });

  this.readyState = WebSocket.OPEN;
  this.emit('open');
}

function startQueue(instance) {
  instance._queue = instance._queue || [];
}

function executeQueueSends(instance) {
  var queue = instance._queue;
  if (typeof queue === 'undefined') return;

  delete instance._queue;
  for (var i = 0, l = queue.length; i < l; ++i) {
    queue[i]();
  }
}

function sendStream(instance, stream, options, cb) {
  stream.on('data', function incoming(data) {
    if (instance.readyState !== WebSocket.OPEN) {
      if (typeof cb === 'function') cb(new Error('not opened'));
      else {
        delete instance._queue;
        instance.emit('error', new Error('not opened'));
      }
      return;
    }

    options.fin = false;
    instance._sender.send(data, options);
  });

  stream.on('end', function end() {
    if (instance.readyState !== WebSocket.OPEN) {
      if (typeof cb === 'function') cb(new Error('not opened'));
      else {
        delete instance._queue;
        instance.emit('error', new Error('not opened'));
      }
      return;
    }

    options.fin = true;
    instance._sender.send(null, options);

    if (typeof cb === 'function') cb(null);
  });
}

function cleanupWebsocketResources(error) {
  if (this.readyState === WebSocket.CLOSED) return;

  this.readyState = WebSocket.CLOSED;

  clearTimeout(this._closeTimer);
  this._closeTimer = null;

  // If the connection was closed abnormally (with an error), or if
  // the close control frame was not received then the close code
  // must default to 1006.
  if (error || !this._closeReceived) {
    this._closeCode = 1006;
  }
  this.emit('close', this._closeCode || 1000, this._closeMessage || '');

  if (this._socket) {
    if (this._ultron) this._ultron.destroy();
    this._socket.on('error', function onerror() {
      try { this.destroy(); }
      catch (e) {}
    });

    try {
      if (!error) this._socket.end();
      else this._socket.destroy();
    } catch (e) { /* Ignore termination errors */ }

    this._socket = null;
    this._ultron = null;
  }

  if (this._sender) {
    this._sender.removeAllListeners();
    this._sender = null;
  }

  if (this._receiver) {
    this._receiver.cleanup();
    this._receiver = null;
  }

  if (this.extensions[PerMessageDeflate.extensionName]) {
    this.extensions[PerMessageDeflate.extensionName].cleanup();
  }

  this.extensions = null;

  this.removeAllListeners();
  this.on('error', function onerror() {}); // catch all errors after this
  delete this._queue;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, __webpack_require__(16)))

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(30);
var brorand = __webpack_require__(439);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var fs = __webpack_require__(229);

function Options(defaults) {
  var internalValues = {};
  var values = this.value = {};
  Object.keys(defaults).forEach(function(key) {
    internalValues[key] = defaults[key];
    Object.defineProperty(values, key, {
      get: function() { return internalValues[key]; },
      configurable: false,
      enumerable: true
    });
  });
  this.reset = function() {
    Object.keys(defaults).forEach(function(key) {
      internalValues[key] = defaults[key];
    });
    return this;
  };
  this.merge = function(options, required) {
    options = options || {};
    if (Object.prototype.toString.call(required) === '[object Array]') {
      var missing = [];
      for (var i = 0, l = required.length; i < l; ++i) {
        var key = required[i];
        if (!(key in options)) {
          missing.push(key);
        }
      }
      if (missing.length > 0) {
        if (missing.length > 1) {
          throw new Error('options ' +
            missing.slice(0, missing.length - 1).join(', ') + ' and ' +
            missing[missing.length - 1] + ' must be defined');
        }
        else throw new Error('option ' + missing[0] + ' must be defined');
      }
    }
    Object.keys(options).forEach(function(key) {
      if (key in internalValues) {
        internalValues[key] = options[key];
      }
    });
    return this;
  };
  this.copy = function(keys) {
    var obj = {};
    Object.keys(defaults).forEach(function(key) {
      if (keys.indexOf(key) !== -1) {
        obj[key] = values[key];
      }
    });
    return obj;
  };
  this.read = function(filename, cb) {
    if (typeof cb == 'function') {
      var self = this;
      fs.readFile(filename, function(error, data) {
        if (error) return cb(error);
        var conf = JSON.parse(data);
        self.merge(conf);
        cb();
      });
    }
    else {
      var conf = JSON.parse(fs.readFileSync(filename));
      this.merge(conf);
    }
    return this;
  };
  this.isDefined = function(key) {
    return typeof values[key] != 'undefined';
  };
  this.isDefinedAndNonNull = function(key) {
    return typeof values[key] != 'undefined' && values[key] !== null;
  };
  Object.freeze(values);
  Object.freeze(this);
}

module.exports = Options;


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),
/* 471 */
/***/ (function(module, exports) {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {var createHmac = __webpack_require__(238)
var checkParameters = __webpack_require__(598)

exports.pbkdf2 = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  checkParameters(iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  setTimeout(function () {
    callback(null, exports.pbkdf2Sync(password, salt, iterations, keylen, digest))
  })
}

var defaultEncoding
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}

exports.pbkdf2Sync = function (password, salt, iterations, keylen, digest) {
  if (!Buffer.isBuffer(password)) password = new Buffer(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, defaultEncoding)

  checkParameters(iterations, keylen)

  digest = digest || 'sha1'

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16), __webpack_require__(1).Buffer))

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(111);
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(30);
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 476 */
/***/ (function(module, exports) {

module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(248);

/*<replacement>*/
var util = __webpack_require__(119);
util.inherits = __webpack_require__(11);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

module.exports = Readable;

/*<replacement>*/
var processNextTick = __webpack_require__(246);
/*</replacement>*/

/*<replacement>*/
var isArray = __webpack_require__(112);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(41).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = __webpack_require__(82);
  } catch (_) {} finally {
    if (!Stream) Stream = __webpack_require__(41).EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = __webpack_require__(1).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(237);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(119);
util.inherits = __webpack_require__(11);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(650);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(606);
var StringDecoder;

util.inherits(Readable, Stream);

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(80);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(251).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(80);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(251).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(248)


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(11)
var Hash = __webpack_require__(113)

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(11)
var Hash = __webpack_require__(113)

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var eio = __webpack_require__(545);
var Socket = __webpack_require__(484);
var Emitter = __webpack_require__(485);
var parser = __webpack_require__(81);
var on = __webpack_require__(483);
var bind = __webpack_require__(451);
var debug = __webpack_require__(232)('socket.io-client:manager');
var indexOf = __webpack_require__(244);
var Backoff = __webpack_require__(504);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.engine.id;
    }
  }
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.engine.id;
    });

    if (this.autoConnect) {
      // manually call here since connecting evnet is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};


/***/ }),
/* 483 */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parser = __webpack_require__(81);
var Emitter = __webpack_require__(485);
var toArray = __webpack_require__(636);
var on = __webpack_require__(483);
var bind = __webpack_require__(451);
var debug = __webpack_require__(232)('socket.io-client:socket');
var hasBin = __webpack_require__(227);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var parserType = parser.EVENT; // default
  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
  var packet = { type: parserType, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      this.packet({type: parser.CONNECT, query: this.query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  if (packet.nsp !== this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      type: type,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var io = __webpack_require__(629)({
	transports: ['websocket']
});

var nES6 = __webpack_require__(115);

var nes = new nES6({
	render: 'headless',
	audio: false
});

var fs = __webpack_require__(229);
var path = __webpack_require__(472);
var romData = void 0;

fs.readFile(path.resolve(__dirname, '../../app/roms/TecmoSuperBowl2k17.nes'), function (err, data) {
	if (err) {
		throw err;
	}
	romData = data;
});

io.on('connection', function (socket) {
	console.log('connected', socket.id);
	if (romData) {
		socket.volatile.emit('rom:data', romData);
	}

	// when the client emits 'new message', this listens and executes
	socket.on('input:down', function (data) {
		undefined.nes.pressControllerButton(0, joypadButton);

		socket.broadcast.volatile.emit('input:down', data);
	});

	socket.on('input:up', function (data) {
		undefined.nes.depressControllerButton(0, joypadButton);

		socket.broadcast.volatile.emit('input:up', data);
	});
});

io.listen(3001, function () {
	console.log('socket server listening at ws://localhost:3001');
});
/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, setImmediate, clearImmediate) {var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******/// The require function
/******/function __webpack_require__(moduleId){/******/// Check if module is in cache
/******/if(installedModules[moduleId])/******/return installedModules[moduleId].exports;/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/exports:{},/******/id:moduleId,/******/loaded:false/******/};/******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/// Flag the module as loaded
/******/module.loaded=true;/******/// Return the exports of the module
/******/return module.exports;/******/}/******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******/// __webpack_public_path__
/******/__webpack_require__.p="";/******/// Load entry module and return exports
/******/return __webpack_require__(0);/******/})(/************************************************************************//******/[/* 0 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(__dirname){var _this2=this;var io=__webpack_require__(1)({transports:['websocket']});var nES6=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"../../src/nES6.js\"");e.code='MODULE_NOT_FOUND';throw e;}());var nes=new nES6({render:'headless',audio:false});var fs=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"fs\"");e.code='MODULE_NOT_FOUND';throw e;}());var path=__webpack_require__(117);var romData=void 0;fs.readFile(path.resolve(__dirname,'../../app/roms/TecmoSuperBowl2k17.nes'),function(err,data){if(err){throw err;}romData=data;});io.on('connection',function(socket){console.log('connected',socket.id);if(romData){socket.volatile.emit('rom:data',romData);}// when the client emits 'new message', this listens and executes
socket.on('input:down',function(data){_this2.nes.pressControllerButton(0,joypadButton);socket.broadcast.volatile.emit('input:down',data);});socket.on('input:up',function(data){_this2.nes.depressControllerButton(0,joypadButton);socket.broadcast.volatile.emit('input:up',data);});});io.listen(3001,function(){console.log('socket server listening at ws://localhost:3001');});/* WEBPACK VAR INJECTION */}).call(exports,"/");/***/},/* 1 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var http=__webpack_require__(2);var read=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"fs\"");e.code='MODULE_NOT_FOUND';throw e;}()).readFileSync;var engine=__webpack_require__(43);var client=__webpack_require__(141);var clientVersion=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"socket.io-client/package\"");e.code='MODULE_NOT_FOUND';throw e;}()).version;var Client=__webpack_require__(184);var Emitter=__webpack_require__(14).EventEmitter;var Namespace=__webpack_require__(187);var Adapter=__webpack_require__(190);var debug=__webpack_require__(185)('socket.io:server');var url=__webpack_require__(36);/**
	 * Module exports.
	 */module.exports=Server;/**
	 * Socket.IO client source.
	 */var clientSource=undefined;var clientSourceMap=undefined;/**
	 * Server constructor.
	 *
	 * @param {http.Server|Number|Object} srv http server, port or options
	 * @param {Object} [opts]
	 * @api public
	 */function Server(srv,opts){if(!(this instanceof Server))return new Server(srv,opts);if('object'==(typeof srv==="undefined"?"undefined":_typeof(srv))&&!srv.listen){opts=srv;srv=null;}opts=opts||{};this.nsps={};this.path(opts.path||'/socket.io');this.serveClient(false!==opts.serveClient);this.adapter(opts.adapter||Adapter);this.origins(opts.origins||'*:*');this.sockets=this.of('/');if(srv)this.attach(srv,opts);}/**
	 * Server request verification function, that checks for allowed origins
	 *
	 * @param {http.IncomingMessage} req request
	 * @param {Function} fn callback to be called with the result: `fn(err, success)`
	 */Server.prototype.checkRequest=function(req,fn){var origin=req.headers.origin||req.headers.referer;// file:// URLs produce a null Origin which can't be authorized via echo-back
if('null'==origin||null==origin)origin='*';if(!!origin&&typeof this._origins=='function')return this._origins(origin,fn);if(this._origins.indexOf('*:*')!==-1)return fn(null,true);if(origin){try{var parts=url.parse(origin);var defaultPort='https:'==parts.protocol?443:80;parts.port=parts.port!=null?parts.port:defaultPort;var ok=~this._origins.indexOf(parts.hostname+':'+parts.port)||~this._origins.indexOf(parts.hostname+':*')||~this._origins.indexOf('*:'+parts.port);return fn(null,!!ok);}catch(ex){}}fn(null,false);};/**
	 * Sets/gets whether client code is being served.
	 *
	 * @param {Boolean} v whether to serve client code
	 * @return {Server|Boolean} self when setting or value when getting
	 * @api public
	 */Server.prototype.serveClient=function(v){if(!arguments.length)return this._serveClient;this._serveClient=v;if(v&&!clientSource){clientSource=read(/*require.resolve*/191,'utf-8');try{clientSourceMap=read(/*require.resolve*/!function webpackMissingModule(){var e=new Error("Cannot find module \"socket.io-client/dist/socket.io.js.map\"");e.code='MODULE_NOT_FOUND';throw e;}(),'utf-8');}catch(err){debug('could not load sourcemap file');}}return this;};/**
	 * Old settings for backwards compatibility
	 */var oldSettings={"transports":"transports","heartbeat timeout":"pingTimeout","heartbeat interval":"pingInterval","destroy buffer size":"maxHttpBufferSize"};/**
	 * Backwards compatibility.
	 *
	 * @api public
	 */Server.prototype.set=function(key,val){if('authorization'==key&&val){this.use(function(socket,next){val(socket.request,function(err,authorized){if(err)return next(new Error(err));if(!authorized)return next(new Error('Not authorized'));next();});});}else if('origins'==key&&val){this.origins(val);}else if('resource'==key){this.path(val);}else if(oldSettings[key]&&this.eio[oldSettings[key]]){this.eio[oldSettings[key]]=val;}else{console.error('Option %s is not valid. Please refer to the README.',key);}return this;};/**
	 * Sets the client serving path.
	 *
	 * @param {String} v pathname
	 * @return {Server|String} self when setting or value when getting
	 * @api public
	 */Server.prototype.path=function(v){if(!arguments.length)return this._path;this._path=v.replace(/\/$/,'');return this;};/**
	 * Sets the adapter for rooms.
	 *
	 * @param {Adapter} v pathname
	 * @return {Server|Adapter} self when setting or value when getting
	 * @api public
	 */Server.prototype.adapter=function(v){if(!arguments.length)return this._adapter;this._adapter=v;for(var i in this.nsps){if(this.nsps.hasOwnProperty(i)){this.nsps[i].initAdapter();}}return this;};/**
	 * Sets the allowed origins for requests.
	 *
	 * @param {String} v origins
	 * @return {Server|Adapter} self when setting or value when getting
	 * @api public
	 */Server.prototype.origins=function(v){if(!arguments.length)return this._origins;this._origins=v;return this;};/**
	 * Attaches socket.io to a server or port.
	 *
	 * @param {http.Server|Number} server or port
	 * @param {Object} options passed to engine.io
	 * @return {Server} self
	 * @api public
	 */Server.prototype.listen=Server.prototype.attach=function(srv,opts){if('function'==typeof srv){var msg='You are trying to attach socket.io to an express '+'request handler function. Please pass a http.Server instance.';throw new Error(msg);}// handle a port as a string
if(Number(srv)==srv){srv=Number(srv);}if('number'==typeof srv){debug('creating http server and binding to %d',srv);var port=srv;srv=http.Server(function(req,res){res.writeHead(404);res.end();});srv.listen(port);}// set engine.io path to `/socket.io`
opts=opts||{};opts.path=opts.path||this.path();// set origins verification
opts.allowRequest=opts.allowRequest||this.checkRequest.bind(this);// initialize engine
debug('creating engine.io instance with opts %j',opts);this.eio=engine.attach(srv,opts);// attach static file serving
if(this._serveClient)this.attachServe(srv);// Export http server
this.httpServer=srv;// bind to engine events
this.bind(this.eio);return this;};/**
	 * Attaches the static file serving.
	 *
	 * @param {Function|http.Server} srv http server
	 * @api private
	 */Server.prototype.attachServe=function(srv){debug('attaching client serving req handler');var url=this._path+'/socket.io.js';var urlMap=this._path+'/socket.io.js.map';var evs=srv.listeners('request').slice(0);var self=this;srv.removeAllListeners('request');srv.on('request',function(req,res){if(0===req.url.indexOf(urlMap)){self.serveMap(req,res);}else if(0===req.url.indexOf(url)){self.serve(req,res);}else{for(var i=0;i<evs.length;i++){evs[i].call(srv,req,res);}}});};/**
	 * Handles a request serving `/socket.io.js`
	 *
	 * @param {http.Request} req
	 * @param {http.Response} res
	 * @api private
	 */Server.prototype.serve=function(req,res){// Per the standard, ETags must be quoted:
// https://tools.ietf.org/html/rfc7232#section-2.3
var expectedEtag='"'+clientVersion+'"';var etag=req.headers['if-none-match'];if(etag){if(expectedEtag==etag){debug('serve client 304');res.writeHead(304);res.end();return;}}debug('serve client source');res.setHeader('Content-Type','application/javascript');res.setHeader('ETag',expectedEtag);res.setHeader('X-SourceMap','socket.io.js.map');res.writeHead(200);res.end(clientSource);};/**
	 * Handles a request serving `/socket.io.js.map`
	 *
	 * @param {http.Request} req
	 * @param {http.Response} res
	 * @api private
	 */Server.prototype.serveMap=function(req,res){// Per the standard, ETags must be quoted:
// https://tools.ietf.org/html/rfc7232#section-2.3
var expectedEtag='"'+clientVersion+'"';var etag=req.headers['if-none-match'];if(etag){if(expectedEtag==etag){debug('serve client 304');res.writeHead(304);res.end();return;}}debug('serve client sourcemap');res.setHeader('Content-Type','application/json');res.setHeader('ETag',expectedEtag);res.writeHead(200);res.end(clientSourceMap);};/**
	 * Binds socket.io to an engine.io instance.
	 *
	 * @param {engine.Server} engine engine.io (or compatible) server
	 * @return {Server} self
	 * @api public
	 */Server.prototype.bind=function(engine){this.engine=engine;this.engine.on('connection',this.onconnection.bind(this));return this;};/**
	 * Called with each incoming transport connection.
	 *
	 * @param {engine.Socket} conn
	 * @return {Server} self
	 * @api public
	 */Server.prototype.onconnection=function(conn){debug('incoming connection with id %s',conn.id);var client=new Client(this,conn);client.connect('/');return this;};/**
	 * Looks up a namespace.
	 *
	 * @param {String} name nsp name
	 * @param {Function} [fn] optional, nsp `connection` ev handler
	 * @api public
	 */Server.prototype.of=function(name,fn){if(String(name)[0]!=='/')name='/'+name;var nsp=this.nsps[name];if(!nsp){debug('initializing namespace %s',name);nsp=new Namespace(this,name);this.nsps[name]=nsp;}if(fn)nsp.on('connect',fn);return nsp;};/**
	 * Closes server connection
	 *
	 * @param {Function} [fn] optional, called as `fn([err])` on error OR all conns closed 
	 * @api public
	 */Server.prototype.close=function(fn){for(var id in this.nsps['/'].sockets){if(this.nsps['/'].sockets.hasOwnProperty(id)){this.nsps['/'].sockets[id].onclose();}}this.engine.close();if(this.httpServer){this.httpServer.close(fn);}else{fn&&fn();}};/**
	 * Expose main namespace (/).
	 */var emitterMethods=Object.keys(Emitter.prototype).filter(function(key){return typeof Emitter.prototype[key]==='function';});emitterMethods.concat(['to','in','use','send','write','clients','compress']).forEach(function(fn){Server.prototype[fn]=function(){return this.sockets[fn].apply(this.sockets,arguments);};});Namespace.flags.forEach(function(flag){Object.defineProperty(Server.prototype,flag,{get:function get(){this.sockets.flags=this.sockets.flags||{};this.sockets.flags[flag]=true;return this;}});});/**
	 * BC with `io.listen`
	 */Server.listen=Server;/***/},/* 2 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){var ClientRequest=__webpack_require__(3);var extend=__webpack_require__(34);var statusCodes=__webpack_require__(35);var url=__webpack_require__(36);var http=exports;http.request=function(opts,cb){if(typeof opts==='string')opts=url.parse(opts);else opts=extend(opts);// Normally, the page is loaded from http or https, so not specifying a protocol
// will result in a (valid) protocol-relative url. However, this won't work if
// the protocol is something else, like 'file:'
var defaultProtocol=global.location.protocol.search(/^https?:$/)===-1?'http:':'';var protocol=opts.protocol||defaultProtocol;var host=opts.hostname||opts.host;var port=opts.port;var path=opts.path||'/';// Necessary for IPv6 addresses
if(host&&host.indexOf(':')!==-1)host='['+host+']';// This may be a relative url. The browser should always be able to interpret it correctly.
opts.url=(host?protocol+'//'+host:'')+(port?':'+port:'')+path;opts.method=(opts.method||'GET').toUpperCase();opts.headers=opts.headers||{};// Also valid opts.auth, opts.mode
var req=new ClientRequest(opts);if(cb)req.on('response',cb);return req;};http.get=function get(opts,cb){var req=http.request(opts,cb);req.end();return req;};http.Agent=function(){};http.Agent.defaultMaxSockets=4;http.STATUS_CODES=statusCodes;http.METHODS=['CHECKOUT','CONNECT','COPY','DELETE','GET','HEAD','LOCK','M-SEARCH','MERGE','MKACTIVITY','MKCOL','MOVE','NOTIFY','OPTIONS','PATCH','POST','PROPFIND','PROPPATCH','PURGE','PUT','REPORT','SEARCH','SUBSCRIBE','TRACE','UNLOCK','UNSUBSCRIBE'];/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 3 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer,global,process){var capability=__webpack_require__(9);var inherits=__webpack_require__(10);var response=__webpack_require__(11);var stream=__webpack_require__(12);var toArrayBuffer=__webpack_require__(33);var IncomingMessage=response.IncomingMessage;var rStates=response.readyStates;function decideMode(preferBinary,useFetch){if(capability.fetch&&useFetch){return'fetch';}else if(capability.mozchunkedarraybuffer){return'moz-chunked-arraybuffer';}else if(capability.msstream){return'ms-stream';}else if(capability.arraybuffer&&preferBinary){return'arraybuffer';}else if(capability.vbArray&&preferBinary){return'text:vbarray';}else{return'text';}}var ClientRequest=module.exports=function(opts){var self=this;stream.Writable.call(self);self._opts=opts;self._body=[];self._headers={};if(opts.auth)self.setHeader('Authorization','Basic '+new Buffer(opts.auth).toString('base64'));Object.keys(opts.headers).forEach(function(name){self.setHeader(name,opts.headers[name]);});var preferBinary;var useFetch=true;if(opts.mode==='disable-fetch'||'timeout'in opts){// If the use of XHR should be preferred and includes preserving the 'content-type' header.
// Force XHR to be used since the Fetch API does not yet support timeouts.
useFetch=false;preferBinary=true;}else if(opts.mode==='prefer-streaming'){// If streaming is a high priority but binary compatibility and
// the accuracy of the 'content-type' header aren't
preferBinary=false;}else if(opts.mode==='allow-wrong-content-type'){// If streaming is more important than preserving the 'content-type' header
preferBinary=!capability.overrideMimeType;}else if(!opts.mode||opts.mode==='default'||opts.mode==='prefer-fast'){// Use binary if text streaming may corrupt data or the content-type header, or for speed
preferBinary=true;}else{throw new Error('Invalid value for opts.mode');}self._mode=decideMode(preferBinary,useFetch);self.on('finish',function(){self._onFinish();});};inherits(ClientRequest,stream.Writable);ClientRequest.prototype.setHeader=function(name,value){var self=this;var lowerName=name.toLowerCase();// This check is not necessary, but it prevents warnings from browsers about setting unsafe
// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
// http-browserify did it, so I will too.
if(unsafeHeaders.indexOf(lowerName)!==-1)return;self._headers[lowerName]={name:name,value:value};};ClientRequest.prototype.getHeader=function(name){var self=this;return self._headers[name.toLowerCase()].value;};ClientRequest.prototype.removeHeader=function(name){var self=this;delete self._headers[name.toLowerCase()];};ClientRequest.prototype._onFinish=function(){var self=this;if(self._destroyed)return;var opts=self._opts;var headersObj=self._headers;var body=null;if(opts.method==='POST'||opts.method==='PUT'||opts.method==='PATCH'||opts.method==='MERGE'){if(capability.blobConstructor){body=new global.Blob(self._body.map(function(buffer){return toArrayBuffer(buffer);}),{type:(headersObj['content-type']||{}).value||''});}else{// get utf8 string
body=Buffer.concat(self._body).toString();}}if(self._mode==='fetch'){var headers=Object.keys(headersObj).map(function(name){return[headersObj[name].name,headersObj[name].value];});global.fetch(self._opts.url,{method:self._opts.method,headers:headers,body:body||undefined,mode:'cors',credentials:opts.withCredentials?'include':'same-origin'}).then(function(response){self._fetchResponse=response;self._connect();},function(reason){self.emit('error',reason);});}else{var xhr=self._xhr=new global.XMLHttpRequest();try{xhr.open(self._opts.method,self._opts.url,true);}catch(err){process.nextTick(function(){self.emit('error',err);});return;}// Can't set responseType on really old browsers
if('responseType'in xhr)xhr.responseType=self._mode.split(':')[0];if('withCredentials'in xhr)xhr.withCredentials=!!opts.withCredentials;if(self._mode==='text'&&'overrideMimeType'in xhr)xhr.overrideMimeType('text/plain; charset=x-user-defined');if('timeout'in opts){xhr.timeout=opts.timeout;xhr.ontimeout=function(){self.emit('timeout');};}Object.keys(headersObj).forEach(function(name){xhr.setRequestHeader(headersObj[name].name,headersObj[name].value);});self._response=null;xhr.onreadystatechange=function(){switch(xhr.readyState){case rStates.LOADING:case rStates.DONE:self._onXHRProgress();break;}};// Necessary for streaming in Firefox, since xhr.response is ONLY defined
// in onprogress, not in onreadystatechange with xhr.readyState = 3
if(self._mode==='moz-chunked-arraybuffer'){xhr.onprogress=function(){self._onXHRProgress();};}xhr.onerror=function(){if(self._destroyed)return;self.emit('error',new Error('XHR error'));};try{xhr.send(body);}catch(err){process.nextTick(function(){self.emit('error',err);});return;}}};/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */function statusValid(xhr){try{var status=xhr.status;return status!==null&&status!==0;}catch(e){return false;}}ClientRequest.prototype._onXHRProgress=function(){var self=this;if(!statusValid(self._xhr)||self._destroyed)return;if(!self._response)self._connect();self._response._onXHRProgress();};ClientRequest.prototype._connect=function(){var self=this;if(self._destroyed)return;self._response=new IncomingMessage(self._xhr,self._fetchResponse,self._mode);self._response.on('error',function(err){self.emit('error',err);});self.emit('response',self._response);};ClientRequest.prototype._write=function(chunk,encoding,cb){var self=this;self._body.push(chunk);cb();};ClientRequest.prototype.abort=ClientRequest.prototype.destroy=function(){var self=this;self._destroyed=true;if(self._response)self._response._destroyed=true;if(self._xhr)self._xhr.abort();// Currently, there isn't a way to truly abort a fetch.
// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
};ClientRequest.prototype.end=function(data,encoding,cb){var self=this;if(typeof data==='function'){cb=data;data=undefined;}stream.Writable.prototype.end.call(self,data,encoding,cb);};ClientRequest.prototype.flushHeaders=function(){};ClientRequest.prototype.setTimeout=function(){};ClientRequest.prototype.setNoDelay=function(){};ClientRequest.prototype.setSocketKeepAlive=function(){};// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders=['accept-charset','accept-encoding','access-control-request-headers','access-control-request-method','connection','content-length','cookie','cookie2','date','dnt','expect','host','keep-alive','origin','referer','te','trailer','transfer-encoding','upgrade','user-agent','via'];/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer,function(){return this;}(),__webpack_require__(8));/***/},/* 4 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 *//* eslint-disable no-proto */'use strict';var base64=__webpack_require__(5);var ieee754=__webpack_require__(6);var isArray=__webpack_require__(7);exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */Buffer.TYPED_ARRAY_SUPPORT=global.TYPED_ARRAY_SUPPORT!==undefined?global.TYPED_ARRAY_SUPPORT:typedArraySupport();/*
	 * Export kMaxLength after typed array support is determined.
	 */exports.kMaxLength=kMaxLength();function typedArraySupport(){try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function foo(){return 42;}};return arr.foo()===42&&// typed array instances can be augmented
typeof arr.subarray==='function'&&// chrome 9-10 lack `subarray`
arr.subarray(1,1).byteLength===0;// ie10 has broken `subarray`
}catch(e){return false;}}function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?0x7fffffff:0x3fffffff;}function createBuffer(that,length){if(kMaxLength()<length){throw new RangeError('Invalid typed array length');}if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance
that=new Uint8Array(length);that.__proto__=Buffer.prototype;}else{// Fallback: Return an object instance of the Buffer class
if(that===null){that=new Buffer(length);}that.length=length;}return that;}/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */function Buffer(arg,encodingOrOffset,length){if(!Buffer.TYPED_ARRAY_SUPPORT&&!(this instanceof Buffer)){return new Buffer(arg,encodingOrOffset,length);}// Common case.
if(typeof arg==='number'){if(typeof encodingOrOffset==='string'){throw new Error('If encoding is specified then the first argument must be a string');}return allocUnsafe(this,arg);}return from(this,arg,encodingOrOffset,length);}Buffer.poolSize=8192;// not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment=function(arr){arr.__proto__=Buffer.prototype;return arr;};function from(that,value,encodingOrOffset,length){if(typeof value==='number'){throw new TypeError('"value" argument must not be a number');}if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){return fromArrayBuffer(that,value,encodingOrOffset,length);}if(typeof value==='string'){return fromString(that,value,encodingOrOffset);}return fromObject(that,value);}/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/Buffer.from=function(value,encodingOrOffset,length){return from(null,value,encodingOrOffset,length);};if(Buffer.TYPED_ARRAY_SUPPORT){Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;if(typeof Symbol!=='undefined'&&Symbol.species&&Buffer[Symbol.species]===Buffer){// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:true});}}function assertSize(size){if(typeof size!=='number'){throw new TypeError('"size" argument must be a number');}else if(size<0){throw new RangeError('"size" argument must not be negative');}}function alloc(that,size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(that,size);}if(fill!==undefined){// Only pay attention to encoding if it's a string. This
// prevents accidentally sending in a number that would
// be interpretted as a start offset.
return typeof encoding==='string'?createBuffer(that,size).fill(fill,encoding):createBuffer(that,size).fill(fill);}return createBuffer(that,size);}/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/Buffer.alloc=function(size,fill,encoding){return alloc(null,size,fill,encoding);};function allocUnsafe(that,size){assertSize(size);that=createBuffer(that,size<0?0:checked(size)|0);if(!Buffer.TYPED_ARRAY_SUPPORT){for(var i=0;i<size;++i){that[i]=0;}}return that;}/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */Buffer.allocUnsafe=function(size){return allocUnsafe(null,size);};/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */Buffer.allocUnsafeSlow=function(size){return allocUnsafe(null,size);};function fromString(that,string,encoding){if(typeof encoding!=='string'||encoding===''){encoding='utf8';}if(!Buffer.isEncoding(encoding)){throw new TypeError('"encoding" must be a valid string encoding');}var length=byteLength(string,encoding)|0;that=createBuffer(that,length);var actual=that.write(string,encoding);if(actual!==length){// Writing a hex string, for example, that contains invalid characters will
// cause everything after the first invalid character to be ignored. (e.g.
// 'abxxcd' will be treated as 'ab')
that=that.slice(0,actual);}return that;}function fromArrayLike(that,array){var length=array.length<0?0:checked(array.length)|0;that=createBuffer(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}function fromArrayBuffer(that,array,byteOffset,length){array.byteLength;// this throws if `array` is not a valid ArrayBuffer
if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('\'offset\' is out of bounds');}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('\'length\' is out of bounds');}if(byteOffset===undefined&&length===undefined){array=new Uint8Array(array);}else if(length===undefined){array=new Uint8Array(array,byteOffset);}else{array=new Uint8Array(array,byteOffset,length);}if(Buffer.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance
that=array;that.__proto__=Buffer.prototype;}else{// Fallback: Return an object instance of the Buffer class
that=fromArrayLike(that,array);}return that;}function fromObject(that,obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|0;that=createBuffer(that,len);if(that.length===0){return that;}obj.copy(that,0,0,len);return that;}if(obj){if(typeof ArrayBuffer!=='undefined'&&obj.buffer instanceof ArrayBuffer||'length'in obj){if(typeof obj.length!=='number'||isnan(obj.length)){return createBuffer(that,0);}return fromArrayLike(that,obj);}if(obj.type==='Buffer'&&isArray(obj.data)){return fromArrayLike(that,obj.data);}}throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');}function checked(length){// Note: cannot use `length < kMaxLength()` here because that fails when
// length is NaN (which is otherwise coerced to zero.)
if(length>=kMaxLength()){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+kMaxLength().toString(16)+' bytes');}return length|0;}function SlowBuffer(length){if(+length!=length){// eslint-disable-line eqeqeq
length=0;}return Buffer.alloc(+length);}Buffer.isBuffer=function isBuffer(b){return!!(b!=null&&b._isBuffer);};Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('Arguments must be Buffers');}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'latin1':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return true;default:return false;}};Buffer.concat=function concat(list,length){if(!isArray(list)){throw new TypeError('"list" argument must be an Array of Buffers');}if(list.length===0){return Buffer.alloc(0);}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length;}}var buffer=Buffer.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!Buffer.isBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers');}buf.copy(buffer,pos);pos+=buf.length;}return buffer;};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length;}if(typeof ArrayBuffer!=='undefined'&&typeof ArrayBuffer.isView==='function'&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer)){return string.byteLength;}if(typeof string!=='string'){string=''+string;}var len=string.length;if(len===0)return 0;// Use a for loop to avoid recursion
var loweredCase=false;for(;;){switch(encoding){case'ascii':case'latin1':case'binary':return len;case'utf8':case'utf-8':case undefined:return utf8ToBytes(string).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return len*2;case'hex':return len>>>1;case'base64':return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;// assume utf8
encoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
// property of a typed array.
// This behaves neither like String nor Uint8Array in that we set start/end
// to their upper/lower bounds if the value passed is out of range.
// undefined is handled specially as per ECMA-262 6th Edition,
// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
if(start===undefined||start<0){start=0;}// Return early if start > this.length. Done here to prevent potential uint32
// coercion fail below.
if(start>this.length){return'';}if(end===undefined||end>this.length){end=this.length;}if(end<=0){return'';}// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
end>>>=0;start>>>=0;if(end<=start){return'';}if(!encoding)encoding='utf8';while(true){switch(encoding){case'hex':return hexSlice(this,start,end);case'utf8':case'utf-8':return utf8Slice(this,start,end);case'ascii':return asciiSlice(this,start,end);case'latin1':case'binary':return latin1Slice(this,start,end);case'base64':return base64Slice(this,start,end);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i;}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError('Buffer size must be a multiple of 16-bits');}for(var i=0;i<len;i+=2){swap(this,i,i+1);}return this;};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError('Buffer size must be a multiple of 32-bits');}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2);}return this;};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError('Buffer size must be a multiple of 64-bits');}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4);}return this;};Buffer.prototype.toString=function toString(){var length=this.length|0;if(length===0)return'';if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments);};Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer.compare(this,b)===0;};Buffer.prototype.inspect=function inspect(){var str='';var max=exports.INSPECT_MAX_BYTES;if(this.length>0){str=this.toString('hex',0,max).match(/.{2}/g).join(' ');if(this.length>max)str+=' ... ';}return'<Buffer '+str+'>';};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!Buffer.isBuffer(target)){throw new TypeError('Argument must be a Buffer');}if(start===undefined){start=0;}if(end===undefined){end=target?target.length:0;}if(thisStart===undefined){thisStart=0;}if(thisEnd===undefined){thisEnd=this.length;}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError('out of range index');}if(thisStart>=thisEnd&&start>=end){return 0;}if(thisStart>=thisEnd){return-1;}if(start>=end){return 1;}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){// Empty buffer means no match
if(buffer.length===0)return-1;// Normalize byteOffset
if(typeof byteOffset==='string'){encoding=byteOffset;byteOffset=0;}else if(byteOffset>0x7fffffff){byteOffset=0x7fffffff;}else if(byteOffset<-0x80000000){byteOffset=-0x80000000;}byteOffset=+byteOffset;// Coerce to Number.
if(isNaN(byteOffset)){// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
byteOffset=dir?0:buffer.length-1;}// Normalize byteOffset: negative offsets start from the end of the buffer
if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1;}else if(byteOffset<0){if(dir)byteOffset=0;else return-1;}// Normalize val
if(typeof val==='string'){val=Buffer.from(val,encoding);}// Finally, search either indexOf (if dir is true) or lastIndexOf
if(Buffer.isBuffer(val)){// Special case: looking for empty string/buffer always fails
if(val.length===0){return-1;}return arrayIndexOf(buffer,val,byteOffset,encoding,dir);}else if(typeof val==='number'){val=val&0xFF;// Search for a byte value [0-255]
if(Buffer.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf==='function'){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset);}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset);}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir);}throw new TypeError('val must be string, number or Buffer');}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==='ucs2'||encoding==='ucs-2'||encoding==='utf16le'||encoding==='utf-16le'){if(arr.length<2||val.length<2){return-1;}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2;}}function read(buf,i){if(indexSize===1){return buf[i];}else{return buf.readUInt16BE(i*indexSize);}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize;}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1;}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break;}}if(found)return i;}}return-1;}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1;};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true);};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false);};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else{length=Number(length);if(length>remaining){length=remaining;}}// must be an even number of digits
var strLen=string.length;if(strLen%2!==0)throw new TypeError('Invalid hex string');if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed;}return i;}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length);}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length);}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length);}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length);}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length);}Buffer.prototype.write=function write(string,offset,length,encoding){// Buffer#write(string)
if(offset===undefined){encoding='utf8';length=this.length;offset=0;// Buffer#write(string, encoding)
}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=0;// Buffer#write(string, offset[, length][, encoding])
}else if(isFinite(offset)){offset=offset|0;if(isFinite(length)){length=length|0;if(encoding===undefined)encoding='utf8';}else{encoding=length;length=undefined;}// legacy write(string, encoding, offset, length) - remove in v0.13
}else{throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError('Attempt to write outside buffer bounds');}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case'hex':return hexWrite(this,string,offset,length);case'utf8':case'utf-8':return utf8Write(this,string,offset,length);case'ascii':return asciiWrite(this,string,offset,length);case'latin1':case'binary':return latin1Write(this,string,offset,length);case'base64':// Warning: maxLength not taken into account in base64Write
return base64Write(this,string,offset,length);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer.prototype.toJSON=function toJSON(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)};};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf);}else{return base64.fromByteArray(buf.slice(start,end));}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>0xEF?4:firstByte>0xDF?3:firstByte>0xBF?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<0x80){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&0xC0)===0x80){tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;if(tempCodePoint>0x7F){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){codePoint=tempCodePoint;}}}}if(codePoint===null){// we did not generate a valid codePoint so insert a
// replacement char (U+FFFD) and advance only 1 byte
codePoint=0xFFFD;bytesPerSequence=1;}else if(codePoint>0xFFFF){// encode to utf16 (surrogate pair dance)
codePoint-=0x10000;res.push(codePoint>>>10&0x3FF|0xD800);codePoint=0xDC00|codePoint&0x3FF;}res.push(codePoint);i+=bytesPerSequence;}return decodeCodePointsArray(res);}// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH=0x1000;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints);// avoid extra slice()
}// Decode in chunks to avoid "call stack size exceeded".
var res='';var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));}return res;}function asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&0x7F);}return ret;}function latin1Slice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]);}return ret;}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out='';for(var i=start;i<end;++i){out+=toHex(buf[i]);}return out;}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res;}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf;if(Buffer.TYPED_ARRAY_SUPPORT){newBuf=this.subarray(start,end);newBuf.__proto__=Buffer.prototype;}else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,undefined);for(var i=0;i<sliceLen;++i){newBuf[i]=this[i+start];}}return newBuf;};/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}return val;};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert){checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=0x100)){val+=this[offset+--byteLength]*mul;}return val;};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);return this[offset];};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8;};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1];};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*0x1000000;};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*0x1000000+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3]);};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=0x100)){val+=this[offset+--i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&0x80))return this[offset];return(0xff-this[offset]+1)*-1;};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24;};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3];};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4);};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4);};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8);};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8);};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError('Index out of range');}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var mul=1;var i=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var i=byteLength-1;var mul=1;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0xff,0);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=value&0xff;return offset+1;};function objectWriteUInt16(buf,value,offset,littleEndian){if(value<0)value=0xffff+value+1;for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i){buf[offset+i]=(value&0xff<<8*(littleEndian?i:1-i))>>>(littleEndian?i:1-i)*8;}}Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};function objectWriteUInt32(buf,value,offset,littleEndian){if(value<0)value=0xffffffff+value+1;for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i){buf[offset+i]=value>>>(littleEndian?i:3-i)*8&0xff;}}Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&0xff;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0x7f,-0x80);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(value<0)value=0xff+value+1;this[offset]=value&0xff;return offset+1;};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(value<0)value=0xffffffff+value+1;if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError('Index out of range');if(offset<0)throw new RangeError('Index out of range');}function writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,4,3.4028234663852886e+38,-3.4028234663852886e+38);}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4;}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert);};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert);};function writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,8,1.7976931348623157E+308,-1.7976931348623157E+308);}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8;}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert);};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert);};// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;// Copy 0 bytes; we're done
if(end===start)return 0;if(target.length===0||this.length===0)return 0;// Fatal error conditions
if(targetStart<0){throw new RangeError('targetStart out of bounds');}if(start<0||start>=this.length)throw new RangeError('sourceStart out of bounds');if(end<0)throw new RangeError('sourceEnd out of bounds');// Are we oob?
if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;var i;if(this===target&&start<targetStart&&targetStart<end){// descending copy from end
for(i=len-1;i>=0;--i){target[i+targetStart]=this[i+start];}}else if(len<1000||!Buffer.TYPED_ARRAY_SUPPORT){// ascending copy from start
for(i=0;i<len;++i){target[i+targetStart]=this[i+start];}}else{Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart);}return len;};// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill=function fill(val,start,end,encoding){// Handle string cases:
if(typeof val==='string'){if(typeof start==='string'){encoding=start;start=0;end=this.length;}else if(typeof end==='string'){encoding=end;end=this.length;}if(val.length===1){var code=val.charCodeAt(0);if(code<256){val=code;}}if(encoding!==undefined&&typeof encoding!=='string'){throw new TypeError('encoding must be a string');}if(typeof encoding==='string'&&!Buffer.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding);}}else if(typeof val==='number'){val=val&255;}// Invalid ranges are not set to a default, so can range check early.
if(start<0||this.length<start||this.length<end){throw new RangeError('Out of range index');}if(end<=start){return this;}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==='number'){for(i=start;i<end;++i){this[i]=val;}}else{var bytes=Buffer.isBuffer(val)?val:utf8ToBytes(new Buffer(val,encoding).toString());var len=bytes.length;for(i=0;i<end-start;++i){this[i+start]=bytes[i%len];}}return this;};// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(str){// Node strips out invalid characters like \n and \t from the string, base64-js does not
str=stringtrim(str).replace(INVALID_BASE64_RE,'');// Node converts strings with length < 2 to ''
if(str.length<2)return'';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
while(str.length%4!==0){str=str+'=';}return str;}function stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\s+|\s+$/g,'');}function toHex(n){if(n<16)return'0'+n.toString(16);return n.toString(16);}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);// is surrogate component
if(codePoint>0xD7FF&&codePoint<0xE000){// last char was a lead
if(!leadSurrogate){// no lead yet
if(codePoint>0xDBFF){// unexpected trail
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}else if(i+1===length){// unpaired lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}// valid lead
leadSurrogate=codePoint;continue;}// 2 leads in a row
if(codePoint<0xDC00){if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);leadSurrogate=codePoint;continue;}// valid surrogate pair
codePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;}else if(leadSurrogate){// valid bmp char, but last char was a lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);}leadSurrogate=null;// encode utf8
if(codePoint<0x80){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<0x800){if((units-=2)<0)break;bytes.push(codePoint>>0x6|0xC0,codePoint&0x3F|0x80);}else if(codePoint<0x10000){if((units-=3)<0)break;bytes.push(codePoint>>0xC|0xE0,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else if(codePoint<0x110000){if((units-=4)<0)break;bytes.push(codePoint>>0x12|0xF0,codePoint>>0xC&0x3F|0x80,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else{throw new Error('Invalid code point');}}return bytes;}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){// Node's code seems to be doing this and not & 0x7F..
byteArray.push(str.charCodeAt(i)&0xFF);}return byteArray;}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray;}function base64ToBytes(str){return base64.toByteArray(base64clean(str));}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i;}function isnan(val){return val!==val;// eslint-disable-line no-self-compare
}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 5 *//***/function(module,exports){'use strict';exports.byteLength=byteLength;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i;}revLookup['-'.charCodeAt(0)]=62;revLookup['_'.charCodeAt(0)]=63;function placeHoldersCount(b64){var len=b64.length;if(len%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}// the number of equal signs (place holders)
// if there are two placeholders, than the two characters before it
// represent one byte
// if there is only one, then the three characters before it represent 2 bytes
// this is just a cheap hack to not do indexOf twice
return b64[len-2]==='='?2:b64[len-1]==='='?1:0;}function byteLength(b64){// base64 is 4/3 + up to two characters of the original data
return b64.length*3/4-placeHoldersCount(b64);}function toByteArray(b64){var i,j,l,tmp,placeHolders,arr;var len=b64.length;placeHolders=placeHoldersCount(b64);arr=new Arr(len*3/4-placeHolders);// if there are placeholders, only get up to the last complete 4 chars
l=placeHolders>0?len-4:len;var L=0;for(i=0,j=0;i<l;i+=4,j+=3){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[L++]=tmp>>16&0xFF;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}if(placeHolders===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[L++]=tmp&0xFF;}else if(placeHolders===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}return arr;}function tripletToBase64(num){return lookup[num>>18&0x3F]+lookup[num>>12&0x3F]+lookup[num>>6&0x3F]+lookup[num&0x3F];}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2];output.push(tripletToBase64(tmp));}return output.join('');}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%3;// if we have 1 byte left, pad 2 bytes
var output='';var parts=[];var maxChunkLength=16383;// must be multiple of 3
// go through the array every three bytes, we'll deal with trailing stuff later
for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));}// pad the end with zeros, but make sure to not forget the extra bytes
if(extraBytes===1){tmp=uint8[len-1];output+=lookup[tmp>>2];output+=lookup[tmp<<4&0x3F];output+='==';}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];output+=lookup[tmp>>10];output+=lookup[tmp>>4&0x3F];output+=lookup[tmp<<2&0x3F];output+='=';}parts.push(output);return parts.join('');}/***/},/* 6 *//***/function(module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity;}else{m=m+Math.pow(2,mLen);e=e-eBias;}return(s?-1:1)*m*Math.pow(2,e-mLen);};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else{value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;};/***/},/* 7 *//***/function(module,exports){var toString={}.toString;module.exports=Array.isArray||function(arr){return toString.call(arr)=='[object Array]';};/***/},/* 8 *//***/function(module,exports){// shim for using process in browser
var process=module.exports={};// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations
return setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined
if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations
return clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined
if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects
function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues
process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};/***/},/* 9 *//***/function(module,exports){/* WEBPACK VAR INJECTION */(function(global){exports.fetch=isFunction(global.fetch)&&isFunction(global.ReadableStream);exports.blobConstructor=false;try{new Blob([new ArrayBuffer(1)]);exports.blobConstructor=true;}catch(e){}// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr;function getXHR(){// Cache the xhr value
if(xhr!==undefined)return xhr;if(global.XMLHttpRequest){xhr=new global.XMLHttpRequest();// If XDomainRequest is available (ie only, where xhr might not work
// cross domain), use the page location. Otherwise use example.com
// Note: this doesn't actually make an http request.
try{xhr.open('GET',global.XDomainRequest?'/':'https://example.com');}catch(e){xhr=null;}}else{// Service workers don't have XHR
xhr=null;}return xhr;}function checkTypeSupport(type){var xhr=getXHR();if(!xhr)return false;try{xhr.responseType=type;return xhr.responseType===type;}catch(e){}return false;}// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer=typeof global.ArrayBuffer!=='undefined';var haveSlice=haveArrayBuffer&&isFunction(global.ArrayBuffer.prototype.slice);// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer=exports.fetch||haveArrayBuffer&&checkTypeSupport('arraybuffer');// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream=!exports.fetch&&haveSlice&&checkTypeSupport('ms-stream');exports.mozchunkedarraybuffer=!exports.fetch&&haveArrayBuffer&&checkTypeSupport('moz-chunked-arraybuffer');// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType=exports.fetch||(getXHR()?isFunction(getXHR().overrideMimeType):false);exports.vbArray=isFunction(global.VBArray);function isFunction(value){return typeof value==='function';}xhr=null;// Help gc
/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 10 *//***/function(module,exports){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}/***/},/* 11 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process,Buffer,global){var capability=__webpack_require__(9);var inherits=__webpack_require__(10);var stream=__webpack_require__(12);var rStates=exports.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4};var IncomingMessage=exports.IncomingMessage=function(xhr,response,mode){var self=this;stream.Readable.call(self);self._mode=mode;self.headers={};self.rawHeaders=[];self.trailers={};self.rawTrailers=[];// Fake the 'close' event, but only once 'end' fires
self.on('end',function(){// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
process.nextTick(function(){self.emit('close');});});if(mode==='fetch'){var read=function read(){reader.read().then(function(result){if(self._destroyed)return;if(result.done){self.push(null);return;}self.push(new Buffer(result.value));read();}).catch(function(err){self.emit('error',err);});};self._fetchResponse=response;self.url=response.url;self.statusCode=response.status;self.statusMessage=response.statusText;response.headers.forEach(function(header,key){self.headers[key.toLowerCase()]=header;self.rawHeaders.push(key,header);});// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
var reader=response.body.getReader();read();}else{self._xhr=xhr;self._pos=0;self.url=xhr.responseURL;self.statusCode=xhr.status;self.statusMessage=xhr.statusText;var headers=xhr.getAllResponseHeaders().split(/\r?\n/);headers.forEach(function(header){var matches=header.match(/^([^:]+):\s*(.*)/);if(matches){var key=matches[1].toLowerCase();if(key==='set-cookie'){if(self.headers[key]===undefined){self.headers[key]=[];}self.headers[key].push(matches[2]);}else if(self.headers[key]!==undefined){self.headers[key]+=', '+matches[2];}else{self.headers[key]=matches[2];}self.rawHeaders.push(matches[1],matches[2]);}});self._charset='x-user-defined';if(!capability.overrideMimeType){var mimeType=self.rawHeaders['mime-type'];if(mimeType){var charsetMatch=mimeType.match(/;\s*charset=([^;])(;|$)/);if(charsetMatch){self._charset=charsetMatch[1].toLowerCase();}}if(!self._charset)self._charset='utf-8';// best guess
}}};inherits(IncomingMessage,stream.Readable);IncomingMessage.prototype._read=function(){};IncomingMessage.prototype._onXHRProgress=function(){var self=this;var xhr=self._xhr;var response=null;switch(self._mode){case'text:vbarray':// For IE9
if(xhr.readyState!==rStates.DONE)break;try{// This fails in IE8
response=new global.VBArray(xhr.responseBody).toArray();}catch(e){}if(response!==null){self.push(new Buffer(response));break;}// Falls through in IE8	
case'text':try{// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
response=xhr.responseText;}catch(e){self._mode='text:vbarray';break;}if(response.length>self._pos){var newData=response.substr(self._pos);if(self._charset==='x-user-defined'){var buffer=new Buffer(newData.length);for(var i=0;i<newData.length;i++){buffer[i]=newData.charCodeAt(i)&0xff;}self.push(buffer);}else{self.push(newData,self._charset);}self._pos=response.length;}break;case'arraybuffer':if(xhr.readyState!==rStates.DONE||!xhr.response)break;response=xhr.response;self.push(new Buffer(new Uint8Array(response)));break;case'moz-chunked-arraybuffer':// take whole
response=xhr.response;if(xhr.readyState!==rStates.LOADING||!response)break;self.push(new Buffer(new Uint8Array(response)));break;case'ms-stream':response=xhr.response;if(xhr.readyState!==rStates.LOADING)break;var reader=new global.MSStreamReader();reader.onprogress=function(){if(reader.result.byteLength>self._pos){self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));self._pos=reader.result.byteLength;}};reader.onload=function(){self.push(null);};// reader.onerror = ??? // TODO: this
reader.readAsArrayBuffer(response);break;}// The ms-stream case handles end separately in reader.onload()
if(self._xhr.readyState===rStates.DONE&&self._mode!=='ms-stream'){self.push(null);}};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8),__webpack_require__(4).Buffer,function(){return this;}());/***/},/* 12 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){var Stream=function(){try{return __webpack_require__(13);// hack to fix a circular dependency issue when used with browserify
}catch(_){}}();exports=module.exports=__webpack_require__(24);exports.Stream=Stream||exports;exports.Readable=exports;exports.Writable=__webpack_require__(16);exports.Duplex=__webpack_require__(23);exports.Transform=__webpack_require__(30);exports.PassThrough=__webpack_require__(32);if(!process.browser&&process.env.READABLE_STREAM==='disable'&&Stream){module.exports=Stream;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 13 *//***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports=Stream;var EE=__webpack_require__(14).EventEmitter;var inherits=__webpack_require__(10);inherits(Stream,EE);Stream.Readable=__webpack_require__(12);Stream.Writable=__webpack_require__(15);Stream.Duplex=__webpack_require__(28);Stream.Transform=__webpack_require__(29);Stream.PassThrough=__webpack_require__(31);// Backwards-compat with node 0.4.x
Stream.Stream=Stream;// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream(){EE.call(this);}Stream.prototype.pipe=function(dest,options){var source=this;function ondata(chunk){if(dest.writable){if(false===dest.write(chunk)&&source.pause){source.pause();}}}source.on('data',ondata);function ondrain(){if(source.readable&&source.resume){source.resume();}}dest.on('drain',ondrain);// If the 'end' option is not supplied, dest.end() will be called when
// source gets the 'end' or 'close' events.  Only dest.end() once.
if(!dest._isStdio&&(!options||options.end!==false)){source.on('end',onend);source.on('close',onclose);}var didOnEnd=false;function onend(){if(didOnEnd)return;didOnEnd=true;dest.end();}function onclose(){if(didOnEnd)return;didOnEnd=true;if(typeof dest.destroy==='function')dest.destroy();}// don't leave dangling pipes when there are errors.
function onerror(er){cleanup();if(EE.listenerCount(this,'error')===0){throw er;// Unhandled stream error in pipe.
}}source.on('error',onerror);dest.on('error',onerror);// remove all the event listeners that were added.
function cleanup(){source.removeListener('data',ondata);dest.removeListener('drain',ondrain);source.removeListener('end',onend);source.removeListener('close',onclose);source.removeListener('error',onerror);dest.removeListener('error',onerror);source.removeListener('end',cleanup);source.removeListener('close',cleanup);dest.removeListener('close',cleanup);}source.on('end',cleanup);source.on('close',cleanup);dest.on('close',cleanup);dest.emit('pipe',source);// Allow for unix-like usage: A.pipe(B).pipe(C)
return dest;};/***/},/* 14 *//***/function(module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
function EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined;}module.exports=EventEmitter;// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners=10;// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError('n must be a positive number');this._maxListeners=n;return this;};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};// If there is no 'error' event listener then throw.
if(type==='error'){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er;// Unhandled 'error' event
}else{// At least give some kind of context to the user
var err=new Error('Uncaught, unspecified "error" event. ('+er+')');err.context=er;throw err;}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){// fast cases
case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;// slower
default:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args);}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++){listeners[i].apply(this,args);}}return true;};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events)this._events={};// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(this._events.newListener)this.emit('newListener',type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])// Optimize the case of one listener. Don't need the extra array object.
this._events[type]=listener;else if(isObject(this._events[type]))// If we've already got an array, just append.
this._events[type].push(listener);else// Adding the second element, need to change to array.
this._events[type]=[this._events[type],listener];// Check for listener leak
if(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners;}else{m=EventEmitter.defaultMaxListeners;}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error('(node) warning: possible EventEmitter memory '+'leak detected. %d listeners added. '+'Use emitter.setMaxListeners() to increase limit.',this._events[type].length);if(typeof console.trace==='function'){// not supported in IE 10
console.trace();}}}return this;};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError('listener must be a function');var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments);}}g.listener=listener;this.on(type,g);return this;};// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit('removeListener',type,listener);}else if(isObject(list)){for(i=length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break;}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type];}else{list.splice(position,1);}if(this._events.removeListener)this.emit('removeListener',type,listener);}return this;};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;// not listening for removeListener, no need to emit
if(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){for(key in this._events){if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events={};return this;}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners);}else if(listeners){// LIFO order
while(listeners.length){this.removeListener(type,listeners[listeners.length-1]);}}delete this._events[type];return this;};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret;};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;else if(evlistener)return evlistener.length;}return 0;};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type);};function isFunction(arg){return typeof arg==='function';}function isNumber(arg){return typeof arg==='number';}function isObject(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&arg!==null;}function isUndefined(arg){return arg===void 0;}/***/},/* 15 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(16);/***/},/* 16 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process,setImmediate){// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';module.exports=Writable;/*<replacement>*/var processNextTick=__webpack_require__(19);/*</replacement>*//*<replacement>*/var asyncWrite=!process.browser&&['v0.10','v0.9.'].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick;/*</replacement>*//*<replacement>*/var Duplex;/*</replacement>*/Writable.WritableState=WritableState;/*<replacement>*/var util=__webpack_require__(20);util.inherits=__webpack_require__(10);/*</replacement>*//*<replacement>*/var internalUtil={deprecate:__webpack_require__(21)};/*</replacement>*//*<replacement>*/var Stream;(function(){try{Stream=__webpack_require__(13);}catch(_){}finally{if(!Stream)Stream=__webpack_require__(14).EventEmitter;}})();/*</replacement>*/var Buffer=__webpack_require__(4).Buffer;/*<replacement>*/var bufferShim=__webpack_require__(22);/*</replacement>*/util.inherits(Writable,Stream);function nop(){}function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;this.next=null;}function WritableState(options,stream){Duplex=Duplex||__webpack_require__(23);options=options||{};// object stream flag to indicate whether or not this stream
// contains buffers or objects.
this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;// the point at which write() starts returning false
// Note: 0 is a valid value, means that we always return false if
// the entire buffer is not flushed immediately on write()
var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.
this.highWaterMark=~~this.highWaterMark;// drain event flag.
this.needDrain=false;// at the start of calling end()
this.ending=false;// when end() has been called, and returned
this.ended=false;// when 'finish' is emitted
this.finished=false;// should we decode strings into buffers before passing to _write?
// this is here so that some node-core streams can optimize string
// handling at a lower level.
var noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string
// encoding is 'binary' so we have to make this configurable.
// Everything else in the universe uses 'utf8', though.
this.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement
// of how much we're waiting to get pushed to some underlying
// socket or file.
this.length=0;// a flag to see when we're in the middle of a write.
this.writing=false;// when true all writes will be buffered until .uncork() call
this.corked=0;// a flag to be able to tell if the onwrite cb is called immediately,
// or on a later tick.  We set this to true at first, because any
// actions that shouldn't happen until "later" should generally also
// not happen before the first write call.
this.sync=true;// a flag to know if we're processing previously buffered items, which
// may call the _write() callback in the same tick, so that we don't
// end up in an overlapped onwrite situation.
this.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)
this.onwrite=function(er){onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)
this.writecb=null;// the amount that is being written when _write is called.
this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;// number of pending user-supplied write callbacks
// this must be 0 before 'finish' can be emitted
this.pendingcb=0;// emit prefinish if the only thing we're waiting for is _write cbs
// This is relevant for synchronous Transform streams
this.prefinished=false;// True if the error was already emitted and should not be thrown again
this.errorEmitted=false;// count buffered requests
this.bufferedRequestCount=0;// allocate the first CorkedRequest, there is always
// one allocated and free to use, and we maintain at most two
this.corkedRequestsFree=new CorkedRequest(this);}WritableState.prototype.getBuffer=function getBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next;}return out;};(function(){try{Object.defineProperty(WritableState.prototype,'buffer',{get:internalUtil.deprecate(function(){return this.getBuffer();},'_writableState.buffer is deprecated. Use _writableState.getBuffer '+'instead.')});}catch(_){}})();// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;if(typeof Symbol==='function'&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]==='function'){realHasInstance=Function.prototype[Symbol.hasInstance];Object.defineProperty(Writable,Symbol.hasInstance,{value:function value(object){if(realHasInstance.call(this,object))return true;return object&&object._writableState instanceof WritableState;}});}else{realHasInstance=function realHasInstance(object){return object instanceof this;};}function Writable(options){Duplex=Duplex||__webpack_require__(23);// Writable ctor is applied to Duplexes, too.
// `realHasInstance` is necessary because using plain `instanceof`
// would return false, as no `_writableState` property is attached.
// Trying to use the custom `instanceof` for Writable here will also break the
// Node.js LazyTransform implementation, which has a non-trivial getter for
// `_writableState` that would lead to infinite recursion.
if(!realHasInstance.call(Writable,this)&&!(this instanceof Duplex)){return new Writable(options);}this._writableState=new WritableState(options,this);// legacy.
this.writable=true;if(options){if(typeof options.write==='function')this._write=options.write;if(typeof options.writev==='function')this._writev=options.writev;}Stream.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe=function(){this.emit('error',new Error('Cannot pipe, not readable'));};function writeAfterEnd(stream,cb){var er=new Error('write after end');// TODO: defer error events consistently everywhere, not just the cb
stream.emit('error',er);processNextTick(cb,er);}// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream,state,chunk,cb){var valid=true;var er=false;// Always throw error if a null is written
// if we are not in object mode then throw
// if it is not a buffer, string, or undefined.
if(chunk===null){er=new TypeError('May not write null values to stream');}else if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}if(er){stream.emit('error',er);processNextTick(cb,er);valid=false;}return valid;}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;if(typeof encoding==='function'){cb=encoding;encoding=null;}if(Buffer.isBuffer(chunk))encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=='function')cb=nop;if(state.ended)writeAfterEnd(this,cb);else if(validChunk(this,state,chunk,cb)){state.pendingcb++;ret=writeOrBuffer(this,state,chunk,encoding,cb);}return ret;};Writable.prototype.cork=function(){var state=this._writableState;state.corked++;};Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.finished&&!state.bufferProcessing&&state.bufferedRequest)clearBuffer(this,state);}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){// node::ParseEncoding() requires lower case.
if(typeof encoding==='string')encoding=encoding.toLowerCase();if(!(['hex','utf8','utf-8','ascii','binary','base64','ucs2','ucs-2','utf16le','utf-16le','raw'].indexOf((encoding+'').toLowerCase())>-1))throw new TypeError('Unknown encoding: '+encoding);this._writableState.defaultEncoding=encoding;return this;};function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){chunk=bufferShim.from(chunk,encoding);}return chunk;}// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream,state,chunk,encoding,cb){chunk=decodeChunk(state,chunk,encoding);if(Buffer.isBuffer(chunk))encoding='buffer';var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.
if(!ret)state.needDrain=true;if(state.writing||state.corked){var last=state.lastBufferedRequest;state.lastBufferedRequest=new WriteReq(chunk,encoding,cb);if(last){last.next=state.lastBufferedRequest;}else{state.bufferedRequest=state.lastBufferedRequest;}state.bufferedRequestCount+=1;}else{doWrite(stream,state,false,len,chunk,encoding,cb);}return ret;}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,sync,er,cb){--state.pendingcb;if(sync)processNextTick(cb,er);else cb(er);stream._writableState.errorEmitted=true;stream.emit('error',er);}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet
var finished=needFinish(state);if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){clearBuffer(stream,state);}if(sync){/*<replacement>*/asyncWrite(afterWrite,stream,state,finished,cb);/*</replacement>*/}else{afterWrite(stream,state,finished,cb);}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);state.pendingcb--;cb();finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it
function clearBuffer(stream,state){state.bufferProcessing=true;var entry=state.bufferedRequest;if(stream._writev&&entry&&entry.next){// Fast case, write everything using _writev()
var l=state.bufferedRequestCount;var buffer=new Array(l);var holder=state.corkedRequestsFree;holder.entry=entry;var count=0;while(entry){buffer[count]=entry;entry=entry.next;count+=1;}doWrite(stream,state,true,state.length,buffer,'',holder.finish);// doWrite is almost always async, defer these to save a bit of time
// as the hot path ends with doWrite
state.pendingcb++;state.lastBufferedRequest=null;if(holder.next){state.corkedRequestsFree=holder.next;holder.next=null;}else{state.corkedRequestsFree=new CorkedRequest(state);}}else{// Slow case, write chunks one-by-one
while(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,cb);entry=entry.next;// if we didn't call the onwrite immediately, then
// it means that we need to wait until it does.
// also, that means that the chunk and cb are currently
// being processed, so move the buffer counter past them.
if(state.writing){break;}}if(entry===null)state.lastBufferedRequest=null;}state.bufferedRequestCount=0;state.bufferedRequest=entry;state.bufferProcessing=false;}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error('_write() is not implemented'));};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==='function'){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==='function'){cb=encoding;encoding=null;}if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);// .end() fully uncorks
if(state.corked){state.corked=1;this.uncork();}// ignore unnecessary end() calls.
if(!state.ending&&!state.finished)endWritable(this,state,cb);};function needFinish(state){return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing;}function prefinish(stream,state){if(!state.prefinished){state.prefinished=true;stream.emit('prefinish');}}function finishMaybe(stream,state){var need=needFinish(state);if(need){if(state.pendingcb===0){prefinish(stream,state);state.finished=true;stream.emit('finish');}else{prefinish(stream,state);}}return need;}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)processNextTick(cb);else stream.once('finish',cb);}state.ended=true;stream.writable=false;}// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state){var _this=this;this.next=null;this.entry=null;this.finish=function(err){var entry=_this.entry;_this.entry=null;while(entry){var cb=entry.callback;state.pendingcb--;cb(err);entry=entry.next;}if(state.corkedRequestsFree){state.corkedRequestsFree.next=_this;}else{state.corkedRequestsFree=_this;}};}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8),__webpack_require__(17).setImmediate);/***/},/* 17 *//***/function(module,exports,__webpack_require__){var apply=Function.prototype.apply;// DOM APIs, for completeness
exports.setTimeout=function(){return new Timeout(apply.call(setTimeout,window,arguments),clearTimeout);};exports.setInterval=function(){return new Timeout(apply.call(setInterval,window,arguments),clearInterval);};exports.clearTimeout=exports.clearInterval=function(timeout){if(timeout){timeout.close();}};function Timeout(id,clearFn){this._id=id;this._clearFn=clearFn;}Timeout.prototype.unref=Timeout.prototype.ref=function(){};Timeout.prototype.close=function(){this._clearFn.call(window,this._id);};// Does not start the time, just sets up the members needed.
exports.enroll=function(item,msecs){clearTimeout(item._idleTimeoutId);item._idleTimeout=msecs;};exports.unenroll=function(item){clearTimeout(item._idleTimeoutId);item._idleTimeout=-1;};exports._unrefActive=exports.active=function(item){clearTimeout(item._idleTimeoutId);var msecs=item._idleTimeout;if(msecs>=0){item._idleTimeoutId=setTimeout(function onTimeout(){if(item._onTimeout)item._onTimeout();},msecs);}};// setimmediate attaches itself to the global object
__webpack_require__(18);exports.setImmediate=setImmediate;exports.clearImmediate=clearImmediate;/***/},/* 18 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global,process){(function(global,undefined){"use strict";if(global.setImmediate){return;}var nextHandle=1;// Spec says greater than zero
var tasksByHandle={};var currentlyRunningATask=false;var doc=global.document;var registerImmediate;function setImmediate(callback){// Callback can either be a function or a string
if(typeof callback!=="function"){callback=new Function(""+callback);}// Copy function arguments
var args=new Array(arguments.length-1);for(var i=0;i<args.length;i++){args[i]=arguments[i+1];}// Store and register the task
var task={callback:callback,args:args};tasksByHandle[nextHandle]=task;registerImmediate(nextHandle);return nextHandle++;}function clearImmediate(handle){delete tasksByHandle[handle];}function run(task){var callback=task.callback;var args=task.args;switch(args.length){case 0:callback();break;case 1:callback(args[0]);break;case 2:callback(args[0],args[1]);break;case 3:callback(args[0],args[1],args[2]);break;default:callback.apply(undefined,args);break;}}function runIfPresent(handle){// From the spec: "Wait until any invocations of this algorithm started before this one have completed."
// So if we're currently running a task, we'll need to delay this invocation.
if(currentlyRunningATask){// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
// "too much recursion" error.
setTimeout(runIfPresent,0,handle);}else{var task=tasksByHandle[handle];if(task){currentlyRunningATask=true;try{run(task);}finally{clearImmediate(handle);currentlyRunningATask=false;}}}}function installNextTickImplementation(){registerImmediate=function registerImmediate(handle){process.nextTick(function(){runIfPresent(handle);});};}function canUsePostMessage(){// The test against `importScripts` prevents this implementation from being installed inside a web worker,
// where `global.postMessage` means something completely different and can't be used for this purpose.
if(global.postMessage&&!global.importScripts){var postMessageIsAsynchronous=true;var oldOnMessage=global.onmessage;global.onmessage=function(){postMessageIsAsynchronous=false;};global.postMessage("","*");global.onmessage=oldOnMessage;return postMessageIsAsynchronous;}}function installPostMessageImplementation(){// Installs an event handler on `global` for the `message` event: see
// * https://developer.mozilla.org/en/DOM/window.postMessage
// * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
var messagePrefix="setImmediate$"+Math.random()+"$";var onGlobalMessage=function onGlobalMessage(event){if(event.source===global&&typeof event.data==="string"&&event.data.indexOf(messagePrefix)===0){runIfPresent(+event.data.slice(messagePrefix.length));}};if(global.addEventListener){global.addEventListener("message",onGlobalMessage,false);}else{global.attachEvent("onmessage",onGlobalMessage);}registerImmediate=function registerImmediate(handle){global.postMessage(messagePrefix+handle,"*");};}function installMessageChannelImplementation(){var channel=new MessageChannel();channel.port1.onmessage=function(event){var handle=event.data;runIfPresent(handle);};registerImmediate=function registerImmediate(handle){channel.port2.postMessage(handle);};}function installReadyStateChangeImplementation(){var html=doc.documentElement;registerImmediate=function registerImmediate(handle){// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
var script=doc.createElement("script");script.onreadystatechange=function(){runIfPresent(handle);script.onreadystatechange=null;html.removeChild(script);script=null;};html.appendChild(script);};}function installSetTimeoutImplementation(){registerImmediate=function registerImmediate(handle){setTimeout(runIfPresent,0,handle);};}// If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
var attachTo=Object.getPrototypeOf&&Object.getPrototypeOf(global);attachTo=attachTo&&attachTo.setTimeout?attachTo:global;// Don't get fooled by e.g. browserify environments.
if({}.toString.call(global.process)==="[object process]"){// For Node.js before 0.9
installNextTickImplementation();}else if(canUsePostMessage()){// For non-IE10 modern browsers
installPostMessageImplementation();}else if(global.MessageChannel){// For web workers, where supported
installMessageChannelImplementation();}else if(doc&&"onreadystatechange"in doc.createElement("script")){// For IE 6–8
installReadyStateChangeImplementation();}else{// For older browsers
installSetTimeoutImplementation();}attachTo.setImmediate=setImmediate;attachTo.clearImmediate=clearImmediate;})(typeof self==="undefined"?typeof global==="undefined"?this:global:self);/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}(),__webpack_require__(8));/***/},/* 19 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';if(!process.version||process.version.indexOf('v0.')===0||process.version.indexOf('v1.')===0&&process.version.indexOf('v1.8.')!==0){module.exports=nextTick;}else{module.exports=process.nextTick;}function nextTick(fn,arg1,arg2,arg3){if(typeof fn!=='function'){throw new TypeError('"callback" argument must be a function');}var len=arguments.length;var args,i;switch(len){case 0:case 1:return process.nextTick(fn);case 2:return process.nextTick(function afterTickOne(){fn.call(null,arg1);});case 3:return process.nextTick(function afterTickTwo(){fn.call(null,arg1,arg2);});case 4:return process.nextTick(function afterTickThree(){fn.call(null,arg1,arg2,arg3);});default:args=new Array(len-1);i=0;while(i<args.length){args[i++]=arguments[i];}return process.nextTick(function afterTick(){fn.apply(null,args);});}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 20 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(arg){if(Array.isArray){return Array.isArray(arg);}return objectToString(arg)==='[object Array]';}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return objectToString(e)==='[object Error]'||e instanceof Error;}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||(typeof arg==="undefined"?"undefined":_typeof(arg))==='symbol'||// ES6 symbol
typeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=Buffer.isBuffer;function objectToString(o){return Object.prototype.toString.call(o);}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 21 *//***/function(module,exports){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module exports.
	 */module.exports=deprecate;/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */function deprecate(fn,msg){if(config('noDeprecation')){return fn;}var warned=false;function deprecated(){if(!warned){if(config('throwDeprecation')){throw new Error(msg);}else if(config('traceDeprecation')){console.trace(msg);}else{console.warn(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;}/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */function config(name){// accessing global.localStorage can trigger a DOMException in sandboxed iframes
try{if(!global.localStorage)return false;}catch(_){return false;}var val=global.localStorage[name];if(null==val)return false;return String(val).toLowerCase()==='true';}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 22 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){'use strict';var buffer=__webpack_require__(4);var Buffer=buffer.Buffer;var SlowBuffer=buffer.SlowBuffer;var MAX_LEN=buffer.kMaxLength||2147483647;exports.alloc=function alloc(size,fill,encoding){if(typeof Buffer.alloc==='function'){return Buffer.alloc(size,fill,encoding);}if(typeof encoding==='number'){throw new TypeError('encoding must not be number');}if(typeof size!=='number'){throw new TypeError('size must be a number');}if(size>MAX_LEN){throw new RangeError('size is too large');}var enc=encoding;var _fill=fill;if(_fill===undefined){enc=undefined;_fill=0;}var buf=new Buffer(size);if(typeof _fill==='string'){var fillBuf=new Buffer(_fill,enc);var flen=fillBuf.length;var i=-1;while(++i<size){buf[i]=fillBuf[i%flen];}}else{buf.fill(_fill);}return buf;};exports.allocUnsafe=function allocUnsafe(size){if(typeof Buffer.allocUnsafe==='function'){return Buffer.allocUnsafe(size);}if(typeof size!=='number'){throw new TypeError('size must be a number');}if(size>MAX_LEN){throw new RangeError('size is too large');}return new Buffer(size);};exports.from=function from(value,encodingOrOffset,length){if(typeof Buffer.from==='function'&&(!global.Uint8Array||Uint8Array.from!==Buffer.from)){return Buffer.from(value,encodingOrOffset,length);}if(typeof value==='number'){throw new TypeError('"value" argument must not be a number');}if(typeof value==='string'){return new Buffer(value,encodingOrOffset);}if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){var offset=encodingOrOffset;if(arguments.length===1){return new Buffer(value);}if(typeof offset==='undefined'){offset=0;}var len=length;if(typeof len==='undefined'){len=value.byteLength-offset;}if(offset>=value.byteLength){throw new RangeError('\'offset\' is out of bounds');}if(len>value.byteLength-offset){throw new RangeError('\'length\' is out of bounds');}return new Buffer(value.slice(offset,offset+len));}if(Buffer.isBuffer(value)){var out=new Buffer(value.length);value.copy(out,0,0,value.length);return out;}if(value){if(Array.isArray(value)||typeof ArrayBuffer!=='undefined'&&value.buffer instanceof ArrayBuffer||'length'in value){return new Buffer(value);}if(value.type==='Buffer'&&Array.isArray(value.data)){return new Buffer(value.data);}}throw new TypeError('First argument must be a string, Buffer, '+'ArrayBuffer, Array, or array-like object.');};exports.allocUnsafeSlow=function allocUnsafeSlow(size){if(typeof Buffer.allocUnsafeSlow==='function'){return Buffer.allocUnsafeSlow(size);}if(typeof size!=='number'){throw new TypeError('size must be a number');}if(size>=MAX_LEN){throw new RangeError('size is too large');}return new SlowBuffer(size);};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 23 *//***/function(module,exports,__webpack_require__){// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';/*<replacement>*/var objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;};/*</replacement>*/module.exports=Duplex;/*<replacement>*/var processNextTick=__webpack_require__(19);/*</replacement>*//*<replacement>*/var util=__webpack_require__(20);util.inherits=__webpack_require__(10);/*</replacement>*/var Readable=__webpack_require__(24);var Writable=__webpack_require__(16);util.inherits(Duplex,Readable);var keys=objectKeys(Writable.prototype);for(var v=0;v<keys.length;v++){var method=keys[v];if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];}function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once('end',onend);}// the no-half-open enforcer
function onend(){// if we allow half-open state, or if the writable side ended,
// then we're ok.
if(this.allowHalfOpen||this._writableState.ended)return;// no more data can be written.
// But allow more writes to happen in this tick.
processNextTick(onEndNT,this);}function onEndNT(self){self.end();}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}/***/},/* 24 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){'use strict';module.exports=Readable;/*<replacement>*/var processNextTick=__webpack_require__(19);/*</replacement>*//*<replacement>*/var isArray=__webpack_require__(7);/*</replacement>*//*<replacement>*/var Duplex;/*</replacement>*/Readable.ReadableState=ReadableState;/*<replacement>*/var EE=__webpack_require__(14).EventEmitter;var EElistenerCount=function EElistenerCount(emitter,type){return emitter.listeners(type).length;};/*</replacement>*//*<replacement>*/var Stream;(function(){try{Stream=__webpack_require__(13);}catch(_){}finally{if(!Stream)Stream=__webpack_require__(14).EventEmitter;}})();/*</replacement>*/var Buffer=__webpack_require__(4).Buffer;/*<replacement>*/var bufferShim=__webpack_require__(22);/*</replacement>*//*<replacement>*/var util=__webpack_require__(20);util.inherits=__webpack_require__(10);/*</replacement>*//*<replacement>*/var debugUtil=__webpack_require__(25);var debug=void 0;if(debugUtil&&debugUtil.debuglog){debug=debugUtil.debuglog('stream');}else{debug=function debug(){};}/*</replacement>*/var BufferList=__webpack_require__(26);var StringDecoder;util.inherits(Readable,Stream);function prependListener(emitter,event,fn){// Sadly this is not cacheable as some libraries bundle their own
// event emitter implementation with them.
if(typeof emitter.prependListener==='function'){return emitter.prependListener(event,fn);}else{// This is a hack to make sure that our error handler is attached before any
// userland ones.  NEVER DO THIS. This is here only because this code needs
// to continue to work with older versions of Node.js that do not include
// the prependListener() method. The goal is to eventually remove this hack.
if(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(isArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]];}}function ReadableState(options,stream){Duplex=Duplex||__webpack_require__(23);options=options||{};// object stream flag. Used to make read(n) ignore n and to
// make all the buffer merging and length checks go away
this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;// the point at which it stops calling _read() to fill the buffer
// Note: 0 is a valid value, means "don't call _read preemptively ever"
var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.
this.highWaterMark=~~this.highWaterMark;// A linked list is used to store data chunks instead of an array because the
// linked list can remove elements from the beginning faster than
// array.shift()
this.buffer=new BufferList();this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;// a flag to be able to tell if the onwrite cb is called immediately,
// or on a later tick.  We set this to true at first, because any
// actions that shouldn't happen until "later" should generally also
// not happen before the first write call.
this.sync=true;// whenever we return null, then we set a flag to say
// that we're awaiting a 'readable' event emission.
this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;// Crypto is kind of old and crusty.  Historically, its default string
// encoding is 'binary' so we have to make this configurable.
// Everything else in the universe uses 'utf8', though.
this.defaultEncoding=options.defaultEncoding||'utf8';// when piping, we only care about 'readable' events that happen
// after read()ing all the bytes and not getting any pushback.
this.ranOut=false;// the number of writers that are awaiting a drain event in .pipe()s
this.awaitDrain=0;// if true, a maybeReadMore has been scheduled
this.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!StringDecoder)StringDecoder=__webpack_require__(27).StringDecoder;this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding;}}function Readable(options){Duplex=Duplex||__webpack_require__(23);if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);// legacy
this.readable=true;if(options&&typeof options.read==='function')this._read=options.read;Stream.call(this);}// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push=function(chunk,encoding){var state=this._readableState;if(!state.objectMode&&typeof chunk==='string'){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=bufferShim.from(chunk,encoding);encoding='';}}return readableAddChunk(this,state,chunk,encoding,false);};// Unshift should *always* be something directly out of read()
Readable.prototype.unshift=function(chunk){var state=this._readableState;return readableAddChunk(this,state,chunk,'',true);};Readable.prototype.isPaused=function(){return this._readableState.flowing===false;};function readableAddChunk(stream,state,chunk,encoding,addToFront){var er=chunkInvalid(state,chunk);if(er){stream.emit('error',er);}else if(chunk===null){state.reading=false;onEofChunk(stream,state);}else if(state.objectMode||chunk&&chunk.length>0){if(state.ended&&!addToFront){var e=new Error('stream.push() after EOF');stream.emit('error',e);}else if(state.endEmitted&&addToFront){var _e=new Error('stream.unshift() after end event');stream.emit('error',_e);}else{var skipAdd;if(state.decoder&&!addToFront&&!encoding){chunk=state.decoder.write(chunk);skipAdd=!state.objectMode&&chunk.length===0;}if(!addToFront)state.reading=false;// Don't add to the buffer if we've decoded to an empty string chunk and
// we're not in object mode
if(!skipAdd){// if we want the data now, just emit it.
if(state.flowing&&state.length===0&&!state.sync){stream.emit('data',chunk);stream.read(0);}else{// update the buffer info.
state.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)emitReadable(stream);}}maybeReadMore(stream,state);}}else if(!addToFront){state.reading=false;}return needMoreData(state);}// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state){return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0);}// backwards compatibility.
Readable.prototype.setEncoding=function(enc){if(!StringDecoder)StringDecoder=__webpack_require__(27).StringDecoder;this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;return this;};// Don't raise the hwm > 8MB
var MAX_HWM=0x800000;function computeNewHighWaterMark(n){if(n>=MAX_HWM){n=MAX_HWM;}else{// Get the next highest power of 2 to prevent increasing hwm excessively in
// tiny amounts
n--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++;}return n;}// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n,state){if(n<=0||state.length===0&&state.ended)return 0;if(state.objectMode)return 1;if(n!==n){// Only flow one buffer at a time
if(state.flowing&&state.length)return state.buffer.head.data.length;else return state.length;}// If we're asking for more than the current hwm, then raise the hwm.
if(n>state.highWaterMark)state.highWaterMark=computeNewHighWaterMark(n);if(n<=state.length)return n;// Don't have enough
if(!state.ended){state.needReadable=true;return 0;}return state.length;}// you can override either this method, or the async _read(n) below.
Readable.prototype.read=function(n){debug('read',n);n=parseInt(n,10);var state=this._readableState;var nOrig=n;if(n!==0)state.emittedReadable=false;// if we're doing read(0) to trigger a readable event, but we
// already have a bunch of data in the buffer, then just trigger
// the 'readable' event and move on.
if(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){debug('read: emitReadable',state.length,state.ended);if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);return null;}n=howMuchToRead(n,state);// if we've ended, and we're now clear, then finish it up.
if(n===0&&state.ended){if(state.length===0)endReadable(this);return null;}// All the actual chunk generation logic needs to be
// *below* the call to _read.  The reason is that in certain
// synthetic stream cases, such as passthrough streams, _read
// may be a completely synchronous operation which may change
// the state of the read buffer, providing enough data when
// before there was *not* enough.
//
// So, the steps are:
// 1. Figure out what the state of things will be after we do
// a read from the buffer.
//
// 2. If that resulting state will trigger a _read, then call _read.
// Note that this may be asynchronous, or synchronous.  Yes, it is
// deeply ugly to write APIs this way, but that still doesn't mean
// that the Readable class should behave improperly, as streams are
// designed to be sync/async agnostic.
// Take note if the _read call is sync or async (ie, if the read call
// has returned yet), so that we know whether or not it's safe to emit
// 'readable' etc.
//
// 3. Actually pull the requested chunks out of the buffer and return.
// if we need a readable event, then we need to do some reading.
var doRead=state.needReadable;debug('need readable',doRead);// if we currently have less than the highWaterMark, then also read some
if(state.length===0||state.length-n<state.highWaterMark){doRead=true;debug('length less than watermark',doRead);}// however, if we've ended, then there's no point, and if we're already
// reading, then it's unnecessary.
if(state.ended||state.reading){doRead=false;debug('reading or ended',doRead);}else if(doRead){debug('do read');state.reading=true;state.sync=true;// if the length is currently zero, then we *need* a readable event.
if(state.length===0)state.needReadable=true;// call internal read method
this._read(state.highWaterMark);state.sync=false;// If _read pushed data synchronously, then `reading` will be false,
// and we need to re-evaluate how much data we can return to the user.
if(!state.reading)n=howMuchToRead(nOrig,state);}var ret;if(n>0)ret=fromList(n,state);else ret=null;if(ret===null){state.needReadable=true;n=0;}else{state.length-=n;}if(state.length===0){// If we have nothing in the buffer, then we want to know
// as soon as we *do* get something into the buffer.
if(!state.ended)state.needReadable=true;// If we tried to read() past the EOF, then emit end on the next tick.
if(nOrig!==n&&state.ended)endReadable(this);}if(ret!==null)this.emit('data',ret);return ret;};function chunkInvalid(state,chunk){var er=null;if(!Buffer.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==null&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}return er;}function onEofChunk(stream,state){if(state.ended)return;if(state.decoder){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;// emit 'readable' now to make sure it gets picked up.
emitReadable(stream);}// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream){var state=stream._readableState;state.needReadable=false;if(!state.emittedReadable){debug('emitReadable',state.flowing);state.emittedReadable=true;if(state.sync)processNextTick(emitReadable_,stream);else emitReadable_(stream);}}function emitReadable_(stream){debug('emit readable');stream.emit('readable');flow(stream);}// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;processNextTick(maybeReadMore_,stream,state);}}function maybeReadMore_(stream,state){var len=state.length;while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){debug('maybeReadMore read 0');stream.read(0);if(len===state.length)// didn't get any data, stop spinning.
break;else len=state.length;}state.readingMore=false;}// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read=function(n){this.emit('error',new Error('_read() is not implemented'));};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break;}state.pipesCount+=1;debug('pipe count=%d opts=%j',state.pipesCount,pipeOpts);var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;var endFn=doEnd?onend:cleanup;if(state.endEmitted)processNextTick(endFn);else src.once('end',endFn);dest.on('unpipe',onunpipe);function onunpipe(readable){debug('onunpipe');if(readable===src){cleanup();}}function onend(){debug('onend');dest.end();}// when the dest drains, it reduces the awaitDrain counter
// on the source.  This would be more elegant with a .once()
// handler in flow(), but adding and removing repeatedly is
// too slow.
var ondrain=pipeOnDrain(src);dest.on('drain',ondrain);var cleanedUp=false;function cleanup(){debug('cleanup');// cleanup event handlers once the pipe is broken
dest.removeListener('close',onclose);dest.removeListener('finish',onfinish);dest.removeListener('drain',ondrain);dest.removeListener('error',onerror);dest.removeListener('unpipe',onunpipe);src.removeListener('end',onend);src.removeListener('end',cleanup);src.removeListener('data',ondata);cleanedUp=true;// if the reader is waiting for a drain event from this
// specific writer, then it would cause it to never start
// flowing again.
// So, if this is awaiting a drain, then we just call it now.
// If we don't know, then assume that we are waiting for one.
if(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain();}// If the user pushes more data while we're writing to dest then we'll end up
// in ondata again. However, we only want to increase awaitDrain once because
// dest will only emit one 'drain' event for the multiple writes.
// => Introduce a guard on increasing awaitDrain.
var increasedAwaitDrain=false;src.on('data',ondata);function ondata(chunk){debug('ondata');increasedAwaitDrain=false;var ret=dest.write(chunk);if(false===ret&&!increasedAwaitDrain){// If the user unpiped during `dest.write()`, it is possible
// to get stuck in a permanently paused state if that write
// also returned false.
// => Check whether `dest` is still a piping destination.
if((state.pipesCount===1&&state.pipes===dest||state.pipesCount>1&&indexOf(state.pipes,dest)!==-1)&&!cleanedUp){debug('false write response, pause',src._readableState.awaitDrain);src._readableState.awaitDrain++;increasedAwaitDrain=true;}src.pause();}}// if the dest has an error, then stop piping into it.
// however, don't suppress the throwing behavior for this.
function onerror(er){debug('onerror',er);unpipe();dest.removeListener('error',onerror);if(EElistenerCount(dest,'error')===0)dest.emit('error',er);}// Make sure our error handler is attached before userland ones.
prependListener(dest,'error',onerror);// Both close and finish should trigger unpipe, but only once.
function onclose(){dest.removeListener('finish',onfinish);unpipe();}dest.once('close',onclose);function onfinish(){debug('onfinish');dest.removeListener('close',onclose);unpipe();}dest.once('finish',onfinish);function unpipe(){debug('unpipe');src.unpipe(dest);}// tell the dest that it's being piped to
dest.emit('pipe',src);// start the flow if it hasn't been started already.
if(!state.flowing){debug('pipe resume');src.resume();}return dest;};function pipeOnDrain(src){return function(){var state=src._readableState;debug('pipeOnDrain',state.awaitDrain);if(state.awaitDrain)state.awaitDrain--;if(state.awaitDrain===0&&EElistenerCount(src,'data')){state.flowing=true;flow(src);}};}Readable.prototype.unpipe=function(dest){var state=this._readableState;// if we're not piping anywhere, then do nothing.
if(state.pipesCount===0)return this;// just one destination.  most common case.
if(state.pipesCount===1){// passed in one, but it's not the right one.
if(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;// got a match.
state.pipes=null;state.pipesCount=0;state.flowing=false;if(dest)dest.emit('unpipe',this);return this;}// slow case. multiple pipe destinations.
if(!dest){// remove all.
var dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;state.flowing=false;for(var i=0;i<len;i++){dests[i].emit('unpipe',this);}return this;}// try to find the right one.
var index=indexOf(state.pipes,dest);if(index===-1)return this;state.pipes.splice(index,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit('unpipe',this);return this;};// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on=function(ev,fn){var res=Stream.prototype.on.call(this,ev,fn);if(ev==='data'){// Start flowing on next tick if stream isn't explicitly paused
if(this._readableState.flowing!==false)this.resume();}else if(ev==='readable'){var state=this._readableState;if(!state.endEmitted&&!state.readableListening){state.readableListening=state.needReadable=true;state.emittedReadable=false;if(!state.reading){processNextTick(nReadingNextTick,this);}else if(state.length){emitReadable(this,state);}}}return res;};Readable.prototype.addListener=Readable.prototype.on;function nReadingNextTick(self){debug('readable nexttick read 0');self.read(0);}// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume=function(){var state=this._readableState;if(!state.flowing){debug('resume');state.flowing=true;resume(this,state);}return this;};function resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;processNextTick(resume_,stream,state);}}function resume_(stream,state){if(!state.reading){debug('resume read 0');stream.read(0);}state.resumeScheduled=false;state.awaitDrain=0;stream.emit('resume');flow(stream);if(state.flowing&&!state.reading)stream.read(0);}Readable.prototype.pause=function(){debug('call pause flowing=%j',this._readableState.flowing);if(false!==this._readableState.flowing){debug('pause');this._readableState.flowing=false;this.emit('pause');}return this;};function flow(stream){var state=stream._readableState;debug('flow',state.flowing);while(state.flowing&&stream.read()!==null){}}// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap=function(stream){var state=this._readableState;var paused=false;var self=this;stream.on('end',function(){debug('wrapped end');if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)self.push(chunk);}self.push(null);});stream.on('data',function(chunk){debug('wrapped data');if(state.decoder)chunk=state.decoder.write(chunk);// don't skip over falsy values in objectMode
if(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;var ret=self.push(chunk);if(!ret){paused=true;stream.pause();}});// proxy all the other methods.
// important when wrapping filters and duplexes.
for(var i in stream){if(this[i]===undefined&&typeof stream[i]==='function'){this[i]=function(method){return function(){return stream[method].apply(stream,arguments);};}(i);}}// proxy certain important events.
var events=['error','close','destroy','pause','resume'];forEach(events,function(ev){stream.on(ev,self.emit.bind(self,ev));});// when we try to consume some more bytes, simply unpause the
// underlying stream.
self._read=function(n){debug('wrapped _read',n);if(paused){paused=false;stream.resume();}};return self;};// exposed for testing purposes only.
Readable._fromList=fromList;// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n,state){// nothing buffered
if(state.length===0)return null;var ret;if(state.objectMode)ret=state.buffer.shift();else if(!n||n>=state.length){// read it all, truncate the list
if(state.decoder)ret=state.buffer.join('');else if(state.buffer.length===1)ret=state.buffer.head.data;else ret=state.buffer.concat(state.length);state.buffer.clear();}else{// read part of list
ret=fromListPartial(n,state.buffer,state.decoder);}return ret;}// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n,list,hasStrings){var ret;if(n<list.head.data.length){// slice is the same for buffers and strings
ret=list.head.data.slice(0,n);list.head.data=list.head.data.slice(n);}else if(n===list.head.data.length){// first chunk is a perfect match
ret=list.shift();}else{// result spans more than one buffer
ret=hasStrings?copyFromBufferString(n,list):copyFromBuffer(n,list);}return ret;}// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n,list){var p=list.head;var c=1;var ret=p.data;n-=ret.length;while(p=p.next){var str=p.data;var nb=n>str.length?str.length:n;if(nb===str.length)ret+=str;else ret+=str.slice(0,n);n-=nb;if(n===0){if(nb===str.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null;}else{list.head=p;p.data=str.slice(nb);}break;}++c;}list.length-=c;return ret;}// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n,list){var ret=bufferShim.allocUnsafe(n);var p=list.head;var c=1;p.data.copy(ret);n-=p.data.length;while(p=p.next){var buf=p.data;var nb=n>buf.length?buf.length:n;buf.copy(ret,ret.length-n,0,nb);n-=nb;if(n===0){if(nb===buf.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null;}else{list.head=p;p.data=buf.slice(nb);}break;}++c;}list.length-=c;return ret;}function endReadable(stream){var state=stream._readableState;// If we get here before consuming all the bytes, then that is a
// bug in node.  Should never happen.
if(state.length>0)throw new Error('"endReadable()" called on non-empty stream');if(!state.endEmitted){state.ended=true;processNextTick(endReadableNT,state,stream);}}function endReadableNT(state,stream){// Check that we didn't get one last unshift.
if(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit('end');}}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}function indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i;}return-1;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 25 *//***/function(module,exports){/* (ignored) *//***/},/* 26 *//***/function(module,exports,__webpack_require__){'use strict';var Buffer=__webpack_require__(4).Buffer;/*<replacement>*/var bufferShim=__webpack_require__(22);/*</replacement>*/module.exports=BufferList;function BufferList(){this.head=null;this.tail=null;this.length=0;}BufferList.prototype.push=function(v){var entry={data:v,next:null};if(this.length>0)this.tail.next=entry;else this.head=entry;this.tail=entry;++this.length;};BufferList.prototype.unshift=function(v){var entry={data:v,next:this.head};if(this.length===0)this.tail=entry;this.head=entry;++this.length;};BufferList.prototype.shift=function(){if(this.length===0)return;var ret=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return ret;};BufferList.prototype.clear=function(){this.head=this.tail=null;this.length=0;};BufferList.prototype.join=function(s){if(this.length===0)return'';var p=this.head;var ret=''+p.data;while(p=p.next){ret+=s+p.data;}return ret;};BufferList.prototype.concat=function(n){if(this.length===0)return bufferShim.alloc(0);if(this.length===1)return this.head.data;var ret=bufferShim.allocUnsafe(n>>>0);var p=this.head;var i=0;while(p){p.data.copy(ret,i);i+=p.data.length;p=p.next;}return ret;};/***/},/* 27 *//***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var Buffer=__webpack_require__(4).Buffer;var isBufferEncoding=Buffer.isEncoding||function(encoding){switch(encoding&&encoding.toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':case'raw':return true;default:return false;}};function assertEncoding(encoding){if(encoding&&!isBufferEncoding(encoding)){throw new Error('Unknown encoding: '+encoding);}}// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder=exports.StringDecoder=function(encoding){this.encoding=(encoding||'utf8').toLowerCase().replace(/[-_]/,'');assertEncoding(encoding);switch(this.encoding){case'utf8':// CESU-8 represents each of Surrogate Pair by 3-bytes
this.surrogateSize=3;break;case'ucs2':case'utf16le':// UTF-16 represents each of Surrogate Pair by 2-bytes
this.surrogateSize=2;this.detectIncompleteChar=utf16DetectIncompleteChar;break;case'base64':// Base-64 stores 3 bytes in 4 chars, and pads the remainder.
this.surrogateSize=3;this.detectIncompleteChar=base64DetectIncompleteChar;break;default:this.write=passThroughWrite;return;}// Enough space to store all bytes of a single character. UTF-8 needs 4
// bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
this.charBuffer=new Buffer(6);// Number of bytes received for the current incomplete multi-byte character.
this.charReceived=0;// Number of bytes expected for the current incomplete multi-byte character.
this.charLength=0;};// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write=function(buffer){var charStr='';// if our last write ended with an incomplete multibyte character
while(this.charLength){// determine how many remaining bytes this buffer has to offer for this char
var available=buffer.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:buffer.length;// add the new bytes to the char buffer
buffer.copy(this.charBuffer,this.charReceived,0,available);this.charReceived+=available;if(this.charReceived<this.charLength){// still not enough chars in this buffer? wait for more ...
return'';}// remove bytes belonging to the current character from the buffer
buffer=buffer.slice(available,buffer.length);// get the character that was split
charStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
var charCode=charStr.charCodeAt(charStr.length-1);if(charCode>=0xD800&&charCode<=0xDBFF){this.charLength+=this.surrogateSize;charStr='';continue;}this.charReceived=this.charLength=0;// if there are no more bytes in this buffer, just emit our char
if(buffer.length===0){return charStr;}break;}// determine and set charLength / charReceived
this.detectIncompleteChar(buffer);var end=buffer.length;if(this.charLength){// buffer the incomplete character bytes we got
buffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);end-=this.charReceived;}charStr+=buffer.toString(this.encoding,0,end);var end=charStr.length-1;var charCode=charStr.charCodeAt(end);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
if(charCode>=0xD800&&charCode<=0xDBFF){var size=this.surrogateSize;this.charLength+=size;this.charReceived+=size;this.charBuffer.copy(this.charBuffer,size,0,size);buffer.copy(this.charBuffer,0,0,size);return charStr.substring(0,end);}// or just emit the charStr
return charStr;};// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar=function(buffer){// determine how many bytes we have to check at the end of this buffer
var i=buffer.length>=3?3:buffer.length;// Figure out if one of the last i bytes of our buffer announces an
// incomplete char.
for(;i>0;i--){var c=buffer[buffer.length-i];// See http://en.wikipedia.org/wiki/UTF-8#Description
// 110XXXXX
if(i==1&&c>>5==0x06){this.charLength=2;break;}// 1110XXXX
if(i<=2&&c>>4==0x0E){this.charLength=3;break;}// 11110XXX
if(i<=3&&c>>3==0x1E){this.charLength=4;break;}}this.charReceived=i;};StringDecoder.prototype.end=function(buffer){var res='';if(buffer&&buffer.length)res=this.write(buffer);if(this.charReceived){var cr=this.charReceived;var buf=this.charBuffer;var enc=this.encoding;res+=buf.slice(0,cr).toString(enc);}return res;};function passThroughWrite(buffer){return buffer.toString(this.encoding);}function utf16DetectIncompleteChar(buffer){this.charReceived=buffer.length%2;this.charLength=this.charReceived?2:0;}function base64DetectIncompleteChar(buffer){this.charReceived=buffer.length%3;this.charLength=this.charReceived?3:0;}/***/},/* 28 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(23);/***/},/* 29 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(30);/***/},/* 30 *//***/function(module,exports,__webpack_require__){// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';module.exports=Transform;var Duplex=__webpack_require__(23);/*<replacement>*/var util=__webpack_require__(20);util.inherits=__webpack_require__(10);/*</replacement>*/util.inherits(Transform,Duplex);function TransformState(stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data);};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;this.writeencoding=null;}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit('error',new Error('no writecb in Transform class'));ts.writechunk=null;ts.writecb=null;if(data!==null&&data!==undefined)stream.push(data);cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark);}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);this._transformState=new TransformState(this);var stream=this;// start out asking for a readable event once data is transformed.
this._readableState.needReadable=true;// we have implemented the _read method, and done the other things
// that Readable wants before the first _read call, so unset the
// sync guard flag.
this._readableState.sync=false;if(options){if(typeof options.transform==='function')this._transform=options.transform;if(typeof options.flush==='function')this._flush=options.flush;}// When the writable side finishes, then flush out anything remaining.
this.once('prefinish',function(){if(typeof this._flush==='function')this._flush(function(er,data){done(stream,er,data);});else done(stream);});}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding);};// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform=function(chunk,encoding,cb){throw new Error('_transform() is not implemented');};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);}};// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);}else{// mark that we need a transform, so that any data that comes in
// will get processed, now that we've asked for it.
ts.needTransform=true;}};function done(stream,er,data){if(er)return stream.emit('error',er);if(data!==null&&data!==undefined)stream.push(data);// if there's nothing in the write buffer, then that means
// that nothing more will ever be provided
var ws=stream._writableState;var ts=stream._transformState;if(ws.length)throw new Error('Calling transform done when ws.length != 0');if(ts.transforming)throw new Error('Calling transform done when still transforming');return stream.push(null);}/***/},/* 31 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(32);/***/},/* 32 *//***/function(module,exports,__webpack_require__){// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';module.exports=PassThrough;var Transform=__webpack_require__(30);/*<replacement>*/var util=__webpack_require__(20);util.inherits=__webpack_require__(10);/*</replacement>*/util.inherits(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options);}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk);};/***/},/* 33 *//***/function(module,exports,__webpack_require__){var Buffer=__webpack_require__(4).Buffer;module.exports=function(buf){// If the buffer is backed by a Uint8Array, a faster version will work
if(buf instanceof Uint8Array){// If the buffer isn't a subarray, return the underlying ArrayBuffer
if(buf.byteOffset===0&&buf.byteLength===buf.buffer.byteLength){return buf.buffer;}else if(typeof buf.buffer.slice==='function'){// Otherwise we need to get a proper copy
return buf.buffer.slice(buf.byteOffset,buf.byteOffset+buf.byteLength);}}if(Buffer.isBuffer(buf)){// This is the slow version that will work with any Buffer
// implementation (even in old browsers)
var arrayCopy=new Uint8Array(buf.length);var len=buf.length;for(var i=0;i<len;i++){arrayCopy[i]=buf[i];}return arrayCopy.buffer;}else{throw new Error('Argument must be a Buffer');}};/***/},/* 34 *//***/function(module,exports){module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;function extend(){var target={};for(var i=0;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;}/***/},/* 35 *//***/function(module,exports){module.exports={"100":"Continue","101":"Switching Protocols","102":"Processing","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I'm a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"};/***/},/* 36 *//***/function(module,exports,__webpack_require__){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';var punycode=__webpack_require__(37);var util=__webpack_require__(39);exports.parse=urlParse;exports.resolve=urlResolve;exports.resolveObject=urlResolveObject;exports.format=urlFormat;exports.Url=Url;function Url(){this.protocol=null;this.slashes=null;this.auth=null;this.host=null;this.port=null;this.hostname=null;this.hash=null;this.search=null;this.query=null;this.pathname=null;this.path=null;this.href=null;}// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,// Special case for a simple path URL
simplePathPattern=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims=['<','>','"','`',' ','\r','\n','\t'],// RFC 2396: characters not allowed for various reasons.
unwise=['{','}','|','\\','^','`'].concat(delims),// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape=['\''].concat(unwise),// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars=['%','/','?',';','#'].concat(autoEscape),hostEndingChars=['/','?','#'],hostnameMaxLen=255,hostnamePartPattern=/^[+a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,// protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol={'javascript':true,'javascript:':true},// protocols that never have a hostname.
hostlessProtocol={'javascript':true,'javascript:':true},// protocols that always contain a // bit.
slashedProtocol={'http':true,'https':true,'ftp':true,'gopher':true,'file':true,'http:':true,'https:':true,'ftp:':true,'gopher:':true,'file:':true},querystring=__webpack_require__(40);function urlParse(url,parseQueryString,slashesDenoteHost){if(url&&util.isObject(url)&&url instanceof Url)return url;var u=new Url();u.parse(url,parseQueryString,slashesDenoteHost);return u;}Url.prototype.parse=function(url,parseQueryString,slashesDenoteHost){if(!util.isString(url)){throw new TypeError("Parameter 'url' must be a string, not "+(typeof url==="undefined"?"undefined":_typeof(url)));}// Copy chrome, IE, opera backslash-handling behavior.
// Back slashes before the query string get converted to forward slashes
// See: https://code.google.com/p/chromium/issues/detail?id=25916
var queryIndex=url.indexOf('?'),splitter=queryIndex!==-1&&queryIndex<url.indexOf('#')?'?':'#',uSplit=url.split(splitter),slashRegex=/\\/g;uSplit[0]=uSplit[0].replace(slashRegex,'/');url=uSplit.join(splitter);var rest=url;// trim before proceeding.
// This is to support parse stuff like "  http://foo.com  \n"
rest=rest.trim();if(!slashesDenoteHost&&url.split('#').length===1){// Try fast path regexp
var simplePath=simplePathPattern.exec(rest);if(simplePath){this.path=rest;this.href=rest;this.pathname=simplePath[1];if(simplePath[2]){this.search=simplePath[2];if(parseQueryString){this.query=querystring.parse(this.search.substr(1));}else{this.query=this.search.substr(1);}}else if(parseQueryString){this.search='';this.query={};}return this;}}var proto=protocolPattern.exec(rest);if(proto){proto=proto[0];var lowerProto=proto.toLowerCase();this.protocol=lowerProto;rest=rest.substr(proto.length);}// figure out if it's got a host
// user@server is *always* interpreted as a hostname, and url
// resolution will treat //foo/bar as host=foo,path=bar because that's
// how the browser resolves relative URLs.
if(slashesDenoteHost||proto||rest.match(/^\/\/[^@\/]+@[^@\/]+/)){var slashes=rest.substr(0,2)==='//';if(slashes&&!(proto&&hostlessProtocol[proto])){rest=rest.substr(2);this.slashes=true;}}if(!hostlessProtocol[proto]&&(slashes||proto&&!slashedProtocol[proto])){// there's a hostname.
// the first instance of /, ?, ;, or # ends the host.
//
// If there is an @ in the hostname, then non-host chars *are* allowed
// to the left of the last @ sign, unless some host-ending character
// comes *before* the @-sign.
// URLs are obnoxious.
//
// ex:
// http://a@b@c/ => user:a@b host:c
// http://a@b?@c => user:a host:c path:/?@c
// v0.12 TODO(isaacs): This is not quite how Chrome does things.
// Review our test case against browsers more comprehensively.
// find the first instance of any hostEndingChars
var hostEnd=-1;for(var i=0;i<hostEndingChars.length;i++){var hec=rest.indexOf(hostEndingChars[i]);if(hec!==-1&&(hostEnd===-1||hec<hostEnd))hostEnd=hec;}// at this point, either we have an explicit point where the
// auth portion cannot go past, or the last @ char is the decider.
var auth,atSign;if(hostEnd===-1){// atSign can be anywhere.
atSign=rest.lastIndexOf('@');}else{// atSign must be in auth portion.
// http://a@b/c@d => host:b auth:a path:/c@d
atSign=rest.lastIndexOf('@',hostEnd);}// Now we have a portion which is definitely the auth.
// Pull that off.
if(atSign!==-1){auth=rest.slice(0,atSign);rest=rest.slice(atSign+1);this.auth=decodeURIComponent(auth);}// the host is the remaining to the left of the first non-host char
hostEnd=-1;for(var i=0;i<nonHostChars.length;i++){var hec=rest.indexOf(nonHostChars[i]);if(hec!==-1&&(hostEnd===-1||hec<hostEnd))hostEnd=hec;}// if we still have not hit it, then the entire thing is a host.
if(hostEnd===-1)hostEnd=rest.length;this.host=rest.slice(0,hostEnd);rest=rest.slice(hostEnd);// pull out port.
this.parseHost();// we've indicated that there is a hostname,
// so even if it's empty, it has to be present.
this.hostname=this.hostname||'';// if hostname begins with [ and ends with ]
// assume that it's an IPv6 address.
var ipv6Hostname=this.hostname[0]==='['&&this.hostname[this.hostname.length-1]===']';// validate a little.
if(!ipv6Hostname){var hostparts=this.hostname.split(/\./);for(var i=0,l=hostparts.length;i<l;i++){var part=hostparts[i];if(!part)continue;if(!part.match(hostnamePartPattern)){var newpart='';for(var j=0,k=part.length;j<k;j++){if(part.charCodeAt(j)>127){// we replace non-ASCII char with a temporary placeholder
// we need this to make sure size of hostname is not
// broken by replacing non-ASCII by nothing
newpart+='x';}else{newpart+=part[j];}}// we test again with ASCII char only
if(!newpart.match(hostnamePartPattern)){var validParts=hostparts.slice(0,i);var notHost=hostparts.slice(i+1);var bit=part.match(hostnamePartStart);if(bit){validParts.push(bit[1]);notHost.unshift(bit[2]);}if(notHost.length){rest='/'+notHost.join('.')+rest;}this.hostname=validParts.join('.');break;}}}}if(this.hostname.length>hostnameMaxLen){this.hostname='';}else{// hostnames are always lower case.
this.hostname=this.hostname.toLowerCase();}if(!ipv6Hostname){// IDNA Support: Returns a punycoded representation of "domain".
// It only converts parts of the domain name that
// have non-ASCII characters, i.e. it doesn't matter if
// you call it with a domain that already is ASCII-only.
this.hostname=punycode.toASCII(this.hostname);}var p=this.port?':'+this.port:'';var h=this.hostname||'';this.host=h+p;this.href+=this.host;// strip [ and ] from the hostname
// the host field still retains them, though
if(ipv6Hostname){this.hostname=this.hostname.substr(1,this.hostname.length-2);if(rest[0]!=='/'){rest='/'+rest;}}}// now rest is set to the post-host stuff.
// chop off any delim chars.
if(!unsafeProtocol[lowerProto]){// First, make 100% sure that any "autoEscape" chars get
// escaped, even if encodeURIComponent doesn't think they
// need to be.
for(var i=0,l=autoEscape.length;i<l;i++){var ae=autoEscape[i];if(rest.indexOf(ae)===-1)continue;var esc=encodeURIComponent(ae);if(esc===ae){esc=escape(ae);}rest=rest.split(ae).join(esc);}}// chop off from the tail first.
var hash=rest.indexOf('#');if(hash!==-1){// got a fragment string.
this.hash=rest.substr(hash);rest=rest.slice(0,hash);}var qm=rest.indexOf('?');if(qm!==-1){this.search=rest.substr(qm);this.query=rest.substr(qm+1);if(parseQueryString){this.query=querystring.parse(this.query);}rest=rest.slice(0,qm);}else if(parseQueryString){// no query string, but parseQueryString still requested
this.search='';this.query={};}if(rest)this.pathname=rest;if(slashedProtocol[lowerProto]&&this.hostname&&!this.pathname){this.pathname='/';}//to support http.request
if(this.pathname||this.search){var p=this.pathname||'';var s=this.search||'';this.path=p+s;}// finally, reconstruct the href based on what has been validated.
this.href=this.format();return this;};// format a parsed object into a url string
function urlFormat(obj){// ensure it's an object, and not a string url.
// If it's an obj, this is a no-op.
// this way, you can call url_format() on strings
// to clean up potentially wonky urls.
if(util.isString(obj))obj=urlParse(obj);if(!(obj instanceof Url))return Url.prototype.format.call(obj);return obj.format();}Url.prototype.format=function(){var auth=this.auth||'';if(auth){auth=encodeURIComponent(auth);auth=auth.replace(/%3A/i,':');auth+='@';}var protocol=this.protocol||'',pathname=this.pathname||'',hash=this.hash||'',host=false,query='';if(this.host){host=auth+this.host;}else if(this.hostname){host=auth+(this.hostname.indexOf(':')===-1?this.hostname:'['+this.hostname+']');if(this.port){host+=':'+this.port;}}if(this.query&&util.isObject(this.query)&&Object.keys(this.query).length){query=querystring.stringify(this.query);}var search=this.search||query&&'?'+query||'';if(protocol&&protocol.substr(-1)!==':')protocol+=':';// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
// unless they had them to begin with.
if(this.slashes||(!protocol||slashedProtocol[protocol])&&host!==false){host='//'+(host||'');if(pathname&&pathname.charAt(0)!=='/')pathname='/'+pathname;}else if(!host){host='';}if(hash&&hash.charAt(0)!=='#')hash='#'+hash;if(search&&search.charAt(0)!=='?')search='?'+search;pathname=pathname.replace(/[?#]/g,function(match){return encodeURIComponent(match);});search=search.replace('#','%23');return protocol+host+pathname+search+hash;};function urlResolve(source,relative){return urlParse(source,false,true).resolve(relative);}Url.prototype.resolve=function(relative){return this.resolveObject(urlParse(relative,false,true)).format();};function urlResolveObject(source,relative){if(!source)return relative;return urlParse(source,false,true).resolveObject(relative);}Url.prototype.resolveObject=function(relative){if(util.isString(relative)){var rel=new Url();rel.parse(relative,false,true);relative=rel;}var result=new Url();var tkeys=Object.keys(this);for(var tk=0;tk<tkeys.length;tk++){var tkey=tkeys[tk];result[tkey]=this[tkey];}// hash is always overridden, no matter what.
// even href="" will remove it.
result.hash=relative.hash;// if the relative url is empty, then there's nothing left to do here.
if(relative.href===''){result.href=result.format();return result;}// hrefs like //foo/bar always cut to the protocol.
if(relative.slashes&&!relative.protocol){// take everything except the protocol from relative
var rkeys=Object.keys(relative);for(var rk=0;rk<rkeys.length;rk++){var rkey=rkeys[rk];if(rkey!=='protocol')result[rkey]=relative[rkey];}//urlParse appends trailing / to urls like http://www.example.com
if(slashedProtocol[result.protocol]&&result.hostname&&!result.pathname){result.path=result.pathname='/';}result.href=result.format();return result;}if(relative.protocol&&relative.protocol!==result.protocol){// if it's a known url protocol, then changing
// the protocol does weird things
// first, if it's not file:, then we MUST have a host,
// and if there was a path
// to begin with, then we MUST have a path.
// if it is file:, then the host is dropped,
// because that's known to be hostless.
// anything else is assumed to be absolute.
if(!slashedProtocol[relative.protocol]){var keys=Object.keys(relative);for(var v=0;v<keys.length;v++){var k=keys[v];result[k]=relative[k];}result.href=result.format();return result;}result.protocol=relative.protocol;if(!relative.host&&!hostlessProtocol[relative.protocol]){var relPath=(relative.pathname||'').split('/');while(relPath.length&&!(relative.host=relPath.shift())){}if(!relative.host)relative.host='';if(!relative.hostname)relative.hostname='';if(relPath[0]!=='')relPath.unshift('');if(relPath.length<2)relPath.unshift('');result.pathname=relPath.join('/');}else{result.pathname=relative.pathname;}result.search=relative.search;result.query=relative.query;result.host=relative.host||'';result.auth=relative.auth;result.hostname=relative.hostname||relative.host;result.port=relative.port;// to support http.request
if(result.pathname||result.search){var p=result.pathname||'';var s=result.search||'';result.path=p+s;}result.slashes=result.slashes||relative.slashes;result.href=result.format();return result;}var isSourceAbs=result.pathname&&result.pathname.charAt(0)==='/',isRelAbs=relative.host||relative.pathname&&relative.pathname.charAt(0)==='/',mustEndAbs=isRelAbs||isSourceAbs||result.host&&relative.pathname,removeAllDots=mustEndAbs,srcPath=result.pathname&&result.pathname.split('/')||[],relPath=relative.pathname&&relative.pathname.split('/')||[],psychotic=result.protocol&&!slashedProtocol[result.protocol];// if the url is a non-slashed url, then relative
// links like ../.. should be able
// to crawl up to the hostname, as well.  This is strange.
// result.protocol has already been set by now.
// Later on, put the first path part into the host field.
if(psychotic){result.hostname='';result.port=null;if(result.host){if(srcPath[0]==='')srcPath[0]=result.host;else srcPath.unshift(result.host);}result.host='';if(relative.protocol){relative.hostname=null;relative.port=null;if(relative.host){if(relPath[0]==='')relPath[0]=relative.host;else relPath.unshift(relative.host);}relative.host=null;}mustEndAbs=mustEndAbs&&(relPath[0]===''||srcPath[0]==='');}if(isRelAbs){// it's absolute.
result.host=relative.host||relative.host===''?relative.host:result.host;result.hostname=relative.hostname||relative.hostname===''?relative.hostname:result.hostname;result.search=relative.search;result.query=relative.query;srcPath=relPath;// fall through to the dot-handling below.
}else if(relPath.length){// it's relative
// throw away the existing file, and take the new path instead.
if(!srcPath)srcPath=[];srcPath.pop();srcPath=srcPath.concat(relPath);result.search=relative.search;result.query=relative.query;}else if(!util.isNullOrUndefined(relative.search)){// just pull out the search.
// like href='?foo'.
// Put this after the other two cases because it simplifies the booleans
if(psychotic){result.hostname=result.host=srcPath.shift();//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
var authInHost=result.host&&result.host.indexOf('@')>0?result.host.split('@'):false;if(authInHost){result.auth=authInHost.shift();result.host=result.hostname=authInHost.shift();}}result.search=relative.search;result.query=relative.query;//to support http.request
if(!util.isNull(result.pathname)||!util.isNull(result.search)){result.path=(result.pathname?result.pathname:'')+(result.search?result.search:'');}result.href=result.format();return result;}if(!srcPath.length){// no path at all.  easy.
// we've already handled the other stuff above.
result.pathname=null;//to support http.request
if(result.search){result.path='/'+result.search;}else{result.path=null;}result.href=result.format();return result;}// if a url ENDs in . or .., then it must get a trailing slash.
// however, if it ends in anything else non-slashy,
// then it must NOT get a trailing slash.
var last=srcPath.slice(-1)[0];var hasTrailingSlash=(result.host||relative.host||srcPath.length>1)&&(last==='.'||last==='..')||last==='';// strip single dots, resolve double dots to parent dir
// if the path tries to go above the root, `up` ends up > 0
var up=0;for(var i=srcPath.length;i>=0;i--){last=srcPath[i];if(last==='.'){srcPath.splice(i,1);}else if(last==='..'){srcPath.splice(i,1);up++;}else if(up){srcPath.splice(i,1);up--;}}// if the path is allowed to go above the root, restore leading ..s
if(!mustEndAbs&&!removeAllDots){for(;up--;up){srcPath.unshift('..');}}if(mustEndAbs&&srcPath[0]!==''&&(!srcPath[0]||srcPath[0].charAt(0)!=='/')){srcPath.unshift('');}if(hasTrailingSlash&&srcPath.join('/').substr(-1)!=='/'){srcPath.push('');}var isAbsolute=srcPath[0]===''||srcPath[0]&&srcPath[0].charAt(0)==='/';// put the host back
if(psychotic){result.hostname=result.host=isAbsolute?'':srcPath.length?srcPath.shift():'';//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
var authInHost=result.host&&result.host.indexOf('@')>0?result.host.split('@'):false;if(authInHost){result.auth=authInHost.shift();result.host=result.hostname=authInHost.shift();}}mustEndAbs=mustEndAbs||result.host&&srcPath.length;if(mustEndAbs&&!isAbsolute){srcPath.unshift('');}if(!srcPath.length){result.pathname=null;result.path=null;}else{result.pathname=srcPath.join('/');}//to support request.http
if(!util.isNull(result.pathname)||!util.isNull(result.search)){result.path=(result.pathname?result.pathname:'')+(result.search?result.search:'');}result.auth=relative.auth||result.auth;result.slashes=result.slashes||relative.slashes;result.href=result.format();return result;};Url.prototype.parseHost=function(){var host=this.host;var port=portPattern.exec(host);if(port){port=port[0];if(port!==':'){this.port=port.substr(1);}host=host.substr(0,host.length-port.length);}if(host)this.hostname=host;};/***/},/* 37 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module,global){/*! https://mths.be/punycode v1.3.2 by @mathias */;(function(root){/** Detect free variables */var freeExports=(typeof exports==="undefined"?"undefined":_typeof(exports))=='object'&&exports&&!exports.nodeType&&exports;var freeModule=(typeof module==="undefined"?"undefined":_typeof(module))=='object'&&module&&!module.nodeType&&module;var freeGlobal=(typeof global==="undefined"?"undefined":_typeof(global))=='object'&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal||freeGlobal.self===freeGlobal){root=freeGlobal;}/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */var punycode,/** Highest positive signed 32-bit float value */maxInt=2147483647,// aka. 0x7FFFFFFF or 2^31-1
/** Bootstring parameters */base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,// 0x80
delimiter='-',// '\x2D'
/** Regular expressions */regexPunycode=/^xn--/,regexNonASCII=/[^\x20-\x7E]/,// unprintable ASCII chars + non-ASCII chars
regexSeparators=/[\x2E\u3002\uFF0E\uFF61]/g,// RFC 3490 separators
/** Error messages */errors={'overflow':'Overflow: input needs wider integers to process','not-basic':'Illegal input >= 0x80 (not a basic code point)','invalid-input':'Invalid input'},/** Convenience shortcuts */baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode,/** Temporary variable */key;/*--------------------------------------------------------------------------*//**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */function error(type){throw RangeError(errors[type]);}/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */function map(array,fn){var length=array.length;var result=[];while(length--){result[length]=fn(array[length]);}return result;}/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */function mapDomain(string,fn){var parts=string.split('@');var result='';if(parts.length>1){// In email addresses, only the domain name should be punycoded. Leave
// the local part (i.e. everything up to `@`) intact.
result=parts[0]+'@';string=parts[1];}// Avoid `split(regex)` for IE8 compatibility. See #17.
string=string.replace(regexSeparators,'\x2E');var labels=string.split('.');var encoded=map(labels,fn).join('.');return result+encoded;}/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */function ucs2decode(string){var output=[],counter=0,length=string.length,value,extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=0xD800&&value<=0xDBFF&&counter<length){// high surrogate, and there is a next character
extra=string.charCodeAt(counter++);if((extra&0xFC00)==0xDC00){// low surrogate
output.push(((value&0x3FF)<<10)+(extra&0x3FF)+0x10000);}else{// unmatched surrogate; only append this code unit, in case the next
// code unit is the high surrogate of a surrogate pair
output.push(value);counter--;}}else{output.push(value);}}return output;}/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */function ucs2encode(array){return map(array,function(value){var output='';if(value>0xFFFF){value-=0x10000;output+=stringFromCharCode(value>>>10&0x3FF|0xD800);value=0xDC00|value&0x3FF;}output+=stringFromCharCode(value);return output;}).join('');}/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */function basicToDigit(codePoint){if(codePoint-48<10){return codePoint-22;}if(codePoint-65<26){return codePoint-65;}if(codePoint-97<26){return codePoint-97;}return base;}/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */function digitToBasic(digit,flag){//  0..25 map to ASCII a..z or A..Z
// 26..35 map to ASCII 0..9
return digit+22+75*(digit<26)-((flag!=0)<<5);}/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */function adapt(delta,numPoints,firstTime){var k=0;delta=firstTime?floor(delta/damp):delta>>1;delta+=floor(delta/numPoints);for(;/* no initialization */delta>baseMinusTMin*tMax>>1;k+=base){delta=floor(delta/baseMinusTMin);}return floor(k+(baseMinusTMin+1)*delta/(delta+skew));}/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */function decode(input){// Don't use UCS-2
var output=[],inputLength=input.length,out,i=0,n=initialN,bias=initialBias,basic,j,index,oldi,w,k,digit,t,/** Cached calculation results */baseMinusT;// Handle the basic code points: let `basic` be the number of input code
// points before the last delimiter, or `0` if there is none, then copy
// the first basic code points to the output.
basic=input.lastIndexOf(delimiter);if(basic<0){basic=0;}for(j=0;j<basic;++j){// if it's not a basic code point
if(input.charCodeAt(j)>=0x80){error('not-basic');}output.push(input.charCodeAt(j));}// Main decoding loop: start just after the last delimiter if any basic code
// points were copied; start at the beginning otherwise.
for(index=basic>0?basic+1:0;index<inputLength;)/* no final expression */{// `index` is the index of the next character to be consumed.
// Decode a generalized variable-length integer into `delta`,
// which gets added to `i`. The overflow checking is easier
// if we increase `i` as we go, then subtract off its starting
// value at the end to obtain `delta`.
for(oldi=i,w=1,k=base;;/* no condition */k+=base){if(index>=inputLength){error('invalid-input');}digit=basicToDigit(input.charCodeAt(index++));if(digit>=base||digit>floor((maxInt-i)/w)){error('overflow');}i+=digit*w;t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(digit<t){break;}baseMinusT=base-t;if(w>floor(maxInt/baseMinusT)){error('overflow');}w*=baseMinusT;}out=output.length+1;bias=adapt(i-oldi,out,oldi==0);// `i` was supposed to wrap around from `out` to `0`,
// incrementing `n` each time, so we'll fix that now:
if(floor(i/out)>maxInt-n){error('overflow');}n+=floor(i/out);i%=out;// Insert `n` at position `i` of the output
output.splice(i++,0,n);}return ucs2encode(output);}/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */function encode(input){var n,delta,handledCPCount,basicLength,bias,j,m,q,k,t,currentValue,output=[],/** `inputLength` will hold the number of code points in `input`. */inputLength,/** Cached calculation results */handledCPCountPlusOne,baseMinusT,qMinusT;// Convert the input in UCS-2 to Unicode
input=ucs2decode(input);// Cache the length
inputLength=input.length;// Initialize the state
n=initialN;delta=0;bias=initialBias;// Handle the basic code points
for(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<0x80){output.push(stringFromCharCode(currentValue));}}handledCPCount=basicLength=output.length;// `handledCPCount` is the number of code points that have been handled;
// `basicLength` is the number of basic code points.
// Finish the basic string - if it is not empty - with a delimiter
if(basicLength){output.push(delimiter);}// Main encoding loop:
while(handledCPCount<inputLength){// All non-basic code points < n have been handled already. Find the next
// larger one:
for(m=maxInt,j=0;j<inputLength;++j){currentValue=input[j];if(currentValue>=n&&currentValue<m){m=currentValue;}}// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
// but guard against overflow
handledCPCountPlusOne=handledCPCount+1;if(m-n>floor((maxInt-delta)/handledCPCountPlusOne)){error('overflow');}delta+=(m-n)*handledCPCountPlusOne;n=m;for(j=0;j<inputLength;++j){currentValue=input[j];if(currentValue<n&&++delta>maxInt){error('overflow');}if(currentValue==n){// Represent delta as a generalized variable-length integer
for(q=delta,k=base;;/* no condition */k+=base){t=k<=bias?tMin:k>=bias+tMax?tMax:k-bias;if(q<t){break;}qMinusT=q-t;baseMinusT=base-t;output.push(stringFromCharCode(digitToBasic(t+qMinusT%baseMinusT,0)));q=floor(qMinusT/baseMinusT);}output.push(stringFromCharCode(digitToBasic(q,0)));bias=adapt(delta,handledCPCountPlusOne,handledCPCount==basicLength);delta=0;++handledCPCount;}}++delta;++n;}return output.join('');}/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */function toUnicode(input){return mapDomain(input,function(string){return regexPunycode.test(string)?decode(string.slice(4).toLowerCase()):string;});}/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */function toASCII(input){return mapDomain(input,function(string){return regexNonASCII.test(string)?'xn--'+encode(string):string;});}/*--------------------------------------------------------------------------*//** Define the public API */punycode={/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */'version':'1.3.2',/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */'ucs2':{'decode':ucs2decode,'encode':ucs2encode},'decode':decode,'encode':encode,'toASCII':toASCII,'toUnicode':toUnicode};/** Expose `punycode` */// Some AMD build optimizers, like r.js, check for specific condition patterns
// like the following:
if(true){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return punycode;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else if(freeExports&&freeModule){if(module.exports==freeExports){// in Node.js or RingoJS v0.8.0+
freeModule.exports=punycode;}else{// in Narwhal or RingoJS v0.7.0-
for(key in punycode){punycode.hasOwnProperty(key)&&(freeExports[key]=punycode[key]);}}}else{// in Rhino or a web browser
root.punycode=punycode;}})(this);/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(38)(module),function(){return this;}());/***/},/* 38 *//***/function(module,exports){module.exports=function(module){if(!module.webpackPolyfill){module.deprecate=function(){};module.paths=[];// module.parent = undefined by default
module.children=[];module.webpackPolyfill=1;}return module;};/***/},/* 39 *//***/function(module,exports){'use strict';module.exports={isString:function isString(arg){return typeof arg==='string';},isObject:function isObject(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&arg!==null;},isNull:function isNull(arg){return arg===null;},isNullOrUndefined:function isNullOrUndefined(arg){return arg==null;}};/***/},/* 40 *//***/function(module,exports,__webpack_require__){'use strict';exports.decode=exports.parse=__webpack_require__(41);exports.encode=exports.stringify=__webpack_require__(42);/***/},/* 41 *//***/function(module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}module.exports=function(qs,sep,eq,options){sep=sep||'&';eq=eq||'=';var obj={};if(typeof qs!=='string'||qs.length===0){return obj;}var regexp=/\+/g;qs=qs.split(sep);var maxKeys=1000;if(options&&typeof options.maxKeys==='number'){maxKeys=options.maxKeys;}var len=qs.length;// maxKeys <= 0 means that we should not limit keys count
if(maxKeys>0&&len>maxKeys){len=maxKeys;}for(var i=0;i<len;++i){var x=qs[i].replace(regexp,'%20'),idx=x.indexOf(eq),kstr,vstr,k,v;if(idx>=0){kstr=x.substr(0,idx);vstr=x.substr(idx+1);}else{kstr=x;vstr='';}k=decodeURIComponent(kstr);v=decodeURIComponent(vstr);if(!hasOwnProperty(obj,k)){obj[k]=v;}else if(Array.isArray(obj[k])){obj[k].push(v);}else{obj[k]=[obj[k],v];}}return obj;};/***/},/* 42 *//***/function(module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';var stringifyPrimitive=function stringifyPrimitive(v){switch(typeof v==="undefined"?"undefined":_typeof(v)){case'string':return v;case'boolean':return v?'true':'false';case'number':return isFinite(v)?v:'';default:return'';}};module.exports=function(obj,sep,eq,name){sep=sep||'&';eq=eq||'=';if(obj===null){obj=undefined;}if((typeof obj==="undefined"?"undefined":_typeof(obj))==='object'){return Object.keys(obj).map(function(k){var ks=encodeURIComponent(stringifyPrimitive(k))+eq;if(Array.isArray(obj[k])){return obj[k].map(function(v){return ks+encodeURIComponent(stringifyPrimitive(v));}).join(sep);}else{return ks+encodeURIComponent(stringifyPrimitive(obj[k]));}}).join(sep);}if(!name)return'';return encodeURIComponent(stringifyPrimitive(name))+eq+encodeURIComponent(stringifyPrimitive(obj));};/***/},/* 43 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var http=__webpack_require__(2);/**
	 * Invoking the library as a function delegates to attach if the first argument
	 * is an `http.Server`.
	 *
	 * If there are no arguments or the first argument is an options object, then
	 * a new Server instance is returned.
	 *
	 * @param {http.Server} server (if specified, will be attached to by the new Server instance)
	 * @param {Object} options
	 * @return {Server} engine server
	 * @api public
	 */exports=module.exports=function(){// backwards compatible use as `.attach`
// if first argument is an http server
if(arguments.length&&arguments[0]instanceof http.Server){return attach.apply(this,arguments);}// if first argument is not an http server, then just make a regular eio server
return exports.Server.apply(null,arguments);};/**
	 * Protocol revision number.
	 *
	 * @api public
	 */exports.protocol=1;/**
	 * Expose Server constructor.
	 *
	 * @api public
	 */exports.Server=__webpack_require__(44);/**
	 * Expose Socket constructor.
	 *
	 * @api public
	 */exports.Socket=__webpack_require__(120);/**
	 * Expose Transport constructor.
	 *
	 * @api public
	 */exports.Transport=__webpack_require__(81);/**
	 * Expose mutable list of available transports.
	 *
	 * @api public
	 */exports.transports=__webpack_require__(78);/**
	 * Exports parser.
	 *
	 * @api public
	 */exports.parser=__webpack_require__(82);/**
	 * Creates an http.Server exclusively used for WS upgrades.
	 *
	 * @param {Number} port
	 * @param {Function} callback
	 * @param {Object} options
	 * @return {Server} websocket.io server
	 * @api public
	 */exports.listen=listen;function listen(port,options,fn){if('function'===typeof options){fn=options;options={};}var server=http.createServer(function(req,res){res.writeHead(501);res.end('Not Implemented');});server.listen(port,fn);// create engine server
var engine=exports.attach(server,options);engine.httpServer=server;return engine;}/**
	 * Captures upgrade requests for a http.Server.
	 *
	 * @param {http.Server} server
	 * @param {Object} options
	 * @return {Server} engine server
	 * @api public
	 */exports.attach=attach;function attach(server,options){var engine=new exports.Server(options);engine.attach(server,options);return engine;}/***/},/* 44 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process,Buffer){/**
	 * Module dependencies.
	 */var qs=__webpack_require__(40);var parse=__webpack_require__(36).parse;var base64id=__webpack_require__(45);var transports=__webpack_require__(78);var EventEmitter=__webpack_require__(14).EventEmitter;var Socket=__webpack_require__(120);var util=__webpack_require__(53);var debug=__webpack_require__(91)('engine');var cookieMod=__webpack_require__(121);/**
	 * Module exports.
	 */module.exports=Server;/**
	 * Server constructor.
	 *
	 * @param {Object} options
	 * @api public
	 */function Server(opts){if(!(this instanceof Server)){return new Server(opts);}this.clients={};this.clientsCount=0;opts=opts||{};this.wsEngine=opts.wsEngine||process.env.EIO_WS_ENGINE;this.pingTimeout=opts.pingTimeout||60000;this.pingInterval=opts.pingInterval||25000;this.upgradeTimeout=opts.upgradeTimeout||10000;this.maxHttpBufferSize=opts.maxHttpBufferSize||10E7;this.transports=opts.transports||Object.keys(transports);this.allowUpgrades=false!==opts.allowUpgrades;this.allowRequest=opts.allowRequest;this.cookie=false!==opts.cookie?opts.cookie||'io':false;this.cookiePath=false!==opts.cookiePath?opts.cookiePath||'/':false;this.cookieHttpOnly=false!==opts.cookieHttpOnly;this.perMessageDeflate=false!==opts.perMessageDeflate?opts.perMessageDeflate||true:false;this.httpCompression=false!==opts.httpCompression?opts.httpCompression||{}:false;var self=this;// initialize compression options
['perMessageDeflate','httpCompression'].forEach(function(type){var compression=self[type];if(true===compression)self[type]=compression={};if(compression&&null==compression.threshold){compression.threshold=1024;}});// initialize websocket server
if(~this.transports.indexOf('websocket')){// keep require('ws') as separate expression for packers (browserify, etc)
var WebSocketServer=(this.wsEngine?__webpack_require__(122)(this.wsEngine):__webpack_require__(123)).Server;this.ws=new WebSocketServer({noServer:true,clientTracking:false,perMessageDeflate:this.perMessageDeflate,maxPayload:this.maxHttpBufferSize});}}/**
	 * Protocol errors mappings.
	 */Server.errors={UNKNOWN_TRANSPORT:0,UNKNOWN_SID:1,BAD_HANDSHAKE_METHOD:2,BAD_REQUEST:3};Server.errorMessages={0:'Transport unknown',1:'Session ID unknown',2:'Bad handshake method',3:'Bad request'};/**
	 * Inherits from EventEmitter.
	 */util.inherits(Server,EventEmitter);/**
	 * Hash of open clients.
	 *
	 * @api public
	 */Server.prototype.clients;/**
	 * Returns a list of available transports for upgrade given a certain transport.
	 *
	 * @return {Array}
	 * @api public
	 */Server.prototype.upgrades=function(transport){if(!this.allowUpgrades)return[];return transports[transport].upgradesTo||[];};/**
	 * Verifies a request.
	 *
	 * @param {http.IncomingMessage}
	 * @return {Boolean} whether the request is valid
	 * @api private
	 */Server.prototype.verify=function(req,upgrade,fn){// transport check
var transport=req._query.transport;if(!~this.transports.indexOf(transport)){debug('unknown transport "%s"',transport);return fn(Server.errors.UNKNOWN_TRANSPORT,false);}// sid check
var sid=req._query.sid;if(sid){if(!this.clients.hasOwnProperty(sid)){return fn(Server.errors.UNKNOWN_SID,false);}if(!upgrade&&this.clients[sid].transport.name!==transport){debug('bad request: unexpected transport without upgrade');return fn(Server.errors.BAD_REQUEST,false);}}else{// handshake is GET only
if('GET'!==req.method)return fn(Server.errors.BAD_HANDSHAKE_METHOD,false);if(!this.allowRequest)return fn(null,true);return this.allowRequest(req,fn);}fn(null,true);};/**
	 * Prepares a request by processing the query string.
	 *
	 * @api private
	 */Server.prototype.prepare=function(req){// try to leverage pre-existing `req._query` (e.g: from connect)
if(!req._query){req._query=~req.url.indexOf('?')?qs.parse(parse(req.url).query):{};}};/**
	 * Closes all clients.
	 *
	 * @api public
	 */Server.prototype.close=function(){debug('closing all open clients');for(var i in this.clients){if(this.clients.hasOwnProperty(i)){this.clients[i].close(true);}}if(this.ws){debug('closing webSocketServer');this.ws.close();// don't delete this.ws because it can be used again if the http server starts listening again
}return this;};/**
	 * Handles an Engine.IO HTTP request.
	 *
	 * @param {http.IncomingMessage} request
	 * @param {http.ServerResponse|http.OutgoingMessage} response
	 * @api public
	 */Server.prototype.handleRequest=function(req,res){debug('handling "%s" http request "%s"',req.method,req.url);this.prepare(req);req.res=res;var self=this;this.verify(req,false,function(err,success){if(!success){sendErrorMessage(req,res,err);return;}if(req._query.sid){debug('setting new request for existing client');self.clients[req._query.sid].transport.onRequest(req);}else{self.handshake(req._query.transport,req);}});};/**
	 * Sends an Engine.IO Error Message
	 *
	 * @param {http.ServerResponse} response
	 * @param {code} error code
	 * @api private
	 */function sendErrorMessage(req,res,code){var headers={'Content-Type':'application/json'};if(req.headers.origin){headers['Access-Control-Allow-Credentials']='true';headers['Access-Control-Allow-Origin']=req.headers.origin;}else{headers['Access-Control-Allow-Origin']='*';}res.writeHead(400,headers);res.end(JSON.stringify({code:code,message:Server.errorMessages[code]}));}/**
	 * generate a socket id.
	 * Overwrite this method to generate your custom socket id
	 *
	 * @param {Object} request object
	 * @api public
	 */Server.prototype.generateId=function(req){return base64id.generateId();};/**
	 * Handshakes a new client.
	 *
	 * @param {String} transport name
	 * @param {Object} request object
	 * @api private
	 */Server.prototype.handshake=function(transportName,req){var id=this.generateId(req);debug('handshaking client "%s"',id);try{var transport=new transports[transportName](req);if('polling'===transportName){transport.maxHttpBufferSize=this.maxHttpBufferSize;transport.httpCompression=this.httpCompression;}else if('websocket'===transportName){transport.perMessageDeflate=this.perMessageDeflate;}if(req._query&&req._query.b64){transport.supportsBinary=false;}else{transport.supportsBinary=true;}}catch(e){sendErrorMessage(req,req.res,Server.errors.BAD_REQUEST);return;}var socket=new Socket(id,this,transport,req);var self=this;if(false!==this.cookie){transport.on('headers',function(headers){headers['Set-Cookie']=cookieMod.serialize(self.cookie,id,{path:self.cookiePath,httpOnly:self.cookiePath?self.cookieHttpOnly:false});});}transport.onRequest(req);this.clients[id]=socket;this.clientsCount++;socket.once('close',function(){delete self.clients[id];self.clientsCount--;});this.emit('connection',socket);};/**
	 * Handles an Engine.IO HTTP Upgrade.
	 *
	 * @api public
	 */Server.prototype.handleUpgrade=function(req,socket,upgradeHead){this.prepare(req);var self=this;this.verify(req,true,function(err,success){if(!success){abortConnection(socket,err);return;}var head=new Buffer(upgradeHead.length);upgradeHead.copy(head);upgradeHead=null;// delegate to ws
self.ws.handleUpgrade(req,socket,head,function(conn){self.onWebSocket(req,conn);});});};/**
	 * Called upon a ws.io connection.
	 *
	 * @param {ws.Socket} websocket
	 * @api private
	 */Server.prototype.onWebSocket=function(req,socket){socket.on('error',onUpgradeError);if(!transports[req._query.transport].prototype.handlesUpgrades){debug('transport doesnt handle upgraded requests');socket.close();return;}// get client id
var id=req._query.sid;// keep a reference to the ws.Socket
req.websocket=socket;if(id){var client=this.clients[id];if(!client){debug('upgrade attempt for closed client');socket.close();}else if(client.upgrading){debug('transport has already been trying to upgrade');socket.close();}else if(client.upgraded){debug('transport had already been upgraded');socket.close();}else{debug('upgrading existing transport');// transport error handling takes over
socket.removeListener('error',onUpgradeError);var transport=new transports[req._query.transport](req);if(req._query&&req._query.b64){transport.supportsBinary=false;}else{transport.supportsBinary=true;}transport.perMessageDeflate=this.perMessageDeflate;client.maybeUpgrade(transport);}}else{// transport error handling takes over
socket.removeListener('error',onUpgradeError);this.handshake(req._query.transport,req);}function onUpgradeError(){debug('websocket error before upgrade');// socket.close() not needed
}};/**
	 * Captures upgrade requests for a http.Server.
	 *
	 * @param {http.Server} server
	 * @param {Object} options
	 * @api public
	 */Server.prototype.attach=function(server,options){var self=this;options=options||{};var path=(options.path||'/engine.io').replace(/\/$/,'');var destroyUpgradeTimeout=options.destroyUpgradeTimeout||1000;// normalize path
path+='/';function check(req){return path===req.url.substr(0,path.length);}// cache and clean up listeners
var listeners=server.listeners('request').slice(0);server.removeAllListeners('request');server.on('close',self.close.bind(self));// add request handler
server.on('request',function(req,res){if(check(req)){debug('intercepting request for path "%s"',path);self.handleRequest(req,res);}else{for(var i=0,l=listeners.length;i<l;i++){listeners[i].call(server,req,res);}}});if(~self.transports.indexOf('websocket')){server.on('upgrade',function(req,socket,head){if(check(req)){self.handleUpgrade(req,socket,head);}else if(false!==options.destroyUpgrade){// default node behavior is to disconnect when no handlers
// but by adding a handler, we prevent that
// and if no eio thing handles the upgrade
// then the socket needs to die!
setTimeout(function(){if(socket.writable&&socket.bytesWritten<=0){return socket.end();}},destroyUpgradeTimeout);}});}};/**
	 * Closes the connection
	 *
	 * @param {net.Socket} socket
	 * @param {code} error code
	 * @api private
	 */function abortConnection(socket,code){if(socket.writable){var message=Server.errorMessages.hasOwnProperty(code)?Server.errorMessages[code]:code;var length=Buffer.byteLength(message);socket.write('HTTP/1.1 400 Bad Request\r\n'+'Connection: close\r\n'+'Content-type: text/html\r\n'+'Content-Length: '+length+'\r\n'+'\r\n'+message);}socket.destroy();}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8),__webpack_require__(4).Buffer);/***/},/* 45 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/*!
	 * base64id v0.1.0
	 *//**
	 * Module dependencies
	 */var crypto=__webpack_require__(46);/**
	 * Constructor
	 */var Base64Id=function Base64Id(){};/**
	 * Get random bytes
	 *
	 * Uses a buffer if available, falls back to crypto.randomBytes
	 */Base64Id.prototype.getRandomBytes=function(bytes){var BUFFER_SIZE=4096;var self=this;bytes=bytes||12;if(bytes>BUFFER_SIZE){return crypto.randomBytes(bytes);}var bytesInBuffer=parseInt(BUFFER_SIZE/bytes);var threshold=parseInt(bytesInBuffer*0.85);if(!threshold){return crypto.randomBytes(bytes);}if(this.bytesBufferIndex==null){this.bytesBufferIndex=-1;}if(this.bytesBufferIndex==bytesInBuffer){this.bytesBuffer=null;this.bytesBufferIndex=-1;}// No buffered bytes available or index above threshold
if(this.bytesBufferIndex==-1||this.bytesBufferIndex>threshold){if(!this.isGeneratingBytes){this.isGeneratingBytes=true;crypto.randomBytes(BUFFER_SIZE,function(err,bytes){self.bytesBuffer=bytes;self.bytesBufferIndex=0;self.isGeneratingBytes=false;});}// Fall back to sync call when no buffered bytes are available
if(this.bytesBufferIndex==-1){return crypto.randomBytes(bytes);}}var result=this.bytesBuffer.slice(bytes*this.bytesBufferIndex,bytes*(this.bytesBufferIndex+1));this.bytesBufferIndex++;return result;};/**
	 * Generates a base64 id
	 *
	 * (Original version from socket.io <http://socket.io>)
	 */Base64Id.prototype.generateId=function(){var rand=new Buffer(15);// multiple of 3 for base64
if(!rand.writeInt32BE){return Math.abs(Math.random()*Math.random()*Date.now()|0).toString()+Math.abs(Math.random()*Math.random()*Date.now()|0).toString();}this.sequenceNumber=this.sequenceNumber+1|0;rand.writeInt32BE(this.sequenceNumber,11);if(crypto.randomBytes){this.getRandomBytes(12).copy(rand);}else{// not secure for node 0.4
[0,4,8].forEach(function(i){rand.writeInt32BE(Math.random()*Math.pow(2,32)|0,i);});}return rand.toString('base64').replace(/\//g,'_').replace(/\+/g,'-');};/**
	 * Export
	 */exports=module.exports=new Base64Id();/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 46 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var rng=__webpack_require__(47);function error(){var m=[].slice.call(arguments).join(' ');throw new Error([m,'we accept pull requests','http://github.com/dominictarr/crypto-browserify'].join('\n'));}exports.createHash=__webpack_require__(49);exports.createHmac=__webpack_require__(61);exports.randomBytes=function(size,callback){if(callback&&callback.call){try{callback.call(this,undefined,new Buffer(rng(size)));}catch(err){callback(err);}}else{return new Buffer(rng(size));}};function each(a,f){for(var i in a){f(a[i],i);}}exports.getHashes=function(){return['sha1','sha256','sha512','md5','rmd160'];};var p=__webpack_require__(62)(exports);exports.pbkdf2=p.pbkdf2;exports.pbkdf2Sync=p.pbkdf2Sync;__webpack_require__(64)(exports,module.exports);// the least I can do is make error messages for the rest of the node.js/crypto api.
each(['createCredentials','createSign','createVerify','createDiffieHellman'],function(name){exports[name]=function(){error('sorry,',name,'is not implemented yet');};});/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 47 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global,Buffer){(function(){var g=('undefined'===typeof window?global:window)||{};_crypto=g.crypto||g.msCrypto||__webpack_require__(48);module.exports=function(size){// Modern Browsers
if(_crypto.getRandomValues){var bytes=new Buffer(size);//in browserify, this is an extended Uint8Array
/* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */_crypto.getRandomValues(bytes);return bytes;}else if(_crypto.randomBytes){return _crypto.randomBytes(size);}else throw new Error('secure random number generation not supported by this browser\n'+'use chrome, FireFox or Internet Explorer 11');};})();/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}(),__webpack_require__(4).Buffer);/***/},/* 48 *//***/function(module,exports){/* (ignored) *//***/},/* 49 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var createHash=__webpack_require__(50);var md5=toConstructor(__webpack_require__(58));var rmd160=toConstructor(__webpack_require__(60));function toConstructor(fn){return function(){var buffers=[];var m={update:function update(data,enc){if(!Buffer.isBuffer(data))data=new Buffer(data,enc);buffers.push(data);return this;},digest:function digest(enc){var buf=Buffer.concat(buffers);var r=fn(buf);buffers=null;return enc?r.toString(enc):r;}};return m;};}module.exports=function(alg){if('md5'===alg)return new md5();if('rmd160'===alg)return new rmd160();return createHash(alg);};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 50 *//***/function(module,exports,__webpack_require__){var exports=module.exports=function(alg){var Alg=exports[alg];if(!Alg)throw new Error(alg+' is not supported (we accept pull requests)');return new Alg();};var Buffer=__webpack_require__(4).Buffer;var Hash=__webpack_require__(51)(Buffer);exports.sha1=__webpack_require__(52)(Buffer,Hash);exports.sha256=__webpack_require__(56)(Buffer,Hash);exports.sha512=__webpack_require__(57)(Buffer,Hash);/***/},/* 51 *//***/function(module,exports){module.exports=function(Buffer){//prototype class for hash functions
function Hash(blockSize,finalSize){this._block=new Buffer(blockSize);//new Uint32Array(blockSize/4)
this._finalSize=finalSize;this._blockSize=blockSize;this._len=0;this._s=0;}Hash.prototype.init=function(){this._s=0;this._len=0;};Hash.prototype.update=function(data,enc){if("string"===typeof data){enc=enc||"utf8";data=new Buffer(data,enc);}var l=this._len+=data.length;var s=this._s=this._s||0;var f=0;var buffer=this._block;while(s<l){var t=Math.min(data.length,f+this._blockSize-s%this._blockSize);var ch=t-f;for(var i=0;i<ch;i++){buffer[s%this._blockSize+i]=data[i+f];}s+=ch;f+=ch;if(s%this._blockSize===0){this._update(buffer);}}this._s=s;return this;};Hash.prototype.digest=function(enc){// Suppose the length of the message M, in bits, is l
var l=this._len*8;// Append the bit 1 to the end of the message
this._block[this._len%this._blockSize]=0x80;// and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
this._block.fill(0,this._len%this._blockSize+1);if(l%(this._blockSize*8)>=this._finalSize*8){this._update(this._block);this._block.fill(0);}// to this append the block which is equal to the number l written in binary
// TODO: handle case where l is > Math.pow(2, 29)
this._block.writeInt32BE(l,this._blockSize-4);var hash=this._update(this._block)||this._hash();return enc?hash.toString(enc):hash;};Hash.prototype._update=function(){throw new Error('_update must be implemented by subclass');};return Hash;};/***/},/* 52 *//***/function(module,exports,__webpack_require__){/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */var inherits=__webpack_require__(53).inherits;module.exports=function(Buffer,Hash){var A=0|0;var B=4|0;var C=8|0;var D=12|0;var E=16|0;var W=new(typeof Int32Array==='undefined'?Array:Int32Array)(80);var POOL=[];function Sha1(){if(POOL.length)return POOL.pop().init();if(!(this instanceof Sha1))return new Sha1();this._w=W;Hash.call(this,16*4,14*4);this._h=null;this.init();}inherits(Sha1,Hash);Sha1.prototype.init=function(){this._a=0x67452301;this._b=0xefcdab89;this._c=0x98badcfe;this._d=0x10325476;this._e=0xc3d2e1f0;Hash.prototype.init.call(this);return this;};Sha1.prototype._POOL=POOL;Sha1.prototype._update=function(X){var a,b,c,d,e,_a,_b,_c,_d,_e;a=_a=this._a;b=_b=this._b;c=_c=this._c;d=_d=this._d;e=_e=this._e;var w=this._w;for(var j=0;j<80;j++){var W=w[j]=j<16?X.readInt32BE(j*4):rol(w[j-3]^w[j-8]^w[j-14]^w[j-16],1);var t=add(add(rol(a,5),sha1_ft(j,b,c,d)),add(add(e,W),sha1_kt(j)));e=d;d=c;c=rol(b,30);b=a;a=t;}this._a=add(a,_a);this._b=add(b,_b);this._c=add(c,_c);this._d=add(d,_d);this._e=add(e,_e);};Sha1.prototype._hash=function(){if(POOL.length<100)POOL.push(this);var H=new Buffer(20);//console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
H.writeInt32BE(this._a|0,A);H.writeInt32BE(this._b|0,B);H.writeInt32BE(this._c|0,C);H.writeInt32BE(this._d|0,D);H.writeInt32BE(this._e|0,E);return H;};/*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */function sha1_ft(t,b,c,d){if(t<20)return b&c|~b&d;if(t<40)return b^c^d;if(t<60)return b&c|b&d|c&d;return b^c^d;}/*
	   * Determine the appropriate additive constant for the current iteration
	   */function sha1_kt(t){return t<20?1518500249:t<40?1859775393:t<60?-1894007588:-899497514;}/*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */function add(x,y){return x+y|0;//lets see how this goes on testling.
//  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
//  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
//  return (msw << 16) | (lsw & 0xFFFF);
}/*
	   * Bitwise rotate a 32-bit number to the left.
	   */function rol(num,cnt){return num<<cnt|num>>>32-cnt;}return Sha1;};/***/},/* 53 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global,process){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var formatRegExp=/%[sdj%]/g;exports.format=function(f){if(!isString(f)){var objects=[];for(var i=0;i<arguments.length;i++){objects.push(inspect(arguments[i]));}return objects.join(' ');}var i=1;var args=arguments;var len=args.length;var str=String(f).replace(formatRegExp,function(x){if(x==='%%')return'%';if(i>=len)return x;switch(x){case'%s':return String(args[i++]);case'%d':return Number(args[i++]);case'%j':try{return JSON.stringify(args[i++]);}catch(_){return'[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(isNull(x)||!isObject(x)){str+=' '+x;}else{str+=' '+inspect(x);}}return str;};// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate=function(fn,msg){// Allow for deprecating things in the process of starting up.
if(isUndefined(global.process)){return function(){return exports.deprecate(fn,msg).apply(this,arguments);};}if(process.noDeprecation===true){return fn;}var warned=false;function deprecated(){if(!warned){if(process.throwDeprecation){throw new Error(msg);}else if(process.traceDeprecation){console.trace(msg);}else{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;};var debugs={};var debugEnviron;exports.debuglog=function(set){if(isUndefined(debugEnviron))debugEnviron=process.env.NODE_DEBUG||'';set=set.toUpperCase();if(!debugs[set]){if(new RegExp('\\b'+set+'\\b','i').test(debugEnviron)){var pid=process.pid;debugs[set]=function(){var msg=exports.format.apply(exports,arguments);console.error('%s %d: %s',set,pid,msg);};}else{debugs[set]=function(){};}}return debugs[set];};/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 *//* legacy: obj, showHidden, depth, colors*/function inspect(obj,opts){// default options
var ctx={seen:[],stylize:stylizeNoColor};// legacy...
if(arguments.length>=3)ctx.depth=arguments[2];if(arguments.length>=4)ctx.colors=arguments[3];if(isBoolean(opts)){// legacy...
ctx.showHidden=opts;}else if(opts){// got an "options" object
exports._extend(ctx,opts);}// set default options
if(isUndefined(ctx.showHidden))ctx.showHidden=false;if(isUndefined(ctx.depth))ctx.depth=2;if(isUndefined(ctx.colors))ctx.colors=false;if(isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=stylizeWithColor;return formatValue(ctx,obj,ctx.depth);}exports.inspect=inspect;// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[30,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};// Don't use 'blue' not visible on cmd.exe
inspect.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta',// "name": intentionally not styling
'regexp':'red'};function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];if(style){return"\x1B["+inspect.colors[style][0]+'m'+str+"\x1B["+inspect.colors[style][1]+'m';}else{return str;}}function stylizeNoColor(str,styleType){return str;}function arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function formatValue(ctx,value,recurseTimes){// Provide a hook for user-specified inspect functions.
// Check that value is an object with an inspect function on it
if(ctx.customInspect&&value&&isFunction(value.inspect)&&// Filter out the util module, it's inspect function is special
value.inspect!==exports.inspect&&// Also filter out any prototype objects using the circular check.
!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!isString(ret)){ret=formatValue(ctx,ret,recurseTimes);}return ret;}// Primitive types cannot have properties
var primitive=formatPrimitive(ctx,value);if(primitive){return primitive;}// Look up the keys of the object.
var keys=Object.keys(value);var visibleKeys=arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}// IE doesn't make error fields non-enumerable
// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
if(isError(value)&&(keys.indexOf('message')>=0||keys.indexOf('description')>=0)){return formatError(value);}// Some type of object without properties can be shortcutted.
if(keys.length===0){if(isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(isError(value)){return formatError(value);}}var base='',array=false,braces=['{','}'];// Make Array say that they are Array
if(isArray(value)){array=true;braces=['[',']'];}// Make functions say that they are functions
if(isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}// Make RegExps say that they are RegExps
if(isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}// Make dates with properties first say the date
if(isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}// Make error with message first say the error
if(isError(value)){base=' '+formatError(value);}if(keys.length===0&&(!array||value.length==0)){return braces[0]+base+braces[1];}if(recurseTimes<0){if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return reduceToSingleString(output,base,braces);}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize('undefined','undefined');if(isString(value)){var simple='\''+JSON.stringify(value).replace(/^"|"$/g,'').replace(/'/g,"\\'").replace(/\\"/g,'"')+'\'';return ctx.stylize(simple,'string');}if(isNumber(value))return ctx.stylize(''+value,'number');if(isBoolean(value))return ctx.stylize(''+value,'boolean');// For some reason typeof null is "object", so special case here.
if(isNull(value))return ctx.stylize('null','null');}function formatError(value){return'['+Error.prototype.toString.call(value)+']';}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;i<l;++i){if(hasOwnProperty(value,String(i))){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\d+$/)){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<0){if(isNull(recurseTimes)){str=formatValue(ctx,desc.value,null);}else{str=formatValue(ctx,desc.value,recurseTimes-1);}if(str.indexOf('\n')>-1){if(array){str=str.split('\n').map(function(line){return'  '+line;}).join('\n').substr(2);}else{str='\n'+str.split('\n').map(function(line){return'   '+line;}).join('\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(isUndefined(name)){if(array&&key.match(/^\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'");name=ctx.stylize(name,'string');}}return name+': '+str;}function reduceToSingleString(output,base,braces){var numLinesEst=0;var length=output.reduce(function(prev,cur){numLinesEst++;if(cur.indexOf('\n')>=0)numLinesEst++;return prev+cur.replace(/\u001b\[\d\d?m/g,'').length+1;},0);if(length>60){return braces[0]+(base===''?'':base+'\n ')+' '+output.join(',\n  ')+' '+braces[1];}return braces[0]+base+' '+output.join(', ')+' '+braces[1];}// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar){return Array.isArray(ar);}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return isObject(re)&&objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return isObject(d)&&objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return isObject(e)&&(objectToString(e)==='[object Error]'||e instanceof Error);}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||(typeof arg==="undefined"?"undefined":_typeof(arg))==='symbol'||// ES6 symbol
typeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=__webpack_require__(54);function objectToString(o){return Object.prototype.toString.call(o);}function pad(n){return n<10?'0'+n.toString(10):n.toString(10);}var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];// 26 Feb 16:19:34
function timestamp(){var d=new Date();var time=[pad(d.getHours()),pad(d.getMinutes()),pad(d.getSeconds())].join(':');return[d.getDate(),months[d.getMonth()],time].join(' ');}// log is just a thin wrapper to console.log that prepends a timestamp
exports.log=function(){console.log('%s - %s',timestamp(),exports.format.apply(exports,arguments));};/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */exports.inherits=__webpack_require__(55);exports._extend=function(origin,add){// Don't do anything if add isn't an object
if(!add||!isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;};function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}(),__webpack_require__(8));/***/},/* 54 *//***/function(module,exports){module.exports=function isBuffer(arg){return arg&&(typeof arg==="undefined"?"undefined":_typeof(arg))==='object'&&typeof arg.copy==='function'&&typeof arg.fill==='function'&&typeof arg.readUInt8==='function';};/***/},/* 55 *//***/function(module,exports){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}/***/},/* 56 *//***/function(module,exports,__webpack_require__){/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */var inherits=__webpack_require__(53).inherits;module.exports=function(Buffer,Hash){var K=[0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0x0FC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x06CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2];var W=new Array(64);function Sha256(){this.init();this._w=W;//new Array(64)
Hash.call(this,16*4,14*4);}inherits(Sha256,Hash);Sha256.prototype.init=function(){this._a=0x6a09e667|0;this._b=0xbb67ae85|0;this._c=0x3c6ef372|0;this._d=0xa54ff53a|0;this._e=0x510e527f|0;this._f=0x9b05688c|0;this._g=0x1f83d9ab|0;this._h=0x5be0cd19|0;this._len=this._s=0;return this;};function S(X,n){return X>>>n|X<<32-n;}function R(X,n){return X>>>n;}function Ch(x,y,z){return x&y^~x&z;}function Maj(x,y,z){return x&y^x&z^y&z;}function Sigma0256(x){return S(x,2)^S(x,13)^S(x,22);}function Sigma1256(x){return S(x,6)^S(x,11)^S(x,25);}function Gamma0256(x){return S(x,7)^S(x,18)^R(x,3);}function Gamma1256(x){return S(x,17)^S(x,19)^R(x,10);}Sha256.prototype._update=function(M){var W=this._w;var a,b,c,d,e,f,g,h;var T1,T2;a=this._a|0;b=this._b|0;c=this._c|0;d=this._d|0;e=this._e|0;f=this._f|0;g=this._g|0;h=this._h|0;for(var j=0;j<64;j++){var w=W[j]=j<16?M.readInt32BE(j*4):Gamma1256(W[j-2])+W[j-7]+Gamma0256(W[j-15])+W[j-16];T1=h+Sigma1256(e)+Ch(e,f,g)+K[j]+w;T2=Sigma0256(a)+Maj(a,b,c);h=g;g=f;f=e;e=d+T1;d=c;c=b;b=a;a=T1+T2;}this._a=a+this._a|0;this._b=b+this._b|0;this._c=c+this._c|0;this._d=d+this._d|0;this._e=e+this._e|0;this._f=f+this._f|0;this._g=g+this._g|0;this._h=h+this._h|0;};Sha256.prototype._hash=function(){var H=new Buffer(32);H.writeInt32BE(this._a,0);H.writeInt32BE(this._b,4);H.writeInt32BE(this._c,8);H.writeInt32BE(this._d,12);H.writeInt32BE(this._e,16);H.writeInt32BE(this._f,20);H.writeInt32BE(this._g,24);H.writeInt32BE(this._h,28);return H;};return Sha256;};/***/},/* 57 *//***/function(module,exports,__webpack_require__){var inherits=__webpack_require__(53).inherits;module.exports=function(Buffer,Hash){var K=[0x428a2f98,0xd728ae22,0x71374491,0x23ef65cd,0xb5c0fbcf,0xec4d3b2f,0xe9b5dba5,0x8189dbbc,0x3956c25b,0xf348b538,0x59f111f1,0xb605d019,0x923f82a4,0xaf194f9b,0xab1c5ed5,0xda6d8118,0xd807aa98,0xa3030242,0x12835b01,0x45706fbe,0x243185be,0x4ee4b28c,0x550c7dc3,0xd5ffb4e2,0x72be5d74,0xf27b896f,0x80deb1fe,0x3b1696b1,0x9bdc06a7,0x25c71235,0xc19bf174,0xcf692694,0xe49b69c1,0x9ef14ad2,0xefbe4786,0x384f25e3,0x0fc19dc6,0x8b8cd5b5,0x240ca1cc,0x77ac9c65,0x2de92c6f,0x592b0275,0x4a7484aa,0x6ea6e483,0x5cb0a9dc,0xbd41fbd4,0x76f988da,0x831153b5,0x983e5152,0xee66dfab,0xa831c66d,0x2db43210,0xb00327c8,0x98fb213f,0xbf597fc7,0xbeef0ee4,0xc6e00bf3,0x3da88fc2,0xd5a79147,0x930aa725,0x06ca6351,0xe003826f,0x14292967,0x0a0e6e70,0x27b70a85,0x46d22ffc,0x2e1b2138,0x5c26c926,0x4d2c6dfc,0x5ac42aed,0x53380d13,0x9d95b3df,0x650a7354,0x8baf63de,0x766a0abb,0x3c77b2a8,0x81c2c92e,0x47edaee6,0x92722c85,0x1482353b,0xa2bfe8a1,0x4cf10364,0xa81a664b,0xbc423001,0xc24b8b70,0xd0f89791,0xc76c51a3,0x0654be30,0xd192e819,0xd6ef5218,0xd6990624,0x5565a910,0xf40e3585,0x5771202a,0x106aa070,0x32bbd1b8,0x19a4c116,0xb8d2d0c8,0x1e376c08,0x5141ab53,0x2748774c,0xdf8eeb99,0x34b0bcb5,0xe19b48a8,0x391c0cb3,0xc5c95a63,0x4ed8aa4a,0xe3418acb,0x5b9cca4f,0x7763e373,0x682e6ff3,0xd6b2b8a3,0x748f82ee,0x5defb2fc,0x78a5636f,0x43172f60,0x84c87814,0xa1f0ab72,0x8cc70208,0x1a6439ec,0x90befffa,0x23631e28,0xa4506ceb,0xde82bde9,0xbef9a3f7,0xb2c67915,0xc67178f2,0xe372532b,0xca273ece,0xea26619c,0xd186b8c7,0x21c0c207,0xeada7dd6,0xcde0eb1e,0xf57d4f7f,0xee6ed178,0x06f067aa,0x72176fba,0x0a637dc5,0xa2c898a6,0x113f9804,0xbef90dae,0x1b710b35,0x131c471b,0x28db77f5,0x23047d84,0x32caab7b,0x40c72493,0x3c9ebe0a,0x15c9bebc,0x431d67c4,0x9c100d4c,0x4cc5d4be,0xcb3e42b6,0x597f299c,0xfc657e2a,0x5fcb6fab,0x3ad6faec,0x6c44198c,0x4a475817];var W=new Array(160);function Sha512(){this.init();this._w=W;Hash.call(this,128,112);}inherits(Sha512,Hash);Sha512.prototype.init=function(){this._a=0x6a09e667|0;this._b=0xbb67ae85|0;this._c=0x3c6ef372|0;this._d=0xa54ff53a|0;this._e=0x510e527f|0;this._f=0x9b05688c|0;this._g=0x1f83d9ab|0;this._h=0x5be0cd19|0;this._al=0xf3bcc908|0;this._bl=0x84caa73b|0;this._cl=0xfe94f82b|0;this._dl=0x5f1d36f1|0;this._el=0xade682d1|0;this._fl=0x2b3e6c1f|0;this._gl=0xfb41bd6b|0;this._hl=0x137e2179|0;this._len=this._s=0;return this;};function S(X,Xl,n){return X>>>n|Xl<<32-n;}function Ch(x,y,z){return x&y^~x&z;}function Maj(x,y,z){return x&y^x&z^y&z;}Sha512.prototype._update=function(M){var W=this._w;var a,b,c,d,e,f,g,h;var al,bl,cl,dl,el,fl,gl,hl;a=this._a|0;b=this._b|0;c=this._c|0;d=this._d|0;e=this._e|0;f=this._f|0;g=this._g|0;h=this._h|0;al=this._al|0;bl=this._bl|0;cl=this._cl|0;dl=this._dl|0;el=this._el|0;fl=this._fl|0;gl=this._gl|0;hl=this._hl|0;for(var i=0;i<80;i++){var j=i*2;var Wi,Wil;if(i<16){Wi=W[j]=M.readInt32BE(j*4);Wil=W[j+1]=M.readInt32BE(j*4+4);}else{var x=W[j-15*2];var xl=W[j-15*2+1];var gamma0=S(x,xl,1)^S(x,xl,8)^x>>>7;var gamma0l=S(xl,x,1)^S(xl,x,8)^S(xl,x,7);x=W[j-2*2];xl=W[j-2*2+1];var gamma1=S(x,xl,19)^S(xl,x,29)^x>>>6;var gamma1l=S(xl,x,19)^S(x,xl,29)^S(xl,x,6);// W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
var Wi7=W[j-7*2];var Wi7l=W[j-7*2+1];var Wi16=W[j-16*2];var Wi16l=W[j-16*2+1];Wil=gamma0l+Wi7l;Wi=gamma0+Wi7+(Wil>>>0<gamma0l>>>0?1:0);Wil=Wil+gamma1l;Wi=Wi+gamma1+(Wil>>>0<gamma1l>>>0?1:0);Wil=Wil+Wi16l;Wi=Wi+Wi16+(Wil>>>0<Wi16l>>>0?1:0);W[j]=Wi;W[j+1]=Wil;}var maj=Maj(a,b,c);var majl=Maj(al,bl,cl);var sigma0h=S(a,al,28)^S(al,a,2)^S(al,a,7);var sigma0l=S(al,a,28)^S(a,al,2)^S(a,al,7);var sigma1h=S(e,el,14)^S(e,el,18)^S(el,e,9);var sigma1l=S(el,e,14)^S(el,e,18)^S(e,el,9);// t1 = h + sigma1 + ch + K[i] + W[i]
var Ki=K[j];var Kil=K[j+1];var ch=Ch(e,f,g);var chl=Ch(el,fl,gl);var t1l=hl+sigma1l;var t1=h+sigma1h+(t1l>>>0<hl>>>0?1:0);t1l=t1l+chl;t1=t1+ch+(t1l>>>0<chl>>>0?1:0);t1l=t1l+Kil;t1=t1+Ki+(t1l>>>0<Kil>>>0?1:0);t1l=t1l+Wil;t1=t1+Wi+(t1l>>>0<Wil>>>0?1:0);// t2 = sigma0 + maj
var t2l=sigma0l+majl;var t2=sigma0h+maj+(t2l>>>0<sigma0l>>>0?1:0);h=g;hl=gl;g=f;gl=fl;f=e;fl=el;el=dl+t1l|0;e=d+t1+(el>>>0<dl>>>0?1:0)|0;d=c;dl=cl;c=b;cl=bl;b=a;bl=al;al=t1l+t2l|0;a=t1+t2+(al>>>0<t1l>>>0?1:0)|0;}this._al=this._al+al|0;this._bl=this._bl+bl|0;this._cl=this._cl+cl|0;this._dl=this._dl+dl|0;this._el=this._el+el|0;this._fl=this._fl+fl|0;this._gl=this._gl+gl|0;this._hl=this._hl+hl|0;this._a=this._a+a+(this._al>>>0<al>>>0?1:0)|0;this._b=this._b+b+(this._bl>>>0<bl>>>0?1:0)|0;this._c=this._c+c+(this._cl>>>0<cl>>>0?1:0)|0;this._d=this._d+d+(this._dl>>>0<dl>>>0?1:0)|0;this._e=this._e+e+(this._el>>>0<el>>>0?1:0)|0;this._f=this._f+f+(this._fl>>>0<fl>>>0?1:0)|0;this._g=this._g+g+(this._gl>>>0<gl>>>0?1:0)|0;this._h=this._h+h+(this._hl>>>0<hl>>>0?1:0)|0;};Sha512.prototype._hash=function(){var H=new Buffer(64);function writeInt64BE(h,l,offset){H.writeInt32BE(h,offset);H.writeInt32BE(l,offset+4);}writeInt64BE(this._a,this._al,0);writeInt64BE(this._b,this._bl,8);writeInt64BE(this._c,this._cl,16);writeInt64BE(this._d,this._dl,24);writeInt64BE(this._e,this._el,32);writeInt64BE(this._f,this._fl,40);writeInt64BE(this._g,this._gl,48);writeInt64BE(this._h,this._hl,56);return H;};return Sha512;};/***/},/* 58 *//***/function(module,exports,__webpack_require__){/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */var helpers=__webpack_require__(59);/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */function core_md5(x,len){/* append padding */x[len>>5]|=0x80<<len%32;x[(len+64>>>9<<4)+14]=len;var a=1732584193;var b=-271733879;var c=-1732584194;var d=271733878;for(var i=0;i<x.length;i+=16){var olda=a;var oldb=b;var oldc=c;var oldd=d;a=md5_ff(a,b,c,d,x[i+0],7,-680876936);d=md5_ff(d,a,b,c,x[i+1],12,-389564586);c=md5_ff(c,d,a,b,x[i+2],17,606105819);b=md5_ff(b,c,d,a,x[i+3],22,-1044525330);a=md5_ff(a,b,c,d,x[i+4],7,-176418897);d=md5_ff(d,a,b,c,x[i+5],12,1200080426);c=md5_ff(c,d,a,b,x[i+6],17,-1473231341);b=md5_ff(b,c,d,a,x[i+7],22,-45705983);a=md5_ff(a,b,c,d,x[i+8],7,1770035416);d=md5_ff(d,a,b,c,x[i+9],12,-1958414417);c=md5_ff(c,d,a,b,x[i+10],17,-42063);b=md5_ff(b,c,d,a,x[i+11],22,-1990404162);a=md5_ff(a,b,c,d,x[i+12],7,1804603682);d=md5_ff(d,a,b,c,x[i+13],12,-40341101);c=md5_ff(c,d,a,b,x[i+14],17,-1502002290);b=md5_ff(b,c,d,a,x[i+15],22,1236535329);a=md5_gg(a,b,c,d,x[i+1],5,-165796510);d=md5_gg(d,a,b,c,x[i+6],9,-1069501632);c=md5_gg(c,d,a,b,x[i+11],14,643717713);b=md5_gg(b,c,d,a,x[i+0],20,-373897302);a=md5_gg(a,b,c,d,x[i+5],5,-701558691);d=md5_gg(d,a,b,c,x[i+10],9,38016083);c=md5_gg(c,d,a,b,x[i+15],14,-660478335);b=md5_gg(b,c,d,a,x[i+4],20,-405537848);a=md5_gg(a,b,c,d,x[i+9],5,568446438);d=md5_gg(d,a,b,c,x[i+14],9,-1019803690);c=md5_gg(c,d,a,b,x[i+3],14,-187363961);b=md5_gg(b,c,d,a,x[i+8],20,1163531501);a=md5_gg(a,b,c,d,x[i+13],5,-1444681467);d=md5_gg(d,a,b,c,x[i+2],9,-51403784);c=md5_gg(c,d,a,b,x[i+7],14,1735328473);b=md5_gg(b,c,d,a,x[i+12],20,-1926607734);a=md5_hh(a,b,c,d,x[i+5],4,-378558);d=md5_hh(d,a,b,c,x[i+8],11,-2022574463);c=md5_hh(c,d,a,b,x[i+11],16,1839030562);b=md5_hh(b,c,d,a,x[i+14],23,-35309556);a=md5_hh(a,b,c,d,x[i+1],4,-1530992060);d=md5_hh(d,a,b,c,x[i+4],11,1272893353);c=md5_hh(c,d,a,b,x[i+7],16,-155497632);b=md5_hh(b,c,d,a,x[i+10],23,-1094730640);a=md5_hh(a,b,c,d,x[i+13],4,681279174);d=md5_hh(d,a,b,c,x[i+0],11,-358537222);c=md5_hh(c,d,a,b,x[i+3],16,-722521979);b=md5_hh(b,c,d,a,x[i+6],23,76029189);a=md5_hh(a,b,c,d,x[i+9],4,-640364487);d=md5_hh(d,a,b,c,x[i+12],11,-421815835);c=md5_hh(c,d,a,b,x[i+15],16,530742520);b=md5_hh(b,c,d,a,x[i+2],23,-995338651);a=md5_ii(a,b,c,d,x[i+0],6,-198630844);d=md5_ii(d,a,b,c,x[i+7],10,1126891415);c=md5_ii(c,d,a,b,x[i+14],15,-1416354905);b=md5_ii(b,c,d,a,x[i+5],21,-57434055);a=md5_ii(a,b,c,d,x[i+12],6,1700485571);d=md5_ii(d,a,b,c,x[i+3],10,-1894986606);c=md5_ii(c,d,a,b,x[i+10],15,-1051523);b=md5_ii(b,c,d,a,x[i+1],21,-2054922799);a=md5_ii(a,b,c,d,x[i+8],6,1873313359);d=md5_ii(d,a,b,c,x[i+15],10,-30611744);c=md5_ii(c,d,a,b,x[i+6],15,-1560198380);b=md5_ii(b,c,d,a,x[i+13],21,1309151649);a=md5_ii(a,b,c,d,x[i+4],6,-145523070);d=md5_ii(d,a,b,c,x[i+11],10,-1120210379);c=md5_ii(c,d,a,b,x[i+2],15,718787259);b=md5_ii(b,c,d,a,x[i+9],21,-343485551);a=safe_add(a,olda);b=safe_add(b,oldb);c=safe_add(c,oldc);d=safe_add(d,oldd);}return Array(a,b,c,d);}/*
	 * These functions implement the four basic operations the algorithm uses.
	 */function md5_cmn(q,a,b,x,s,t){return safe_add(bit_rol(safe_add(safe_add(a,q),safe_add(x,t)),s),b);}function md5_ff(a,b,c,d,x,s,t){return md5_cmn(b&c|~b&d,a,b,x,s,t);}function md5_gg(a,b,c,d,x,s,t){return md5_cmn(b&d|c&~d,a,b,x,s,t);}function md5_hh(a,b,c,d,x,s,t){return md5_cmn(b^c^d,a,b,x,s,t);}function md5_ii(a,b,c,d,x,s,t){return md5_cmn(c^(b|~d),a,b,x,s,t);}/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */function safe_add(x,y){var lsw=(x&0xFFFF)+(y&0xFFFF);var msw=(x>>16)+(y>>16)+(lsw>>16);return msw<<16|lsw&0xFFFF;}/*
	 * Bitwise rotate a 32-bit number to the left.
	 */function bit_rol(num,cnt){return num<<cnt|num>>>32-cnt;}module.exports=function md5(buf){return helpers.hash(buf,core_md5,16);};/***/},/* 59 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var intSize=4;var zeroBuffer=new Buffer(intSize);zeroBuffer.fill(0);var chrsz=8;function toArray(buf,bigEndian){if(buf.length%intSize!==0){var len=buf.length+(intSize-buf.length%intSize);buf=Buffer.concat([buf,zeroBuffer],len);}var arr=[];var fn=bigEndian?buf.readInt32BE:buf.readInt32LE;for(var i=0;i<buf.length;i+=intSize){arr.push(fn.call(buf,i));}return arr;}function toBuffer(arr,size,bigEndian){var buf=new Buffer(size);var fn=bigEndian?buf.writeInt32BE:buf.writeInt32LE;for(var i=0;i<arr.length;i++){fn.call(buf,arr[i],i*4,true);}return buf;}function hash(buf,fn,hashSize,bigEndian){if(!Buffer.isBuffer(buf))buf=new Buffer(buf);var arr=fn(toArray(buf,bigEndian),buf.length*chrsz);return toBuffer(arr,hashSize,bigEndian);}module.exports={hash:hash};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 60 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){module.exports=ripemd160;/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*//** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/// Constants table
var zl=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13];var zr=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11];var sl=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6];var sr=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11];var hl=[0x00000000,0x5A827999,0x6ED9EBA1,0x8F1BBCDC,0xA953FD4E];var hr=[0x50A28BE6,0x5C4DD124,0x6D703EF3,0x7A6D76E9,0x00000000];var bytesToWords=function bytesToWords(bytes){var words=[];for(var i=0,b=0;i<bytes.length;i++,b+=8){words[b>>>5]|=bytes[i]<<24-b%32;}return words;};var wordsToBytes=function wordsToBytes(words){var bytes=[];for(var b=0;b<words.length*32;b+=8){bytes.push(words[b>>>5]>>>24-b%32&0xFF);}return bytes;};var processBlock=function processBlock(H,M,offset){// Swap endian
for(var i=0;i<16;i++){var offset_i=offset+i;var M_offset_i=M[offset_i];// Swap
M[offset_i]=(M_offset_i<<8|M_offset_i>>>24)&0x00ff00ff|(M_offset_i<<24|M_offset_i>>>8)&0xff00ff00;}// Working variables
var al,bl,cl,dl,el;var ar,br,cr,dr,er;ar=al=H[0];br=bl=H[1];cr=cl=H[2];dr=dl=H[3];er=el=H[4];// Computation
var t;for(var i=0;i<80;i+=1){t=al+M[offset+zl[i]]|0;if(i<16){t+=f1(bl,cl,dl)+hl[0];}else if(i<32){t+=f2(bl,cl,dl)+hl[1];}else if(i<48){t+=f3(bl,cl,dl)+hl[2];}else if(i<64){t+=f4(bl,cl,dl)+hl[3];}else{// if (i<80) {
t+=f5(bl,cl,dl)+hl[4];}t=t|0;t=rotl(t,sl[i]);t=t+el|0;al=el;el=dl;dl=rotl(cl,10);cl=bl;bl=t;t=ar+M[offset+zr[i]]|0;if(i<16){t+=f5(br,cr,dr)+hr[0];}else if(i<32){t+=f4(br,cr,dr)+hr[1];}else if(i<48){t+=f3(br,cr,dr)+hr[2];}else if(i<64){t+=f2(br,cr,dr)+hr[3];}else{// if (i<80) {
t+=f1(br,cr,dr)+hr[4];}t=t|0;t=rotl(t,sr[i]);t=t+er|0;ar=er;er=dr;dr=rotl(cr,10);cr=br;br=t;}// Intermediate hash value
t=H[1]+cl+dr|0;H[1]=H[2]+dl+er|0;H[2]=H[3]+el+ar|0;H[3]=H[4]+al+br|0;H[4]=H[0]+bl+cr|0;H[0]=t;};function f1(x,y,z){return x^y^z;}function f2(x,y,z){return x&y|~x&z;}function f3(x,y,z){return(x|~y)^z;}function f4(x,y,z){return x&z|y&~z;}function f5(x,y,z){return x^(y|~z);}function rotl(x,n){return x<<n|x>>>32-n;}function ripemd160(message){var H=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476,0xC3D2E1F0];if(typeof message=='string')message=new Buffer(message,'utf8');var m=bytesToWords(message);var nBitsLeft=message.length*8;var nBitsTotal=message.length*8;// Add padding
m[nBitsLeft>>>5]|=0x80<<24-nBitsLeft%32;m[(nBitsLeft+64>>>9<<4)+14]=(nBitsTotal<<8|nBitsTotal>>>24)&0x00ff00ff|(nBitsTotal<<24|nBitsTotal>>>8)&0xff00ff00;for(var i=0;i<m.length;i+=16){processBlock(H,m,i);}// Swap endian
for(var i=0;i<5;i++){// Shortcut
var H_i=H[i];// Swap
H[i]=(H_i<<8|H_i>>>24)&0x00ff00ff|(H_i<<24|H_i>>>8)&0xff00ff00;}var digestbytes=wordsToBytes(H);return new Buffer(digestbytes);}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 61 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var createHash=__webpack_require__(49);var zeroBuffer=new Buffer(128);zeroBuffer.fill(0);module.exports=Hmac;function Hmac(alg,key){if(!(this instanceof Hmac))return new Hmac(alg,key);this._opad=opad;this._alg=alg;var blocksize=alg==='sha512'?128:64;key=this._key=!Buffer.isBuffer(key)?new Buffer(key):key;if(key.length>blocksize){key=createHash(alg).update(key).digest();}else if(key.length<blocksize){key=Buffer.concat([key,zeroBuffer],blocksize);}var ipad=this._ipad=new Buffer(blocksize);var opad=this._opad=new Buffer(blocksize);for(var i=0;i<blocksize;i++){ipad[i]=key[i]^0x36;opad[i]=key[i]^0x5C;}this._hash=createHash(alg).update(ipad);}Hmac.prototype.update=function(data,enc){this._hash.update(data,enc);return this;};Hmac.prototype.digest=function(enc){var h=this._hash.digest();return createHash(this._alg).update(this._opad).update(h).digest(enc);};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 62 *//***/function(module,exports,__webpack_require__){var pbkdf2Export=__webpack_require__(63);module.exports=function(crypto,exports){exports=exports||{};var exported=pbkdf2Export(crypto);exports.pbkdf2=exported.pbkdf2;exports.pbkdf2Sync=exported.pbkdf2Sync;return exports;};/***/},/* 63 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){module.exports=function(crypto){function pbkdf2(password,salt,iterations,keylen,digest,callback){if('function'===typeof digest){callback=digest;digest=undefined;}if('function'!==typeof callback)throw new Error('No callback provided to pbkdf2');setTimeout(function(){var result;try{result=pbkdf2Sync(password,salt,iterations,keylen,digest);}catch(e){return callback(e);}callback(undefined,result);});}function pbkdf2Sync(password,salt,iterations,keylen,digest){if('number'!==typeof iterations)throw new TypeError('Iterations not a number');if(iterations<0)throw new TypeError('Bad iterations');if('number'!==typeof keylen)throw new TypeError('Key length not a number');if(keylen<0)throw new TypeError('Bad key length');digest=digest||'sha1';if(!Buffer.isBuffer(password))password=new Buffer(password);if(!Buffer.isBuffer(salt))salt=new Buffer(salt);var hLen,l=1,r,T;var DK=new Buffer(keylen);var block1=new Buffer(salt.length+4);salt.copy(block1,0,0,salt.length);for(var i=1;i<=l;i++){block1.writeUInt32BE(i,salt.length);var U=crypto.createHmac(digest,password).update(block1).digest();if(!hLen){hLen=U.length;T=new Buffer(hLen);l=Math.ceil(keylen/hLen);r=keylen-(l-1)*hLen;if(keylen>(Math.pow(2,32)-1)*hLen)throw new TypeError('keylen exceeds maximum length');}U.copy(T,0,0,hLen);for(var j=1;j<iterations;j++){U=crypto.createHmac(digest,password).update(U).digest();for(var k=0;k<hLen;k++){T[k]^=U[k];}}var destPos=(i-1)*hLen;var len=i==l?r:hLen;T.copy(DK,destPos,0,len);}return DK;}return{pbkdf2:pbkdf2,pbkdf2Sync:pbkdf2Sync};};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 64 *//***/function(module,exports,__webpack_require__){module.exports=function(crypto,exports){exports=exports||{};var ciphers=__webpack_require__(65)(crypto);exports.createCipher=ciphers.createCipher;exports.createCipheriv=ciphers.createCipheriv;var deciphers=__webpack_require__(77)(crypto);exports.createDecipher=deciphers.createDecipher;exports.createDecipheriv=deciphers.createDecipheriv;var modes=__webpack_require__(68);function listCiphers(){return Object.keys(modes);}exports.listCiphers=listCiphers;};/***/},/* 65 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var aes=__webpack_require__(66);var Transform=__webpack_require__(67);var inherits=__webpack_require__(10);var modes=__webpack_require__(68);var ebtk=__webpack_require__(69);var StreamCipher=__webpack_require__(70);inherits(Cipher,Transform);function Cipher(mode,key,iv){if(!(this instanceof Cipher)){return new Cipher(mode,key,iv);}Transform.call(this);this._cache=new Splitter();this._cipher=new aes.AES(key);this._prev=new Buffer(iv.length);iv.copy(this._prev);this._mode=mode;}Cipher.prototype._transform=function(data,_,next){this._cache.add(data);var chunk;var thing;while(chunk=this._cache.get()){thing=this._mode.encrypt(this,chunk);this.push(thing);}next();};Cipher.prototype._flush=function(next){var chunk=this._cache.flush();this.push(this._mode.encrypt(this,chunk));this._cipher.scrub();next();};function Splitter(){if(!(this instanceof Splitter)){return new Splitter();}this.cache=new Buffer('');}Splitter.prototype.add=function(data){this.cache=Buffer.concat([this.cache,data]);};Splitter.prototype.get=function(){if(this.cache.length>15){var out=this.cache.slice(0,16);this.cache=this.cache.slice(16);return out;}return null;};Splitter.prototype.flush=function(){var len=16-this.cache.length;var padBuff=new Buffer(len);var i=-1;while(++i<len){padBuff.writeUInt8(len,i);}var out=Buffer.concat([this.cache,padBuff]);return out;};var modelist={ECB:__webpack_require__(71),CBC:__webpack_require__(72),CFB:__webpack_require__(74),OFB:__webpack_require__(75),CTR:__webpack_require__(76)};module.exports=function(crypto){function createCipheriv(suite,password,iv){var config=modes[suite];if(!config){throw new TypeError('invalid suite type');}if(typeof iv==='string'){iv=new Buffer(iv);}if(typeof password==='string'){password=new Buffer(password);}if(password.length!==config.key/8){throw new TypeError('invalid key length '+password.length);}if(iv.length!==config.iv){throw new TypeError('invalid iv length '+iv.length);}if(config.type==='stream'){return new StreamCipher(modelist[config.mode],password,iv);}return new Cipher(modelist[config.mode],password,iv);}function createCipher(suite,password){var config=modes[suite];if(!config){throw new TypeError('invalid suite type');}var keys=ebtk(crypto,password,config.key,config.iv);return createCipheriv(suite,keys.key,keys.iv);}return{createCipher:createCipher,createCipheriv:createCipheriv};};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 66 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var uint_max=Math.pow(2,32);function fixup_uint32(x){var ret,x_pos;ret=x>uint_max||x<0?(x_pos=Math.abs(x)%uint_max,x<0?uint_max-x_pos:x_pos):x;return ret;}function scrub_vec(v){var i,_i,_ref;for(i=_i=0,_ref=v.length;0<=_ref?_i<_ref:_i>_ref;i=0<=_ref?++_i:--_i){v[i]=0;}return false;}function Global(){var i;this.SBOX=[];this.INV_SBOX=[];this.SUB_MIX=function(){var _i,_results;_results=[];for(i=_i=0;_i<4;i=++_i){_results.push([]);}return _results;}();this.INV_SUB_MIX=function(){var _i,_results;_results=[];for(i=_i=0;_i<4;i=++_i){_results.push([]);}return _results;}();this.init();this.RCON=[0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36];}Global.prototype.init=function(){var d,i,sx,t,x,x2,x4,x8,xi,_i;d=function(){var _i,_results;_results=[];for(i=_i=0;_i<256;i=++_i){if(i<128){_results.push(i<<1);}else{_results.push(i<<1^0x11b);}}return _results;}();x=0;xi=0;for(i=_i=0;_i<256;i=++_i){sx=xi^xi<<1^xi<<2^xi<<3^xi<<4;sx=sx>>>8^sx&0xff^0x63;this.SBOX[x]=sx;this.INV_SBOX[sx]=x;x2=d[x];x4=d[x2];x8=d[x4];t=d[sx]*0x101^sx*0x1010100;this.SUB_MIX[0][x]=t<<24|t>>>8;this.SUB_MIX[1][x]=t<<16|t>>>16;this.SUB_MIX[2][x]=t<<8|t>>>24;this.SUB_MIX[3][x]=t;t=x8*0x1010101^x4*0x10001^x2*0x101^x*0x1010100;this.INV_SUB_MIX[0][sx]=t<<24|t>>>8;this.INV_SUB_MIX[1][sx]=t<<16|t>>>16;this.INV_SUB_MIX[2][sx]=t<<8|t>>>24;this.INV_SUB_MIX[3][sx]=t;if(x===0){x=xi=1;}else{x=x2^d[d[d[x8^x2]]];xi^=d[d[xi]];}}return true;};var G=new Global();AES.blockSize=4*4;AES.prototype.blockSize=AES.blockSize;AES.keySize=256/8;AES.prototype.keySize=AES.keySize;AES.ivSize=AES.blockSize;AES.prototype.ivSize=AES.ivSize;function bufferToArray(buf){var len=buf.length/4;var out=new Array(len);var i=-1;while(++i<len){out[i]=buf.readUInt32BE(i*4);}return out;}function AES(key){this._key=bufferToArray(key);this._doReset();}AES.prototype._doReset=function(){var invKsRow,keySize,keyWords,ksRow,ksRows,t,_i,_j;keyWords=this._key;keySize=keyWords.length;this._nRounds=keySize+6;ksRows=(this._nRounds+1)*4;this._keySchedule=[];for(ksRow=_i=0;0<=ksRows?_i<ksRows:_i>ksRows;ksRow=0<=ksRows?++_i:--_i){this._keySchedule[ksRow]=ksRow<keySize?keyWords[ksRow]:(t=this._keySchedule[ksRow-1],ksRow%keySize===0?(t=t<<8|t>>>24,t=G.SBOX[t>>>24]<<24|G.SBOX[t>>>16&0xff]<<16|G.SBOX[t>>>8&0xff]<<8|G.SBOX[t&0xff],t^=G.RCON[ksRow/keySize|0]<<24):keySize>6&&ksRow%keySize===4?t=G.SBOX[t>>>24]<<24|G.SBOX[t>>>16&0xff]<<16|G.SBOX[t>>>8&0xff]<<8|G.SBOX[t&0xff]:void 0,this._keySchedule[ksRow-keySize]^t);}this._invKeySchedule=[];for(invKsRow=_j=0;0<=ksRows?_j<ksRows:_j>ksRows;invKsRow=0<=ksRows?++_j:--_j){ksRow=ksRows-invKsRow;t=this._keySchedule[ksRow-(invKsRow%4?0:4)];this._invKeySchedule[invKsRow]=invKsRow<4||ksRow<=4?t:G.INV_SUB_MIX[0][G.SBOX[t>>>24]]^G.INV_SUB_MIX[1][G.SBOX[t>>>16&0xff]]^G.INV_SUB_MIX[2][G.SBOX[t>>>8&0xff]]^G.INV_SUB_MIX[3][G.SBOX[t&0xff]];}return true;};AES.prototype.encryptBlock=function(M){M=bufferToArray(new Buffer(M));var out=this._doCryptBlock(M,this._keySchedule,G.SUB_MIX,G.SBOX);var buf=new Buffer(16);buf.writeUInt32BE(out[0],0);buf.writeUInt32BE(out[1],4);buf.writeUInt32BE(out[2],8);buf.writeUInt32BE(out[3],12);return buf;};AES.prototype.decryptBlock=function(M){M=bufferToArray(new Buffer(M));var temp=[M[3],M[1]];M[1]=temp[0];M[3]=temp[1];var out=this._doCryptBlock(M,this._invKeySchedule,G.INV_SUB_MIX,G.INV_SBOX);var buf=new Buffer(16);buf.writeUInt32BE(out[0],0);buf.writeUInt32BE(out[3],4);buf.writeUInt32BE(out[2],8);buf.writeUInt32BE(out[1],12);return buf;};AES.prototype.scrub=function(){scrub_vec(this._keySchedule);scrub_vec(this._invKeySchedule);scrub_vec(this._key);};AES.prototype._doCryptBlock=function(M,keySchedule,SUB_MIX,SBOX){var ksRow,round,s0,s1,s2,s3,t0,t1,t2,t3,_i,_ref;s0=M[0]^keySchedule[0];s1=M[1]^keySchedule[1];s2=M[2]^keySchedule[2];s3=M[3]^keySchedule[3];ksRow=4;for(round=_i=1,_ref=this._nRounds;1<=_ref?_i<_ref:_i>_ref;round=1<=_ref?++_i:--_i){t0=SUB_MIX[0][s0>>>24]^SUB_MIX[1][s1>>>16&0xff]^SUB_MIX[2][s2>>>8&0xff]^SUB_MIX[3][s3&0xff]^keySchedule[ksRow++];t1=SUB_MIX[0][s1>>>24]^SUB_MIX[1][s2>>>16&0xff]^SUB_MIX[2][s3>>>8&0xff]^SUB_MIX[3][s0&0xff]^keySchedule[ksRow++];t2=SUB_MIX[0][s2>>>24]^SUB_MIX[1][s3>>>16&0xff]^SUB_MIX[2][s0>>>8&0xff]^SUB_MIX[3][s1&0xff]^keySchedule[ksRow++];t3=SUB_MIX[0][s3>>>24]^SUB_MIX[1][s0>>>16&0xff]^SUB_MIX[2][s1>>>8&0xff]^SUB_MIX[3][s2&0xff]^keySchedule[ksRow++];s0=t0;s1=t1;s2=t2;s3=t3;}t0=(SBOX[s0>>>24]<<24|SBOX[s1>>>16&0xff]<<16|SBOX[s2>>>8&0xff]<<8|SBOX[s3&0xff])^keySchedule[ksRow++];t1=(SBOX[s1>>>24]<<24|SBOX[s2>>>16&0xff]<<16|SBOX[s3>>>8&0xff]<<8|SBOX[s0&0xff])^keySchedule[ksRow++];t2=(SBOX[s2>>>24]<<24|SBOX[s3>>>16&0xff]<<16|SBOX[s0>>>8&0xff]<<8|SBOX[s1&0xff])^keySchedule[ksRow++];t3=(SBOX[s3>>>24]<<24|SBOX[s0>>>16&0xff]<<16|SBOX[s1>>>8&0xff]<<8|SBOX[s2&0xff])^keySchedule[ksRow++];return[fixup_uint32(t0),fixup_uint32(t1),fixup_uint32(t2),fixup_uint32(t3)];};exports.AES=AES;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 67 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var Transform=__webpack_require__(13).Transform;var inherits=__webpack_require__(10);module.exports=CipherBase;inherits(CipherBase,Transform);function CipherBase(){Transform.call(this);}CipherBase.prototype.update=function(data,inputEnd,outputEnc){this.write(data,inputEnd);var outData=new Buffer('');var chunk;while(chunk=this.read()){outData=Buffer.concat([outData,chunk]);}if(outputEnc){outData=outData.toString(outputEnc);}return outData;};CipherBase.prototype.final=function(outputEnc){this.end();var outData=new Buffer('');var chunk;while(chunk=this.read()){outData=Buffer.concat([outData,chunk]);}if(outputEnc){outData=outData.toString(outputEnc);}return outData;};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 68 *//***/function(module,exports){exports['aes-128-ecb']={cipher:'AES',key:128,iv:0,mode:'ECB',type:'block'};exports['aes-192-ecb']={cipher:'AES',key:192,iv:0,mode:'ECB',type:'block'};exports['aes-256-ecb']={cipher:'AES',key:256,iv:0,mode:'ECB',type:'block'};exports['aes-128-cbc']={cipher:'AES',key:128,iv:16,mode:'CBC',type:'block'};exports['aes-192-cbc']={cipher:'AES',key:192,iv:16,mode:'CBC',type:'block'};exports['aes-256-cbc']={cipher:'AES',key:256,iv:16,mode:'CBC',type:'block'};exports['aes128']=exports['aes-128-cbc'];exports['aes192']=exports['aes-192-cbc'];exports['aes256']=exports['aes-256-cbc'];exports['aes-128-cfb']={cipher:'AES',key:128,iv:16,mode:'CFB',type:'stream'};exports['aes-192-cfb']={cipher:'AES',key:192,iv:16,mode:'CFB',type:'stream'};exports['aes-256-cfb']={cipher:'AES',key:256,iv:16,mode:'CFB',type:'stream'};exports['aes-128-ofb']={cipher:'AES',key:128,iv:16,mode:'OFB',type:'stream'};exports['aes-192-ofb']={cipher:'AES',key:192,iv:16,mode:'OFB',type:'stream'};exports['aes-256-ofb']={cipher:'AES',key:256,iv:16,mode:'OFB',type:'stream'};exports['aes-128-ctr']={cipher:'AES',key:128,iv:16,mode:'CTR',type:'stream'};exports['aes-192-ctr']={cipher:'AES',key:192,iv:16,mode:'CTR',type:'stream'};exports['aes-256-ctr']={cipher:'AES',key:256,iv:16,mode:'CTR',type:'stream'};/***/},/* 69 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){module.exports=function(crypto,password,keyLen,ivLen){keyLen=keyLen/8;ivLen=ivLen||0;var ki=0;var ii=0;var key=new Buffer(keyLen);var iv=new Buffer(ivLen);var addmd=0;var md,md_buf;var i;while(true){md=crypto.createHash('md5');if(addmd++>0){md.update(md_buf);}md.update(password);md_buf=md.digest();i=0;if(keyLen>0){while(true){if(keyLen===0){break;}if(i===md_buf.length){break;}key[ki++]=md_buf[i];keyLen--;i++;}}if(ivLen>0&&i!==md_buf.length){while(true){if(ivLen===0){break;}if(i===md_buf.length){break;}iv[ii++]=md_buf[i];ivLen--;i++;}}if(keyLen===0&&ivLen===0){break;}}for(i=0;i<md_buf.length;i++){md_buf[i]=0;}return{key:key,iv:iv};};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 70 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var aes=__webpack_require__(66);var Transform=__webpack_require__(67);var inherits=__webpack_require__(10);inherits(StreamCipher,Transform);module.exports=StreamCipher;function StreamCipher(mode,key,iv,decrypt){if(!(this instanceof StreamCipher)){return new StreamCipher(mode,key,iv);}Transform.call(this);this._cipher=new aes.AES(key);this._prev=new Buffer(iv.length);this._cache=new Buffer('');this._secCache=new Buffer('');this._decrypt=decrypt;iv.copy(this._prev);this._mode=mode;}StreamCipher.prototype._transform=function(chunk,_,next){next(null,this._mode.encrypt(this,chunk,this._decrypt));};StreamCipher.prototype._flush=function(next){this._cipher.scrub();next();};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 71 *//***/function(module,exports){exports.encrypt=function(self,block){return self._cipher.encryptBlock(block);};exports.decrypt=function(self,block){return self._cipher.decryptBlock(block);};/***/},/* 72 *//***/function(module,exports,__webpack_require__){var xor=__webpack_require__(73);exports.encrypt=function(self,block){var data=xor(block,self._prev);self._prev=self._cipher.encryptBlock(data);return self._prev;};exports.decrypt=function(self,block){var pad=self._prev;self._prev=block;var out=self._cipher.decryptBlock(block);return xor(out,pad);};/***/},/* 73 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){module.exports=xor;function xor(a,b){var len=Math.min(a.length,b.length);var out=new Buffer(len);var i=-1;while(++i<len){out.writeUInt8(a[i]^b[i],i);}return out;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 74 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var xor=__webpack_require__(73);exports.encrypt=function(self,data,decrypt){var out=new Buffer('');var len;while(data.length){if(self._cache.length===0){self._cache=self._cipher.encryptBlock(self._prev);self._prev=new Buffer('');}if(self._cache.length<=data.length){len=self._cache.length;out=Buffer.concat([out,encryptStart(self,data.slice(0,len),decrypt)]);data=data.slice(len);}else{out=Buffer.concat([out,encryptStart(self,data,decrypt)]);break;}}return out;};function encryptStart(self,data,decrypt){var len=data.length;var out=xor(data,self._cache);self._cache=self._cache.slice(len);self._prev=Buffer.concat([self._prev,decrypt?data:out]);return out;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 75 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var xor=__webpack_require__(73);function getBlock(self){self._prev=self._cipher.encryptBlock(self._prev);return self._prev;}exports.encrypt=function(self,chunk){while(self._cache.length<chunk.length){self._cache=Buffer.concat([self._cache,getBlock(self)]);}var pad=self._cache.slice(0,chunk.length);self._cache=self._cache.slice(chunk.length);return xor(chunk,pad);};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 76 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var xor=__webpack_require__(73);function getBlock(self){var out=self._cipher.encryptBlock(self._prev);incr32(self._prev);return out;}exports.encrypt=function(self,chunk){while(self._cache.length<chunk.length){self._cache=Buffer.concat([self._cache,getBlock(self)]);}var pad=self._cache.slice(0,chunk.length);self._cache=self._cache.slice(chunk.length);return xor(chunk,pad);};function incr32(iv){var len=iv.length;var item;while(len--){item=iv.readUInt8(len);if(item===255){iv.writeUInt8(0,len);}else{item++;iv.writeUInt8(item,len);break;}}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 77 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var aes=__webpack_require__(66);var Transform=__webpack_require__(67);var inherits=__webpack_require__(10);var modes=__webpack_require__(68);var StreamCipher=__webpack_require__(70);var ebtk=__webpack_require__(69);inherits(Decipher,Transform);function Decipher(mode,key,iv){if(!(this instanceof Decipher)){return new Decipher(mode,key,iv);}Transform.call(this);this._cache=new Splitter();this._last=void 0;this._cipher=new aes.AES(key);this._prev=new Buffer(iv.length);iv.copy(this._prev);this._mode=mode;}Decipher.prototype._transform=function(data,_,next){this._cache.add(data);var chunk;var thing;while(chunk=this._cache.get()){thing=this._mode.decrypt(this,chunk);this.push(thing);}next();};Decipher.prototype._flush=function(next){var chunk=this._cache.flush();if(!chunk){return next;}this.push(unpad(this._mode.decrypt(this,chunk)));next();};function Splitter(){if(!(this instanceof Splitter)){return new Splitter();}this.cache=new Buffer('');}Splitter.prototype.add=function(data){this.cache=Buffer.concat([this.cache,data]);};Splitter.prototype.get=function(){if(this.cache.length>16){var out=this.cache.slice(0,16);this.cache=this.cache.slice(16);return out;}return null;};Splitter.prototype.flush=function(){if(this.cache.length){return this.cache;}};function unpad(last){var padded=last[15];if(padded===16){return;}return last.slice(0,16-padded);}var modelist={ECB:__webpack_require__(71),CBC:__webpack_require__(72),CFB:__webpack_require__(74),OFB:__webpack_require__(75),CTR:__webpack_require__(76)};module.exports=function(crypto){function createDecipheriv(suite,password,iv){var config=modes[suite];if(!config){throw new TypeError('invalid suite type');}if(typeof iv==='string'){iv=new Buffer(iv);}if(typeof password==='string'){password=new Buffer(password);}if(password.length!==config.key/8){throw new TypeError('invalid key length '+password.length);}if(iv.length!==config.iv){throw new TypeError('invalid iv length '+iv.length);}if(config.type==='stream'){return new StreamCipher(modelist[config.mode],password,iv,true);}return new Decipher(modelist[config.mode],password,iv);}function createDecipher(suite,password){var config=modes[suite];if(!config){throw new TypeError('invalid suite type');}var keys=ebtk(crypto,password,config.key,config.iv);return createDecipheriv(suite,keys.key,keys.iv);}return{createDecipher:createDecipher,createDecipheriv:createDecipheriv};};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 78 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var XHR=__webpack_require__(79);var JSONP=__webpack_require__(118);/**
	 * Export transports.
	 */module.exports=exports={polling:polling,websocket:__webpack_require__(119)};/**
	 * Export upgrades map.
	 */exports.polling.upgradesTo=['websocket'];/**
	 * Polling polymorphic constructor.
	 *
	 * @api private
	 */function polling(req){if('string'===typeof req._query.j){return new JSONP(req);}else{return new XHR(req);}}/***/},/* 79 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var Polling=__webpack_require__(80);var util=__webpack_require__(53);/**
	 * Module exports.
	 */module.exports=XHR;/**
	 * Ajax polling transport.
	 *
	 * @api public
	 */function XHR(req){Polling.call(this,req);}/**
	 * Inherits from Polling.
	 */util.inherits(XHR,Polling);/**
	 * Overrides `onRequest` to handle `OPTIONS`..
	 *
	 * @param {http.IncomingMessage}
	 * @api private
	 */XHR.prototype.onRequest=function(req){if('OPTIONS'===req.method){var res=req.res;var headers=this.headers(req);headers['Access-Control-Allow-Headers']='Content-Type';res.writeHead(200,headers);res.end();}else{Polling.prototype.onRequest.call(this,req);}};/**
	 * Returns headers for a response.
	 *
	 * @param {http.IncomingMessage} request
	 * @param {Object} extra headers
	 * @api private
	 */XHR.prototype.headers=function(req,headers){headers=headers||{};if(req.headers.origin){headers['Access-Control-Allow-Credentials']='true';headers['Access-Control-Allow-Origin']=req.headers.origin;}else{headers['Access-Control-Allow-Origin']='*';}return Polling.prototype.headers.call(this,req,headers);};/***/},/* 80 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/**
	 * Module requirements.
	 */var Transport=__webpack_require__(81);var parser=__webpack_require__(82);var zlib=__webpack_require__(94);var accepts=__webpack_require__(108);var util=__webpack_require__(53);var debug=__webpack_require__(91)('engine:polling');var compressionMethods={gzip:zlib.createGzip,deflate:zlib.createDeflate};/**
	 * Exports the constructor.
	 */module.exports=Polling;/**
	 * HTTP polling constructor.
	 *
	 * @api public.
	 */function Polling(req){Transport.call(this,req);this.closeTimeout=30*1000;this.maxHttpBufferSize=null;this.httpCompression=null;}/**
	 * Inherits from Transport.
	 *
	 * @api public.
	 */util.inherits(Polling,Transport);/**
	 * Transport name
	 *
	 * @api public
	 */Polling.prototype.name='polling';/**
	 * Overrides onRequest.
	 *
	 * @param {http.IncomingMessage}
	 * @api private
	 */Polling.prototype.onRequest=function(req){var res=req.res;if('GET'===req.method){this.onPollRequest(req,res);}else if('POST'===req.method){this.onDataRequest(req,res);}else{res.writeHead(500);res.end();}};/**
	 * The client sends a request awaiting for us to send data.
	 *
	 * @api private
	 */Polling.prototype.onPollRequest=function(req,res){if(this.req){debug('request overlap');// assert: this.res, '.req and .res should be (un)set together'
this.onError('overlap from client');res.writeHead(500);res.end();return;}debug('setting request');this.req=req;this.res=res;var self=this;function onClose(){self.onError('poll connection closed prematurely');}function cleanup(){req.removeListener('close',onClose);self.req=self.res=null;}req.cleanup=cleanup;req.on('close',onClose);this.writable=true;this.emit('drain');// if we're still writable but had a pending close, trigger an empty send
if(this.writable&&this.shouldClose){debug('triggering empty send to append close packet');this.send([{type:'noop'}]);}};/**
	 * The client sends a request with data.
	 *
	 * @api private
	 */Polling.prototype.onDataRequest=function(req,res){if(this.dataReq){// assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'
this.onError('data request overlap from client');res.writeHead(500);res.end();return;}var isBinary='application/octet-stream'===req.headers['content-type'];this.dataReq=req;this.dataRes=res;var chunks=isBinary?new Buffer(0):'';var self=this;function cleanup(){chunks=isBinary?new Buffer(0):'';req.removeListener('data',onData);req.removeListener('end',onEnd);req.removeListener('close',onClose);self.dataReq=self.dataRes=null;}function onClose(){cleanup();self.onError('data request connection closed prematurely');}function onData(data){var contentLength;if(typeof data==='string'){chunks+=data;contentLength=Buffer.byteLength(chunks);}else{chunks=Buffer.concat([chunks,data]);contentLength=chunks.length;}if(contentLength>self.maxHttpBufferSize){chunks='';req.connection.destroy();}}function onEnd(){self.onData(chunks);var headers={// text/html is required instead of text/plain to avoid an
// unwanted download dialog on certain user-agents (GH-43)
'Content-Type':'text/html','Content-Length':2};res.writeHead(200,self.headers(req,headers));res.end('ok');cleanup();}req.on('close',onClose);if(!isBinary)req.setEncoding('utf8');req.on('data',onData);req.on('end',onEnd);};/**
	 * Processes the incoming data payload.
	 *
	 * @param {String} encoded payload
	 * @api private
	 */Polling.prototype.onData=function(data){debug('received "%s"',data);var self=this;var callback=function callback(packet){if('close'===packet.type){debug('got xhr close packet');self.onClose();return false;}self.onPacket(packet);};parser.decodePayload(data,callback);};/**
	 * Overrides onClose.
	 *
	 * @api private
	 */Polling.prototype.onClose=function(){if(this.writable){// close pending poll request
this.send([{type:'noop'}]);}Transport.prototype.onClose.call(this);};/**
	 * Writes a packet payload.
	 *
	 * @param {Object} packet
	 * @api private
	 */Polling.prototype.send=function(packets){this.writable=false;if(this.shouldClose){debug('appending close packet to payload');packets.push({type:'close'});this.shouldClose();this.shouldClose=null;}var self=this;parser.encodePayload(packets,this.supportsBinary,function(data){var compress=packets.some(function(packet){return packet.options&&packet.options.compress;});self.write(data,{compress:compress});});};/**
	 * Writes data as response to poll request.
	 *
	 * @param {String} data
	 * @param {Object} options
	 * @api private
	 */Polling.prototype.write=function(data,options){debug('writing "%s"',data);var self=this;this.doWrite(data,options,function(){self.req.cleanup();});};/**
	 * Performs the write.
	 *
	 * @api private
	 */Polling.prototype.doWrite=function(data,options,callback){var self=this;// explicit UTF-8 is required for pages not served under utf
var isString=typeof data==='string';var contentType=isString?'text/plain; charset=UTF-8':'application/octet-stream';var headers={'Content-Type':contentType};if(!this.httpCompression||!options.compress){respond(data);return;}var len=isString?Buffer.byteLength(data):data.length;if(len<this.httpCompression.threshold){respond(data);return;}var encoding=accepts(this.req).encodings(['gzip','deflate']);if(!encoding){respond(data);return;}this.compress(data,encoding,function(err,data){if(err){self.res.writeHead(500);self.res.end();callback(err);return;}headers['Content-Encoding']=encoding;respond(data);});function respond(data){headers['Content-Length']='string'===typeof data?Buffer.byteLength(data):data.length;self.res.writeHead(200,self.headers(self.req,headers));self.res.end(data);callback();}};/**
	 * Comparesses data.
	 *
	 * @api private
	 */Polling.prototype.compress=function(data,encoding,callback){debug('compressing');var buffers=[];var nread=0;compressionMethods[encoding](this.httpCompression).on('error',callback).on('data',function(chunk){buffers.push(chunk);nread+=chunk.length;}).on('end',function(){callback(null,Buffer.concat(buffers,nread));}).end(data);};/**
	 * Closes the transport.
	 *
	 * @api private
	 */Polling.prototype.doClose=function(fn){debug('closing');var self=this;var closeTimeoutTimer;if(this.dataReq){debug('aborting ongoing data request');this.dataReq.destroy();}if(this.writable){debug('transport writable - closing right away');this.send([{type:'close'}]);onClose();}else if(this.discarded){debug('transport discarded - closing right away');onClose();}else{debug('transport not writable - buffering orderly close');this.shouldClose=onClose;closeTimeoutTimer=setTimeout(onClose,this.closeTimeout);}function onClose(){clearTimeout(closeTimeoutTimer);fn();self.onClose();}};/**
	 * Returns headers for a response.
	 *
	 * @param {http.IncomingMessage} request
	 * @param {Object} extra headers
	 * @api private
	 */Polling.prototype.headers=function(req,headers){headers=headers||{};// prevent XSS warnings on IE
// https://github.com/LearnBoost/socket.io/pull/1333
var ua=req.headers['user-agent'];if(ua&&(~ua.indexOf(';MSIE')||~ua.indexOf('Trident/'))){headers['X-XSS-Protection']='0';}this.emit('headers',headers);return headers;};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 81 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var EventEmitter=__webpack_require__(14).EventEmitter;var parser=__webpack_require__(82);var util=__webpack_require__(53);var debug=__webpack_require__(91)('engine:transport');/**
	 * Expose the constructor.
	 */module.exports=Transport;/**
	 * Noop function.
	 *
	 * @api private
	 */function noop(){}/**
	 * Transport constructor.
	 *
	 * @param {http.IncomingMessage} request
	 * @api public
	 */function Transport(req){this.readyState='open';this.discarded=false;}/**
	 * Inherits from EventEmitter.
	 */util.inherits(Transport,EventEmitter);/**
	 * Flags the transport as discarded.
	 *
	 * @api private
	 */Transport.prototype.discard=function(){this.discarded=true;};/**
	 * Called with an incoming HTTP request.
	 *
	 * @param {http.IncomingMessage} request
	 * @api private
	 */Transport.prototype.onRequest=function(req){debug('setting request');this.req=req;};/**
	 * Closes the transport.
	 *
	 * @api private
	 */Transport.prototype.close=function(fn){if('closed'===this.readyState||'closing'===this.readyState)return;this.readyState='closing';this.doClose(fn||noop);};/**
	 * Called with a transport error.
	 *
	 * @param {String} message error
	 * @param {Object} error description
	 * @api private
	 */Transport.prototype.onError=function(msg,desc){if(this.listeners('error').length){var err=new Error(msg);err.type='TransportError';err.description=desc;this.emit('error',err);}else{debug('ignored transport error %s (%s)',msg,desc);}};/**
	 * Called with parsed out a packets from the data stream.
	 *
	 * @param {Object} packet
	 * @api private
	 */Transport.prototype.onPacket=function(packet){this.emit('packet',packet);};/**
	 * Called with the encoded packet data.
	 *
	 * @param {String} data
	 * @api private
	 */Transport.prototype.onData=function(data){this.onPacket(parser.decodePacket(data));};/**
	 * Called upon transport close.
	 *
	 * @api private
	 */Transport.prototype.onClose=function(){this.readyState='closed';this.emit('close');};/***/},/* 82 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module dependencies.
	 */var keys=__webpack_require__(83);var hasBinary=__webpack_require__(84);var sliceBuffer=__webpack_require__(86);var after=__webpack_require__(87);var utf8=__webpack_require__(88);var base64encoder;if(global&&global.ArrayBuffer){base64encoder=__webpack_require__(89);}/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */var isAndroid=typeof navigator!=='undefined'&&/Android/i.test(navigator.userAgent);/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */var isPhantomJS=typeof navigator!=='undefined'&&/PhantomJS/i.test(navigator.userAgent);/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */var dontSendBlobs=isAndroid||isPhantomJS;/**
	 * Current protocol version.
	 */exports.protocol=3;/**
	 * Packet types.
	 */var packets=exports.packets={open:0// non-ws
,close:1// non-ws
,ping:2,pong:3,message:4,upgrade:5,noop:6};var packetslist=keys(packets);/**
	 * Premade error packet.
	 */var err={type:'error',data:'parser error'};/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */var Blob=__webpack_require__(90);/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */exports.encodePacket=function(packet,supportsBinary,utf8encode,callback){if('function'==typeof supportsBinary){callback=supportsBinary;supportsBinary=false;}if('function'==typeof utf8encode){callback=utf8encode;utf8encode=null;}var data=packet.data===undefined?undefined:packet.data.buffer||packet.data;if(global.ArrayBuffer&&data instanceof ArrayBuffer){return encodeArrayBuffer(packet,supportsBinary,callback);}else if(Blob&&data instanceof global.Blob){return encodeBlob(packet,supportsBinary,callback);}// might be an object with { base64: true, data: dataAsBase64String }
if(data&&data.base64){return encodeBase64Object(packet,callback);}// Sending data as a utf-8 string
var encoded=packets[packet.type];// data fragment is optional
if(undefined!==packet.data){encoded+=utf8encode?utf8.encode(String(packet.data)):String(packet.data);}return callback(''+encoded);};function encodeBase64Object(packet,callback){// packet data is an object { base64: true, data: dataAsBase64String }
var message='b'+exports.packets[packet.type]+packet.data.data;return callback(message);}/**
	 * Encode packet helpers for binary types
	 */function encodeArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback);}var data=packet.data;var contentArray=new Uint8Array(data);var resultBuffer=new Uint8Array(1+data.byteLength);resultBuffer[0]=packets[packet.type];for(var i=0;i<contentArray.length;i++){resultBuffer[i+1]=contentArray[i];}return callback(resultBuffer.buffer);}function encodeBlobAsArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback);}var fr=new FileReader();fr.onload=function(){packet.data=fr.result;exports.encodePacket(packet,supportsBinary,true,callback);};return fr.readAsArrayBuffer(packet.data);}function encodeBlob(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback);}if(dontSendBlobs){return encodeBlobAsArrayBuffer(packet,supportsBinary,callback);}var length=new Uint8Array(1);length[0]=packets[packet.type];var blob=new Blob([length.buffer,packet.data]);return callback(blob);}/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */exports.encodeBase64Packet=function(packet,callback){var message='b'+exports.packets[packet.type];if(Blob&&packet.data instanceof global.Blob){var fr=new FileReader();fr.onload=function(){var b64=fr.result.split(',')[1];callback(message+b64);};return fr.readAsDataURL(packet.data);}var b64data;try{b64data=String.fromCharCode.apply(null,new Uint8Array(packet.data));}catch(e){// iPhone Safari doesn't let you apply with typed arrays
var typed=new Uint8Array(packet.data);var basic=new Array(typed.length);for(var i=0;i<typed.length;i++){basic[i]=typed[i];}b64data=String.fromCharCode.apply(null,basic);}message+=global.btoa(b64data);return callback(message);};/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */exports.decodePacket=function(data,binaryType,utf8decode){if(data===undefined){return err;}// String data
if(typeof data=='string'){if(data.charAt(0)=='b'){return exports.decodeBase64Packet(data.substr(1),binaryType);}if(utf8decode){data=tryDecode(data);if(data===false){return err;}}var type=data.charAt(0);if(Number(type)!=type||!packetslist[type]){return err;}if(data.length>1){return{type:packetslist[type],data:data.substring(1)};}else{return{type:packetslist[type]};}}var asArray=new Uint8Array(data);var type=asArray[0];var rest=sliceBuffer(data,1);if(Blob&&binaryType==='blob'){rest=new Blob([rest]);}return{type:packetslist[type],data:rest};};function tryDecode(data){try{data=utf8.decode(data);}catch(e){return false;}return data;}/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */exports.decodeBase64Packet=function(msg,binaryType){var type=packetslist[msg.charAt(0)];if(!base64encoder){return{type:type,data:{base64:true,data:msg.substr(1)}};}var data=base64encoder.decode(msg.substr(1));if(binaryType==='blob'&&Blob){data=new Blob([data]);}return{type:type,data:data};};/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */exports.encodePayload=function(packets,supportsBinary,callback){if(typeof supportsBinary=='function'){callback=supportsBinary;supportsBinary=null;}var isBinary=hasBinary(packets);if(supportsBinary&&isBinary){if(Blob&&!dontSendBlobs){return exports.encodePayloadAsBlob(packets,callback);}return exports.encodePayloadAsArrayBuffer(packets,callback);}if(!packets.length){return callback('0:');}function setLengthHeader(message){return message.length+':'+message;}function encodeOne(packet,doneCallback){exports.encodePacket(packet,!isBinary?false:supportsBinary,true,function(message){doneCallback(null,setLengthHeader(message));});}map(packets,encodeOne,function(err,results){return callback(results.join(''));});};/**
	 * Async array map using after
	 */function map(ary,each,done){var result=new Array(ary.length);var next=after(ary.length,done);var eachWithIndex=function eachWithIndex(i,el,cb){each(el,function(error,msg){result[i]=msg;cb(error,result);});};for(var i=0;i<ary.length;i++){eachWithIndex(i,ary[i],next);}}/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */exports.decodePayload=function(data,binaryType,callback){if(typeof data!='string'){return exports.decodePayloadAsBinary(data,binaryType,callback);}if(typeof binaryType==='function'){callback=binaryType;binaryType=null;}var packet;if(data==''){// parser error - ignoring payload
return callback(err,0,1);}var length='',n,msg;for(var i=0,l=data.length;i<l;i++){var chr=data.charAt(i);if(':'!=chr){length+=chr;}else{if(''==length||length!=(n=Number(length))){// parser error - ignoring payload
return callback(err,0,1);}msg=data.substr(i+1,n);if(length!=msg.length){// parser error - ignoring payload
return callback(err,0,1);}if(msg.length){packet=exports.decodePacket(msg,binaryType,true);if(err.type==packet.type&&err.data==packet.data){// parser error in individual packet - ignoring payload
return callback(err,0,1);}var ret=callback(packet,i+n,l);if(false===ret)return;}// advance cursor
i+=n;length='';}}if(length!=''){// parser error - ignoring payload
return callback(err,0,1);}};/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */exports.encodePayloadAsArrayBuffer=function(packets,callback){if(!packets.length){return callback(new ArrayBuffer(0));}function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(data){return doneCallback(null,data);});}map(packets,encodeOne,function(err,encodedPackets){var totalLength=encodedPackets.reduce(function(acc,p){var len;if(typeof p==='string'){len=p.length;}else{len=p.byteLength;}return acc+len.toString().length+len+2;// string/binary identifier + separator = 2
},0);var resultArray=new Uint8Array(totalLength);var bufferIndex=0;encodedPackets.forEach(function(p){var isString=typeof p==='string';var ab=p;if(isString){var view=new Uint8Array(p.length);for(var i=0;i<p.length;i++){view[i]=p.charCodeAt(i);}ab=view.buffer;}if(isString){// not true binary
resultArray[bufferIndex++]=0;}else{// true binary
resultArray[bufferIndex++]=1;}var lenStr=ab.byteLength.toString();for(var i=0;i<lenStr.length;i++){resultArray[bufferIndex++]=parseInt(lenStr[i]);}resultArray[bufferIndex++]=255;var view=new Uint8Array(ab);for(var i=0;i<view.length;i++){resultArray[bufferIndex++]=view[i];}});return callback(resultArray.buffer);});};/**
	 * Encode as Blob
	 */exports.encodePayloadAsBlob=function(packets,callback){function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(encoded){var binaryIdentifier=new Uint8Array(1);binaryIdentifier[0]=1;if(typeof encoded==='string'){var view=new Uint8Array(encoded.length);for(var i=0;i<encoded.length;i++){view[i]=encoded.charCodeAt(i);}encoded=view.buffer;binaryIdentifier[0]=0;}var len=encoded instanceof ArrayBuffer?encoded.byteLength:encoded.size;var lenStr=len.toString();var lengthAry=new Uint8Array(lenStr.length+1);for(var i=0;i<lenStr.length;i++){lengthAry[i]=parseInt(lenStr[i]);}lengthAry[lenStr.length]=255;if(Blob){var blob=new Blob([binaryIdentifier.buffer,lengthAry.buffer,encoded]);doneCallback(null,blob);}});}map(packets,encodeOne,function(err,results){return callback(new Blob(results));});};/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */exports.decodePayloadAsBinary=function(data,binaryType,callback){if(typeof binaryType==='function'){callback=binaryType;binaryType=null;}var bufferTail=data;var buffers=[];var numberTooLong=false;while(bufferTail.byteLength>0){var tailArray=new Uint8Array(bufferTail);var isString=tailArray[0]===0;var msgLength='';for(var i=1;;i++){if(tailArray[i]==255)break;if(msgLength.length>310){numberTooLong=true;break;}msgLength+=tailArray[i];}if(numberTooLong)return callback(err,0,1);bufferTail=sliceBuffer(bufferTail,2+msgLength.length);msgLength=parseInt(msgLength);var msg=sliceBuffer(bufferTail,0,msgLength);if(isString){try{msg=String.fromCharCode.apply(null,new Uint8Array(msg));}catch(e){// iPhone Safari doesn't let you apply to typed arrays
var typed=new Uint8Array(msg);msg='';for(var i=0;i<typed.length;i++){msg+=String.fromCharCode(typed[i]);}}}buffers.push(msg);bufferTail=sliceBuffer(bufferTail,msgLength);}var total=buffers.length;buffers.forEach(function(buffer,i){callback(exports.decodePacket(buffer,binaryType,true),i,total);});};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 83 *//***/function(module,exports){/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */module.exports=Object.keys||function keys(obj){var arr=[];var has=Object.prototype.hasOwnProperty;for(var i in obj){if(has.call(obj,i)){arr.push(i);}}return arr;};/***/},/* 84 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/*
	 * Module requirements.
	 */var isArray=__webpack_require__(85);/**
	 * Module exports.
	 */module.exports=hasBinary;/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true;}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true;}}}else if(obj&&'object'==(typeof obj==="undefined"?"undefined":_typeof(obj))){// see: https://github.com/Automattic/has-binary/pull/4
if(obj.toJSON&&'function'==typeof obj.toJSON){obj=obj.toJSON();}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true;}}}return false;}return _hasBinary(data);}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 85 *//***/function(module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)=='[object Array]';};/***/},/* 86 *//***/function(module,exports){/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */module.exports=function(arraybuffer,start,end){var bytes=arraybuffer.byteLength;start=start||0;end=end||bytes;if(arraybuffer.slice){return arraybuffer.slice(start,end);}if(start<0){start+=bytes;}if(end<0){end+=bytes;}if(end>bytes){end=bytes;}if(start>=bytes||start>=end||bytes===0){return new ArrayBuffer(0);}var abv=new Uint8Array(arraybuffer);var result=new Uint8Array(end-start);for(var i=start,ii=0;i<end;i++,ii++){result[ii]=abv[i];}return result.buffer;};/***/},/* 87 *//***/function(module,exports){module.exports=after;function after(count,callback,err_cb){var bail=false;err_cb=err_cb||noop;proxy.count=count;return count===0?callback():proxy;function proxy(err,result){if(proxy.count<=0){throw new Error('after called too many times');}--proxy.count;// after first error, rest are passed to err_cb
if(err){bail=true;callback(err);// future error callbacks will go to error handler
callback=err_cb;}else if(proxy.count===0&&!bail){callback(null,result);}}}function noop(){}/***/},/* 88 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module,global){/*! https://mths.be/wtf8 v1.0.0 by @mathias */;(function(root){// Detect free variables `exports`
var freeExports=(typeof exports==="undefined"?"undefined":_typeof(exports))=='object'&&exports;// Detect free variable `module`
var freeModule=(typeof module==="undefined"?"undefined":_typeof(module))=='object'&&module&&module.exports==freeExports&&module;// Detect free variable `global`, from Node.js or Browserified code,
// and use it as `root`
var freeGlobal=(typeof global==="undefined"?"undefined":_typeof(global))=='object'&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal){root=freeGlobal;}/*--------------------------------------------------------------------------*/var stringFromCharCode=String.fromCharCode;// Taken from https://mths.be/punycode
function ucs2decode(string){var output=[];var counter=0;var length=string.length;var value;var extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=0xD800&&value<=0xDBFF&&counter<length){// high surrogate, and there is a next character
extra=string.charCodeAt(counter++);if((extra&0xFC00)==0xDC00){// low surrogate
output.push(((value&0x3FF)<<10)+(extra&0x3FF)+0x10000);}else{// unmatched surrogate; only append this code unit, in case the next
// code unit is the high surrogate of a surrogate pair
output.push(value);counter--;}}else{output.push(value);}}return output;}// Taken from https://mths.be/punycode
function ucs2encode(array){var length=array.length;var index=-1;var value;var output='';while(++index<length){value=array[index];if(value>0xFFFF){value-=0x10000;output+=stringFromCharCode(value>>>10&0x3FF|0xD800);value=0xDC00|value&0x3FF;}output+=stringFromCharCode(value);}return output;}/*--------------------------------------------------------------------------*/function createByte(codePoint,shift){return stringFromCharCode(codePoint>>shift&0x3F|0x80);}function encodeCodePoint(codePoint){if((codePoint&0xFFFFFF80)==0){// 1-byte sequence
return stringFromCharCode(codePoint);}var symbol='';if((codePoint&0xFFFFF800)==0){// 2-byte sequence
symbol=stringFromCharCode(codePoint>>6&0x1F|0xC0);}else if((codePoint&0xFFFF0000)==0){// 3-byte sequence
symbol=stringFromCharCode(codePoint>>12&0x0F|0xE0);symbol+=createByte(codePoint,6);}else if((codePoint&0xFFE00000)==0){// 4-byte sequence
symbol=stringFromCharCode(codePoint>>18&0x07|0xF0);symbol+=createByte(codePoint,12);symbol+=createByte(codePoint,6);}symbol+=stringFromCharCode(codePoint&0x3F|0x80);return symbol;}function wtf8encode(string){var codePoints=ucs2decode(string);var length=codePoints.length;var index=-1;var codePoint;var byteString='';while(++index<length){codePoint=codePoints[index];byteString+=encodeCodePoint(codePoint);}return byteString;}/*--------------------------------------------------------------------------*/function readContinuationByte(){if(byteIndex>=byteCount){throw Error('Invalid byte index');}var continuationByte=byteArray[byteIndex]&0xFF;byteIndex++;if((continuationByte&0xC0)==0x80){return continuationByte&0x3F;}// If we end up here, it’s not a continuation byte.
throw Error('Invalid continuation byte');}function decodeSymbol(){var byte1;var byte2;var byte3;var byte4;var codePoint;if(byteIndex>byteCount){throw Error('Invalid byte index');}if(byteIndex==byteCount){return false;}// Read the first byte.
byte1=byteArray[byteIndex]&0xFF;byteIndex++;// 1-byte sequence (no continuation bytes)
if((byte1&0x80)==0){return byte1;}// 2-byte sequence
if((byte1&0xE0)==0xC0){var byte2=readContinuationByte();codePoint=(byte1&0x1F)<<6|byte2;if(codePoint>=0x80){return codePoint;}else{throw Error('Invalid continuation byte');}}// 3-byte sequence (may include unpaired surrogates)
if((byte1&0xF0)==0xE0){byte2=readContinuationByte();byte3=readContinuationByte();codePoint=(byte1&0x0F)<<12|byte2<<6|byte3;if(codePoint>=0x0800){return codePoint;}else{throw Error('Invalid continuation byte');}}// 4-byte sequence
if((byte1&0xF8)==0xF0){byte2=readContinuationByte();byte3=readContinuationByte();byte4=readContinuationByte();codePoint=(byte1&0x0F)<<0x12|byte2<<0x0C|byte3<<0x06|byte4;if(codePoint>=0x010000&&codePoint<=0x10FFFF){return codePoint;}}throw Error('Invalid WTF-8 detected');}var byteArray;var byteCount;var byteIndex;function wtf8decode(byteString){byteArray=ucs2decode(byteString);byteCount=byteArray.length;byteIndex=0;var codePoints=[];var tmp;while((tmp=decodeSymbol())!==false){codePoints.push(tmp);}return ucs2encode(codePoints);}/*--------------------------------------------------------------------------*/var wtf8={'version':'1.0.0','encode':wtf8encode,'decode':wtf8decode};// Some AMD build optimizers, like r.js, check for specific condition patterns
// like the following:
if(true){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return wtf8;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else if(freeExports&&!freeExports.nodeType){if(freeModule){// in Node.js or RingoJS v0.8.0+
freeModule.exports=wtf8;}else{// in Narwhal or RingoJS v0.7.0-
var object={};var hasOwnProperty=object.hasOwnProperty;for(var key in wtf8){hasOwnProperty.call(wtf8,key)&&(freeExports[key]=wtf8[key]);}}}else{// in Rhino or a web browser
root.wtf8=wtf8;}})(this);/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(38)(module),function(){return this;}());/***/},/* 89 *//***/function(module,exports){/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */(function(){"use strict";var chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";// Use a lookup table to find the index.
var lookup=new Uint8Array(256);for(var i=0;i<chars.length;i++){lookup[chars.charCodeAt(i)]=i;}exports.encode=function(arraybuffer){var bytes=new Uint8Array(arraybuffer),i,len=bytes.length,base64="";for(i=0;i<len;i+=3){base64+=chars[bytes[i]>>2];base64+=chars[(bytes[i]&3)<<4|bytes[i+1]>>4];base64+=chars[(bytes[i+1]&15)<<2|bytes[i+2]>>6];base64+=chars[bytes[i+2]&63];}if(len%3===2){base64=base64.substring(0,base64.length-1)+"=";}else if(len%3===1){base64=base64.substring(0,base64.length-2)+"==";}return base64;};exports.decode=function(base64){var bufferLength=base64.length*0.75,len=base64.length,i,p=0,encoded1,encoded2,encoded3,encoded4;if(base64[base64.length-1]==="="){bufferLength--;if(base64[base64.length-2]==="="){bufferLength--;}}var arraybuffer=new ArrayBuffer(bufferLength),bytes=new Uint8Array(arraybuffer);for(i=0;i<len;i+=4){encoded1=lookup[base64.charCodeAt(i)];encoded2=lookup[base64.charCodeAt(i+1)];encoded3=lookup[base64.charCodeAt(i+2)];encoded4=lookup[base64.charCodeAt(i+3)];bytes[p++]=encoded1<<2|encoded2>>4;bytes[p++]=(encoded2&15)<<4|encoded3>>2;bytes[p++]=(encoded3&3)<<6|encoded4&63;}return arraybuffer;};})();/***/},/* 90 *//***/function(module,exports){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Create a blob builder even when vendor prefixes exist
	 */var BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder||global.MSBlobBuilder||global.MozBlobBuilder;/**
	 * Check if Blob constructor is supported
	 */var blobSupported=function(){try{var a=new Blob(['hi']);return a.size===2;}catch(e){return false;}}();/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */var blobSupportsArrayBufferView=blobSupported&&function(){try{var b=new Blob([new Uint8Array([1,2])]);return b.size===2;}catch(e){return false;}}();/**
	 * Check if BlobBuilder is supported
	 */var blobBuilderSupported=BlobBuilder&&BlobBuilder.prototype.append&&BlobBuilder.prototype.getBlob;/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */function mapArrayBufferViews(ary){for(var i=0;i<ary.length;i++){var chunk=ary[i];if(chunk.buffer instanceof ArrayBuffer){var buf=chunk.buffer;// if this is a subarray, make a copy so we only
// include the subarray region from the underlying buffer
if(chunk.byteLength!==buf.byteLength){var copy=new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf,chunk.byteOffset,chunk.byteLength));buf=copy.buffer;}ary[i]=buf;}}}function BlobBuilderConstructor(ary,options){options=options||{};var bb=new BlobBuilder();mapArrayBufferViews(ary);for(var i=0;i<ary.length;i++){bb.append(ary[i]);}return options.type?bb.getBlob(options.type):bb.getBlob();};function BlobConstructor(ary,options){mapArrayBufferViews(ary);return new Blob(ary,options||{});};module.exports=function(){if(blobSupported){return blobSupportsArrayBufferView?global.Blob:BlobConstructor;}else if(blobBuilderSupported){return BlobBuilderConstructor;}else{return undefined;}}();/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 91 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=__webpack_require__(92);exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage='undefined'!=typeof chrome&&'undefined'!=typeof chrome.storage?chrome.storage.local:localstorage();/**
	 * Colors.
	 */exports.colors=['lightseagreen','forestgreen','goldenrod','dodgerblue','darkorchid','crimson'];/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */function useColors(){// is webkit? http://stackoverflow.com/a/16459606/376773
// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
return typeof document!=='undefined'&&'WebkitAppearance'in document.documentElement.style||// is firebug? http://stackoverflow.com/a/398120/376773
window.console&&(console.firebug||console.exception&&console.table)||// is firefox >= v31?
// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31;}/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */exports.formatters.j=function(v){try{return JSON.stringify(v);}catch(err){return'[UnexpectedJSONParseError]: '+err.message;}};/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?'%c':'')+this.namespace+(useColors?' %c':' ')+args[0]+(useColors?'%c ':' ')+'+'+exports.humanize(this.diff);if(!useColors)return args;var c='color: '+this.color;args=[args[0],c,'color: inherit'].concat(Array.prototype.slice.call(args,1));// the final "%c" is somewhat tricky, because there could be other
// arguments passed either before or after the %c, so we need to
// figure out the correct index to insert the CSS into
var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if('%%'===match)return;index++;if('%c'===match){// we only are interested in the *last* %c
// (the user may have provided their own)
lastC=index;}});args.splice(lastC,0,c);return args;}/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */function log(){// this hackery is required for IE8/9, where
// the `console.log` function doesn't have 'apply'
return'object'===(typeof console==="undefined"?"undefined":_typeof(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments);}/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */function save(namespaces){try{if(null==namespaces){exports.storage.removeItem('debug');}else{exports.storage.debug=namespaces;}}catch(e){}}/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */function load(){var r;try{return exports.storage.debug;}catch(e){}// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
if(typeof process!=='undefined'&&'env'in process){return process.env.DEBUG;}}/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */exports.enable(load());/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */function localstorage(){try{return window.localStorage;}catch(e){}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 92 *//***/function(module,exports,__webpack_require__){/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=debug.debug=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=__webpack_require__(93);/**
	 * The currently active debug mode names, and names to skip.
	 */exports.names=[];exports.skips=[];/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */exports.formatters={};/**
	 * Previously assigned color.
	 */var prevColor=0;/**
	 * Previous log timestamp.
	 */var prevTime;/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */function selectColor(){return exports.colors[prevColor++%exports.colors.length];}/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */function debug(namespace){// define the `disabled` version
function disabled(){}disabled.enabled=false;// define the `enabled` version
function enabled(){var self=enabled;// set `diff` timestamp
var curr=+new Date();var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;// add the `color` if not set
if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i];}args[0]=exports.coerce(args[0]);if('string'!==typeof args[0]){// anything else let's inspect with %o
args=['%o'].concat(args);}// apply any `formatters` transformations
var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){// if we encounter an escaped % then don't increase the array index
if(match==='%%')return match;index++;var formatter=exports.formatters[format];if('function'===typeof formatter){var val=args[index];match=formatter.call(self,val);// now we need to remove `args[index]` since it's inlined in the `format`
args.splice(index,1);index--;}return match;});// apply env-specific formatting
args=exports.formatArgs.apply(self,args);var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args);}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn;}/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */function enable(namespaces){exports.save(namespaces);var split=(namespaces||'').split(/[\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;// ignore empty strings
namespaces=split[i].replace(/[\\^$+?.()|[\]{}]/g,'\\$&').replace(/\*/g,'.*?');if(namespaces[0]==='-'){exports.skips.push(new RegExp('^'+namespaces.substr(1)+'$'));}else{exports.names.push(new RegExp('^'+namespaces+'$'));}}}/**
	 * Disable debug output.
	 *
	 * @api public
	 */function disable(){exports.enable('');}/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false;}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true;}}return false;}/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */function coerce(val){if(val instanceof Error)return val.stack||val.message;return val;}/***/},/* 93 *//***/function(module,exports){/**
	 * Helpers.
	 */var s=1000;var m=s*60;var h=m*60;var d=h*24;var y=d*365.25;/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */module.exports=function(val,options){options=options||{};var type=typeof val==="undefined"?"undefined":_typeof(val);if(type==='string'&&val.length>0){return parse(val);}else if(type==='number'&&isNaN(val)===false){return options.long?fmtLong(val):fmtShort(val);}throw new Error('val is not a non-empty string or a valid number. val='+JSON.stringify(val));};/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */function parse(str){str=String(str);if(str.length>10000){return;}var match=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if(!match){return;}var n=parseFloat(match[1]);var type=(match[2]||'ms').toLowerCase();switch(type){case'years':case'year':case'yrs':case'yr':case'y':return n*y;case'days':case'day':case'd':return n*d;case'hours':case'hour':case'hrs':case'hr':case'h':return n*h;case'minutes':case'minute':case'mins':case'min':case'm':return n*m;case'seconds':case'second':case'secs':case'sec':case's':return n*s;case'milliseconds':case'millisecond':case'msecs':case'msec':case'ms':return n;default:return undefined;}}/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */function fmtShort(ms){if(ms>=d){return Math.round(ms/d)+'d';}if(ms>=h){return Math.round(ms/h)+'h';}if(ms>=m){return Math.round(ms/m)+'m';}if(ms>=s){return Math.round(ms/s)+'s';}return ms+'ms';}/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */function fmtLong(ms){return plural(ms,d,'day')||plural(ms,h,'hour')||plural(ms,m,'minute')||plural(ms,s,'second')||ms+' ms';}/**
	 * Pluralization helper.
	 */function plural(ms,n,name){if(ms<n){return;}if(ms<n*1.5){return Math.floor(ms/n)+' '+name;}return Math.ceil(ms/n)+' '+name+'s';}/***/},/* 94 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer,process){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var Transform=__webpack_require__(29);var binding=__webpack_require__(95);var util=__webpack_require__(53);var assert=__webpack_require__(107).ok;// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS=8;binding.Z_MAX_WINDOWBITS=15;binding.Z_DEFAULT_WINDOWBITS=15;// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK=64;binding.Z_MAX_CHUNK=Infinity;binding.Z_DEFAULT_CHUNK=16*1024;binding.Z_MIN_MEMLEVEL=1;binding.Z_MAX_MEMLEVEL=9;binding.Z_DEFAULT_MEMLEVEL=8;binding.Z_MIN_LEVEL=-1;binding.Z_MAX_LEVEL=9;binding.Z_DEFAULT_LEVEL=binding.Z_DEFAULT_COMPRESSION;// expose all the zlib constants
Object.keys(binding).forEach(function(k){if(k.match(/^Z/))exports[k]=binding[k];});// translation table for return codes.
exports.codes={Z_OK:binding.Z_OK,Z_STREAM_END:binding.Z_STREAM_END,Z_NEED_DICT:binding.Z_NEED_DICT,Z_ERRNO:binding.Z_ERRNO,Z_STREAM_ERROR:binding.Z_STREAM_ERROR,Z_DATA_ERROR:binding.Z_DATA_ERROR,Z_MEM_ERROR:binding.Z_MEM_ERROR,Z_BUF_ERROR:binding.Z_BUF_ERROR,Z_VERSION_ERROR:binding.Z_VERSION_ERROR};Object.keys(exports.codes).forEach(function(k){exports.codes[exports.codes[k]]=k;});exports.Deflate=Deflate;exports.Inflate=Inflate;exports.Gzip=Gzip;exports.Gunzip=Gunzip;exports.DeflateRaw=DeflateRaw;exports.InflateRaw=InflateRaw;exports.Unzip=Unzip;exports.createDeflate=function(o){return new Deflate(o);};exports.createInflate=function(o){return new Inflate(o);};exports.createDeflateRaw=function(o){return new DeflateRaw(o);};exports.createInflateRaw=function(o){return new InflateRaw(o);};exports.createGzip=function(o){return new Gzip(o);};exports.createGunzip=function(o){return new Gunzip(o);};exports.createUnzip=function(o){return new Unzip(o);};// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Deflate(opts),buffer,callback);};exports.deflateSync=function(buffer,opts){return zlibBufferSync(new Deflate(opts),buffer);};exports.gzip=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Gzip(opts),buffer,callback);};exports.gzipSync=function(buffer,opts){return zlibBufferSync(new Gzip(opts),buffer);};exports.deflateRaw=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new DeflateRaw(opts),buffer,callback);};exports.deflateRawSync=function(buffer,opts){return zlibBufferSync(new DeflateRaw(opts),buffer);};exports.unzip=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Unzip(opts),buffer,callback);};exports.unzipSync=function(buffer,opts){return zlibBufferSync(new Unzip(opts),buffer);};exports.inflate=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Inflate(opts),buffer,callback);};exports.inflateSync=function(buffer,opts){return zlibBufferSync(new Inflate(opts),buffer);};exports.gunzip=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new Gunzip(opts),buffer,callback);};exports.gunzipSync=function(buffer,opts){return zlibBufferSync(new Gunzip(opts),buffer);};exports.inflateRaw=function(buffer,opts,callback){if(typeof opts==='function'){callback=opts;opts={};}return zlibBuffer(new InflateRaw(opts),buffer,callback);};exports.inflateRawSync=function(buffer,opts){return zlibBufferSync(new InflateRaw(opts),buffer);};function zlibBuffer(engine,buffer,callback){var buffers=[];var nread=0;engine.on('error',onError);engine.on('end',onEnd);engine.end(buffer);flow();function flow(){var chunk;while(null!==(chunk=engine.read())){buffers.push(chunk);nread+=chunk.length;}engine.once('readable',flow);}function onError(err){engine.removeListener('end',onEnd);engine.removeListener('readable',flow);callback(err);}function onEnd(){var buf=Buffer.concat(buffers,nread);buffers=[];callback(null,buf);engine.close();}}function zlibBufferSync(engine,buffer){if(typeof buffer==='string')buffer=new Buffer(buffer);if(!Buffer.isBuffer(buffer))throw new TypeError('Not a string or buffer');var flushFlag=binding.Z_FINISH;return engine._processChunk(buffer,flushFlag);}// generic zlib
// minimal 2-byte header
function Deflate(opts){if(!(this instanceof Deflate))return new Deflate(opts);Zlib.call(this,opts,binding.DEFLATE);}function Inflate(opts){if(!(this instanceof Inflate))return new Inflate(opts);Zlib.call(this,opts,binding.INFLATE);}// gzip - bigger header, same deflate compression
function Gzip(opts){if(!(this instanceof Gzip))return new Gzip(opts);Zlib.call(this,opts,binding.GZIP);}function Gunzip(opts){if(!(this instanceof Gunzip))return new Gunzip(opts);Zlib.call(this,opts,binding.GUNZIP);}// raw - no header
function DeflateRaw(opts){if(!(this instanceof DeflateRaw))return new DeflateRaw(opts);Zlib.call(this,opts,binding.DEFLATERAW);}function InflateRaw(opts){if(!(this instanceof InflateRaw))return new InflateRaw(opts);Zlib.call(this,opts,binding.INFLATERAW);}// auto-detect header.
function Unzip(opts){if(!(this instanceof Unzip))return new Unzip(opts);Zlib.call(this,opts,binding.UNZIP);}// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.
function Zlib(opts,mode){this._opts=opts=opts||{};this._chunkSize=opts.chunkSize||exports.Z_DEFAULT_CHUNK;Transform.call(this,opts);if(opts.flush){if(opts.flush!==binding.Z_NO_FLUSH&&opts.flush!==binding.Z_PARTIAL_FLUSH&&opts.flush!==binding.Z_SYNC_FLUSH&&opts.flush!==binding.Z_FULL_FLUSH&&opts.flush!==binding.Z_FINISH&&opts.flush!==binding.Z_BLOCK){throw new Error('Invalid flush flag: '+opts.flush);}}this._flushFlag=opts.flush||binding.Z_NO_FLUSH;if(opts.chunkSize){if(opts.chunkSize<exports.Z_MIN_CHUNK||opts.chunkSize>exports.Z_MAX_CHUNK){throw new Error('Invalid chunk size: '+opts.chunkSize);}}if(opts.windowBits){if(opts.windowBits<exports.Z_MIN_WINDOWBITS||opts.windowBits>exports.Z_MAX_WINDOWBITS){throw new Error('Invalid windowBits: '+opts.windowBits);}}if(opts.level){if(opts.level<exports.Z_MIN_LEVEL||opts.level>exports.Z_MAX_LEVEL){throw new Error('Invalid compression level: '+opts.level);}}if(opts.memLevel){if(opts.memLevel<exports.Z_MIN_MEMLEVEL||opts.memLevel>exports.Z_MAX_MEMLEVEL){throw new Error('Invalid memLevel: '+opts.memLevel);}}if(opts.strategy){if(opts.strategy!=exports.Z_FILTERED&&opts.strategy!=exports.Z_HUFFMAN_ONLY&&opts.strategy!=exports.Z_RLE&&opts.strategy!=exports.Z_FIXED&&opts.strategy!=exports.Z_DEFAULT_STRATEGY){throw new Error('Invalid strategy: '+opts.strategy);}}if(opts.dictionary){if(!Buffer.isBuffer(opts.dictionary)){throw new Error('Invalid dictionary: it should be a Buffer instance');}}this._binding=new binding.Zlib(mode);var self=this;this._hadError=false;this._binding.onerror=function(message,errno){// there is no way to cleanly recover.
// continuing only obscures problems.
self._binding=null;self._hadError=true;var error=new Error(message);error.errno=errno;error.code=exports.codes[errno];self.emit('error',error);};var level=exports.Z_DEFAULT_COMPRESSION;if(typeof opts.level==='number')level=opts.level;var strategy=exports.Z_DEFAULT_STRATEGY;if(typeof opts.strategy==='number')strategy=opts.strategy;this._binding.init(opts.windowBits||exports.Z_DEFAULT_WINDOWBITS,level,opts.memLevel||exports.Z_DEFAULT_MEMLEVEL,strategy,opts.dictionary);this._buffer=new Buffer(this._chunkSize);this._offset=0;this._closed=false;this._level=level;this._strategy=strategy;this.once('end',this.close);}util.inherits(Zlib,Transform);Zlib.prototype.params=function(level,strategy,callback){if(level<exports.Z_MIN_LEVEL||level>exports.Z_MAX_LEVEL){throw new RangeError('Invalid compression level: '+level);}if(strategy!=exports.Z_FILTERED&&strategy!=exports.Z_HUFFMAN_ONLY&&strategy!=exports.Z_RLE&&strategy!=exports.Z_FIXED&&strategy!=exports.Z_DEFAULT_STRATEGY){throw new TypeError('Invalid strategy: '+strategy);}if(this._level!==level||this._strategy!==strategy){var self=this;this.flush(binding.Z_SYNC_FLUSH,function(){self._binding.params(level,strategy);if(!self._hadError){self._level=level;self._strategy=strategy;if(callback)callback();}});}else{process.nextTick(callback);}};Zlib.prototype.reset=function(){return this._binding.reset();};// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush=function(callback){this._transform(new Buffer(0),'',callback);};Zlib.prototype.flush=function(kind,callback){var ws=this._writableState;if(typeof kind==='function'||kind===void 0&&!callback){callback=kind;kind=binding.Z_FULL_FLUSH;}if(ws.ended){if(callback)process.nextTick(callback);}else if(ws.ending){if(callback)this.once('end',callback);}else if(ws.needDrain){var self=this;this.once('drain',function(){self.flush(callback);});}else{this._flushFlag=kind;this.write(new Buffer(0),'',callback);}};Zlib.prototype.close=function(callback){if(callback)process.nextTick(callback);if(this._closed)return;this._closed=true;this._binding.close();var self=this;process.nextTick(function(){self.emit('close');});};Zlib.prototype._transform=function(chunk,encoding,cb){var flushFlag;var ws=this._writableState;var ending=ws.ending||ws.ended;var last=ending&&(!chunk||ws.length===chunk.length);if(!chunk===null&&!Buffer.isBuffer(chunk))return cb(new Error('invalid input'));// If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
// If it's explicitly flushing at some other time, then we use
// Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
// goodness.
if(last)flushFlag=binding.Z_FINISH;else{flushFlag=this._flushFlag;// once we've flushed the last of the queue, stop flushing and
// go back to the normal behavior.
if(chunk.length>=ws.length){this._flushFlag=this._opts.flush||binding.Z_NO_FLUSH;}}var self=this;this._processChunk(chunk,flushFlag,cb);};Zlib.prototype._processChunk=function(chunk,flushFlag,cb){var availInBefore=chunk&&chunk.length;var availOutBefore=this._chunkSize-this._offset;var inOff=0;var self=this;var async=typeof cb==='function';if(!async){var buffers=[];var nread=0;var error;this.on('error',function(er){error=er;});do{var res=this._binding.writeSync(flushFlag,chunk,// in
inOff,// in_off
availInBefore,// in_len
this._buffer,// out
this._offset,//out_off
availOutBefore);// out_len
}while(!this._hadError&&callback(res[0],res[1]));if(this._hadError){throw error;}var buf=Buffer.concat(buffers,nread);this.close();return buf;}var req=this._binding.write(flushFlag,chunk,// in
inOff,// in_off
availInBefore,// in_len
this._buffer,// out
this._offset,//out_off
availOutBefore);// out_len
req.buffer=chunk;req.callback=callback;function callback(availInAfter,availOutAfter){if(self._hadError)return;var have=availOutBefore-availOutAfter;assert(have>=0,'have should not go down');if(have>0){var out=self._buffer.slice(self._offset,self._offset+have);self._offset+=have;// serve some output to the consumer.
if(async){self.push(out);}else{buffers.push(out);nread+=out.length;}}// exhausted the output buffer, or used all the input create a new one.
if(availOutAfter===0||self._offset>=self._chunkSize){availOutBefore=self._chunkSize;self._offset=0;self._buffer=new Buffer(self._chunkSize);}if(availOutAfter===0){// Not actually done.  Need to reprocess.
// Also, update the availInBefore to the availInAfter value,
// so that if we have to hit it a third (fourth, etc.) time,
// it'll have the correct byte counts.
inOff+=availInBefore-availInAfter;availInBefore=availInAfter;if(!async)return true;var newReq=self._binding.write(flushFlag,chunk,inOff,availInBefore,self._buffer,self._offset,self._chunkSize);newReq.callback=callback;// this same function
newReq.buffer=chunk;return;}if(!async)return false;// finished with the chunk.
cb();}};util.inherits(Deflate,Zlib);util.inherits(Inflate,Zlib);util.inherits(Gzip,Zlib);util.inherits(Gunzip,Zlib);util.inherits(DeflateRaw,Zlib);util.inherits(InflateRaw,Zlib);util.inherits(Unzip,Zlib);/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer,__webpack_require__(8));/***/},/* 95 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process,Buffer){var msg=__webpack_require__(96);var zstream=__webpack_require__(97);var zlib_deflate=__webpack_require__(98);var zlib_inflate=__webpack_require__(103);var constants=__webpack_require__(106);for(var key in constants){exports[key]=constants[key];}// zlib modes
exports.NONE=0;exports.DEFLATE=1;exports.INFLATE=2;exports.GZIP=3;exports.GUNZIP=4;exports.DEFLATERAW=5;exports.INFLATERAW=6;exports.UNZIP=7;/**
	 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	 */function Zlib(mode){if(mode<exports.DEFLATE||mode>exports.UNZIP)throw new TypeError("Bad argument");this.mode=mode;this.init_done=false;this.write_in_progress=false;this.pending_close=false;this.windowBits=0;this.level=0;this.memLevel=0;this.strategy=0;this.dictionary=null;}Zlib.prototype.init=function(windowBits,level,memLevel,strategy,dictionary){this.windowBits=windowBits;this.level=level;this.memLevel=memLevel;this.strategy=strategy;// dictionary not supported.
if(this.mode===exports.GZIP||this.mode===exports.GUNZIP)this.windowBits+=16;if(this.mode===exports.UNZIP)this.windowBits+=32;if(this.mode===exports.DEFLATERAW||this.mode===exports.INFLATERAW)this.windowBits=-this.windowBits;this.strm=new zstream();switch(this.mode){case exports.DEFLATE:case exports.GZIP:case exports.DEFLATERAW:var status=zlib_deflate.deflateInit2(this.strm,this.level,exports.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case exports.INFLATE:case exports.GUNZIP:case exports.INFLATERAW:case exports.UNZIP:var status=zlib_inflate.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode);}if(status!==exports.Z_OK){this._error(status);return;}this.write_in_progress=false;this.init_done=true;};Zlib.prototype.params=function(){throw new Error("deflateParams Not supported");};Zlib.prototype._writeCheck=function(){if(!this.init_done)throw new Error("write before init");if(this.mode===exports.NONE)throw new Error("already finalized");if(this.write_in_progress)throw new Error("write already in progress");if(this.pending_close)throw new Error("close is pending");};Zlib.prototype.write=function(flush,input,in_off,in_len,out,out_off,out_len){this._writeCheck();this.write_in_progress=true;var self=this;process.nextTick(function(){self.write_in_progress=false;var res=self._write(flush,input,in_off,in_len,out,out_off,out_len);self.callback(res[0],res[1]);if(self.pending_close)self.close();});return this;};// set method for Node buffers, used by pako
function bufferSet(data,offset){for(var i=0;i<data.length;i++){this[offset+i]=data[i];}}Zlib.prototype.writeSync=function(flush,input,in_off,in_len,out,out_off,out_len){this._writeCheck();return this._write(flush,input,in_off,in_len,out,out_off,out_len);};Zlib.prototype._write=function(flush,input,in_off,in_len,out,out_off,out_len){this.write_in_progress=true;if(flush!==exports.Z_NO_FLUSH&&flush!==exports.Z_PARTIAL_FLUSH&&flush!==exports.Z_SYNC_FLUSH&&flush!==exports.Z_FULL_FLUSH&&flush!==exports.Z_FINISH&&flush!==exports.Z_BLOCK){throw new Error("Invalid flush value");}if(input==null){input=new Buffer(0);in_len=0;in_off=0;}if(out._set)out.set=out._set;else out.set=bufferSet;var strm=this.strm;strm.avail_in=in_len;strm.input=input;strm.next_in=in_off;strm.avail_out=out_len;strm.output=out;strm.next_out=out_off;switch(this.mode){case exports.DEFLATE:case exports.GZIP:case exports.DEFLATERAW:var status=zlib_deflate.deflate(strm,flush);break;case exports.UNZIP:case exports.INFLATE:case exports.GUNZIP:case exports.INFLATERAW:var status=zlib_inflate.inflate(strm,flush);break;default:throw new Error("Unknown mode "+this.mode);}if(status!==exports.Z_STREAM_END&&status!==exports.Z_OK){this._error(status);}this.write_in_progress=false;return[strm.avail_in,strm.avail_out];};Zlib.prototype.close=function(){if(this.write_in_progress){this.pending_close=true;return;}this.pending_close=false;if(this.mode===exports.DEFLATE||this.mode===exports.GZIP||this.mode===exports.DEFLATERAW){zlib_deflate.deflateEnd(this.strm);}else{zlib_inflate.inflateEnd(this.strm);}this.mode=exports.NONE;};Zlib.prototype.reset=function(){switch(this.mode){case exports.DEFLATE:case exports.DEFLATERAW:var status=zlib_deflate.deflateReset(this.strm);break;case exports.INFLATE:case exports.INFLATERAW:var status=zlib_inflate.inflateReset(this.strm);break;}if(status!==exports.Z_OK){this._error(status);}};Zlib.prototype._error=function(status){this.onerror(msg[status]+': '+this.strm.msg,status);this.write_in_progress=false;if(this.pending_close)this.close();};exports.Zlib=Zlib;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8),__webpack_require__(4).Buffer);/***/},/* 96 *//***/function(module,exports){'use strict';module.exports={2:'need dictionary',/* Z_NEED_DICT       2  */1:'stream end',/* Z_STREAM_END      1  */0:'',/* Z_OK              0  */'-1':'file error',/* Z_ERRNO         (-1) */'-2':'stream error',/* Z_STREAM_ERROR  (-2) */'-3':'data error',/* Z_DATA_ERROR    (-3) */'-4':'insufficient memory',/* Z_MEM_ERROR     (-4) */'-5':'buffer error',/* Z_BUF_ERROR     (-5) */'-6':'incompatible version'/* Z_VERSION_ERROR (-6) */};/***/},/* 97 *//***/function(module,exports){'use strict';function ZStream(){/* next input byte */this.input=null;// JS specific, because we have no pointers
this.next_in=0;/* number of bytes available at input */this.avail_in=0;/* total number of input bytes read so far */this.total_in=0;/* next output byte should be put there */this.output=null;// JS specific, because we have no pointers
this.next_out=0;/* remaining free space at output */this.avail_out=0;/* total number of bytes output so far */this.total_out=0;/* last error message, NULL if no error */this.msg=''/*Z_NULL*/;/* not visible by applications */this.state=null;/* best guess about the data type: binary or text */this.data_type=2/*Z_UNKNOWN*/;/* adler32 value of the uncompressed data */this.adler=0;}module.exports=ZStream;/***/},/* 98 *//***/function(module,exports,__webpack_require__){'use strict';var utils=__webpack_require__(99);var trees=__webpack_require__(100);var adler32=__webpack_require__(101);var crc32=__webpack_require__(102);var msg=__webpack_require__(96);/* Public constants ==========================================================*//* ===========================================================================*//* Allowed flush values; see deflate() and inflate() below for details */var Z_NO_FLUSH=0;var Z_PARTIAL_FLUSH=1;//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH=3;var Z_FINISH=4;var Z_BLOCK=5;//var Z_TREES         = 6;
/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */var Z_OK=0;var Z_STREAM_END=1;//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR=-2;var Z_DATA_ERROR=-3;//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR=-5;//var Z_VERSION_ERROR = -6;
/* compression levels *///var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION=-1;var Z_FILTERED=1;var Z_HUFFMAN_ONLY=2;var Z_RLE=3;var Z_FIXED=4;var Z_DEFAULT_STRATEGY=0;/* Possible values of the data_type field (though see inflate()) *///var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN=2;/* The deflate compression method */var Z_DEFLATED=8;/*============================================================================*/var MAX_MEM_LEVEL=9;/* Maximum value for memLevel in deflateInit2 */var MAX_WBITS=15;/* 32K LZ77 window */var DEF_MEM_LEVEL=8;var LENGTH_CODES=29;/* number of length codes, not counting the special END_BLOCK code */var LITERALS=256;/* number of literal bytes 0..255 */var L_CODES=LITERALS+1+LENGTH_CODES;/* number of Literal or Length codes, including the END_BLOCK code */var D_CODES=30;/* number of distance codes */var BL_CODES=19;/* number of codes used to transfer the bit lengths */var HEAP_SIZE=2*L_CODES+1;/* maximum heap size */var MAX_BITS=15;/* All codes must not exceed MAX_BITS bits */var MIN_MATCH=3;var MAX_MATCH=258;var MIN_LOOKAHEAD=MAX_MATCH+MIN_MATCH+1;var PRESET_DICT=0x20;var INIT_STATE=42;var EXTRA_STATE=69;var NAME_STATE=73;var COMMENT_STATE=91;var HCRC_STATE=103;var BUSY_STATE=113;var FINISH_STATE=666;var BS_NEED_MORE=1;/* block not completed, need more input or more output */var BS_BLOCK_DONE=2;/* block flush performed */var BS_FINISH_STARTED=3;/* finish started, need only more output at next deflate */var BS_FINISH_DONE=4;/* finish done, accept no more input or output */var OS_CODE=0x03;// Unix :) . Don't detect, use this default.
function err(strm,errorCode){strm.msg=msg[errorCode];return errorCode;}function rank(f){return(f<<1)-(f>4?9:0);}function zero(buf){var len=buf.length;while(--len>=0){buf[len]=0;}}/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */function flush_pending(strm){var s=strm.state;//_tr_flush_bits(s);
var len=s.pending;if(len>strm.avail_out){len=strm.avail_out;}if(len===0){return;}utils.arraySet(strm.output,s.pending_buf,s.pending_out,len,strm.next_out);strm.next_out+=len;s.pending_out+=len;strm.total_out+=len;strm.avail_out-=len;s.pending-=len;if(s.pending===0){s.pending_out=0;}}function flush_block_only(s,last){trees._tr_flush_block(s,s.block_start>=0?s.block_start:-1,s.strstart-s.block_start,last);s.block_start=s.strstart;flush_pending(s.strm);}function put_byte(s,b){s.pending_buf[s.pending++]=b;}/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */function putShortMSB(s,b){//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
s.pending_buf[s.pending++]=b>>>8&0xff;s.pending_buf[s.pending++]=b&0xff;}/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */function read_buf(strm,buf,start,size){var len=strm.avail_in;if(len>size){len=size;}if(len===0){return 0;}strm.avail_in-=len;// zmemcpy(buf, strm->next_in, len);
utils.arraySet(buf,strm.input,strm.next_in,len,start);if(strm.state.wrap===1){strm.adler=adler32(strm.adler,buf,len,start);}else if(strm.state.wrap===2){strm.adler=crc32(strm.adler,buf,len,start);}strm.next_in+=len;strm.total_in+=len;return len;}/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */function longest_match(s,cur_match){var chain_length=s.max_chain_length;/* max hash chain length */var scan=s.strstart;/* current string */var match;/* matched string */var len;/* length of current match */var best_len=s.prev_length;/* best match length so far */var nice_match=s.nice_match;/* stop if match long enough */var limit=s.strstart>s.w_size-MIN_LOOKAHEAD?s.strstart-(s.w_size-MIN_LOOKAHEAD):0/*NIL*/;var _win=s.window;// shortcut
var wmask=s.w_mask;var prev=s.prev;/* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */var strend=s.strstart+MAX_MATCH;var scan_end1=_win[scan+best_len-1];var scan_end=_win[scan+best_len];/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */// Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
/* Do not waste too much time if we already have a good match: */if(s.prev_length>=s.good_match){chain_length>>=2;}/* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */if(nice_match>s.lookahead){nice_match=s.lookahead;}// Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
do{// Assert(cur_match < s->strstart, "no future");
match=cur_match;/* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */if(_win[match+best_len]!==scan_end||_win[match+best_len-1]!==scan_end1||_win[match]!==_win[scan]||_win[++match]!==_win[scan+1]){continue;}/* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */scan+=2;match++;// Assert(*scan == *match, "match[2]?");
/* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */do{/*jshint noempty:false*/}while(_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&scan<strend);// Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
len=MAX_MATCH-(strend-scan);scan=strend-MAX_MATCH;if(len>best_len){s.match_start=cur_match;best_len=len;if(len>=nice_match){break;}scan_end1=_win[scan+best_len-1];scan_end=_win[scan+best_len];}}while((cur_match=prev[cur_match&wmask])>limit&&--chain_length!==0);if(best_len<=s.lookahead){return best_len;}return s.lookahead;}/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */function fill_window(s){var _w_size=s.w_size;var p,n,m,more,str;//Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
do{more=s.window_size-s.lookahead-s.strstart;// JS ints have 32 bit, block below not needed
/* Deal with !@#$% 64K limit: *///if (sizeof(int) <= 2) {
//    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
//        more = wsize;
//
//  } else if (more == (unsigned)(-1)) {
//        /* Very unlikely, but possible on 16 bit machine if
//         * strstart == 0 && lookahead == 1 (input done a byte at time)
//         */
//        more--;
//    }
//}
/* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */if(s.strstart>=_w_size+(_w_size-MIN_LOOKAHEAD)){utils.arraySet(s.window,s.window,_w_size,_w_size,0);s.match_start-=_w_size;s.strstart-=_w_size;/* we now have strstart >= MAX_DIST */s.block_start-=_w_size;/* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */n=s.hash_size;p=n;do{m=s.head[--p];s.head[p]=m>=_w_size?m-_w_size:0;}while(--n);n=_w_size;p=n;do{m=s.prev[--p];s.prev[p]=m>=_w_size?m-_w_size:0;/* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */}while(--n);more+=_w_size;}if(s.strm.avail_in===0){break;}/* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     *///Assert(more >= 2, "more < 2");
n=read_buf(s.strm,s.window,s.strstart+s.lookahead,more);s.lookahead+=n;/* Initialize the hash value now that we have some input: */if(s.lookahead+s.insert>=MIN_MATCH){str=s.strstart-s.insert;s.ins_h=s.window[str];/* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */s.ins_h=(s.ins_h<<s.hash_shift^s.window[str+1])&s.hash_mask;//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
while(s.insert){/* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */s.ins_h=(s.ins_h<<s.hash_shift^s.window[str+MIN_MATCH-1])&s.hash_mask;s.prev[str&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=str;str++;s.insert--;if(s.lookahead+s.insert<MIN_MATCH){break;}}}/* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */}while(s.lookahead<MIN_LOOKAHEAD&&s.strm.avail_in!==0);/* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   *///  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */function deflate_stored(s,flush){/* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */var max_block_size=0xffff;if(max_block_size>s.pending_buf_size-5){max_block_size=s.pending_buf_size-5;}/* Copy as much as possible from input to output: */for(;;){/* Fill the window as much as possible: */if(s.lookahead<=1){//Assert(s->strstart < s->w_size+MAX_DIST(s) ||
//  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }
fill_window(s);if(s.lookahead===0&&flush===Z_NO_FLUSH){return BS_NEED_MORE;}if(s.lookahead===0){break;}/* flush the current block */}//Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");
s.strstart+=s.lookahead;s.lookahead=0;/* Emit a stored block if pending_buf will be full: */var max_start=s.block_start+max_block_size;if(s.strstart===0||s.strstart>=max_start){/* strstart == 0 is possible when wraparound on 16-bit machine */s.lookahead=s.strstart-max_start;s.strstart=max_start;/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}/* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */if(s.strstart-s.block_start>=s.w_size-MIN_LOOKAHEAD){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}s.insert=0;if(flush===Z_FINISH){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.strstart>s.block_start){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_NEED_MORE;}/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */function deflate_fast(s,flush){var hash_head;/* head of the hash chain */var bflush;/* set if current block must be flushed */for(;;){/* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */if(s.lookahead<MIN_LOOKAHEAD){fill_window(s);if(s.lookahead<MIN_LOOKAHEAD&&flush===Z_NO_FLUSH){return BS_NEED_MORE;}if(s.lookahead===0){break;/* flush the current block */}}/* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */hash_head=0/*NIL*/;if(s.lookahead>=MIN_MATCH){/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***/}/* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */if(hash_head!==0/*NIL*/&&s.strstart-hash_head<=s.w_size-MIN_LOOKAHEAD){/* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */s.match_length=longest_match(s,hash_head);/* longest_match() sets match_start */}if(s.match_length>=MIN_MATCH){// check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
/*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/bflush=trees._tr_tally(s,s.strstart-s.match_start,s.match_length-MIN_MATCH);s.lookahead-=s.match_length;/* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */if(s.match_length<=s.max_lazy_match/*max_insert_length*/&&s.lookahead>=MIN_MATCH){s.match_length--;/* string at strstart already in table */do{s.strstart++;/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***//* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */}while(--s.match_length!==0);s.strstart++;}else{s.strstart+=s.match_length;s.match_length=0;s.ins_h=s.window[s.strstart];/* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+1])&s.hash_mask;//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
/* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */}}else{/* No match, output a literal byte *///Tracevv((stderr,"%c", s.window[s.strstart]));
/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush=trees._tr_tally(s,0,s.window[s.strstart]);s.lookahead--;s.strstart++;}if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}s.insert=s.strstart<MIN_MATCH-1?s.strstart:MIN_MATCH-1;if(flush===Z_FINISH){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.last_lit){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;}/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */function deflate_slow(s,flush){var hash_head;/* head of hash chain */var bflush;/* set if current block must be flushed */var max_insert;/* Process the input block. */for(;;){/* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */if(s.lookahead<MIN_LOOKAHEAD){fill_window(s);if(s.lookahead<MIN_LOOKAHEAD&&flush===Z_NO_FLUSH){return BS_NEED_MORE;}if(s.lookahead===0){break;}/* flush the current block */}/* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */hash_head=0/*NIL*/;if(s.lookahead>=MIN_MATCH){/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***/}/* Find the longest match, discarding those <= prev_length.
	     */s.prev_length=s.match_length;s.prev_match=s.match_start;s.match_length=MIN_MATCH-1;if(hash_head!==0/*NIL*/&&s.prev_length<s.max_lazy_match&&s.strstart-hash_head<=s.w_size-MIN_LOOKAHEAD/*MAX_DIST(s)*/){/* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */s.match_length=longest_match(s,hash_head);/* longest_match() sets match_start */if(s.match_length<=5&&(s.strategy===Z_FILTERED||s.match_length===MIN_MATCH&&s.strstart-s.match_start>4096/*TOO_FAR*/)){/* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */s.match_length=MIN_MATCH-1;}}/* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */if(s.prev_length>=MIN_MATCH&&s.match_length<=s.prev_length){max_insert=s.strstart+s.lookahead-MIN_MATCH;/* Do not insert strings in hash table beyond this. *///check_match(s, s.strstart-1, s.prev_match, s.prev_length);
/***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/bflush=trees._tr_tally(s,s.strstart-1-s.prev_match,s.prev_length-MIN_MATCH);/* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */s.lookahead-=s.prev_length-1;s.prev_length-=2;do{if(++s.strstart<=max_insert){/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=(s.ins_h<<s.hash_shift^s.window[s.strstart+MIN_MATCH-1])&s.hash_mask;hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***/}}while(--s.prev_length!==0);s.match_available=0;s.match_length=MIN_MATCH-1;s.strstart++;if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}else if(s.match_available){/* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       *///Tracevv((stderr,"%c", s->window[s->strstart-1]));
/*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/bflush=trees._tr_tally(s,0,s.window[s.strstart-1]);if(bflush){/*** FLUSH_BLOCK_ONLY(s, 0) ***/flush_block_only(s,false);/***/}s.strstart++;s.lookahead--;if(s.strm.avail_out===0){return BS_NEED_MORE;}}else{/* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */s.match_available=1;s.strstart++;s.lookahead--;}}//Assert (flush != Z_NO_FLUSH, "no flush?");
if(s.match_available){//Tracevv((stderr,"%c", s->window[s->strstart-1]));
/*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/bflush=trees._tr_tally(s,0,s.window[s.strstart-1]);s.match_available=0;}s.insert=s.strstart<MIN_MATCH-1?s.strstart:MIN_MATCH-1;if(flush===Z_FINISH){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.last_lit){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;}/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */function deflate_rle(s,flush){var bflush;/* set if current block must be flushed */var prev;/* byte at distance one to match */var scan,strend;/* scan goes up to strend for length of run */var _win=s.window;for(;;){/* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */if(s.lookahead<=MAX_MATCH){fill_window(s);if(s.lookahead<=MAX_MATCH&&flush===Z_NO_FLUSH){return BS_NEED_MORE;}if(s.lookahead===0){break;}/* flush the current block */}/* See how many times the previous byte repeats */s.match_length=0;if(s.lookahead>=MIN_MATCH&&s.strstart>0){scan=s.strstart-1;prev=_win[scan];if(prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]){strend=s.strstart+MAX_MATCH;do{/*jshint noempty:false*/}while(prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&scan<strend);s.match_length=MAX_MATCH-(strend-scan);if(s.match_length>s.lookahead){s.match_length=s.lookahead;}}//Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
}/* Emit match if have run of MIN_MATCH or longer, else emit literal */if(s.match_length>=MIN_MATCH){//check_match(s, s.strstart, s.strstart - 1, s.match_length);
/*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/bflush=trees._tr_tally(s,1,s.match_length-MIN_MATCH);s.lookahead-=s.match_length;s.strstart+=s.match_length;s.match_length=0;}else{/* No match, output a literal byte *///Tracevv((stderr,"%c", s->window[s->strstart]));
/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush=trees._tr_tally(s,0,s.window[s.strstart]);s.lookahead--;s.strstart++;}if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}s.insert=0;if(flush===Z_FINISH){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.last_lit){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;}/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */function deflate_huff(s,flush){var bflush;/* set if current block must be flushed */for(;;){/* Make sure that we have a literal to write. */if(s.lookahead===0){fill_window(s);if(s.lookahead===0){if(flush===Z_NO_FLUSH){return BS_NEED_MORE;}break;/* flush the current block */}}/* Output a literal byte */s.match_length=0;//Tracevv((stderr,"%c", s->window[s->strstart]));
/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush=trees._tr_tally(s,0,s.window[s.strstart]);s.lookahead--;s.strstart++;if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}s.insert=0;if(flush===Z_FINISH){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.last_lit){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;}/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */function Config(good_length,max_lazy,nice_length,max_chain,func){this.good_length=good_length;this.max_lazy=max_lazy;this.nice_length=nice_length;this.max_chain=max_chain;this.func=func;}var configuration_table;configuration_table=[/*      good lazy nice chain */new Config(0,0,0,0,deflate_stored),/* 0 store only */new Config(4,4,8,4,deflate_fast),/* 1 max speed, no lazy matches */new Config(4,5,16,8,deflate_fast),/* 2 */new Config(4,6,32,32,deflate_fast),/* 3 */new Config(4,4,16,16,deflate_slow),/* 4 lazy matches */new Config(8,16,32,32,deflate_slow),/* 5 */new Config(8,16,128,128,deflate_slow),/* 6 */new Config(8,32,128,256,deflate_slow),/* 7 */new Config(32,128,258,1024,deflate_slow),/* 8 */new Config(32,258,258,4096,deflate_slow)/* 9 max compression */];/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */function lm_init(s){s.window_size=2*s.w_size;/*** CLEAR_HASH(s); ***/zero(s.head);// Fill with NIL (= 0);
/* Set the default configuration parameters:
	   */s.max_lazy_match=configuration_table[s.level].max_lazy;s.good_match=configuration_table[s.level].good_length;s.nice_match=configuration_table[s.level].nice_length;s.max_chain_length=configuration_table[s.level].max_chain;s.strstart=0;s.block_start=0;s.lookahead=0;s.insert=0;s.match_length=s.prev_length=MIN_MATCH-1;s.match_available=0;s.ins_h=0;}function DeflateState(){this.strm=null;/* pointer back to this zlib stream */this.status=0;/* as the name implies */this.pending_buf=null;/* output still pending */this.pending_buf_size=0;/* size of pending_buf */this.pending_out=0;/* next pending byte to output to the stream */this.pending=0;/* nb of bytes in the pending buffer */this.wrap=0;/* bit 0 true for zlib, bit 1 true for gzip */this.gzhead=null;/* gzip header information to write */this.gzindex=0;/* where in extra, name, or comment */this.method=Z_DEFLATED;/* can only be DEFLATED */this.last_flush=-1;/* value of flush param for previous deflate call */this.w_size=0;/* LZ77 window size (32K by default) */this.w_bits=0;/* log2(w_size)  (8..16) */this.w_mask=0;/* w_size - 1 */this.window=null;/* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */this.window_size=0;/* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */this.prev=null;/* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */this.head=null;/* Heads of the hash chains or NIL. */this.ins_h=0;/* hash index of string to be inserted */this.hash_size=0;/* number of elements in hash table */this.hash_bits=0;/* log2(hash_size) */this.hash_mask=0;/* hash_size-1 */this.hash_shift=0;/* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */this.block_start=0;/* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */this.match_length=0;/* length of best match */this.prev_match=0;/* previous match */this.match_available=0;/* set if previous match exists */this.strstart=0;/* start of string to insert */this.match_start=0;/* start of matching string */this.lookahead=0;/* number of valid bytes ahead in window */this.prev_length=0;/* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */this.max_chain_length=0;/* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */this.max_lazy_match=0;/* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */// That's alias to max_lazy_match, don't use directly
//this.max_insert_length = 0;
/* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */this.level=0;/* compression level (1..9) */this.strategy=0;/* favor or force Huffman coding*/this.good_match=0;/* Use a faster search when the previous match is longer than this */this.nice_match=0;/* Stop searching when current match exceeds this *//* used by trees.c: *//* Didn't use ct_data typedef below to suppress compiler warning */// struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
// struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
// struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
// Use flat array of DOUBLE size, with interleaved fata,
// because JS does not support effective
this.dyn_ltree=new utils.Buf16(HEAP_SIZE*2);this.dyn_dtree=new utils.Buf16((2*D_CODES+1)*2);this.bl_tree=new utils.Buf16((2*BL_CODES+1)*2);zero(this.dyn_ltree);zero(this.dyn_dtree);zero(this.bl_tree);this.l_desc=null;/* desc. for literal tree */this.d_desc=null;/* desc. for distance tree */this.bl_desc=null;/* desc. for bit length tree *///ush bl_count[MAX_BITS+1];
this.bl_count=new utils.Buf16(MAX_BITS+1);/* number of codes at each bit length for an optimal tree *///int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
this.heap=new utils.Buf16(2*L_CODES+1);/* heap used to build the Huffman trees */zero(this.heap);this.heap_len=0;/* number of elements in the heap */this.heap_max=0;/* element of largest frequency *//* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */this.depth=new utils.Buf16(2*L_CODES+1);//uch depth[2*L_CODES+1];
zero(this.depth);/* Depth of each subtree used as tie breaker for trees of equal frequency
	   */this.l_buf=0;/* buffer index for literals or lengths */this.lit_bufsize=0;/* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */this.last_lit=0;/* running index in l_buf */this.d_buf=0;/* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */this.opt_len=0;/* bit length of current block with optimal trees */this.static_len=0;/* bit length of current block with static trees */this.matches=0;/* number of string matches in current block */this.insert=0;/* bytes at end of window left to insert */this.bi_buf=0;/* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */this.bi_valid=0;/* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */// Used for window memory init. We safely ignore it for JS. That makes
// sense only for pointers and memory check tools.
//this.high_water = 0;
/* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */}function deflateResetKeep(strm){var s;if(!strm||!strm.state){return err(strm,Z_STREAM_ERROR);}strm.total_in=strm.total_out=0;strm.data_type=Z_UNKNOWN;s=strm.state;s.pending=0;s.pending_out=0;if(s.wrap<0){s.wrap=-s.wrap;/* was made negative by deflate(..., Z_FINISH); */}s.status=s.wrap?INIT_STATE:BUSY_STATE;strm.adler=s.wrap===2?0// crc32(0, Z_NULL, 0)
:1;// adler32(0, Z_NULL, 0)
s.last_flush=Z_NO_FLUSH;trees._tr_init(s);return Z_OK;}function deflateReset(strm){var ret=deflateResetKeep(strm);if(ret===Z_OK){lm_init(strm.state);}return ret;}function deflateSetHeader(strm,head){if(!strm||!strm.state){return Z_STREAM_ERROR;}if(strm.state.wrap!==2){return Z_STREAM_ERROR;}strm.state.gzhead=head;return Z_OK;}function deflateInit2(strm,level,method,windowBits,memLevel,strategy){if(!strm){// === Z_NULL
return Z_STREAM_ERROR;}var wrap=1;if(level===Z_DEFAULT_COMPRESSION){level=6;}if(windowBits<0){/* suppress zlib wrapper */wrap=0;windowBits=-windowBits;}else if(windowBits>15){wrap=2;/* write gzip wrapper instead */windowBits-=16;}if(memLevel<1||memLevel>MAX_MEM_LEVEL||method!==Z_DEFLATED||windowBits<8||windowBits>15||level<0||level>9||strategy<0||strategy>Z_FIXED){return err(strm,Z_STREAM_ERROR);}if(windowBits===8){windowBits=9;}/* until 256-byte window bug fixed */var s=new DeflateState();strm.state=s;s.strm=strm;s.wrap=wrap;s.gzhead=null;s.w_bits=windowBits;s.w_size=1<<s.w_bits;s.w_mask=s.w_size-1;s.hash_bits=memLevel+7;s.hash_size=1<<s.hash_bits;s.hash_mask=s.hash_size-1;s.hash_shift=~~((s.hash_bits+MIN_MATCH-1)/MIN_MATCH);s.window=new utils.Buf8(s.w_size*2);s.head=new utils.Buf16(s.hash_size);s.prev=new utils.Buf16(s.w_size);// Don't need mem init magic for JS.
//s.high_water = 0;  /* nothing written to s->window yet */
s.lit_bufsize=1<<memLevel+6;/* 16K elements by default */s.pending_buf_size=s.lit_bufsize*4;//overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
//s->pending_buf = (uchf *) overlay;
s.pending_buf=new utils.Buf8(s.pending_buf_size);// It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
//s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
s.d_buf=1*s.lit_bufsize;//s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
s.l_buf=(1+2)*s.lit_bufsize;s.level=level;s.strategy=strategy;s.method=method;return deflateReset(strm);}function deflateInit(strm,level){return deflateInit2(strm,level,Z_DEFLATED,MAX_WBITS,DEF_MEM_LEVEL,Z_DEFAULT_STRATEGY);}function deflate(strm,flush){var old_flush,s;var beg,val;// for gzip header write only
if(!strm||!strm.state||flush>Z_BLOCK||flush<0){return strm?err(strm,Z_STREAM_ERROR):Z_STREAM_ERROR;}s=strm.state;if(!strm.output||!strm.input&&strm.avail_in!==0||s.status===FINISH_STATE&&flush!==Z_FINISH){return err(strm,strm.avail_out===0?Z_BUF_ERROR:Z_STREAM_ERROR);}s.strm=strm;/* just in case */old_flush=s.last_flush;s.last_flush=flush;/* Write the header */if(s.status===INIT_STATE){if(s.wrap===2){// GZIP header
strm.adler=0;//crc32(0L, Z_NULL, 0);
put_byte(s,31);put_byte(s,139);put_byte(s,8);if(!s.gzhead){// s->gzhead == Z_NULL
put_byte(s,0);put_byte(s,0);put_byte(s,0);put_byte(s,0);put_byte(s,0);put_byte(s,s.level===9?2:s.strategy>=Z_HUFFMAN_ONLY||s.level<2?4:0);put_byte(s,OS_CODE);s.status=BUSY_STATE;}else{put_byte(s,(s.gzhead.text?1:0)+(s.gzhead.hcrc?2:0)+(!s.gzhead.extra?0:4)+(!s.gzhead.name?0:8)+(!s.gzhead.comment?0:16));put_byte(s,s.gzhead.time&0xff);put_byte(s,s.gzhead.time>>8&0xff);put_byte(s,s.gzhead.time>>16&0xff);put_byte(s,s.gzhead.time>>24&0xff);put_byte(s,s.level===9?2:s.strategy>=Z_HUFFMAN_ONLY||s.level<2?4:0);put_byte(s,s.gzhead.os&0xff);if(s.gzhead.extra&&s.gzhead.extra.length){put_byte(s,s.gzhead.extra.length&0xff);put_byte(s,s.gzhead.extra.length>>8&0xff);}if(s.gzhead.hcrc){strm.adler=crc32(strm.adler,s.pending_buf,s.pending,0);}s.gzindex=0;s.status=EXTRA_STATE;}}else// DEFLATE header
{var header=Z_DEFLATED+(s.w_bits-8<<4)<<8;var level_flags=-1;if(s.strategy>=Z_HUFFMAN_ONLY||s.level<2){level_flags=0;}else if(s.level<6){level_flags=1;}else if(s.level===6){level_flags=2;}else{level_flags=3;}header|=level_flags<<6;if(s.strstart!==0){header|=PRESET_DICT;}header+=31-header%31;s.status=BUSY_STATE;putShortMSB(s,header);/* Save the adler32 of the preset dictionary: */if(s.strstart!==0){putShortMSB(s,strm.adler>>>16);putShortMSB(s,strm.adler&0xffff);}strm.adler=1;// adler32(0L, Z_NULL, 0);
}}//#ifdef GZIP
if(s.status===EXTRA_STATE){if(s.gzhead.extra/* != Z_NULL*/){beg=s.pending;/* start of bytes to update crc */while(s.gzindex<(s.gzhead.extra.length&0xffff)){if(s.pending===s.pending_buf_size){if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);}flush_pending(strm);beg=s.pending;if(s.pending===s.pending_buf_size){break;}}put_byte(s,s.gzhead.extra[s.gzindex]&0xff);s.gzindex++;}if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);}if(s.gzindex===s.gzhead.extra.length){s.gzindex=0;s.status=NAME_STATE;}}else{s.status=NAME_STATE;}}if(s.status===NAME_STATE){if(s.gzhead.name/* != Z_NULL*/){beg=s.pending;/* start of bytes to update crc *///int val;
do{if(s.pending===s.pending_buf_size){if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);}flush_pending(strm);beg=s.pending;if(s.pending===s.pending_buf_size){val=1;break;}}// JS specific: little magic to add zero terminator to end of string
if(s.gzindex<s.gzhead.name.length){val=s.gzhead.name.charCodeAt(s.gzindex++)&0xff;}else{val=0;}put_byte(s,val);}while(val!==0);if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);}if(val===0){s.gzindex=0;s.status=COMMENT_STATE;}}else{s.status=COMMENT_STATE;}}if(s.status===COMMENT_STATE){if(s.gzhead.comment/* != Z_NULL*/){beg=s.pending;/* start of bytes to update crc *///int val;
do{if(s.pending===s.pending_buf_size){if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);}flush_pending(strm);beg=s.pending;if(s.pending===s.pending_buf_size){val=1;break;}}// JS specific: little magic to add zero terminator to end of string
if(s.gzindex<s.gzhead.comment.length){val=s.gzhead.comment.charCodeAt(s.gzindex++)&0xff;}else{val=0;}put_byte(s,val);}while(val!==0);if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32(strm.adler,s.pending_buf,s.pending-beg,beg);}if(val===0){s.status=HCRC_STATE;}}else{s.status=HCRC_STATE;}}if(s.status===HCRC_STATE){if(s.gzhead.hcrc){if(s.pending+2>s.pending_buf_size){flush_pending(strm);}if(s.pending+2<=s.pending_buf_size){put_byte(s,strm.adler&0xff);put_byte(s,strm.adler>>8&0xff);strm.adler=0;//crc32(0L, Z_NULL, 0);
s.status=BUSY_STATE;}}else{s.status=BUSY_STATE;}}//#endif
/* Flush as much pending output as possible */if(s.pending!==0){flush_pending(strm);if(strm.avail_out===0){/* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */s.last_flush=-1;return Z_OK;}/* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */}else if(strm.avail_in===0&&rank(flush)<=rank(old_flush)&&flush!==Z_FINISH){return err(strm,Z_BUF_ERROR);}/* User must not provide more input after the first FINISH: */if(s.status===FINISH_STATE&&strm.avail_in!==0){return err(strm,Z_BUF_ERROR);}/* Start a new block or continue the current one.
	   */if(strm.avail_in!==0||s.lookahead!==0||flush!==Z_NO_FLUSH&&s.status!==FINISH_STATE){var bstate=s.strategy===Z_HUFFMAN_ONLY?deflate_huff(s,flush):s.strategy===Z_RLE?deflate_rle(s,flush):configuration_table[s.level].func(s,flush);if(bstate===BS_FINISH_STARTED||bstate===BS_FINISH_DONE){s.status=FINISH_STATE;}if(bstate===BS_NEED_MORE||bstate===BS_FINISH_STARTED){if(strm.avail_out===0){s.last_flush=-1;/* avoid BUF_ERROR next call, see above */}return Z_OK;/* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */}if(bstate===BS_BLOCK_DONE){if(flush===Z_PARTIAL_FLUSH){trees._tr_align(s);}else if(flush!==Z_BLOCK){/* FULL_FLUSH or SYNC_FLUSH */trees._tr_stored_block(s,0,0,false);/* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */if(flush===Z_FULL_FLUSH){/*** CLEAR_HASH(s); ***//* forget history */zero(s.head);// Fill with NIL (= 0);
if(s.lookahead===0){s.strstart=0;s.block_start=0;s.insert=0;}}}flush_pending(strm);if(strm.avail_out===0){s.last_flush=-1;/* avoid BUF_ERROR at next call, see above */return Z_OK;}}}//Assert(strm->avail_out > 0, "bug2");
//if (strm.avail_out <= 0) { throw new Error("bug2");}
if(flush!==Z_FINISH){return Z_OK;}if(s.wrap<=0){return Z_STREAM_END;}/* Write the trailer */if(s.wrap===2){put_byte(s,strm.adler&0xff);put_byte(s,strm.adler>>8&0xff);put_byte(s,strm.adler>>16&0xff);put_byte(s,strm.adler>>24&0xff);put_byte(s,strm.total_in&0xff);put_byte(s,strm.total_in>>8&0xff);put_byte(s,strm.total_in>>16&0xff);put_byte(s,strm.total_in>>24&0xff);}else{putShortMSB(s,strm.adler>>>16);putShortMSB(s,strm.adler&0xffff);}flush_pending(strm);/* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */if(s.wrap>0){s.wrap=-s.wrap;}/* write the trailer only once! */return s.pending!==0?Z_OK:Z_STREAM_END;}function deflateEnd(strm){var status;if(!strm/*== Z_NULL*/||!strm.state/*== Z_NULL*/){return Z_STREAM_ERROR;}status=strm.state.status;if(status!==INIT_STATE&&status!==EXTRA_STATE&&status!==NAME_STATE&&status!==COMMENT_STATE&&status!==HCRC_STATE&&status!==BUSY_STATE&&status!==FINISH_STATE){return err(strm,Z_STREAM_ERROR);}strm.state=null;return status===BUSY_STATE?err(strm,Z_DATA_ERROR):Z_OK;}/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */function deflateSetDictionary(strm,dictionary){var dictLength=dictionary.length;var s;var str,n;var wrap;var avail;var next;var input;var tmpDict;if(!strm/*== Z_NULL*/||!strm.state/*== Z_NULL*/){return Z_STREAM_ERROR;}s=strm.state;wrap=s.wrap;if(wrap===2||wrap===1&&s.status!==INIT_STATE||s.lookahead){return Z_STREAM_ERROR;}/* when using zlib wrappers, compute Adler-32 for provided dictionary */if(wrap===1){/* adler32(strm->adler, dictionary, dictLength); */strm.adler=adler32(strm.adler,dictionary,dictLength,0);}s.wrap=0;/* avoid computing Adler-32 in read_buf *//* if dictionary would fill window, just replace the history */if(dictLength>=s.w_size){if(wrap===0){/* already empty otherwise *//*** CLEAR_HASH(s); ***/zero(s.head);// Fill with NIL (= 0);
s.strstart=0;s.block_start=0;s.insert=0;}/* use the tail */// dictionary = dictionary.slice(dictLength - s.w_size);
tmpDict=new utils.Buf8(s.w_size);utils.arraySet(tmpDict,dictionary,dictLength-s.w_size,s.w_size,0);dictionary=tmpDict;dictLength=s.w_size;}/* insert dictionary into window and hash */avail=strm.avail_in;next=strm.next_in;input=strm.input;strm.avail_in=dictLength;strm.next_in=0;strm.input=dictionary;fill_window(s);while(s.lookahead>=MIN_MATCH){str=s.strstart;n=s.lookahead-(MIN_MATCH-1);do{/* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */s.ins_h=(s.ins_h<<s.hash_shift^s.window[str+MIN_MATCH-1])&s.hash_mask;s.prev[str&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=str;str++;}while(--n);s.strstart=str;s.lookahead=MIN_MATCH-1;fill_window(s);}s.strstart+=s.lookahead;s.block_start=s.strstart;s.insert=s.lookahead;s.lookahead=0;s.match_length=s.prev_length=MIN_MATCH-1;s.match_available=0;strm.next_in=next;strm.input=input;strm.avail_in=avail;s.wrap=wrap;return Z_OK;}exports.deflateInit=deflateInit;exports.deflateInit2=deflateInit2;exports.deflateReset=deflateReset;exports.deflateResetKeep=deflateResetKeep;exports.deflateSetHeader=deflateSetHeader;exports.deflate=deflate;exports.deflateEnd=deflateEnd;exports.deflateSetDictionary=deflateSetDictionary;exports.deflateInfo='pako deflate (from Nodeca project)';/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*//***/},/* 99 *//***/function(module,exports){'use strict';var TYPED_OK=typeof Uint8Array!=='undefined'&&typeof Uint16Array!=='undefined'&&typeof Int32Array!=='undefined';exports.assign=function(obj/*from1, from2, from3, ...*/){var sources=Array.prototype.slice.call(arguments,1);while(sources.length){var source=sources.shift();if(!source){continue;}if((typeof source==="undefined"?"undefined":_typeof(source))!=='object'){throw new TypeError(source+'must be non-object');}for(var p in source){if(source.hasOwnProperty(p)){obj[p]=source[p];}}}return obj;};// reduce buffer size, avoiding mem copy
exports.shrinkBuf=function(buf,size){if(buf.length===size){return buf;}if(buf.subarray){return buf.subarray(0,size);}buf.length=size;return buf;};var fnTyped={arraySet:function arraySet(dest,src,src_offs,len,dest_offs){if(src.subarray&&dest.subarray){dest.set(src.subarray(src_offs,src_offs+len),dest_offs);return;}// Fallback to ordinary array
for(var i=0;i<len;i++){dest[dest_offs+i]=src[src_offs+i];}},// Join array of chunks to single array.
flattenChunks:function flattenChunks(chunks){var i,l,len,pos,chunk,result;// calculate data length
len=0;for(i=0,l=chunks.length;i<l;i++){len+=chunks[i].length;}// join chunks
result=new Uint8Array(len);pos=0;for(i=0,l=chunks.length;i<l;i++){chunk=chunks[i];result.set(chunk,pos);pos+=chunk.length;}return result;}};var fnUntyped={arraySet:function arraySet(dest,src,src_offs,len,dest_offs){for(var i=0;i<len;i++){dest[dest_offs+i]=src[src_offs+i];}},// Join array of chunks to single array.
flattenChunks:function flattenChunks(chunks){return[].concat.apply([],chunks);}};// Enable/Disable typed arrays use, for testing
//
exports.setTyped=function(on){if(on){exports.Buf8=Uint8Array;exports.Buf16=Uint16Array;exports.Buf32=Int32Array;exports.assign(exports,fnTyped);}else{exports.Buf8=Array;exports.Buf16=Array;exports.Buf32=Array;exports.assign(exports,fnUntyped);}};exports.setTyped(TYPED_OK);/***/},/* 100 *//***/function(module,exports,__webpack_require__){'use strict';var utils=__webpack_require__(99);/* Public constants ==========================================================*//* ===========================================================================*///var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED=4;//var Z_DEFAULT_STRATEGY  = 0;
/* Possible values of the data_type field (though see inflate()) */var Z_BINARY=0;var Z_TEXT=1;//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN=2;/*============================================================================*/function zero(buf){var len=buf.length;while(--len>=0){buf[len]=0;}}// From zutil.h
var STORED_BLOCK=0;var STATIC_TREES=1;var DYN_TREES=2;/* The three kinds of block type */var MIN_MATCH=3;var MAX_MATCH=258;/* The minimum and maximum match lengths */// From deflate.h
/* ===========================================================================
	 * Internal compression state.
	 */var LENGTH_CODES=29;/* number of length codes, not counting the special END_BLOCK code */var LITERALS=256;/* number of literal bytes 0..255 */var L_CODES=LITERALS+1+LENGTH_CODES;/* number of Literal or Length codes, including the END_BLOCK code */var D_CODES=30;/* number of distance codes */var BL_CODES=19;/* number of codes used to transfer the bit lengths */var HEAP_SIZE=2*L_CODES+1;/* maximum heap size */var MAX_BITS=15;/* All codes must not exceed MAX_BITS bits */var Buf_size=16;/* size of bit buffer in bi_buf *//* ===========================================================================
	 * Constants
	 */var MAX_BL_BITS=7;/* Bit length codes must not exceed MAX_BL_BITS bits */var END_BLOCK=256;/* end of block literal code */var REP_3_6=16;/* repeat previous bit length 3-6 times (2 bits of repeat count) */var REPZ_3_10=17;/* repeat a zero length 3-10 times  (3 bits of repeat count) */var REPZ_11_138=18;/* repeat a zero length 11-138 times  (7 bits of repeat count) *//* eslint-disable comma-spacing,array-bracket-spacing */var extra_lbits=/* extra bits for each length code */[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];var extra_dbits=/* extra bits for each distance code */[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];var extra_blbits=/* extra bits for each bit length code */[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];var bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];/* eslint-enable comma-spacing,array-bracket-spacing *//* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 *//* ===========================================================================
	 * Local data. These are initialized only once.
	 */// We pre-fill arrays with 0 to avoid uninitialized gaps
var DIST_CODE_LEN=512;/* see definition of array dist_code below */// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree=new Array((L_CODES+2)*2);zero(static_ltree);/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */var static_dtree=new Array(D_CODES*2);zero(static_dtree);/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */var _dist_code=new Array(DIST_CODE_LEN);zero(_dist_code);/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */var _length_code=new Array(MAX_MATCH-MIN_MATCH+1);zero(_length_code);/* length code for each normalized match length (0 == MIN_MATCH) */var base_length=new Array(LENGTH_CODES);zero(base_length);/* First normalized length for each code (0 = MIN_MATCH) */var base_dist=new Array(D_CODES);zero(base_dist);/* First normalized distance for each code (0 = distance of 1) */function StaticTreeDesc(static_tree,extra_bits,extra_base,elems,max_length){this.static_tree=static_tree;/* static tree or NULL */this.extra_bits=extra_bits;/* extra bits for each code or NULL */this.extra_base=extra_base;/* base index for extra_bits */this.elems=elems;/* max number of elements in the tree */this.max_length=max_length;/* max bit length for the codes */// show if `static_tree` has data or dummy - needed for monomorphic objects
this.has_stree=static_tree&&static_tree.length;}var static_l_desc;var static_d_desc;var static_bl_desc;function TreeDesc(dyn_tree,stat_desc){this.dyn_tree=dyn_tree;/* the dynamic tree */this.max_code=0;/* largest code with non zero frequency */this.stat_desc=stat_desc;/* the corresponding static tree */}function d_code(dist){return dist<256?_dist_code[dist]:_dist_code[256+(dist>>>7)];}/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */function put_short(s,w){//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
s.pending_buf[s.pending++]=w&0xff;s.pending_buf[s.pending++]=w>>>8&0xff;}/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */function send_bits(s,value,length){if(s.bi_valid>Buf_size-length){s.bi_buf|=value<<s.bi_valid&0xffff;put_short(s,s.bi_buf);s.bi_buf=value>>Buf_size-s.bi_valid;s.bi_valid+=length-Buf_size;}else{s.bi_buf|=value<<s.bi_valid&0xffff;s.bi_valid+=length;}}function send_code(s,c,tree){send_bits(s,tree[c*2]/*.Code*/,tree[c*2+1]/*.Len*/);}/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */function bi_reverse(code,len){var res=0;do{res|=code&1;code>>>=1;res<<=1;}while(--len>0);return res>>>1;}/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */function bi_flush(s){if(s.bi_valid===16){put_short(s,s.bi_buf);s.bi_buf=0;s.bi_valid=0;}else if(s.bi_valid>=8){s.pending_buf[s.pending++]=s.bi_buf&0xff;s.bi_buf>>=8;s.bi_valid-=8;}}/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */function gen_bitlen(s,desc)//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{var tree=desc.dyn_tree;var max_code=desc.max_code;var stree=desc.stat_desc.static_tree;var has_stree=desc.stat_desc.has_stree;var extra=desc.stat_desc.extra_bits;var base=desc.stat_desc.extra_base;var max_length=desc.stat_desc.max_length;var h;/* heap index */var n,m;/* iterate over the tree elements */var bits;/* bit length */var xbits;/* extra bits */var f;/* frequency */var overflow=0;/* number of elements with bit length too large */for(bits=0;bits<=MAX_BITS;bits++){s.bl_count[bits]=0;}/* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */tree[s.heap[s.heap_max]*2+1]/*.Len*/=0;/* root of the heap */for(h=s.heap_max+1;h<HEAP_SIZE;h++){n=s.heap[h];bits=tree[tree[n*2+1]/*.Dad*/*2+1]/*.Len*/+1;if(bits>max_length){bits=max_length;overflow++;}tree[n*2+1]/*.Len*/=bits;/* We overwrite tree[n].Dad which is no longer needed */if(n>max_code){continue;}/* not a leaf node */s.bl_count[bits]++;xbits=0;if(n>=base){xbits=extra[n-base];}f=tree[n*2]/*.Freq*/;s.opt_len+=f*(bits+xbits);if(has_stree){s.static_len+=f*(stree[n*2+1]/*.Len*/+xbits);}}if(overflow===0){return;}// Trace((stderr,"\nbit length overflow\n"));
/* This happens for example on obj2 and pic of the Calgary corpus *//* Find the first bit length which could increase: */do{bits=max_length-1;while(s.bl_count[bits]===0){bits--;}s.bl_count[bits]--;/* move one leaf down the tree */s.bl_count[bits+1]+=2;/* move one overflow item as its brother */s.bl_count[max_length]--;/* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */overflow-=2;}while(overflow>0);/* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */for(bits=max_length;bits!==0;bits--){n=s.bl_count[bits];while(n!==0){m=s.heap[--h];if(m>max_code){continue;}if(tree[m*2+1]/*.Len*/!==bits){// Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
s.opt_len+=(bits-tree[m*2+1]/*.Len*/)*tree[m*2]/*.Freq*/;tree[m*2+1]/*.Len*/=bits;}n--;}}}/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */function gen_codes(tree,max_code,bl_count)//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{var next_code=new Array(MAX_BITS+1);/* next code value for each bit length */var code=0;/* running code value */var bits;/* bit index */var n;/* code index *//* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */for(bits=1;bits<=MAX_BITS;bits++){next_code[bits]=code=code+bl_count[bits-1]<<1;}/* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   *///Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
//        "inconsistent bit counts");
//Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
for(n=0;n<=max_code;n++){var len=tree[n*2+1]/*.Len*/;if(len===0){continue;}/* Now reverse the bits */tree[n*2]/*.Code*/=bi_reverse(next_code[len]++,len);//Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
//     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
}}/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */function tr_static_init(){var n;/* iterates over tree elements */var bits;/* bit counter */var length;/* length value */var code;/* code value */var dist;/* distance index */var bl_count=new Array(MAX_BITS+1);/* number of codes at each bit length for an optimal tree */// do check in _tr_init()
//if (static_init_done) return;
/* For some embedded targets, global variables are not initialized: *//*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*//* Initialize the mapping length (0..255) -> length code (0..28) */length=0;for(code=0;code<LENGTH_CODES-1;code++){base_length[code]=length;for(n=0;n<1<<extra_lbits[code];n++){_length_code[length++]=code;}}//Assert (length == 256, "tr_static_init: length != 256");
/* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */_length_code[length-1]=code;/* Initialize the mapping dist (0..32K) -> dist code (0..29) */dist=0;for(code=0;code<16;code++){base_dist[code]=dist;for(n=0;n<1<<extra_dbits[code];n++){_dist_code[dist++]=code;}}//Assert (dist == 256, "tr_static_init: dist != 256");
dist>>=7;/* from now on, all distances are divided by 128 */for(;code<D_CODES;code++){base_dist[code]=dist<<7;for(n=0;n<1<<extra_dbits[code]-7;n++){_dist_code[256+dist++]=code;}}//Assert (dist == 256, "tr_static_init: 256+dist != 512");
/* Construct the codes of the static literal tree */for(bits=0;bits<=MAX_BITS;bits++){bl_count[bits]=0;}n=0;while(n<=143){static_ltree[n*2+1]/*.Len*/=8;n++;bl_count[8]++;}while(n<=255){static_ltree[n*2+1]/*.Len*/=9;n++;bl_count[9]++;}while(n<=279){static_ltree[n*2+1]/*.Len*/=7;n++;bl_count[7]++;}while(n<=287){static_ltree[n*2+1]/*.Len*/=8;n++;bl_count[8]++;}/* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */gen_codes(static_ltree,L_CODES+1,bl_count);/* The static distance tree is trivial: */for(n=0;n<D_CODES;n++){static_dtree[n*2+1]/*.Len*/=5;static_dtree[n*2]/*.Code*/=bi_reverse(n,5);}// Now data ready and we can init static trees
static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,LITERALS+1,L_CODES,MAX_BITS);static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,D_CODES,MAX_BITS);static_bl_desc=new StaticTreeDesc(new Array(0),extra_blbits,0,BL_CODES,MAX_BL_BITS);//static_init_done = true;
}/* ===========================================================================
	 * Initialize a new block.
	 */function init_block(s){var n;/* iterates over tree elements *//* Initialize the trees. */for(n=0;n<L_CODES;n++){s.dyn_ltree[n*2]/*.Freq*/=0;}for(n=0;n<D_CODES;n++){s.dyn_dtree[n*2]/*.Freq*/=0;}for(n=0;n<BL_CODES;n++){s.bl_tree[n*2]/*.Freq*/=0;}s.dyn_ltree[END_BLOCK*2]/*.Freq*/=1;s.opt_len=s.static_len=0;s.last_lit=s.matches=0;}/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */function bi_windup(s){if(s.bi_valid>8){put_short(s,s.bi_buf);}else if(s.bi_valid>0){//put_byte(s, (Byte)s->bi_buf);
s.pending_buf[s.pending++]=s.bi_buf;}s.bi_buf=0;s.bi_valid=0;}/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */function copy_block(s,buf,len,header)//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{bi_windup(s);/* align on byte boundary */if(header){put_short(s,len);put_short(s,~len);}//  while (len--) {
//    put_byte(s, *buf++);
//  }
utils.arraySet(s.pending_buf,s.window,buf,len,s.pending);s.pending+=len;}/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */function smaller(tree,n,m,depth){var _n2=n*2;var _m2=m*2;return tree[_n2]/*.Freq*/<tree[_m2]/*.Freq*/||tree[_n2]/*.Freq*/===tree[_m2]/*.Freq*/&&depth[n]<=depth[m];}/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */function pqdownheap(s,tree,k)//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{var v=s.heap[k];var j=k<<1;/* left son of k */while(j<=s.heap_len){/* Set j to the smallest of the two sons: */if(j<s.heap_len&&smaller(tree,s.heap[j+1],s.heap[j],s.depth)){j++;}/* Exit if v is smaller than both sons */if(smaller(tree,v,s.heap[j],s.depth)){break;}/* Exchange v with the smallest son */s.heap[k]=s.heap[j];k=j;/* And continue down the tree, setting j to the left son of k */j<<=1;}s.heap[k]=v;}// inlined manually
// var SMALLEST = 1;
/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */function compress_block(s,ltree,dtree)//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{var dist;/* distance of matched string */var lc;/* match length or unmatched char (if dist == 0) */var lx=0;/* running index in l_buf */var code;/* the code to send */var extra;/* number of extra bits to send */if(s.last_lit!==0){do{dist=s.pending_buf[s.d_buf+lx*2]<<8|s.pending_buf[s.d_buf+lx*2+1];lc=s.pending_buf[s.l_buf+lx];lx++;if(dist===0){send_code(s,lc,ltree);/* send a literal byte *///Tracecv(isgraph(lc), (stderr," '%c' ", lc));
}else{/* Here, lc is the match length - MIN_MATCH */code=_length_code[lc];send_code(s,code+LITERALS+1,ltree);/* send the length code */extra=extra_lbits[code];if(extra!==0){lc-=base_length[code];send_bits(s,lc,extra);/* send the extra length bits */}dist--;/* dist is now the match distance - 1 */code=d_code(dist);//Assert (code < D_CODES, "bad d_code");
send_code(s,code,dtree);/* send the distance code */extra=extra_dbits[code];if(extra!==0){dist-=base_dist[code];send_bits(s,dist,extra);/* send the extra distance bits */}}/* literal or match pair ? *//* Check that the overlay between pending_buf and d_buf+l_buf is ok: *///Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
//       "pendingBuf overflow");
}while(lx<s.last_lit);}send_code(s,END_BLOCK,ltree);}/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */function build_tree(s,desc)//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{var tree=desc.dyn_tree;var stree=desc.stat_desc.static_tree;var has_stree=desc.stat_desc.has_stree;var elems=desc.stat_desc.elems;var n,m;/* iterate over heap elements */var max_code=-1;/* largest code with non zero frequency */var node;/* new node being created *//* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */s.heap_len=0;s.heap_max=HEAP_SIZE;for(n=0;n<elems;n++){if(tree[n*2]/*.Freq*/!==0){s.heap[++s.heap_len]=max_code=n;s.depth[n]=0;}else{tree[n*2+1]/*.Len*/=0;}}/* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */while(s.heap_len<2){node=s.heap[++s.heap_len]=max_code<2?++max_code:0;tree[node*2]/*.Freq*/=1;s.depth[node]=0;s.opt_len--;if(has_stree){s.static_len-=stree[node*2+1]/*.Len*/;}/* node is 0 or 1 so it does not have extra bits */}desc.max_code=max_code;/* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */for(n=s.heap_len>>1/*int /2*/;n>=1;n--){pqdownheap(s,tree,n);}/* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */node=elems;/* next internal node of the tree */do{//pqremove(s, tree, n);  /* n = node of least frequency */
/*** pqremove ***/n=s.heap[1/*SMALLEST*/];s.heap[1/*SMALLEST*/]=s.heap[s.heap_len--];pqdownheap(s,tree,1/*SMALLEST*/);/***/m=s.heap[1/*SMALLEST*/];/* m = node of next least frequency */s.heap[--s.heap_max]=n;/* keep the nodes sorted by frequency */s.heap[--s.heap_max]=m;/* Create a new node father of n and m */tree[node*2]/*.Freq*/=tree[n*2]/*.Freq*/+tree[m*2]/*.Freq*/;s.depth[node]=(s.depth[n]>=s.depth[m]?s.depth[n]:s.depth[m])+1;tree[n*2+1]/*.Dad*/=tree[m*2+1]/*.Dad*/=node;/* and insert the new node in the heap */s.heap[1/*SMALLEST*/]=node++;pqdownheap(s,tree,1/*SMALLEST*/);}while(s.heap_len>=2);s.heap[--s.heap_max]=s.heap[1/*SMALLEST*/];/* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */gen_bitlen(s,desc);/* The field len is now set, we can generate the bit codes */gen_codes(tree,max_code,s.bl_count);}/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */function scan_tree(s,tree,max_code)//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{var n;/* iterates over all tree elements */var prevlen=-1;/* last emitted length */var curlen;/* length of current code */var nextlen=tree[0*2+1]/*.Len*/;/* length of next code */var count=0;/* repeat count of the current code */var max_count=7;/* max repeat count */var min_count=4;/* min repeat count */if(nextlen===0){max_count=138;min_count=3;}tree[(max_code+1)*2+1]/*.Len*/=0xffff;/* guard */for(n=0;n<=max_code;n++){curlen=nextlen;nextlen=tree[(n+1)*2+1]/*.Len*/;if(++count<max_count&&curlen===nextlen){continue;}else if(count<min_count){s.bl_tree[curlen*2]/*.Freq*/+=count;}else if(curlen!==0){if(curlen!==prevlen){s.bl_tree[curlen*2]/*.Freq*/++;}s.bl_tree[REP_3_6*2]/*.Freq*/++;}else if(count<=10){s.bl_tree[REPZ_3_10*2]/*.Freq*/++;}else{s.bl_tree[REPZ_11_138*2]/*.Freq*/++;}count=0;prevlen=curlen;if(nextlen===0){max_count=138;min_count=3;}else if(curlen===nextlen){max_count=6;min_count=3;}else{max_count=7;min_count=4;}}}/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */function send_tree(s,tree,max_code)//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{var n;/* iterates over all tree elements */var prevlen=-1;/* last emitted length */var curlen;/* length of current code */var nextlen=tree[0*2+1]/*.Len*/;/* length of next code */var count=0;/* repeat count of the current code */var max_count=7;/* max repeat count */var min_count=4;/* min repeat count *//* tree[max_code+1].Len = -1; *//* guard already set */if(nextlen===0){max_count=138;min_count=3;}for(n=0;n<=max_code;n++){curlen=nextlen;nextlen=tree[(n+1)*2+1]/*.Len*/;if(++count<max_count&&curlen===nextlen){continue;}else if(count<min_count){do{send_code(s,curlen,s.bl_tree);}while(--count!==0);}else if(curlen!==0){if(curlen!==prevlen){send_code(s,curlen,s.bl_tree);count--;}//Assert(count >= 3 && count <= 6, " 3_6?");
send_code(s,REP_3_6,s.bl_tree);send_bits(s,count-3,2);}else if(count<=10){send_code(s,REPZ_3_10,s.bl_tree);send_bits(s,count-3,3);}else{send_code(s,REPZ_11_138,s.bl_tree);send_bits(s,count-11,7);}count=0;prevlen=curlen;if(nextlen===0){max_count=138;min_count=3;}else if(curlen===nextlen){max_count=6;min_count=3;}else{max_count=7;min_count=4;}}}/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */function build_bl_tree(s){var max_blindex;/* index of last bit length code of non zero freq *//* Determine the bit length frequencies for literal and distance trees */scan_tree(s,s.dyn_ltree,s.l_desc.max_code);scan_tree(s,s.dyn_dtree,s.d_desc.max_code);/* Build the bit length tree: */build_tree(s,s.bl_desc);/* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   *//* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */for(max_blindex=BL_CODES-1;max_blindex>=3;max_blindex--){if(s.bl_tree[bl_order[max_blindex]*2+1]/*.Len*/!==0){break;}}/* Update opt_len to include the bit length tree and counts */s.opt_len+=3*(max_blindex+1)+5+5+4;//Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
//        s->opt_len, s->static_len));
return max_blindex;}/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */function send_all_trees(s,lcodes,dcodes,blcodes)//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{var rank;/* index in bl_order *///Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
//Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
//        "too many codes");
//Tracev((stderr, "\nbl counts: "));
send_bits(s,lcodes-257,5);/* not +255 as stated in appnote.txt */send_bits(s,dcodes-1,5);send_bits(s,blcodes-4,4);/* not -3 as stated in appnote.txt */for(rank=0;rank<blcodes;rank++){//Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
send_bits(s,s.bl_tree[bl_order[rank]*2+1]/*.Len*/,3);}//Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
send_tree(s,s.dyn_ltree,lcodes-1);/* literal tree *///Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
send_tree(s,s.dyn_dtree,dcodes-1);/* distance tree *///Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */function detect_data_type(s){/* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */var black_mask=0xf3ffc07f;var n;/* Check for non-textual ("black-listed") bytes. */for(n=0;n<=31;n++,black_mask>>>=1){if(black_mask&1&&s.dyn_ltree[n*2]/*.Freq*/!==0){return Z_BINARY;}}/* Check for textual ("white-listed") bytes. */if(s.dyn_ltree[9*2]/*.Freq*/!==0||s.dyn_ltree[10*2]/*.Freq*/!==0||s.dyn_ltree[13*2]/*.Freq*/!==0){return Z_TEXT;}for(n=32;n<LITERALS;n++){if(s.dyn_ltree[n*2]/*.Freq*/!==0){return Z_TEXT;}}/* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */return Z_BINARY;}var static_init_done=false;/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */function _tr_init(s){if(!static_init_done){tr_static_init();static_init_done=true;}s.l_desc=new TreeDesc(s.dyn_ltree,static_l_desc);s.d_desc=new TreeDesc(s.dyn_dtree,static_d_desc);s.bl_desc=new TreeDesc(s.bl_tree,static_bl_desc);s.bi_buf=0;s.bi_valid=0;/* Initialize the first block of the first file: */init_block(s);}/* ===========================================================================
	 * Send a stored block
	 */function _tr_stored_block(s,buf,stored_len,last)//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{send_bits(s,(STORED_BLOCK<<1)+(last?1:0),3);/* send block type */copy_block(s,buf,stored_len,true);/* with header */}/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */function _tr_align(s){send_bits(s,STATIC_TREES<<1,3);send_code(s,END_BLOCK,static_ltree);bi_flush(s);}/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */function _tr_flush_block(s,buf,stored_len,last)//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{var opt_lenb,static_lenb;/* opt_len and static_len in bytes */var max_blindex=0;/* index of last bit length code of non zero freq *//* Build the Huffman trees unless a stored block is forced */if(s.level>0){/* Check if the file is binary or text */if(s.strm.data_type===Z_UNKNOWN){s.strm.data_type=detect_data_type(s);}/* Construct the literal and distance trees */build_tree(s,s.l_desc);// Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
//        s->static_len));
build_tree(s,s.d_desc);// Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
//        s->static_len));
/* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     *//* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */max_blindex=build_bl_tree(s);/* Determine the best encoding. Compute the block lengths in bytes. */opt_lenb=s.opt_len+3+7>>>3;static_lenb=s.static_len+3+7>>>3;// Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
//        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
//        s->last_lit));
if(static_lenb<=opt_lenb){opt_lenb=static_lenb;}}else{// Assert(buf != (char*)0, "lost buf");
opt_lenb=static_lenb=stored_len+5;/* force a stored block */}if(stored_len+4<=opt_lenb&&buf!==-1){/* 4: two words for the lengths *//* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */_tr_stored_block(s,buf,stored_len,last);}else if(s.strategy===Z_FIXED||static_lenb===opt_lenb){send_bits(s,(STATIC_TREES<<1)+(last?1:0),3);compress_block(s,static_ltree,static_dtree);}else{send_bits(s,(DYN_TREES<<1)+(last?1:0),3);send_all_trees(s,s.l_desc.max_code+1,s.d_desc.max_code+1,max_blindex+1);compress_block(s,s.dyn_ltree,s.dyn_dtree);}// Assert (s->compressed_len == s->bits_sent, "bad compressed size");
/* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */init_block(s);if(last){bi_windup(s);}// Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
//       s->compressed_len-7*last));
}/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */function _tr_tally(s,dist,lc)//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{//var out_length, in_length, dcode;
s.pending_buf[s.d_buf+s.last_lit*2]=dist>>>8&0xff;s.pending_buf[s.d_buf+s.last_lit*2+1]=dist&0xff;s.pending_buf[s.l_buf+s.last_lit]=lc&0xff;s.last_lit++;if(dist===0){/* lc is the unmatched char */s.dyn_ltree[lc*2]/*.Freq*/++;}else{s.matches++;/* Here, lc is the match length - MIN_MATCH */dist--;/* dist = match distance - 1 *///Assert((ush)dist < (ush)MAX_DIST(s) &&
//       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
//       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
s.dyn_ltree[(_length_code[lc]+LITERALS+1)*2]/*.Freq*/++;s.dyn_dtree[d_code(dist)*2]/*.Freq*/++;}// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif
return s.last_lit===s.lit_bufsize-1;/* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */}exports._tr_init=_tr_init;exports._tr_stored_block=_tr_stored_block;exports._tr_flush_block=_tr_flush_block;exports._tr_tally=_tr_tally;exports._tr_align=_tr_align;/***/},/* 101 *//***/function(module,exports){'use strict';// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.
function adler32(adler,buf,len,pos){var s1=adler&0xffff|0,s2=adler>>>16&0xffff|0,n=0;while(len!==0){// Set limit ~ twice less than 5552, to keep
// s2 in 31-bits, because we force signed ints.
// in other case %= will fail.
n=len>2000?2000:len;len-=n;do{s1=s1+buf[pos++]|0;s2=s2+s1|0;}while(--n);s1%=65521;s2%=65521;}return s1|s2<<16|0;}module.exports=adler32;/***/},/* 102 *//***/function(module,exports){'use strict';// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// Use ordinary array, since untyped makes no boost here
function makeTable(){var c,table=[];for(var n=0;n<256;n++){c=n;for(var k=0;k<8;k++){c=c&1?0xEDB88320^c>>>1:c>>>1;}table[n]=c;}return table;}// Create table on load. Just 255 signed longs. Not a problem.
var crcTable=makeTable();function crc32(crc,buf,len,pos){var t=crcTable,end=pos+len;crc^=-1;for(var i=pos;i<end;i++){crc=crc>>>8^t[(crc^buf[i])&0xFF];}return crc^-1;// >>> 0;
}module.exports=crc32;/***/},/* 103 *//***/function(module,exports,__webpack_require__){'use strict';var utils=__webpack_require__(99);var adler32=__webpack_require__(101);var crc32=__webpack_require__(102);var inflate_fast=__webpack_require__(104);var inflate_table=__webpack_require__(105);var CODES=0;var LENS=1;var DISTS=2;/* Public constants ==========================================================*//* ===========================================================================*//* Allowed flush values; see deflate() and inflate() below for details *///var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH=4;var Z_BLOCK=5;var Z_TREES=6;/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */var Z_OK=0;var Z_STREAM_END=1;var Z_NEED_DICT=2;//var Z_ERRNO         = -1;
var Z_STREAM_ERROR=-2;var Z_DATA_ERROR=-3;var Z_MEM_ERROR=-4;var Z_BUF_ERROR=-5;//var Z_VERSION_ERROR = -6;
/* The deflate compression method */var Z_DEFLATED=8;/* STATES ====================================================================*//* ===========================================================================*/var HEAD=1;/* i: waiting for magic header */var FLAGS=2;/* i: waiting for method and flags (gzip) */var TIME=3;/* i: waiting for modification time (gzip) */var OS=4;/* i: waiting for extra flags and operating system (gzip) */var EXLEN=5;/* i: waiting for extra length (gzip) */var EXTRA=6;/* i: waiting for extra bytes (gzip) */var NAME=7;/* i: waiting for end of file name (gzip) */var COMMENT=8;/* i: waiting for end of comment (gzip) */var HCRC=9;/* i: waiting for header crc (gzip) */var DICTID=10;/* i: waiting for dictionary check value */var DICT=11;/* waiting for inflateSetDictionary() call */var TYPE=12;/* i: waiting for type bits, including last-flag bit */var TYPEDO=13;/* i: same, but skip check to exit inflate on new block */var STORED=14;/* i: waiting for stored size (length and complement) */var COPY_=15;/* i/o: same as COPY below, but only first time in */var COPY=16;/* i/o: waiting for input or output to copy stored block */var TABLE=17;/* i: waiting for dynamic block table lengths */var LENLENS=18;/* i: waiting for code length code lengths */var CODELENS=19;/* i: waiting for length/lit and distance code lengths */var LEN_=20;/* i: same as LEN below, but only first time in */var LEN=21;/* i: waiting for length/lit/eob code */var LENEXT=22;/* i: waiting for length extra bits */var DIST=23;/* i: waiting for distance code */var DISTEXT=24;/* i: waiting for distance extra bits */var MATCH=25;/* o: waiting for output space to copy string */var LIT=26;/* o: waiting for output space to write literal */var CHECK=27;/* i: waiting for 32-bit check value */var LENGTH=28;/* i: waiting for 32-bit length (gzip) */var DONE=29;/* finished check, done -- remain here until reset */var BAD=30;/* got a data error -- remain here until reset */var MEM=31;/* got an inflate() memory error -- remain here until reset */var SYNC=32;/* looking for synchronization bytes to restart inflate() *//* ===========================================================================*/var ENOUGH_LENS=852;var ENOUGH_DISTS=592;//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
var MAX_WBITS=15;/* 32K LZ77 window */var DEF_WBITS=MAX_WBITS;function zswap32(q){return(q>>>24&0xff)+(q>>>8&0xff00)+((q&0xff00)<<8)+((q&0xff)<<24);}function InflateState(){this.mode=0;/* current inflate mode */this.last=false;/* true if processing last block */this.wrap=0;/* bit 0 true for zlib, bit 1 true for gzip */this.havedict=false;/* true if dictionary provided */this.flags=0;/* gzip header method and flags (0 if zlib) */this.dmax=0;/* zlib header max distance (INFLATE_STRICT) */this.check=0;/* protected copy of check value */this.total=0;/* protected copy of output count */// TODO: may be {}
this.head=null;/* where to save gzip header information *//* sliding window */this.wbits=0;/* log base 2 of requested window size */this.wsize=0;/* window size or zero if not using window */this.whave=0;/* valid bytes in the window */this.wnext=0;/* window write index */this.window=null;/* allocated sliding window, if needed *//* bit accumulator */this.hold=0;/* input bit accumulator */this.bits=0;/* number of bits in "in" *//* for string and stored block copying */this.length=0;/* literal or length of data to copy */this.offset=0;/* distance back to copy string from *//* for table and code decoding */this.extra=0;/* extra bits needed *//* fixed and dynamic code tables */this.lencode=null;/* starting table for length/literal codes */this.distcode=null;/* starting table for distance codes */this.lenbits=0;/* index bits for lencode */this.distbits=0;/* index bits for distcode *//* dynamic table building */this.ncode=0;/* number of code length code lengths */this.nlen=0;/* number of length code lengths */this.ndist=0;/* number of distance code lengths */this.have=0;/* number of code lengths in lens[] */this.next=null;/* next available space in codes[] */this.lens=new utils.Buf16(320);/* temporary storage for code lengths */this.work=new utils.Buf16(288);/* work area for code table building *//*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  *///this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
this.lendyn=null;/* dynamic table for length/literal codes (JS specific) */this.distdyn=null;/* dynamic table for distance codes (JS specific) */this.sane=0;/* if false, allow invalid distance too far */this.back=0;/* bits back of last unprocessed length/lit */this.was=0;/* initial length of match */}function inflateResetKeep(strm){var state;if(!strm||!strm.state){return Z_STREAM_ERROR;}state=strm.state;strm.total_in=strm.total_out=state.total=0;strm.msg='';/*Z_NULL*/if(state.wrap){/* to support ill-conceived Java test suite */strm.adler=state.wrap&1;}state.mode=HEAD;state.last=0;state.havedict=0;state.dmax=32768;state.head=null/*Z_NULL*/;state.hold=0;state.bits=0;//state.lencode = state.distcode = state.next = state.codes;
state.lencode=state.lendyn=new utils.Buf32(ENOUGH_LENS);state.distcode=state.distdyn=new utils.Buf32(ENOUGH_DISTS);state.sane=1;state.back=-1;//Tracev((stderr, "inflate: reset\n"));
return Z_OK;}function inflateReset(strm){var state;if(!strm||!strm.state){return Z_STREAM_ERROR;}state=strm.state;state.wsize=0;state.whave=0;state.wnext=0;return inflateResetKeep(strm);}function inflateReset2(strm,windowBits){var wrap;var state;/* get the state */if(!strm||!strm.state){return Z_STREAM_ERROR;}state=strm.state;/* extract wrap request from windowBits parameter */if(windowBits<0){wrap=0;windowBits=-windowBits;}else{wrap=(windowBits>>4)+1;if(windowBits<48){windowBits&=15;}}/* set number of window bits, free window if different */if(windowBits&&(windowBits<8||windowBits>15)){return Z_STREAM_ERROR;}if(state.window!==null&&state.wbits!==windowBits){state.window=null;}/* update state and reset the rest of it */state.wrap=wrap;state.wbits=windowBits;return inflateReset(strm);}function inflateInit2(strm,windowBits){var ret;var state;if(!strm){return Z_STREAM_ERROR;}//strm.msg = Z_NULL;                 /* in case we return an error */
state=new InflateState();//if (state === Z_NULL) return Z_MEM_ERROR;
//Tracev((stderr, "inflate: allocated\n"));
strm.state=state;state.window=null/*Z_NULL*/;ret=inflateReset2(strm,windowBits);if(ret!==Z_OK){strm.state=null/*Z_NULL*/;}return ret;}function inflateInit(strm){return inflateInit2(strm,DEF_WBITS);}/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */var virgin=true;var lenfix,distfix;// We have no pointers in JS, so keep tables separate
function fixedtables(state){/* build fixed huffman tables if first call (may not be thread safe) */if(virgin){var sym;lenfix=new utils.Buf32(512);distfix=new utils.Buf32(32);/* literal/length table */sym=0;while(sym<144){state.lens[sym++]=8;}while(sym<256){state.lens[sym++]=9;}while(sym<280){state.lens[sym++]=7;}while(sym<288){state.lens[sym++]=8;}inflate_table(LENS,state.lens,0,288,lenfix,0,state.work,{bits:9});/* distance table */sym=0;while(sym<32){state.lens[sym++]=5;}inflate_table(DISTS,state.lens,0,32,distfix,0,state.work,{bits:5});/* do this just once */virgin=false;}state.lencode=lenfix;state.lenbits=9;state.distcode=distfix;state.distbits=5;}/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */function updatewindow(strm,src,end,copy){var dist;var state=strm.state;/* if it hasn't been done already, allocate space for the window */if(state.window===null){state.wsize=1<<state.wbits;state.wnext=0;state.whave=0;state.window=new utils.Buf8(state.wsize);}/* copy state->wsize or less output bytes into the circular window */if(copy>=state.wsize){utils.arraySet(state.window,src,end-state.wsize,state.wsize,0);state.wnext=0;state.whave=state.wsize;}else{dist=state.wsize-state.wnext;if(dist>copy){dist=copy;}//zmemcpy(state->window + state->wnext, end - copy, dist);
utils.arraySet(state.window,src,end-copy,dist,state.wnext);copy-=dist;if(copy){//zmemcpy(state->window, end - copy, copy);
utils.arraySet(state.window,src,end-copy,copy,0);state.wnext=copy;state.whave=state.wsize;}else{state.wnext+=dist;if(state.wnext===state.wsize){state.wnext=0;}if(state.whave<state.wsize){state.whave+=dist;}}}return 0;}function inflate(strm,flush){var state;var input,output;// input/output buffers
var next;/* next input INDEX */var put;/* next output INDEX */var have,left;/* available input and output */var hold;/* bit buffer */var bits;/* bits in bit buffer */var _in,_out;/* save starting available input and output */var copy;/* number of stored or match bytes to copy */var from;/* where to copy match bytes from */var from_source;var here=0;/* current decoding table entry */var here_bits,here_op,here_val;// paked "here" denormalized (JS specific)
//var last;                   /* parent table entry */
var last_bits,last_op,last_val;// paked "last" denormalized (JS specific)
var len;/* length to copy for repeats, bits to drop */var ret;/* return code */var hbuf=new utils.Buf8(4);/* buffer for gzip header crc calculation */var opts;var n;// temporary var for NEED_BITS
var order=/* permutation of code lengths */[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!strm||!strm.state||!strm.output||!strm.input&&strm.avail_in!==0){return Z_STREAM_ERROR;}state=strm.state;if(state.mode===TYPE){state.mode=TYPEDO;}/* skip check *///--- LOAD() ---
put=strm.next_out;output=strm.output;left=strm.avail_out;next=strm.next_in;input=strm.input;have=strm.avail_in;hold=state.hold;bits=state.bits;//---
_in=have;_out=left;ret=Z_OK;inf_leave:// goto emulation
for(;;){switch(state.mode){case HEAD:if(state.wrap===0){state.mode=TYPEDO;break;}//=== NEEDBITS(16);
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.wrap&2&&hold===0x8b1f){/* gzip header */state.check=0/*crc32(0L, Z_NULL, 0)*/;//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32(state.check,hbuf,2,0);//===//
//=== INITBITS();
hold=0;bits=0;//===//
state.mode=FLAGS;break;}state.flags=0;/* expect zlib header */if(state.head){state.head.done=false;}if(!(state.wrap&1)||/* check if zlib header allowed */(((hold&0xff)<</*BITS(8)*/8)+(hold>>8))%31){strm.msg='incorrect header check';state.mode=BAD;break;}if((hold&0x0f)!==/*BITS(4)*/Z_DEFLATED){strm.msg='unknown compression method';state.mode=BAD;break;}//--- DROPBITS(4) ---//
hold>>>=4;bits-=4;//---//
len=(hold&0x0f)+/*BITS(4)*/8;if(state.wbits===0){state.wbits=len;}else if(len>state.wbits){strm.msg='invalid window size';state.mode=BAD;break;}state.dmax=1<<len;//Tracev((stderr, "inflate:   zlib header ok\n"));
strm.adler=state.check=1/*adler32(0L, Z_NULL, 0)*/;state.mode=hold&0x200?DICTID:TYPE;//=== INITBITS();
hold=0;bits=0;//===//
break;case FLAGS://=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.flags=hold;if((state.flags&0xff)!==Z_DEFLATED){strm.msg='unknown compression method';state.mode=BAD;break;}if(state.flags&0xe000){strm.msg='unknown header flags set';state.mode=BAD;break;}if(state.head){state.head.text=hold>>8&1;}if(state.flags&0x0200){//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32(state.check,hbuf,2,0);//===//
}//=== INITBITS();
hold=0;bits=0;//===//
state.mode=TIME;/* falls through */case TIME://=== NEEDBITS(32); */
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.head){state.head.time=hold;}if(state.flags&0x0200){//=== CRC4(state.check, hold)
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;hbuf[2]=hold>>>16&0xff;hbuf[3]=hold>>>24&0xff;state.check=crc32(state.check,hbuf,4,0);//===
}//=== INITBITS();
hold=0;bits=0;//===//
state.mode=OS;/* falls through */case OS://=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.head){state.head.xflags=hold&0xff;state.head.os=hold>>8;}if(state.flags&0x0200){//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32(state.check,hbuf,2,0);//===//
}//=== INITBITS();
hold=0;bits=0;//===//
state.mode=EXLEN;/* falls through */case EXLEN:if(state.flags&0x0400){//=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.length=hold;if(state.head){state.head.extra_len=hold;}if(state.flags&0x0200){//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32(state.check,hbuf,2,0);//===//
}//=== INITBITS();
hold=0;bits=0;//===//
}else if(state.head){state.head.extra=null/*Z_NULL*/;}state.mode=EXTRA;/* falls through */case EXTRA:if(state.flags&0x0400){copy=state.length;if(copy>have){copy=have;}if(copy){if(state.head){len=state.head.extra_len-state.length;if(!state.head.extra){// Use untyped array for more conveniend processing later
state.head.extra=new Array(state.head.extra_len);}utils.arraySet(state.head.extra,input,next,// extra field is limited to 65536 bytes
// - no need for additional size check
copy,/*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/len);//zmemcpy(state.head.extra + len, next,
//        len + copy > state.head.extra_max ?
//        state.head.extra_max - len : copy);
}if(state.flags&0x0200){state.check=crc32(state.check,input,copy,next);}have-=copy;next+=copy;state.length-=copy;}if(state.length){break inf_leave;}}state.length=0;state.mode=NAME;/* falls through */case NAME:if(state.flags&0x0800){if(have===0){break inf_leave;}copy=0;do{// TODO: 2 or 1 bytes?
len=input[next+copy++];/* use constant limit because in js we should not preallocate memory */if(state.head&&len&&state.length<65536/*state.head.name_max*/){state.head.name+=String.fromCharCode(len);}}while(len&&copy<have);if(state.flags&0x0200){state.check=crc32(state.check,input,copy,next);}have-=copy;next+=copy;if(len){break inf_leave;}}else if(state.head){state.head.name=null;}state.length=0;state.mode=COMMENT;/* falls through */case COMMENT:if(state.flags&0x1000){if(have===0){break inf_leave;}copy=0;do{len=input[next+copy++];/* use constant limit because in js we should not preallocate memory */if(state.head&&len&&state.length<65536/*state.head.comm_max*/){state.head.comment+=String.fromCharCode(len);}}while(len&&copy<have);if(state.flags&0x0200){state.check=crc32(state.check,input,copy,next);}have-=copy;next+=copy;if(len){break inf_leave;}}else if(state.head){state.head.comment=null;}state.mode=HCRC;/* falls through */case HCRC:if(state.flags&0x0200){//=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(hold!==(state.check&0xffff)){strm.msg='header crc mismatch';state.mode=BAD;break;}//=== INITBITS();
hold=0;bits=0;//===//
}if(state.head){state.head.hcrc=state.flags>>9&1;state.head.done=true;}strm.adler=state.check=0;state.mode=TYPE;break;case DICTID://=== NEEDBITS(32); */
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
strm.adler=state.check=zswap32(hold);//=== INITBITS();
hold=0;bits=0;//===//
state.mode=DICT;/* falls through */case DICT:if(state.havedict===0){//--- RESTORE() ---
strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state.hold=hold;state.bits=bits;//---
return Z_NEED_DICT;}strm.adler=state.check=1/*adler32(0L, Z_NULL, 0)*/;state.mode=TYPE;/* falls through */case TYPE:if(flush===Z_BLOCK||flush===Z_TREES){break inf_leave;}/* falls through */case TYPEDO:if(state.last){//--- BYTEBITS() ---//
hold>>>=bits&7;bits-=bits&7;//---//
state.mode=CHECK;break;}//=== NEEDBITS(3); */
while(bits<3){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.last=hold&0x01/*BITS(1)*/;//--- DROPBITS(1) ---//
hold>>>=1;bits-=1;//---//
switch(hold&0x03){/*BITS(2)*/case 0:/* stored block *///Tracev((stderr, "inflate:     stored block%s\n",
//        state.last ? " (last)" : ""));
state.mode=STORED;break;case 1:/* fixed block */fixedtables(state);//Tracev((stderr, "inflate:     fixed codes block%s\n",
//        state.last ? " (last)" : ""));
state.mode=LEN_;/* decode codes */if(flush===Z_TREES){//--- DROPBITS(2) ---//
hold>>>=2;bits-=2;//---//
break inf_leave;}break;case 2:/* dynamic block *///Tracev((stderr, "inflate:     dynamic codes block%s\n",
//        state.last ? " (last)" : ""));
state.mode=TABLE;break;case 3:strm.msg='invalid block type';state.mode=BAD;}//--- DROPBITS(2) ---//
hold>>>=2;bits-=2;//---//
break;case STORED://--- BYTEBITS() ---// /* go to byte boundary */
hold>>>=bits&7;bits-=bits&7;//---//
//=== NEEDBITS(32); */
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if((hold&0xffff)!==(hold>>>16^0xffff)){strm.msg='invalid stored block lengths';state.mode=BAD;break;}state.length=hold&0xffff;//Tracev((stderr, "inflate:       stored length %u\n",
//        state.length));
//=== INITBITS();
hold=0;bits=0;//===//
state.mode=COPY_;if(flush===Z_TREES){break inf_leave;}/* falls through */case COPY_:state.mode=COPY;/* falls through */case COPY:copy=state.length;if(copy){if(copy>have){copy=have;}if(copy>left){copy=left;}if(copy===0){break inf_leave;}//--- zmemcpy(put, next, copy); ---
utils.arraySet(output,input,next,copy,put);//---//
have-=copy;next+=copy;left-=copy;put+=copy;state.length-=copy;break;}//Tracev((stderr, "inflate:       stored end\n"));
state.mode=TYPE;break;case TABLE://=== NEEDBITS(14); */
while(bits<14){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.nlen=(hold&0x1f)+/*BITS(5)*/257;//--- DROPBITS(5) ---//
hold>>>=5;bits-=5;//---//
state.ndist=(hold&0x1f)+/*BITS(5)*/1;//--- DROPBITS(5) ---//
hold>>>=5;bits-=5;//---//
state.ncode=(hold&0x0f)+/*BITS(4)*/4;//--- DROPBITS(4) ---//
hold>>>=4;bits-=4;//---//
//#ifndef PKZIP_BUG_WORKAROUND
if(state.nlen>286||state.ndist>30){strm.msg='too many length or distance symbols';state.mode=BAD;break;}//#endif
//Tracev((stderr, "inflate:       table sizes ok\n"));
state.have=0;state.mode=LENLENS;/* falls through */case LENLENS:while(state.have<state.ncode){//=== NEEDBITS(3);
while(bits<3){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.lens[order[state.have++]]=hold&0x07;//BITS(3);
//--- DROPBITS(3) ---//
hold>>>=3;bits-=3;//---//
}while(state.have<19){state.lens[order[state.have++]]=0;}// We have separate tables & no pointers. 2 commented lines below not needed.
//state.next = state.codes;
//state.lencode = state.next;
// Switch to use dynamic table
state.lencode=state.lendyn;state.lenbits=7;opts={bits:state.lenbits};ret=inflate_table(CODES,state.lens,0,19,state.lencode,0,state.work,opts);state.lenbits=opts.bits;if(ret){strm.msg='invalid code lengths set';state.mode=BAD;break;}//Tracev((stderr, "inflate:       code lengths ok\n"));
state.have=0;state.mode=CODELENS;/* falls through */case CODELENS:while(state.have<state.nlen+state.ndist){for(;;){here=state.lencode[hold&(1<<state.lenbits)-1];/*BITS(state.lenbits)*/here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}if(here_val<16){//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
state.lens[state.have++]=here_val;}else{if(here_val===16){//=== NEEDBITS(here.bits + 2);
n=here_bits+2;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
if(state.have===0){strm.msg='invalid bit length repeat';state.mode=BAD;break;}len=state.lens[state.have-1];copy=3+(hold&0x03);//BITS(2);
//--- DROPBITS(2) ---//
hold>>>=2;bits-=2;//---//
}else if(here_val===17){//=== NEEDBITS(here.bits + 3);
n=here_bits+3;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
len=0;copy=3+(hold&0x07);//BITS(3);
//--- DROPBITS(3) ---//
hold>>>=3;bits-=3;//---//
}else{//=== NEEDBITS(here.bits + 7);
n=here_bits+7;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
len=0;copy=11+(hold&0x7f);//BITS(7);
//--- DROPBITS(7) ---//
hold>>>=7;bits-=7;//---//
}if(state.have+copy>state.nlen+state.ndist){strm.msg='invalid bit length repeat';state.mode=BAD;break;}while(copy--){state.lens[state.have++]=len;}}}/* handle error breaks in while */if(state.mode===BAD){break;}/* check for end-of-block code (better have one) */if(state.lens[256]===0){strm.msg='invalid code -- missing end-of-block';state.mode=BAD;break;}/* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */state.lenbits=9;opts={bits:state.lenbits};ret=inflate_table(LENS,state.lens,0,state.nlen,state.lencode,0,state.work,opts);// We have separate tables & no pointers. 2 commented lines below not needed.
// state.next_index = opts.table_index;
state.lenbits=opts.bits;// state.lencode = state.next;
if(ret){strm.msg='invalid literal/lengths set';state.mode=BAD;break;}state.distbits=6;//state.distcode.copy(state.codes);
// Switch to use dynamic table
state.distcode=state.distdyn;opts={bits:state.distbits};ret=inflate_table(DISTS,state.lens,state.nlen,state.ndist,state.distcode,0,state.work,opts);// We have separate tables & no pointers. 2 commented lines below not needed.
// state.next_index = opts.table_index;
state.distbits=opts.bits;// state.distcode = state.next;
if(ret){strm.msg='invalid distances set';state.mode=BAD;break;}//Tracev((stderr, 'inflate:       codes ok\n'));
state.mode=LEN_;if(flush===Z_TREES){break inf_leave;}/* falls through */case LEN_:state.mode=LEN;/* falls through */case LEN:if(have>=6&&left>=258){//--- RESTORE() ---
strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state.hold=hold;state.bits=bits;//---
inflate_fast(strm,_out);//--- LOAD() ---
put=strm.next_out;output=strm.output;left=strm.avail_out;next=strm.next_in;input=strm.input;have=strm.avail_in;hold=state.hold;bits=state.bits;//---
if(state.mode===TYPE){state.back=-1;}break;}state.back=0;for(;;){here=state.lencode[hold&(1<<state.lenbits)-1];/*BITS(state.lenbits)*/here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}if(here_op&&(here_op&0xf0)===0){last_bits=here_bits;last_op=here_op;last_val=here_val;for(;;){here=state.lencode[last_val+((hold&(1<<last_bits+last_op)-1)>>/*BITS(last.bits + last.op)*/last_bits)];here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(last_bits+here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}//--- DROPBITS(last.bits) ---//
hold>>>=last_bits;bits-=last_bits;//---//
state.back+=last_bits;}//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
state.back+=here_bits;state.length=here_val;if(here_op===0){//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
//        "inflate:         literal '%c'\n" :
//        "inflate:         literal 0x%02x\n", here.val));
state.mode=LIT;break;}if(here_op&32){//Tracevv((stderr, "inflate:         end of block\n"));
state.back=-1;state.mode=TYPE;break;}if(here_op&64){strm.msg='invalid literal/length code';state.mode=BAD;break;}state.extra=here_op&15;state.mode=LENEXT;/* falls through */case LENEXT:if(state.extra){//=== NEEDBITS(state.extra);
n=state.extra;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.length+=hold&(1<<state.extra)-1/*BITS(state.extra)*/;//--- DROPBITS(state.extra) ---//
hold>>>=state.extra;bits-=state.extra;//---//
state.back+=state.extra;}//Tracevv((stderr, "inflate:         length %u\n", state.length));
state.was=state.length;state.mode=DIST;/* falls through */case DIST:for(;;){here=state.distcode[hold&(1<<state.distbits)-1];/*BITS(state.distbits)*/here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}if((here_op&0xf0)===0){last_bits=here_bits;last_op=here_op;last_val=here_val;for(;;){here=state.distcode[last_val+((hold&(1<<last_bits+last_op)-1)>>/*BITS(last.bits + last.op)*/last_bits)];here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(last_bits+here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}//--- DROPBITS(last.bits) ---//
hold>>>=last_bits;bits-=last_bits;//---//
state.back+=last_bits;}//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
state.back+=here_bits;if(here_op&64){strm.msg='invalid distance code';state.mode=BAD;break;}state.offset=here_val;state.extra=here_op&15;state.mode=DISTEXT;/* falls through */case DISTEXT:if(state.extra){//=== NEEDBITS(state.extra);
n=state.extra;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.offset+=hold&(1<<state.extra)-1/*BITS(state.extra)*/;//--- DROPBITS(state.extra) ---//
hold>>>=state.extra;bits-=state.extra;//---//
state.back+=state.extra;}//#ifdef INFLATE_STRICT
if(state.offset>state.dmax){strm.msg='invalid distance too far back';state.mode=BAD;break;}//#endif
//Tracevv((stderr, "inflate:         distance %u\n", state.offset));
state.mode=MATCH;/* falls through */case MATCH:if(left===0){break inf_leave;}copy=_out-left;if(state.offset>copy){/* copy from window */copy=state.offset-copy;if(copy>state.whave){if(state.sane){strm.msg='invalid distance too far back';state.mode=BAD;break;}// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
}if(copy>state.wnext){copy-=state.wnext;from=state.wsize-copy;}else{from=state.wnext-copy;}if(copy>state.length){copy=state.length;}from_source=state.window;}else{/* copy from output */from_source=output;from=put-state.offset;copy=state.length;}if(copy>left){copy=left;}left-=copy;state.length-=copy;do{output[put++]=from_source[from++];}while(--copy);if(state.length===0){state.mode=LEN;}break;case LIT:if(left===0){break inf_leave;}output[put++]=state.length;left--;state.mode=LEN;break;case CHECK:if(state.wrap){//=== NEEDBITS(32);
while(bits<32){if(have===0){break inf_leave;}have--;// Use '|' insdead of '+' to make sure that result is signed
hold|=input[next++]<<bits;bits+=8;}//===//
_out-=left;strm.total_out+=_out;state.total+=_out;if(_out){strm.adler=state.check=/*UPDATE(state.check, put - _out, _out);*/state.flags?crc32(state.check,output,_out,put-_out):adler32(state.check,output,_out,put-_out);}_out=left;// NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
if((state.flags?hold:zswap32(hold))!==state.check){strm.msg='incorrect data check';state.mode=BAD;break;}//=== INITBITS();
hold=0;bits=0;//===//
//Tracev((stderr, "inflate:   check matches trailer\n"));
}state.mode=LENGTH;/* falls through */case LENGTH:if(state.wrap&&state.flags){//=== NEEDBITS(32);
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(hold!==(state.total&0xffffffff)){strm.msg='incorrect length check';state.mode=BAD;break;}//=== INITBITS();
hold=0;bits=0;//===//
//Tracev((stderr, "inflate:   length matches trailer\n"));
}state.mode=DONE;/* falls through */case DONE:ret=Z_STREAM_END;break inf_leave;case BAD:ret=Z_DATA_ERROR;break inf_leave;case MEM:return Z_MEM_ERROR;case SYNC:/* falls through */default:return Z_STREAM_ERROR;}}// inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
/*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   *///--- RESTORE() ---
strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state.hold=hold;state.bits=bits;//---
if(state.wsize||_out!==strm.avail_out&&state.mode<BAD&&(state.mode<CHECK||flush!==Z_FINISH)){if(updatewindow(strm,strm.output,strm.next_out,_out-strm.avail_out)){state.mode=MEM;return Z_MEM_ERROR;}}_in-=strm.avail_in;_out-=strm.avail_out;strm.total_in+=_in;strm.total_out+=_out;state.total+=_out;if(state.wrap&&_out){strm.adler=state.check=/*UPDATE(state.check, strm.next_out - _out, _out);*/state.flags?crc32(state.check,output,_out,strm.next_out-_out):adler32(state.check,output,_out,strm.next_out-_out);}strm.data_type=state.bits+(state.last?64:0)+(state.mode===TYPE?128:0)+(state.mode===LEN_||state.mode===COPY_?256:0);if((_in===0&&_out===0||flush===Z_FINISH)&&ret===Z_OK){ret=Z_BUF_ERROR;}return ret;}function inflateEnd(strm){if(!strm||!strm.state/*|| strm->zfree == (free_func)0*/){return Z_STREAM_ERROR;}var state=strm.state;if(state.window){state.window=null;}strm.state=null;return Z_OK;}function inflateGetHeader(strm,head){var state;/* check state */if(!strm||!strm.state){return Z_STREAM_ERROR;}state=strm.state;if((state.wrap&2)===0){return Z_STREAM_ERROR;}/* save header structure */state.head=head;head.done=false;return Z_OK;}function inflateSetDictionary(strm,dictionary){var dictLength=dictionary.length;var state;var dictid;var ret;/* check state */if(!strm/* == Z_NULL */||!strm.state/* == Z_NULL */){return Z_STREAM_ERROR;}state=strm.state;if(state.wrap!==0&&state.mode!==DICT){return Z_STREAM_ERROR;}/* check for correct dictionary identifier */if(state.mode===DICT){dictid=1;/* adler32(0, null, 0)*//* dictid = adler32(dictid, dictionary, dictLength); */dictid=adler32(dictid,dictionary,dictLength,0);if(dictid!==state.check){return Z_DATA_ERROR;}}/* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */ret=updatewindow(strm,dictionary,dictLength,dictLength);if(ret){state.mode=MEM;return Z_MEM_ERROR;}state.havedict=1;// Tracev((stderr, "inflate:   dictionary set\n"));
return Z_OK;}exports.inflateReset=inflateReset;exports.inflateReset2=inflateReset2;exports.inflateResetKeep=inflateResetKeep;exports.inflateInit=inflateInit;exports.inflateInit2=inflateInit2;exports.inflate=inflate;exports.inflateEnd=inflateEnd;exports.inflateGetHeader=inflateGetHeader;exports.inflateSetDictionary=inflateSetDictionary;exports.inflateInfo='pako inflate (from Nodeca project)';/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*//***/},/* 104 *//***/function(module,exports){'use strict';// See state defs from inflate.js
var BAD=30;/* got a data error -- remain here until reset */var TYPE=12;/* i: waiting for type bits, including last-flag bit *//*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */module.exports=function inflate_fast(strm,start){var state;var _in;/* local strm.input */var last;/* have enough input while in < last */var _out;/* local strm.output */var beg;/* inflate()'s initial strm.output */var end;/* while out < end, enough space available *///#ifdef INFLATE_STRICT
var dmax;/* maximum distance from zlib header *///#endif
var wsize;/* window size or zero if not using window */var whave;/* valid bytes in the window */var wnext;/* window write index */// Use `s_window` instead `window`, avoid conflict with instrumentation tools
var s_window;/* allocated sliding window, if wsize != 0 */var hold;/* local strm.hold */var bits;/* local strm.bits */var lcode;/* local strm.lencode */var dcode;/* local strm.distcode */var lmask;/* mask for first level of length codes */var dmask;/* mask for first level of distance codes */var here;/* retrieved table entry */var op;/* code bits, operation, extra bits, or *//*  window position, window bytes to copy */var len;/* match length, unused bytes */var dist;/* match distance */var from;/* where to copy match from */var from_source;var input,output;// JS specific, because we have no pointers
/* copy state to local variables */state=strm.state;//here = state.here;
_in=strm.next_in;input=strm.input;last=_in+(strm.avail_in-5);_out=strm.next_out;output=strm.output;beg=_out-(start-strm.avail_out);end=_out+(strm.avail_out-257);//#ifdef INFLATE_STRICT
dmax=state.dmax;//#endif
wsize=state.wsize;whave=state.whave;wnext=state.wnext;s_window=state.window;hold=state.hold;bits=state.bits;lcode=state.lencode;dcode=state.distcode;lmask=(1<<state.lenbits)-1;dmask=(1<<state.distbits)-1;/* decode literals and length/distances until end-of-block or not enough
	     input data or output space */top:do{if(bits<15){hold+=input[_in++]<<bits;bits+=8;hold+=input[_in++]<<bits;bits+=8;}here=lcode[hold&lmask];dolen:for(;;){// Goto emulation
op=here>>>24/*here.bits*/;hold>>>=op;bits-=op;op=here>>>16&0xff/*here.op*/;if(op===0){/* literal *///Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
//        "inflate:         literal '%c'\n" :
//        "inflate:         literal 0x%02x\n", here.val));
output[_out++]=here&0xffff/*here.val*/;}else if(op&16){/* length base */len=here&0xffff/*here.val*/;op&=15;/* number of extra bits */if(op){if(bits<op){hold+=input[_in++]<<bits;bits+=8;}len+=hold&(1<<op)-1;hold>>>=op;bits-=op;}//Tracevv((stderr, "inflate:         length %u\n", len));
if(bits<15){hold+=input[_in++]<<bits;bits+=8;hold+=input[_in++]<<bits;bits+=8;}here=dcode[hold&dmask];dodist:for(;;){// goto emulation
op=here>>>24/*here.bits*/;hold>>>=op;bits-=op;op=here>>>16&0xff/*here.op*/;if(op&16){/* distance base */dist=here&0xffff/*here.val*/;op&=15;/* number of extra bits */if(bits<op){hold+=input[_in++]<<bits;bits+=8;if(bits<op){hold+=input[_in++]<<bits;bits+=8;}}dist+=hold&(1<<op)-1;//#ifdef INFLATE_STRICT
if(dist>dmax){strm.msg='invalid distance too far back';state.mode=BAD;break top;}//#endif
hold>>>=op;bits-=op;//Tracevv((stderr, "inflate:         distance %u\n", dist));
op=_out-beg;/* max distance in output */if(dist>op){/* see if copy from window */op=dist-op;/* distance back in window */if(op>whave){if(state.sane){strm.msg='invalid distance too far back';state.mode=BAD;break top;}// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
}from=0;// window index
from_source=s_window;if(wnext===0){/* very common case */from+=wsize-op;if(op<len){/* some from window */len-=op;do{output[_out++]=s_window[from++];}while(--op);from=_out-dist;/* rest from output */from_source=output;}}else if(wnext<op){/* wrap around window */from+=wsize+wnext-op;op-=wnext;if(op<len){/* some from end of window */len-=op;do{output[_out++]=s_window[from++];}while(--op);from=0;if(wnext<len){/* some from start of window */op=wnext;len-=op;do{output[_out++]=s_window[from++];}while(--op);from=_out-dist;/* rest from output */from_source=output;}}}else{/* contiguous in window */from+=wnext-op;if(op<len){/* some from window */len-=op;do{output[_out++]=s_window[from++];}while(--op);from=_out-dist;/* rest from output */from_source=output;}}while(len>2){output[_out++]=from_source[from++];output[_out++]=from_source[from++];output[_out++]=from_source[from++];len-=3;}if(len){output[_out++]=from_source[from++];if(len>1){output[_out++]=from_source[from++];}}}else{from=_out-dist;/* copy direct from output */do{/* minimum length is three */output[_out++]=output[from++];output[_out++]=output[from++];output[_out++]=output[from++];len-=3;}while(len>2);if(len){output[_out++]=output[from++];if(len>1){output[_out++]=output[from++];}}}}else if((op&64)===0){/* 2nd level distance code */here=dcode[(here&0xffff)+(/*here.val*/hold&(1<<op)-1)];continue dodist;}else{strm.msg='invalid distance code';state.mode=BAD;break top;}break;// need to emulate goto via "continue"
}}else if((op&64)===0){/* 2nd level length code */here=lcode[(here&0xffff)+(/*here.val*/hold&(1<<op)-1)];continue dolen;}else if(op&32){/* end-of-block *///Tracevv((stderr, "inflate:         end of block\n"));
state.mode=TYPE;break top;}else{strm.msg='invalid literal/length code';state.mode=BAD;break top;}break;// need to emulate goto via "continue"
}}while(_in<last&&_out<end);/* return unused bytes (on entry, bits < 8, so in won't go too far back) */len=bits>>3;_in-=len;bits-=len<<3;hold&=(1<<bits)-1;/* update state and return */strm.next_in=_in;strm.next_out=_out;strm.avail_in=_in<last?5+(last-_in):5-(_in-last);strm.avail_out=_out<end?257+(end-_out):257-(_out-end);state.hold=hold;state.bits=bits;return;};/***/},/* 105 *//***/function(module,exports,__webpack_require__){'use strict';var utils=__webpack_require__(99);var MAXBITS=15;var ENOUGH_LENS=852;var ENOUGH_DISTS=592;//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
var CODES=0;var LENS=1;var DISTS=2;var lbase=[/* Length codes 257..285 base */3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0];var lext=[/* Length codes 257..285 extra */16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78];var dbase=[/* Distance codes 0..29 base */1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0];var dext=[/* Distance codes 0..29 extra */16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];module.exports=function inflate_table(type,lens,lens_index,codes,table,table_index,work,opts){var bits=opts.bits;//here = opts.here; /* table entry for duplication */
var len=0;/* a code's length in bits */var sym=0;/* index of code symbols */var min=0,max=0;/* minimum and maximum code lengths */var root=0;/* number of index bits for root table */var curr=0;/* number of index bits for current table */var drop=0;/* code bits to drop for sub-table */var left=0;/* number of prefix codes available */var used=0;/* code entries in table used */var huff=0;/* Huffman code */var incr;/* for incrementing code, index */var fill;/* index for replicating entries */var low;/* low bits for current root entry */var mask;/* mask for low root bits */var next;/* next available space in table */var base=null;/* base value table to use */var base_index=0;//  var shoextra;    /* extra bits table to use */
var end;/* use base and extra for symbol > end */var count=new utils.Buf16(MAXBITS+1);//[MAXBITS+1];    /* number of codes of each length */
var offs=new utils.Buf16(MAXBITS+1);//[MAXBITS+1];     /* offsets in table for each length */
var extra=null;var extra_index=0;var here_bits,here_op,here_val;/*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   *//* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */for(len=0;len<=MAXBITS;len++){count[len]=0;}for(sym=0;sym<codes;sym++){count[lens[lens_index+sym]]++;}/* bound code lengths, force root to be within code lengths */root=bits;for(max=MAXBITS;max>=1;max--){if(count[max]!==0){break;}}if(root>max){root=max;}if(max===0){/* no symbols to code at all *///table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
//table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
//table.val[opts.table_index++] = 0;   //here.val = (var short)0;
table[table_index++]=1<<24|64<<16|0;//table.op[opts.table_index] = 64;
//table.bits[opts.table_index] = 1;
//table.val[opts.table_index++] = 0;
table[table_index++]=1<<24|64<<16|0;opts.bits=1;return 0;/* no symbols, but wait for decoding to report error */}for(min=1;min<max;min++){if(count[min]!==0){break;}}if(root<min){root=min;}/* check for an over-subscribed or incomplete set of lengths */left=1;for(len=1;len<=MAXBITS;len++){left<<=1;left-=count[len];if(left<0){return-1;}/* over-subscribed */}if(left>0&&(type===CODES||max!==1)){return-1;/* incomplete set */}/* generate offsets into symbol table for each length for sorting */offs[1]=0;for(len=1;len<MAXBITS;len++){offs[len+1]=offs[len]+count[len];}/* sort symbols by length, by symbol order within each length */for(sym=0;sym<codes;sym++){if(lens[lens_index+sym]!==0){work[offs[lens[lens_index+sym]]++]=sym;}}/*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   *//* set up for code type */// poor man optimization - use if-else instead of switch,
// to avoid deopts in old v8
if(type===CODES){base=extra=work;/* dummy value--not used */end=19;}else if(type===LENS){base=lbase;base_index-=257;extra=lext;extra_index-=257;end=256;}else{/* DISTS */base=dbase;extra=dext;end=-1;}/* initialize opts for loop */huff=0;/* starting code */sym=0;/* starting code symbol */len=min;/* starting code length */next=table_index;/* current table to fill in */curr=root;/* current table index bits */drop=0;/* current bits to drop from code for index */low=-1;/* trigger new sub-table when len > root */used=1<<root;/* use root table entries */mask=used-1;/* mask for comparing low *//* check available table space */if(type===LENS&&used>ENOUGH_LENS||type===DISTS&&used>ENOUGH_DISTS){return 1;}var i=0;/* process all codes and make table entries */for(;;){i++;/* create table entry */here_bits=len-drop;if(work[sym]<end){here_op=0;here_val=work[sym];}else if(work[sym]>end){here_op=extra[extra_index+work[sym]];here_val=base[base_index+work[sym]];}else{here_op=32+64;/* end of block */here_val=0;}/* replicate for those indices with low len bits equal to huff */incr=1<<len-drop;fill=1<<curr;min=fill;/* save offset to next table */do{fill-=incr;table[next+(huff>>drop)+fill]=here_bits<<24|here_op<<16|here_val|0;}while(fill!==0);/* backwards increment the len-bit code huff */incr=1<<len-1;while(huff&incr){incr>>=1;}if(incr!==0){huff&=incr-1;huff+=incr;}else{huff=0;}/* go to next symbol, update count, len */sym++;if(--count[len]===0){if(len===max){break;}len=lens[lens_index+work[sym]];}/* create new sub-table if needed */if(len>root&&(huff&mask)!==low){/* if first time, transition to sub-tables */if(drop===0){drop=root;}/* increment past last table */next+=min;/* here min is 1 << curr *//* determine length of next table */curr=len-drop;left=1<<curr;while(curr+drop<max){left-=count[curr+drop];if(left<=0){break;}curr++;left<<=1;}/* check for enough space */used+=1<<curr;if(type===LENS&&used>ENOUGH_LENS||type===DISTS&&used>ENOUGH_DISTS){return 1;}/* point entry in root table to sub-table */low=huff&mask;/*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/table[low]=root<<24|curr<<16|next-table_index|0;}}/* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */if(huff!==0){//table.op[next + huff] = 64;            /* invalid code marker */
//table.bits[next + huff] = len - drop;
//table.val[next + huff] = 0;
table[next+huff]=len-drop<<24|64<<16|0;}/* set return parameters *///opts.table_index += used;
opts.bits=root;return 0;};/***/},/* 106 *//***/function(module,exports){'use strict';module.exports={/* Allowed flush values; see deflate() and inflate() below for details */Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,/* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,//Z_MEM_ERROR:     -4,
Z_BUF_ERROR:-5,//Z_VERSION_ERROR: -6,
/* compression levels */Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,/* Possible values of the data_type field (though see inflate()) */Z_BINARY:0,Z_TEXT:1,//Z_ASCII:                1, // = Z_TEXT (deprecated)
Z_UNKNOWN:2,/* The deflate compression method */Z_DEFLATED:8//Z_NULL:                 null // Use -1 or null inline, depending on var type
};/***/},/* 107 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){'use strict';// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */function compare(a,b){if(a===b){return 0;}var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y){return-1;}if(y<x){return 1;}return 0;}function isBuffer(b){if(global.Buffer&&typeof global.Buffer.isBuffer==='function'){return global.Buffer.isBuffer(b);}return!!(b!=null&&b._isBuffer);}// based on node assert, original notice:
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
var util=__webpack_require__(53);var hasOwn=Object.prototype.hasOwnProperty;var pSlice=Array.prototype.slice;var functionsHaveNames=function(){return function foo(){}.name==='foo';}();function pToString(obj){return Object.prototype.toString.call(obj);}function isView(arrbuf){if(isBuffer(arrbuf)){return false;}if(typeof global.ArrayBuffer!=='function'){return false;}if(typeof ArrayBuffer.isView==='function'){return ArrayBuffer.isView(arrbuf);}if(!arrbuf){return false;}if(arrbuf instanceof DataView){return true;}if(arrbuf.buffer&&arrbuf.buffer instanceof ArrayBuffer){return true;}return false;}// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
var assert=module.exports=ok;// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })
var regex=/\s*function\s+([^\(\s]*)\s*/;// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func){if(!util.isFunction(func)){return;}if(functionsHaveNames){return func.name;}var str=func.toString();var match=str.match(regex);return match&&match[1];}assert.AssertionError=function AssertionError(options){this.name='AssertionError';this.actual=options.actual;this.expected=options.expected;this.operator=options.operator;if(options.message){this.message=options.message;this.generatedMessage=false;}else{this.message=getMessage(this);this.generatedMessage=true;}var stackStartFunction=options.stackStartFunction||fail;if(Error.captureStackTrace){Error.captureStackTrace(this,stackStartFunction);}else{// non v8 browsers so we can have a stacktrace
var err=new Error();if(err.stack){var out=err.stack;// try to strip useless frames
var fn_name=getName(stackStartFunction);var idx=out.indexOf('\n'+fn_name);if(idx>=0){// once we have located the function frame
// we need to strip out everything before it (and its line)
var next_line=out.indexOf('\n',idx+1);out=out.substring(next_line+1);}this.stack=out;}}};// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError,Error);function truncate(s,n){if(typeof s==='string'){return s.length<n?s:s.slice(0,n);}else{return s;}}function inspect(something){if(functionsHaveNames||!util.isFunction(something)){return util.inspect(something);}var rawname=getName(something);var name=rawname?': '+rawname:'';return'[Function'+name+']';}function getMessage(self){return truncate(inspect(self.actual),128)+' '+self.operator+' '+truncate(inspect(self.expected),128);}// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.
// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function fail(actual,expected,message,operator,stackStartFunction){throw new assert.AssertionError({message:message,actual:actual,expected:expected,operator:operator,stackStartFunction:stackStartFunction});}// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail=fail;// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.
function ok(value,message){if(!value)fail(value,true,message,'==',assert.ok);}assert.ok=ok;// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);
assert.equal=function equal(actual,expected,message){if(actual!=expected)fail(actual,expected,message,'==',assert.equal);};// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);
assert.notEqual=function notEqual(actual,expected,message){if(actual==expected){fail(actual,expected,message,'!=',assert.notEqual);}};// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);
assert.deepEqual=function deepEqual(actual,expected,message){if(!_deepEqual(actual,expected,false)){fail(actual,expected,message,'deepEqual',assert.deepEqual);}};assert.deepStrictEqual=function deepStrictEqual(actual,expected,message){if(!_deepEqual(actual,expected,true)){fail(actual,expected,message,'deepStrictEqual',assert.deepStrictEqual);}};function _deepEqual(actual,expected,strict,memos){// 7.1. All identical values are equivalent, as determined by ===.
if(actual===expected){return true;}else if(isBuffer(actual)&&isBuffer(expected)){return compare(actual,expected)===0;// 7.2. If the expected value is a Date object, the actual value is
// equivalent if it is also a Date object that refers to the same time.
}else if(util.isDate(actual)&&util.isDate(expected)){return actual.getTime()===expected.getTime();// 7.3 If the expected value is a RegExp object, the actual value is
// equivalent if it is also a RegExp object with the same source and
// properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
}else if(util.isRegExp(actual)&&util.isRegExp(expected)){return actual.source===expected.source&&actual.global===expected.global&&actual.multiline===expected.multiline&&actual.lastIndex===expected.lastIndex&&actual.ignoreCase===expected.ignoreCase;// 7.4. Other pairs that do not both pass typeof value == 'object',
// equivalence is determined by ==.
}else if((actual===null||(typeof actual==="undefined"?"undefined":_typeof(actual))!=='object')&&(expected===null||(typeof expected==="undefined"?"undefined":_typeof(expected))!=='object')){return strict?actual===expected:actual==expected;// If both values are instances of typed arrays, wrap their underlying
// ArrayBuffers in a Buffer each to increase performance
// This optimization requires the arrays to have the same type as checked by
// Object.prototype.toString (aka pToString). Never perform binary
// comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
// bit patterns are not identical.
}else if(isView(actual)&&isView(expected)&&pToString(actual)===pToString(expected)&&!(actual instanceof Float32Array||actual instanceof Float64Array)){return compare(new Uint8Array(actual.buffer),new Uint8Array(expected.buffer))===0;// 7.5 For all other Object pairs, including Array objects, equivalence is
// determined by having the same number of owned properties (as verified
// with Object.prototype.hasOwnProperty.call), the same set of keys
// (although not necessarily the same order), equivalent values for every
// corresponding key, and an identical 'prototype' property. Note: this
// accounts for both named and indexed properties on Arrays.
}else if(isBuffer(actual)!==isBuffer(expected)){return false;}else{memos=memos||{actual:[],expected:[]};var actualIndex=memos.actual.indexOf(actual);if(actualIndex!==-1){if(actualIndex===memos.expected.indexOf(expected)){return true;}}memos.actual.push(actual);memos.expected.push(expected);return objEquiv(actual,expected,strict,memos);}}function isArguments(object){return Object.prototype.toString.call(object)=='[object Arguments]';}function objEquiv(a,b,strict,actualVisitedObjects){if(a===null||a===undefined||b===null||b===undefined)return false;// if one is a primitive, the other must be same
if(util.isPrimitive(a)||util.isPrimitive(b))return a===b;if(strict&&Object.getPrototypeOf(a)!==Object.getPrototypeOf(b))return false;var aIsArgs=isArguments(a);var bIsArgs=isArguments(b);if(aIsArgs&&!bIsArgs||!aIsArgs&&bIsArgs)return false;if(aIsArgs){a=pSlice.call(a);b=pSlice.call(b);return _deepEqual(a,b,strict);}var ka=objectKeys(a);var kb=objectKeys(b);var key,i;// having the same number of owned properties (keys incorporates
// hasOwnProperty)
if(ka.length!==kb.length)return false;//the same set of keys (although not necessarily the same order),
ka.sort();kb.sort();//~~~cheap key test
for(i=ka.length-1;i>=0;i--){if(ka[i]!==kb[i])return false;}//equivalent values for every corresponding key, and
//~~~possibly expensive deep test
for(i=ka.length-1;i>=0;i--){key=ka[i];if(!_deepEqual(a[key],b[key],strict,actualVisitedObjects))return false;}return true;}// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);
assert.notDeepEqual=function notDeepEqual(actual,expected,message){if(_deepEqual(actual,expected,false)){fail(actual,expected,message,'notDeepEqual',assert.notDeepEqual);}};assert.notDeepStrictEqual=notDeepStrictEqual;function notDeepStrictEqual(actual,expected,message){if(_deepEqual(actual,expected,true)){fail(actual,expected,message,'notDeepStrictEqual',notDeepStrictEqual);}}// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);
assert.strictEqual=function strictEqual(actual,expected,message){if(actual!==expected){fail(actual,expected,message,'===',assert.strictEqual);}};// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
assert.notStrictEqual=function notStrictEqual(actual,expected,message){if(actual===expected){fail(actual,expected,message,'!==',assert.notStrictEqual);}};function expectedException(actual,expected){if(!actual||!expected){return false;}if(Object.prototype.toString.call(expected)=='[object RegExp]'){return expected.test(actual);}try{if(actual instanceof expected){return true;}}catch(e){// Ignore.  The instanceof check doesn't work for arrow functions.
}if(Error.isPrototypeOf(expected)){return false;}return expected.call({},actual)===true;}function _tryBlock(block){var error;try{block();}catch(e){error=e;}return error;}function _throws(shouldThrow,block,expected,message){var actual;if(typeof block!=='function'){throw new TypeError('"block" argument must be a function');}if(typeof expected==='string'){message=expected;expected=null;}actual=_tryBlock(block);message=(expected&&expected.name?' ('+expected.name+').':'.')+(message?' '+message:'.');if(shouldThrow&&!actual){fail(actual,expected,'Missing expected exception'+message);}var userProvidedMessage=typeof message==='string';var isUnwantedException=!shouldThrow&&util.isError(actual);var isUnexpectedException=!shouldThrow&&actual&&!expected;if(isUnwantedException&&userProvidedMessage&&expectedException(actual,expected)||isUnexpectedException){fail(actual,expected,'Got unwanted exception'+message);}if(shouldThrow&&actual&&expected&&!expectedException(actual,expected)||!shouldThrow&&actual){throw actual;}}// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);
assert.throws=function(block,/*optional*/error,/*optional*/message){_throws(true,block,error,message);};// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow=function(block,/*optional*/error,/*optional*/message){_throws(false,block,error,message);};assert.ifError=function(err){if(err)throw err;};var objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){if(hasOwn.call(obj,key))keys.push(key);}return keys;};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 108 *//***/function(module,exports,__webpack_require__){/*!
	 * accepts
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Module dependencies.
	 * @private
	 */var Negotiator=__webpack_require__(109);var mime=__webpack_require__(114);/**
	 * Module exports.
	 * @public
	 */module.exports=Accepts;/**
	 * Create a new Accepts object for the given req.
	 *
	 * @param {object} req
	 * @public
	 */function Accepts(req){if(!(this instanceof Accepts))return new Accepts(req);this.headers=req.headers;this.negotiator=new Negotiator(req);}/**
	 * Check if the given `type(s)` is acceptable, returning
	 * the best match when true, otherwise `undefined`, in which
	 * case you should respond with 406 "Not Acceptable".
	 *
	 * The `type` value may be a single mime type string
	 * such as "application/json", the extension name
	 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
	 * or array is given the _best_ match, if any is returned.
	 *
	 * Examples:
	 *
	 *     // Accept: text/html
	 *     this.types('html');
	 *     // => "html"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('html');
	 *     // => "html"
	 *     this.types('text/html');
	 *     // => "text/html"
	 *     this.types('json', 'text');
	 *     // => "json"
	 *     this.types('application/json');
	 *     // => "application/json"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('image/png');
	 *     this.types('png');
	 *     // => undefined
	 *
	 *     // Accept: text/*;q=.5, application/json
	 *     this.types(['html', 'json']);
	 *     this.types('html', 'json');
	 *     // => "json"
	 *
	 * @param {String|Array} types...
	 * @return {String|Array|Boolean}
	 * @public
	 */Accepts.prototype.type=Accepts.prototype.types=function(types_){var types=types_;// support flattened arguments
if(types&&!Array.isArray(types)){types=new Array(arguments.length);for(var i=0;i<types.length;i++){types[i]=arguments[i];}}// no types, return all requested types
if(!types||types.length===0){return this.negotiator.mediaTypes();}if(!this.headers.accept)return types[0];var mimes=types.map(extToMime);var accepts=this.negotiator.mediaTypes(mimes.filter(validMime));var first=accepts[0];if(!first)return false;return types[mimes.indexOf(first)];};/**
	 * Return accepted encodings or best fit based on `encodings`.
	 *
	 * Given `Accept-Encoding: gzip, deflate`
	 * an array sorted by quality is returned:
	 *
	 *     ['gzip', 'deflate']
	 *
	 * @param {String|Array} encodings...
	 * @return {String|Array}
	 * @public
	 */Accepts.prototype.encoding=Accepts.prototype.encodings=function(encodings_){var encodings=encodings_;// support flattened arguments
if(encodings&&!Array.isArray(encodings)){encodings=new Array(arguments.length);for(var i=0;i<encodings.length;i++){encodings[i]=arguments[i];}}// no encodings, return all requested encodings
if(!encodings||encodings.length===0){return this.negotiator.encodings();}return this.negotiator.encodings(encodings)[0]||false;};/**
	 * Return accepted charsets or best fit based on `charsets`.
	 *
	 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
	 * an array sorted by quality is returned:
	 *
	 *     ['utf-8', 'utf-7', 'iso-8859-1']
	 *
	 * @param {String|Array} charsets...
	 * @return {String|Array}
	 * @public
	 */Accepts.prototype.charset=Accepts.prototype.charsets=function(charsets_){var charsets=charsets_;// support flattened arguments
if(charsets&&!Array.isArray(charsets)){charsets=new Array(arguments.length);for(var i=0;i<charsets.length;i++){charsets[i]=arguments[i];}}// no charsets, return all requested charsets
if(!charsets||charsets.length===0){return this.negotiator.charsets();}return this.negotiator.charsets(charsets)[0]||false;};/**
	 * Return accepted languages or best fit based on `langs`.
	 *
	 * Given `Accept-Language: en;q=0.8, es, pt`
	 * an array sorted by quality is returned:
	 *
	 *     ['es', 'pt', 'en']
	 *
	 * @param {String|Array} langs...
	 * @return {Array|String}
	 * @public
	 */Accepts.prototype.lang=Accepts.prototype.langs=Accepts.prototype.language=Accepts.prototype.languages=function(languages_){var languages=languages_;// support flattened arguments
if(languages&&!Array.isArray(languages)){languages=new Array(arguments.length);for(var i=0;i<languages.length;i++){languages[i]=arguments[i];}}// no languages, return all requested languages
if(!languages||languages.length===0){return this.negotiator.languages();}return this.negotiator.languages(languages)[0]||false;};/**
	 * Convert extnames to mime.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */function extToMime(type){return type.indexOf('/')===-1?mime.lookup(type):type;}/**
	 * Check if mime is valid.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */function validMime(type){return typeof type==='string';}/***/},/* 109 *//***/function(module,exports,__webpack_require__){/*!
	 * negotiator
	 * Copyright(c) 2012 Federico Romero
	 * Copyright(c) 2012-2014 Isaac Z. Schlueter
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Cached loaded submodules.
	 * @private
	 */var modules=Object.create(null);/**
	 * Module exports.
	 * @public
	 */module.exports=Negotiator;module.exports.Negotiator=Negotiator;/**
	 * Create a Negotiator instance from a request.
	 * @param {object} request
	 * @public
	 */function Negotiator(request){if(!(this instanceof Negotiator)){return new Negotiator(request);}this.request=request;}Negotiator.prototype.charset=function charset(available){var set=this.charsets(available);return set&&set[0];};Negotiator.prototype.charsets=function charsets(available){var preferredCharsets=loadModule('charset').preferredCharsets;return preferredCharsets(this.request.headers['accept-charset'],available);};Negotiator.prototype.encoding=function encoding(available){var set=this.encodings(available);return set&&set[0];};Negotiator.prototype.encodings=function encodings(available){var preferredEncodings=loadModule('encoding').preferredEncodings;return preferredEncodings(this.request.headers['accept-encoding'],available);};Negotiator.prototype.language=function language(available){var set=this.languages(available);return set&&set[0];};Negotiator.prototype.languages=function languages(available){var preferredLanguages=loadModule('language').preferredLanguages;return preferredLanguages(this.request.headers['accept-language'],available);};Negotiator.prototype.mediaType=function mediaType(available){var set=this.mediaTypes(available);return set&&set[0];};Negotiator.prototype.mediaTypes=function mediaTypes(available){var preferredMediaTypes=loadModule('mediaType').preferredMediaTypes;return preferredMediaTypes(this.request.headers.accept,available);};// Backwards compatibility
Negotiator.prototype.preferredCharset=Negotiator.prototype.charset;Negotiator.prototype.preferredCharsets=Negotiator.prototype.charsets;Negotiator.prototype.preferredEncoding=Negotiator.prototype.encoding;Negotiator.prototype.preferredEncodings=Negotiator.prototype.encodings;Negotiator.prototype.preferredLanguage=Negotiator.prototype.language;Negotiator.prototype.preferredLanguages=Negotiator.prototype.languages;Negotiator.prototype.preferredMediaType=Negotiator.prototype.mediaType;Negotiator.prototype.preferredMediaTypes=Negotiator.prototype.mediaTypes;/**
	 * Load the given module.
	 * @private
	 */function loadModule(moduleName){var module=modules[moduleName];if(module!==undefined){return module;}// This uses a switch for static require analysis
switch(moduleName){case'charset':module=__webpack_require__(110);break;case'encoding':module=__webpack_require__(111);break;case'language':module=__webpack_require__(112);break;case'mediaType':module=__webpack_require__(113);break;default:throw new Error('Cannot find module \''+moduleName+'\'');}// Store to prevent invoking require()
modules[moduleName]=module;return module;}/***/},/* 110 *//***/function(module,exports){/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Module exports.
	 * @public
	 */module.exports=preferredCharsets;module.exports.preferredCharsets=preferredCharsets;/**
	 * Module variables.
	 * @private
	 */var simpleCharsetRegExp=/^\s*([^\s;]+)\s*(?:;(.*))?$/;/**
	 * Parse the Accept-Charset header.
	 * @private
	 */function parseAcceptCharset(accept){var accepts=accept.split(',');for(var i=0,j=0;i<accepts.length;i++){var charset=parseCharset(accepts[i].trim(),i);if(charset){accepts[j++]=charset;}}// trim accepts
accepts.length=j;return accepts;}/**
	 * Parse a charset from the Accept-Charset header.
	 * @private
	 */function parseCharset(str,i){var match=simpleCharsetRegExp.exec(str);if(!match)return null;var charset=match[1];var q=1;if(match[2]){var params=match[2].split(';');for(var i=0;i<params.length;i++){var p=params[i].trim().split('=');if(p[0]==='q'){q=parseFloat(p[1]);break;}}}return{charset:charset,q:q,i:i};}/**
	 * Get the priority of a charset.
	 * @private
	 */function getCharsetPriority(charset,accepted,index){var priority={o:-1,q:0,s:0};for(var i=0;i<accepted.length;i++){var spec=specify(charset,accepted[i],index);if(spec&&(priority.s-spec.s||priority.q-spec.q||priority.o-spec.o)<0){priority=spec;}}return priority;}/**
	 * Get the specificity of the charset.
	 * @private
	 */function specify(charset,spec,index){var s=0;if(spec.charset.toLowerCase()===charset.toLowerCase()){s|=1;}else if(spec.charset!=='*'){return null;}return{i:index,o:spec.i,q:spec.q,s:s};}/**
	 * Get the preferred charsets from an Accept-Charset header.
	 * @public
	 */function preferredCharsets(accept,provided){// RFC 2616 sec 14.2: no header = *
var accepts=parseAcceptCharset(accept===undefined?'*':accept||'');if(!provided){// sorted list of all charsets
return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);}var priorities=provided.map(function getPriority(type,index){return getCharsetPriority(type,accepts,index);});// sorted list of accepted charsets
return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority){return provided[priorities.indexOf(priority)];});}/**
	 * Compare two specs.
	 * @private
	 */function compareSpecs(a,b){return b.q-a.q||b.s-a.s||a.o-b.o||a.i-b.i||0;}/**
	 * Get full charset string.
	 * @private
	 */function getFullCharset(spec){return spec.charset;}/**
	 * Check if a spec has any quality.
	 * @private
	 */function isQuality(spec){return spec.q>0;}/***/},/* 111 *//***/function(module,exports){/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Module exports.
	 * @public
	 */module.exports=preferredEncodings;module.exports.preferredEncodings=preferredEncodings;/**
	 * Module variables.
	 * @private
	 */var simpleEncodingRegExp=/^\s*([^\s;]+)\s*(?:;(.*))?$/;/**
	 * Parse the Accept-Encoding header.
	 * @private
	 */function parseAcceptEncoding(accept){var accepts=accept.split(',');var hasIdentity=false;var minQuality=1;for(var i=0,j=0;i<accepts.length;i++){var encoding=parseEncoding(accepts[i].trim(),i);if(encoding){accepts[j++]=encoding;hasIdentity=hasIdentity||specify('identity',encoding);minQuality=Math.min(minQuality,encoding.q||1);}}if(!hasIdentity){/*
	     * If identity doesn't explicitly appear in the accept-encoding header,
	     * it's added to the list of acceptable encoding with the lowest q
	     */accepts[j++]={encoding:'identity',q:minQuality,i:i};}// trim accepts
accepts.length=j;return accepts;}/**
	 * Parse an encoding from the Accept-Encoding header.
	 * @private
	 */function parseEncoding(str,i){var match=simpleEncodingRegExp.exec(str);if(!match)return null;var encoding=match[1];var q=1;if(match[2]){var params=match[2].split(';');for(var i=0;i<params.length;i++){var p=params[i].trim().split('=');if(p[0]==='q'){q=parseFloat(p[1]);break;}}}return{encoding:encoding,q:q,i:i};}/**
	 * Get the priority of an encoding.
	 * @private
	 */function getEncodingPriority(encoding,accepted,index){var priority={o:-1,q:0,s:0};for(var i=0;i<accepted.length;i++){var spec=specify(encoding,accepted[i],index);if(spec&&(priority.s-spec.s||priority.q-spec.q||priority.o-spec.o)<0){priority=spec;}}return priority;}/**
	 * Get the specificity of the encoding.
	 * @private
	 */function specify(encoding,spec,index){var s=0;if(spec.encoding.toLowerCase()===encoding.toLowerCase()){s|=1;}else if(spec.encoding!=='*'){return null;}return{i:index,o:spec.i,q:spec.q,s:s};};/**
	 * Get the preferred encodings from an Accept-Encoding header.
	 * @public
	 */function preferredEncodings(accept,provided){var accepts=parseAcceptEncoding(accept||'');if(!provided){// sorted list of all encodings
return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);}var priorities=provided.map(function getPriority(type,index){return getEncodingPriority(type,accepts,index);});// sorted list of accepted encodings
return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority){return provided[priorities.indexOf(priority)];});}/**
	 * Compare two specs.
	 * @private
	 */function compareSpecs(a,b){return b.q-a.q||b.s-a.s||a.o-b.o||a.i-b.i||0;}/**
	 * Get full encoding string.
	 * @private
	 */function getFullEncoding(spec){return spec.encoding;}/**
	 * Check if a spec has any quality.
	 * @private
	 */function isQuality(spec){return spec.q>0;}/***/},/* 112 *//***/function(module,exports){/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Module exports.
	 * @public
	 */module.exports=preferredLanguages;module.exports.preferredLanguages=preferredLanguages;/**
	 * Module variables.
	 * @private
	 */var simpleLanguageRegExp=/^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;/**
	 * Parse the Accept-Language header.
	 * @private
	 */function parseAcceptLanguage(accept){var accepts=accept.split(',');for(var i=0,j=0;i<accepts.length;i++){var langauge=parseLanguage(accepts[i].trim(),i);if(langauge){accepts[j++]=langauge;}}// trim accepts
accepts.length=j;return accepts;}/**
	 * Parse a language from the Accept-Language header.
	 * @private
	 */function parseLanguage(str,i){var match=simpleLanguageRegExp.exec(str);if(!match)return null;var prefix=match[1],suffix=match[2],full=prefix;if(suffix)full+="-"+suffix;var q=1;if(match[3]){var params=match[3].split(';');for(var i=0;i<params.length;i++){var p=params[i].split('=');if(p[0]==='q')q=parseFloat(p[1]);}}return{prefix:prefix,suffix:suffix,q:q,i:i,full:full};}/**
	 * Get the priority of a language.
	 * @private
	 */function getLanguagePriority(language,accepted,index){var priority={o:-1,q:0,s:0};for(var i=0;i<accepted.length;i++){var spec=specify(language,accepted[i],index);if(spec&&(priority.s-spec.s||priority.q-spec.q||priority.o-spec.o)<0){priority=spec;}}return priority;}/**
	 * Get the specificity of the language.
	 * @private
	 */function specify(language,spec,index){var p=parseLanguage(language);if(!p)return null;var s=0;if(spec.full.toLowerCase()===p.full.toLowerCase()){s|=4;}else if(spec.prefix.toLowerCase()===p.full.toLowerCase()){s|=2;}else if(spec.full.toLowerCase()===p.prefix.toLowerCase()){s|=1;}else if(spec.full!=='*'){return null;}return{i:index,o:spec.i,q:spec.q,s:s};};/**
	 * Get the preferred languages from an Accept-Language header.
	 * @public
	 */function preferredLanguages(accept,provided){// RFC 2616 sec 14.4: no header = *
var accepts=parseAcceptLanguage(accept===undefined?'*':accept||'');if(!provided){// sorted list of all languages
return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);}var priorities=provided.map(function getPriority(type,index){return getLanguagePriority(type,accepts,index);});// sorted list of accepted languages
return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority){return provided[priorities.indexOf(priority)];});}/**
	 * Compare two specs.
	 * @private
	 */function compareSpecs(a,b){return b.q-a.q||b.s-a.s||a.o-b.o||a.i-b.i||0;}/**
	 * Get full language string.
	 * @private
	 */function getFullLanguage(spec){return spec.full;}/**
	 * Check if a spec has any quality.
	 * @private
	 */function isQuality(spec){return spec.q>0;}/***/},/* 113 *//***/function(module,exports){/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Module exports.
	 * @public
	 */module.exports=preferredMediaTypes;module.exports.preferredMediaTypes=preferredMediaTypes;/**
	 * Module variables.
	 * @private
	 */var simpleMediaTypeRegExp=/^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;/**
	 * Parse the Accept header.
	 * @private
	 */function parseAccept(accept){var accepts=splitMediaTypes(accept);for(var i=0,j=0;i<accepts.length;i++){var mediaType=parseMediaType(accepts[i].trim(),i);if(mediaType){accepts[j++]=mediaType;}}// trim accepts
accepts.length=j;return accepts;}/**
	 * Parse a media type from the Accept header.
	 * @private
	 */function parseMediaType(str,i){var match=simpleMediaTypeRegExp.exec(str);if(!match)return null;var params=Object.create(null);var q=1;var subtype=match[2];var type=match[1];if(match[3]){var kvps=splitParameters(match[3]).map(splitKeyValuePair);for(var j=0;j<kvps.length;j++){var pair=kvps[j];var key=pair[0].toLowerCase();var val=pair[1];// get the value, unwrapping quotes
var value=val&&val[0]==='"'&&val[val.length-1]==='"'?val.substr(1,val.length-2):val;if(key==='q'){q=parseFloat(value);break;}// store parameter
params[key]=value;}}return{type:type,subtype:subtype,params:params,q:q,i:i};}/**
	 * Get the priority of a media type.
	 * @private
	 */function getMediaTypePriority(type,accepted,index){var priority={o:-1,q:0,s:0};for(var i=0;i<accepted.length;i++){var spec=specify(type,accepted[i],index);if(spec&&(priority.s-spec.s||priority.q-spec.q||priority.o-spec.o)<0){priority=spec;}}return priority;}/**
	 * Get the specificity of the media type.
	 * @private
	 */function specify(type,spec,index){var p=parseMediaType(type);var s=0;if(!p){return null;}if(spec.type.toLowerCase()==p.type.toLowerCase()){s|=4;}else if(spec.type!='*'){return null;}if(spec.subtype.toLowerCase()==p.subtype.toLowerCase()){s|=2;}else if(spec.subtype!='*'){return null;}var keys=Object.keys(spec.params);if(keys.length>0){if(keys.every(function(k){return spec.params[k]=='*'||(spec.params[k]||'').toLowerCase()==(p.params[k]||'').toLowerCase();})){s|=1;}else{return null;}}return{i:index,o:spec.i,q:spec.q,s:s};}/**
	 * Get the preferred media types from an Accept header.
	 * @public
	 */function preferredMediaTypes(accept,provided){// RFC 2616 sec 14.2: no header = */*
var accepts=parseAccept(accept===undefined?'*/*':accept||'');if(!provided){// sorted list of all types
return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);}var priorities=provided.map(function getPriority(type,index){return getMediaTypePriority(type,accepts,index);});// sorted list of accepted types
return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority){return provided[priorities.indexOf(priority)];});}/**
	 * Compare two specs.
	 * @private
	 */function compareSpecs(a,b){return b.q-a.q||b.s-a.s||a.o-b.o||a.i-b.i||0;}/**
	 * Get full type string.
	 * @private
	 */function getFullType(spec){return spec.type+'/'+spec.subtype;}/**
	 * Check if a spec has any quality.
	 * @private
	 */function isQuality(spec){return spec.q>0;}/**
	 * Count the number of quotes in a string.
	 * @private
	 */function quoteCount(string){var count=0;var index=0;while((index=string.indexOf('"',index))!==-1){count++;index++;}return count;}/**
	 * Split a key value pair.
	 * @private
	 */function splitKeyValuePair(str){var index=str.indexOf('=');var key;var val;if(index===-1){key=str;}else{key=str.substr(0,index);val=str.substr(index+1);}return[key,val];}/**
	 * Split an Accept header into media types.
	 * @private
	 */function splitMediaTypes(accept){var accepts=accept.split(',');for(var i=1,j=0;i<accepts.length;i++){if(quoteCount(accepts[j])%2==0){accepts[++j]=accepts[i];}else{accepts[j]+=','+accepts[i];}}// trim accepts
accepts.length=j+1;return accepts;}/**
	 * Split a string of parameters.
	 * @private
	 */function splitParameters(str){var parameters=str.split(';');for(var i=1,j=0;i<parameters.length;i++){if(quoteCount(parameters[j])%2==0){parameters[++j]=parameters[i];}else{parameters[j]+=';'+parameters[i];}}// trim parameters
parameters.length=j+1;for(var i=0;i<parameters.length;i++){parameters[i]=parameters[i].trim();}return parameters;}/***/},/* 114 *//***/function(module,exports,__webpack_require__){/*!
	 * mime-types
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Module dependencies.
	 * @private
	 */var db=__webpack_require__(115);var extname=__webpack_require__(117).extname;/**
	 * Module variables.
	 * @private
	 */var extractTypeRegExp=/^\s*([^;\s]*)(?:;|\s|$)/;var textTypeRegExp=/^text\//i;/**
	 * Module exports.
	 * @public
	 */exports.charset=charset;exports.charsets={lookup:charset};exports.contentType=contentType;exports.extension=extension;exports.extensions=Object.create(null);exports.lookup=lookup;exports.types=Object.create(null);// Populate the extensions/types maps
populateMaps(exports.extensions,exports.types);/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */function charset(type){if(!type||typeof type!=='string'){return false;}// TODO: use media-typer
var match=extractTypeRegExp.exec(type);var mime=match&&db[match[1].toLowerCase()];if(mime&&mime.charset){return mime.charset;}// default text/* to utf-8
if(match&&textTypeRegExp.test(match[1])){return'UTF-8';}return false;}/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */function contentType(str){// TODO: should this even be in this module?
if(!str||typeof str!=='string'){return false;}var mime=str.indexOf('/')===-1?exports.lookup(str):str;if(!mime){return false;}// TODO: use content-type or other module
if(mime.indexOf('charset')===-1){var charset=exports.charset(mime);if(charset)mime+='; charset='+charset.toLowerCase();}return mime;}/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */function extension(type){if(!type||typeof type!=='string'){return false;}// TODO: use media-typer
var match=extractTypeRegExp.exec(type);// get extensions
var exts=match&&exports.extensions[match[1].toLowerCase()];if(!exts||!exts.length){return false;}return exts[0];}/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */function lookup(path){if(!path||typeof path!=='string'){return false;}// get the extension ("ext" or ".ext" or full path)
var extension=extname('x.'+path).toLowerCase().substr(1);if(!extension){return false;}return exports.types[extension]||false;}/**
	 * Populate the extensions and types maps.
	 * @private
	 */function populateMaps(extensions,types){// source preference (least -> most)
var preference=['nginx','apache',undefined,'iana'];Object.keys(db).forEach(function forEachMimeType(type){var mime=db[type];var exts=mime.extensions;if(!exts||!exts.length){return;}// mime -> extensions
extensions[type]=exts;// extension -> mime
for(var i=0;i<exts.length;i++){var extension=exts[i];if(types[extension]){var from=preference.indexOf(db[types[extension]].source);var to=preference.indexOf(mime.source);if(types[extension]!=='application/octet-stream'&&from>to||from===to&&types[extension].substr(0,12)==='application/'){// skip the remapping
continue;}}// set the extension -> mime
types[extension]=type;}});}/***/},/* 115 *//***/function(module,exports,__webpack_require__){/*!
	 * mime-db
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 *//**
	 * Module exports.
	 */module.exports=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"./db.json\"");e.code='MODULE_NOT_FOUND';throw e;}());/***/},,/* 116 *//* 117 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts,allowAboveRoot){// if the path tries to go above the root, `up` ends up > 0
var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==='.'){parts.splice(i,1);}else if(last==='..'){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}// if the path is allowed to go above the root, restore leading ..s
if(allowAboveRoot){for(;up--;up){parts.unshift('..');}}return parts;}// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;var splitPath=function splitPath(filename){return splitPathRe.exec(filename).slice(1);};// path.resolve([from ...], to)
// posix version
exports.resolve=function(){var resolvedPath='',resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();// Skip empty and invalid entries
if(typeof path!=='string'){throw new TypeError('Arguments to path.resolve must be strings');}else if(!path){continue;}resolvedPath=path+'/'+resolvedPath;resolvedAbsolute=path.charAt(0)==='/';}// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)
// Normalize the path
resolvedPath=normalizeArray(filter(resolvedPath.split('/'),function(p){return!!p;}),!resolvedAbsolute).join('/');return(resolvedAbsolute?'/':'')+resolvedPath||'.';};// path.normalize(path)
// posix version
exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash=substr(path,-1)==='/';// Normalize the path
path=normalizeArray(filter(path.split('/'),function(p){return!!p;}),!isAbsolute).join('/');if(!path&&!isAbsolute){path='.';}if(path&&trailingSlash){path+='/';}return(isAbsolute?'/':'')+path;};// posix version
exports.isAbsolute=function(path){return path.charAt(0)==='/';};// posix version
exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if(typeof p!=='string'){throw new TypeError('Arguments to path.join must be strings');}return p;}).join('/'));};// path.relative(from, to)
// posix version
exports.relative=function(from,to){from=exports.resolve(from).substr(1);to=exports.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=='')break;}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=='')break;}if(start>end)return[];return arr.slice(start,end-start+1);}var fromParts=trim(from.split('/'));var toParts=trim(to.split('/'));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break;}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push('..');}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join('/');};exports.sep='/';exports.delimiter=':';exports.dirname=function(path){var result=splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){// No dirname whatsoever
return'.';}if(dir){// It has a dirname, strip trailing slash
dir=dir.substr(0,dir.length-1);}return root+dir;};exports.basename=function(path,ext){var f=splitPath(path)[2];// TODO: make this comparison case-insensitive on windows?
if(ext&&f.substr(-1*ext.length)===ext){f=f.substr(0,f.length-ext.length);}return f;};exports.extname=function(path){return splitPath(path)[3];};function filter(xs,f){if(xs.filter)return xs.filter(f);var res=[];for(var i=0;i<xs.length;i++){if(f(xs[i],i,xs))res.push(xs[i]);}return res;}// String.prototype.substr - negative index don't work in IE8
var substr='ab'.substr(-1)==='b'?function(str,start,len){return str.substr(start,len);}:function(str,start,len){if(start<0)start=str.length+start;return str.substr(start,len);};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 118 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var Polling=__webpack_require__(80);var qs=__webpack_require__(40);var rDoubleSlashes=/\\\\n/g;var rSlashes=/(\\)?\\n/g;var util=__webpack_require__(53);/**
	 * Module exports.
	 */module.exports=JSONP;/**
	 * JSON-P polling transport.
	 *
	 * @api public
	 */function JSONP(req){Polling.call(this,req);this.head='___eio['+(req._query.j||'').replace(/[^0-9]/g,'')+'](';this.foot=');';}/**
	 * Inherits from Polling.
	 */util.inherits(JSONP,Polling);/**
	 * Handles incoming data.
	 * Due to a bug in \n handling by browsers, we expect a escaped string.
	 *
	 * @api private
	 */JSONP.prototype.onData=function(data){// we leverage the qs module so that we get built-in DoS protection
// and the fast alternative to decodeURIComponent
data=qs.parse(data).d;if('string'===typeof data){// client will send already escaped newlines as \\\\n and newlines as \\n
// \\n must be replaced with \n and \\\\n with \\n
data=data.replace(rSlashes,function(match,slashes){return slashes?match:'\n';});Polling.prototype.onData.call(this,data.replace(rDoubleSlashes,'\\n'));}};/**
	 * Performs the write.
	 *
	 * @api private
	 */JSONP.prototype.doWrite=function(data,options,callback){// we must output valid javascript, not valid json
// see: http://timelessrepo.com/json-isnt-a-javascript-subset
var js=JSON.stringify(data).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029");// prepare response
data=this.head+js+this.foot;Polling.prototype.doWrite.call(this,data,options,callback);};/***/},/* 119 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/**
	 * Module dependencies.
	 */var Transport=__webpack_require__(81);var parser=__webpack_require__(82);var util=__webpack_require__(53);var debug=__webpack_require__(91)('engine:ws');/**
	 * Export the constructor.
	 */module.exports=WebSocket;/**
	 * WebSocket transport
	 *
	 * @param {http.IncomingMessage}
	 * @api public
	 */function WebSocket(req){Transport.call(this,req);var self=this;this.socket=req.websocket;this.socket.on('message',this.onData.bind(this));this.socket.once('close',this.onClose.bind(this));this.socket.on('error',this.onError.bind(this));this.socket.on('headers',onHeaders);this.writable=true;this.perMessageDeflate=null;function onHeaders(headers){self.emit('headers',headers);}}/**
	 * Inherits from Transport.
	 */util.inherits(WebSocket,Transport);/**
	 * Transport name
	 *
	 * @api public
	 */WebSocket.prototype.name='websocket';/**
	 * Advertise upgrade support.
	 *
	 * @api public
	 */WebSocket.prototype.handlesUpgrades=true;/**
	 * Advertise framing support.
	 *
	 * @api public
	 */WebSocket.prototype.supportsFraming=true;/**
	 * Processes the incoming data.
	 *
	 * @param {String} encoded packet
	 * @api private
	 */WebSocket.prototype.onData=function(data){debug('received "%s"',data);Transport.prototype.onData.call(this,data);};/**
	 * Writes a packet payload.
	 *
	 * @param {Array} packets
	 * @api private
	 */WebSocket.prototype.send=function(packets){var self=this;for(var i=0;i<packets.length;i++){var packet=packets[i];parser.encodePacket(packet,self.supportsBinary,send);}function send(data){debug('writing "%s"',data);// always creates a new object since ws modifies it
var opts={};if(packet.options){opts.compress=packet.options.compress;}if(self.perMessageDeflate){var len='string'===typeof data?Buffer.byteLength(data):data.length;if(len<self.perMessageDeflate.threshold){opts.compress=false;}}self.writable=false;self.socket.send(data,opts,onEnd);}function onEnd(err){if(err)return self.onError('write error',err.stack);self.writable=true;self.emit('drain');}};/**
	 * Closes the transport.
	 *
	 * @api private
	 */WebSocket.prototype.doClose=function(fn){debug('closing');this.socket.close();fn&&fn();};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 120 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * Module dependencies.
	 */var EventEmitter=__webpack_require__(14).EventEmitter;var util=__webpack_require__(53);var debug=__webpack_require__(91)('engine:socket');/**
	 * Module exports.
	 */module.exports=Socket;/**
	 * Client class (abstract).
	 *
	 * @api private
	 */function Socket(id,server,transport,req){this.id=id;this.server=server;this.upgrading=false;this.upgraded=false;this.readyState='opening';this.writeBuffer=[];this.packetsFn=[];this.sentCallbackFn=[];this.cleanupFn=[];this.request=req;// Cache IP since it might not be in the req later
this.remoteAddress=req.connection.remoteAddress;this.checkIntervalTimer=null;this.upgradeTimeoutTimer=null;this.pingTimeoutTimer=null;this.setTransport(transport);this.onOpen();}/**
	 * Inherits from EventEmitter.
	 */util.inherits(Socket,EventEmitter);/**
	 * Called upon transport considered open.
	 *
	 * @api private
	 */Socket.prototype.onOpen=function(){this.readyState='open';// sends an `open` packet
this.transport.sid=this.id;this.sendPacket('open',JSON.stringify({sid:this.id,upgrades:this.getAvailableUpgrades(),pingInterval:this.server.pingInterval,pingTimeout:this.server.pingTimeout}));this.emit('open');this.setPingTimeout();};/**
	 * Called upon transport packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */Socket.prototype.onPacket=function(packet){if('open'===this.readyState){// export packet event
debug('packet');this.emit('packet',packet);// Reset ping timeout on any packet, incoming data is a good sign of
// other side's liveness
this.setPingTimeout();switch(packet.type){case'ping':debug('got ping');this.sendPacket('pong');this.emit('heartbeat');break;case'error':this.onClose('parse error');break;case'message':this.emit('data',packet.data);this.emit('message',packet.data);break;}}else{debug('packet received with closed socket');}};/**
	 * Called upon transport error.
	 *
	 * @param {Error} error object
	 * @api private
	 */Socket.prototype.onError=function(err){debug('transport error');this.onClose('transport error',err);};/**
	 * Sets and resets ping timeout timer based on client pings.
	 *
	 * @api private
	 */Socket.prototype.setPingTimeout=function(){var self=this;clearTimeout(self.pingTimeoutTimer);self.pingTimeoutTimer=setTimeout(function(){self.onClose('ping timeout');},self.server.pingInterval+self.server.pingTimeout);};/**
	 * Attaches handlers for the given transport.
	 *
	 * @param {Transport} transport
	 * @api private
	 */Socket.prototype.setTransport=function(transport){var onError=this.onError.bind(this);var onPacket=this.onPacket.bind(this);var flush=this.flush.bind(this);var onClose=this.onClose.bind(this,'transport close');this.transport=transport;this.transport.once('error',onError);this.transport.on('packet',onPacket);this.transport.on('drain',flush);this.transport.once('close',onClose);// this function will manage packet events (also message callbacks)
this.setupSendCallback();this.cleanupFn.push(function(){transport.removeListener('error',onError);transport.removeListener('packet',onPacket);transport.removeListener('drain',flush);transport.removeListener('close',onClose);});};/**
	 * Upgrades socket to the given transport
	 *
	 * @param {Transport} transport
	 * @api private
	 */Socket.prototype.maybeUpgrade=function(transport){debug('might upgrade socket transport from "%s" to "%s"',this.transport.name,transport.name);this.upgrading=true;var self=this;// set transport upgrade timer
self.upgradeTimeoutTimer=setTimeout(function(){debug('client did not complete upgrade - closing transport');cleanup();if('open'===transport.readyState){transport.close();}},this.server.upgradeTimeout);function onPacket(packet){if('ping'===packet.type&&'probe'===packet.data){transport.send([{type:'pong',data:'probe'}]);self.emit('upgrading',transport);clearInterval(self.checkIntervalTimer);self.checkIntervalTimer=setInterval(check,100);}else if('upgrade'===packet.type&&self.readyState!=='closed'){debug('got upgrade packet - upgrading');cleanup();self.transport.discard();self.upgraded=true;self.clearTransport();self.setTransport(transport);self.emit('upgrade',transport);self.setPingTimeout();self.flush();if(self.readyState==='closing'){transport.close(function(){self.onClose('forced close');});}}else{cleanup();transport.close();}}// we force a polling cycle to ensure a fast upgrade
function check(){if('polling'===self.transport.name&&self.transport.writable){debug('writing a noop packet to polling for fast upgrade');self.transport.send([{type:'noop'}]);}}function cleanup(){self.upgrading=false;clearInterval(self.checkIntervalTimer);self.checkIntervalTimer=null;clearTimeout(self.upgradeTimeoutTimer);self.upgradeTimeoutTimer=null;transport.removeListener('packet',onPacket);transport.removeListener('close',onTransportClose);transport.removeListener('error',onError);self.removeListener('close',onClose);}function onError(err){debug('client did not complete upgrade - %s',err);cleanup();transport.close();transport=null;}function onTransportClose(){onError('transport closed');}function onClose(){onError('socket closed');}transport.on('packet',onPacket);transport.once('close',onTransportClose);transport.once('error',onError);self.once('close',onClose);};/**
	 * Clears listeners and timers associated with current transport.
	 *
	 * @api private
	 */Socket.prototype.clearTransport=function(){var cleanup;var toCleanUp=this.cleanupFn.length;for(var i=0;i<toCleanUp;i++){cleanup=this.cleanupFn.shift();cleanup();}// silence further transport errors and prevent uncaught exceptions
this.transport.on('error',function(){debug('error triggered by discarded transport');});// ensure transport won't stay open
this.transport.close();clearTimeout(this.pingTimeoutTimer);};/**
	 * Called upon transport considered closed.
	 * Possible reasons: `ping timeout`, `client error`, `parse error`,
	 * `transport error`, `server close`, `transport close`
	 */Socket.prototype.onClose=function(reason,description){if('closed'!==this.readyState){this.readyState='closed';clearTimeout(this.pingTimeoutTimer);clearInterval(this.checkIntervalTimer);this.checkIntervalTimer=null;clearTimeout(this.upgradeTimeoutTimer);var self=this;// clean writeBuffer in next tick, so developers can still
// grab the writeBuffer on 'close' event
process.nextTick(function(){self.writeBuffer=[];});this.packetsFn=[];this.sentCallbackFn=[];this.clearTransport();this.emit('close',reason,description);}};/**
	 * Setup and manage send callback
	 *
	 * @api private
	 */Socket.prototype.setupSendCallback=function(){var self=this;this.transport.on('drain',onDrain);this.cleanupFn.push(function(){self.transport.removeListener('drain',onDrain);});// the message was sent successfully, execute the callback
function onDrain(){if(self.sentCallbackFn.length>0){var seqFn=self.sentCallbackFn.splice(0,1)[0];if('function'===typeof seqFn){debug('executing send callback');seqFn(self.transport);}else if(Array.isArray(seqFn)){debug('executing batch send callback');for(var l=seqFn.length,i=0;i<l;i++){if('function'===typeof seqFn[i]){seqFn[i](self.transport);}}}}}};/**
	 * Sends a message packet.
	 *
	 * @param {String} message
	 * @param {Object} options
	 * @param {Function} callback
	 * @return {Socket} for chaining
	 * @api public
	 */Socket.prototype.send=Socket.prototype.write=function(data,options,callback){this.sendPacket('message',data,options,callback);return this;};/**
	 * Sends a packet.
	 *
	 * @param {String} packet type
	 * @param {String} optional, data
	 * @param {Object} options
	 * @api private
	 */Socket.prototype.sendPacket=function(type,data,options,callback){if('function'===typeof options){callback=options;options=null;}options=options||{};options.compress=false!==options.compress;if('closing'!==this.readyState){debug('sending packet "%s" (%s)',type,data);var packet={type:type,options:options};if(data)packet.data=data;// exports packetCreate event
this.emit('packetCreate',packet);this.writeBuffer.push(packet);// add send callback to object, if defined
if(callback)this.packetsFn.push(callback);this.flush();}};/**
	 * Attempts to flush the packets buffer.
	 *
	 * @api private
	 */Socket.prototype.flush=function(){if('closed'!==this.readyState&&this.transport.writable&&this.writeBuffer.length){debug('flushing buffer to transport');this.emit('flush',this.writeBuffer);this.server.emit('flush',this,this.writeBuffer);var wbuf=this.writeBuffer;this.writeBuffer=[];if(!this.transport.supportsFraming){this.sentCallbackFn.push(this.packetsFn);}else{this.sentCallbackFn.push.apply(this.sentCallbackFn,this.packetsFn);}this.packetsFn=[];this.transport.send(wbuf);this.emit('drain');this.server.emit('drain',this);}};/**
	 * Get available upgrades for this socket.
	 *
	 * @api private
	 */Socket.prototype.getAvailableUpgrades=function(){var availableUpgrades=[];var allUpgrades=this.server.upgrades(this.transport.name);for(var i=0,l=allUpgrades.length;i<l;++i){var upg=allUpgrades[i];if(this.server.transports.indexOf(upg)!==-1){availableUpgrades.push(upg);}}return availableUpgrades;};/**
	 * Closes the socket and underlying transport.
	 *
	 * @param {Boolean} optional, discard
	 * @return {Socket} for chaining
	 * @api public
	 */Socket.prototype.close=function(discard){if('open'!==this.readyState)return;this.readyState='closing';if(this.writeBuffer.length){this.once('drain',this.closeTransport.bind(this,discard));return;}this.closeTransport(discard);};/**
	 * Closes the underlying transport.
	 *
	 * @param {Boolean} discard
	 * @api private
	 */Socket.prototype.closeTransport=function(discard){if(discard)this.transport.discard();this.transport.close(this.onClose.bind(this,'forced close'));};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 121 *//***/function(module,exports){/*!
	 * cookie
	 * Copyright(c) 2012-2014 Roman Shtylman
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */'use strict';/**
	 * Module exports.
	 * @public
	 */exports.parse=parse;exports.serialize=serialize;/**
	 * Module variables.
	 * @private
	 */var decode=decodeURIComponent;var encode=encodeURIComponent;var pairSplitRegExp=/; */;/**
	 * RegExp to match field-content in RFC 7230 sec 3.2
	 *
	 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	 * field-vchar   = VCHAR / obs-text
	 * obs-text      = %x80-FF
	 */var fieldContentRegExp=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;/**
	 * Parse a cookie header.
	 *
	 * Parse the given cookie header string into an object
	 * The object has the various cookies as keys(names) => values
	 *
	 * @param {string} str
	 * @param {object} [options]
	 * @return {object}
	 * @public
	 */function parse(str,options){if(typeof str!=='string'){throw new TypeError('argument str must be a string');}var obj={};var opt=options||{};var pairs=str.split(pairSplitRegExp);var dec=opt.decode||decode;for(var i=0;i<pairs.length;i++){var pair=pairs[i];var eq_idx=pair.indexOf('=');// skip things that don't look like key=value
if(eq_idx<0){continue;}var key=pair.substr(0,eq_idx).trim();var val=pair.substr(++eq_idx,pair.length).trim();// quoted values
if('"'==val[0]){val=val.slice(1,-1);}// only assign once
if(undefined==obj[key]){obj[key]=tryDecode(val,dec);}}return obj;}/**
	 * Serialize data into a cookie header.
	 *
	 * Serialize the a name value pair into a cookie string suitable for
	 * http headers. An optional options object specified cookie parameters.
	 *
	 * serialize('foo', 'bar', { httpOnly: true })
	 *   => "foo=bar; httpOnly"
	 *
	 * @param {string} name
	 * @param {string} val
	 * @param {object} [options]
	 * @return {string}
	 * @public
	 */function serialize(name,val,options){var opt=options||{};var enc=opt.encode||encode;if(typeof enc!=='function'){throw new TypeError('option encode is invalid');}if(!fieldContentRegExp.test(name)){throw new TypeError('argument name is invalid');}var value=enc(val);if(value&&!fieldContentRegExp.test(value)){throw new TypeError('argument val is invalid');}var str=name+'='+value;if(null!=opt.maxAge){var maxAge=opt.maxAge-0;if(isNaN(maxAge))throw new Error('maxAge should be a Number');str+='; Max-Age='+Math.floor(maxAge);}if(opt.domain){if(!fieldContentRegExp.test(opt.domain)){throw new TypeError('option domain is invalid');}str+='; Domain='+opt.domain;}if(opt.path){if(!fieldContentRegExp.test(opt.path)){throw new TypeError('option path is invalid');}str+='; Path='+opt.path;}if(opt.expires){if(typeof opt.expires.toUTCString!=='function'){throw new TypeError('option expires is invalid');}str+='; Expires='+opt.expires.toUTCString();}if(opt.httpOnly){str+='; HttpOnly';}if(opt.secure){str+='; Secure';}if(opt.sameSite){var sameSite=typeof opt.sameSite==='string'?opt.sameSite.toLowerCase():opt.sameSite;switch(sameSite){case true:str+='; SameSite=Strict';break;case'lax':str+='; SameSite=Lax';break;case'strict':str+='; SameSite=Strict';break;default:throw new TypeError('option sameSite is invalid');}}return str;}/**
	 * Try decoding a string using a decoding function.
	 *
	 * @param {string} str
	 * @param {function} decode
	 * @private
	 */function tryDecode(str,decode){try{return decode(str);}catch(e){return str;}}/***/},/* 122 *//***/function(module,exports,__webpack_require__){var map={"./engine.io":43,"./engine.io.js":43,"./server":44,"./server.js":44,"./socket":120,"./socket.js":120,"./transport":81,"./transport.js":81,"./transports/index":78,"./transports/index.js":78,"./transports/polling":80,"./transports/polling-jsonp":118,"./transports/polling-jsonp.js":118,"./transports/polling-xhr":79,"./transports/polling-xhr.js":79,"./transports/polling.js":80,"./transports/websocket":119,"./transports/websocket.js":119};function webpackContext(req){return __webpack_require__(webpackContextResolve(req));};function webpackContextResolve(req){return map[req]||function(){throw new Error("Cannot find module '"+req+"'.");}();};webpackContext.keys=function webpackContextKeys(){return Object.keys(map);};webpackContext.resolve=webpackContextResolve;module.exports=webpackContext;webpackContext.id=122;/***/},/* 123 *//***/function(module,exports,__webpack_require__){'use strict';/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var WS=module.exports=__webpack_require__(124);WS.Server=__webpack_require__(140);WS.Sender=__webpack_require__(128);WS.Receiver=__webpack_require__(133);/**
	 * Create a new WebSocket server.
	 *
	 * @param {Object} options Server options
	 * @param {Function} fn Optional connection listener.
	 * @returns {WS.Server}
	 * @api public
	 */WS.createServer=function createServer(options,fn){var server=new WS.Server(options);if(typeof fn==='function'){server.on('connection',fn);}return server;};/**
	 * Create a new WebSocket connection.
	 *
	 * @param {String} address The URL/address we need to connect to.
	 * @param {Function} fn Open listener.
	 * @returns {WS}
	 * @api public
	 */WS.connect=WS.createConnection=function connect(address,fn){var client=new WS(address);if(typeof fn==='function'){client.on('open',fn);}return client;};/***/},/* 124 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer,process){'use strict';/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var url=__webpack_require__(36),util=__webpack_require__(53),http=__webpack_require__(2),https=__webpack_require__(125),crypto=__webpack_require__(46),stream=__webpack_require__(13),Ultron=__webpack_require__(126),Options=__webpack_require__(127),Sender=__webpack_require__(128),Receiver=__webpack_require__(133),SenderHixie=__webpack_require__(137),ReceiverHixie=__webpack_require__(138),Extensions=__webpack_require__(139),PerMessageDeflate=__webpack_require__(132),EventEmitter=__webpack_require__(14).EventEmitter;/**
	 * Constants
	 */// Default protocol version
var protocolVersion=13;// Close timeout
var closeTimeout=30*1000;// Allow 30 seconds to terminate the connection cleanly
/**
	 * WebSocket implementation
	 *
	 * @constructor
	 * @param {String} address Connection address.
	 * @param {String|Array} protocols WebSocket protocols.
	 * @param {Object} options Additional connection options.
	 * @api public
	 */function WebSocket(address,protocols,options){if(this instanceof WebSocket===false){return new WebSocket(address,protocols,options);}EventEmitter.call(this);if(protocols&&!Array.isArray(protocols)&&'object'===(typeof protocols==="undefined"?"undefined":_typeof(protocols))){// accept the "options" Object as the 2nd argument
options=protocols;protocols=null;}if('string'===typeof protocols){protocols=[protocols];}if(!Array.isArray(protocols)){protocols=[];}this._socket=null;this._ultron=null;this._closeReceived=false;this.bytesReceived=0;this.readyState=null;this.supports={};this.extensions={};this._binaryType='nodebuffer';if(Array.isArray(address)){initAsServerClient.apply(this,address.concat(options));}else{initAsClient.apply(this,[address,protocols,options]);}}/**
	 * Inherits from EventEmitter.
	 */util.inherits(WebSocket,EventEmitter);/**
	 * Ready States
	 */["CONNECTING","OPEN","CLOSING","CLOSED"].forEach(function each(state,index){WebSocket.prototype[state]=WebSocket[state]=index;});/**
	 * Gracefully closes the connection, after sending a description message to the server
	 *
	 * @param {Object} data to be sent to the server
	 * @api public
	 */WebSocket.prototype.close=function close(code,data){if(this.readyState===WebSocket.CLOSED)return;if(this.readyState===WebSocket.CONNECTING){this.readyState=WebSocket.CLOSED;return;}if(this.readyState===WebSocket.CLOSING){if(this._closeReceived&&this._isServer){this.terminate();}return;}var self=this;try{this.readyState=WebSocket.CLOSING;this._closeCode=code;this._closeMessage=data;var mask=!this._isServer;this._sender.close(code,data,mask,function(err){if(err)self.emit('error',err);if(self._closeReceived&&self._isServer){self.terminate();}else{// ensure that the connection is cleaned up even when no response of closing handshake.
clearTimeout(self._closeTimer);self._closeTimer=setTimeout(cleanupWebsocketResources.bind(self,true),closeTimeout);}});}catch(e){this.emit('error',e);}};/**
	 * Pause the client stream
	 *
	 * @api public
	 */WebSocket.prototype.pause=function pauser(){if(this.readyState!==WebSocket.OPEN)throw new Error('not opened');return this._socket.pause();};/**
	 * Sends a ping
	 *
	 * @param {Object} data to be sent to the server
	 * @param {Object} Members - mask: boolean, binary: boolean
	 * @param {boolean} dontFailWhenClosed indicates whether or not to throw if the connection isnt open
	 * @api public
	 */WebSocket.prototype.ping=function ping(data,options,dontFailWhenClosed){if(this.readyState!==WebSocket.OPEN){if(dontFailWhenClosed===true)return;throw new Error('not opened');}options=options||{};if(typeof options.mask==='undefined')options.mask=!this._isServer;this._sender.ping(data,options);};/**
	 * Sends a pong
	 *
	 * @param {Object} data to be sent to the server
	 * @param {Object} Members - mask: boolean, binary: boolean
	 * @param {boolean} dontFailWhenClosed indicates whether or not to throw if the connection isnt open
	 * @api public
	 */WebSocket.prototype.pong=function(data,options,dontFailWhenClosed){if(this.readyState!==WebSocket.OPEN){if(dontFailWhenClosed===true)return;throw new Error('not opened');}options=options||{};if(typeof options.mask==='undefined')options.mask=!this._isServer;this._sender.pong(data,options);};/**
	 * Resume the client stream
	 *
	 * @api public
	 */WebSocket.prototype.resume=function resume(){if(this.readyState!==WebSocket.OPEN)throw new Error('not opened');return this._socket.resume();};/**
	 * Sends a piece of data
	 *
	 * @param {Object} data to be sent to the server
	 * @param {Object} Members - mask: boolean, binary: boolean, compress: boolean
	 * @param {function} Optional callback which is executed after the send completes
	 * @api public
	 */WebSocket.prototype.send=function send(data,options,cb){if(typeof options==='function'){cb=options;options={};}if(this.readyState!==WebSocket.OPEN){if(typeof cb==='function')cb(new Error('not opened'));else throw new Error('not opened');return;}if(!data)data='';if(this._queue){var self=this;this._queue.push(function(){self.send(data,options,cb);});return;}options=options||{};options.fin=true;if(typeof options.binary==='undefined'){options.binary=data instanceof ArrayBuffer||data instanceof Buffer||data instanceof Uint8Array||data instanceof Uint16Array||data instanceof Uint32Array||data instanceof Int8Array||data instanceof Int16Array||data instanceof Int32Array||data instanceof Float32Array||data instanceof Float64Array;}if(typeof options.mask==='undefined')options.mask=!this._isServer;if(typeof options.compress==='undefined')options.compress=true;if(!this.extensions[PerMessageDeflate.extensionName]){options.compress=false;}var readable=typeof stream.Readable==='function'?stream.Readable:stream.Stream;if(data instanceof readable){startQueue(this);var self=this;sendStream(this,data,options,function send(error){process.nextTick(function tock(){executeQueueSends(self);});if(typeof cb==='function')cb(error);});}else{this._sender.send(data,options,cb);}};/**
	 * Streams data through calls to a user supplied function
	 *
	 * @param {Object} Members - mask: boolean, binary: boolean, compress: boolean
	 * @param {function} 'function (error, send)' which is executed on successive ticks of which send is 'function (data, final)'.
	 * @api public
	 */WebSocket.prototype.stream=function stream(options,cb){if(typeof options==='function'){cb=options;options={};}var self=this;if(typeof cb!=='function')throw new Error('callback must be provided');if(this.readyState!==WebSocket.OPEN){if(typeof cb==='function')cb(new Error('not opened'));else throw new Error('not opened');return;}if(this._queue){this._queue.push(function(){self.stream(options,cb);});return;}options=options||{};if(typeof options.mask==='undefined')options.mask=!this._isServer;if(typeof options.compress==='undefined')options.compress=true;if(!this.extensions[PerMessageDeflate.extensionName]){options.compress=false;}startQueue(this);function send(data,final){try{if(self.readyState!==WebSocket.OPEN)throw new Error('not opened');options.fin=final===true;self._sender.send(data,options);if(!final)process.nextTick(cb.bind(null,null,send));else executeQueueSends(self);}catch(e){if(typeof cb==='function')cb(e);else{delete self._queue;self.emit('error',e);}}}process.nextTick(cb.bind(null,null,send));};/**
	 * Immediately shuts down the connection
	 *
	 * @api public
	 */WebSocket.prototype.terminate=function terminate(){if(this.readyState===WebSocket.CLOSED)return;if(this._socket){this.readyState=WebSocket.CLOSING;// End the connection
try{this._socket.end();}catch(e){// Socket error during end() call, so just destroy it right now
cleanupWebsocketResources.call(this,true);return;}// Add a timeout to ensure that the connection is completely
// cleaned up within 30 seconds, even if the clean close procedure
// fails for whatever reason
// First cleanup any pre-existing timeout from an earlier "terminate" call,
// if one exists.  Otherwise terminate calls in quick succession will leak timeouts
// and hold the program open for `closeTimout` time.
if(this._closeTimer){clearTimeout(this._closeTimer);}this._closeTimer=setTimeout(cleanupWebsocketResources.bind(this,true),closeTimeout);}else if(this.readyState===WebSocket.CONNECTING){cleanupWebsocketResources.call(this,true);}};/**
	 * Expose bufferedAmount
	 *
	 * @api public
	 */Object.defineProperty(WebSocket.prototype,'bufferedAmount',{get:function get(){var amount=0;if(this._socket){amount=this._socket.bufferSize||0;}return amount;}});/**
	 * Expose binaryType
	 *
	 * This deviates from the W3C interface since ws doesn't support the required
	 * default "blob" type (instead we define a custom "nodebuffer" type).
	 *
	 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
	 * @api public
	 */Object.defineProperty(WebSocket.prototype,'binaryType',{get:function get(){return this._binaryType;},set:function set(type){if(type==='arraybuffer'||type==='nodebuffer')this._binaryType=type;else throw new SyntaxError('unsupported binaryType: must be either "nodebuffer" or "arraybuffer"');}});/**
	 * Emulates the W3C Browser based WebSocket interface using function members.
	 *
	 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
	 * @api public
	 */['open','error','close','message'].forEach(function(method){Object.defineProperty(WebSocket.prototype,'on'+method,{/**
	     * Returns the current listener
	     *
	     * @returns {Mixed} the set function or undefined
	     * @api public
	     */get:function get(){var listener=this.listeners(method)[0];return listener?listener._listener?listener._listener:listener:undefined;},/**
	     * Start listening for events
	     *
	     * @param {Function} listener the listener
	     * @returns {Mixed} the set function or undefined
	     * @api public
	     */set:function set(listener){this.removeAllListeners(method);this.addEventListener(method,listener);}});});/**
	 * Emulates the W3C Browser based WebSocket interface using addEventListener.
	 *
	 * @see https://developer.mozilla.org/en/DOM/element.addEventListener
	 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
	 * @api public
	 */WebSocket.prototype.addEventListener=function(method,listener){var target=this;function onMessage(data,flags){if(flags.binary&&this.binaryType==='arraybuffer')data=new Uint8Array(data).buffer;listener.call(target,new MessageEvent(data,!!flags.binary,target));}function onClose(code,message){listener.call(target,new CloseEvent(code,message,target));}function onError(event){event.type='error';event.target=target;listener.call(target,event);}function onOpen(){listener.call(target,new OpenEvent(target));}if(typeof listener==='function'){if(method==='message'){// store a reference so we can return the original function from the
// addEventListener hook
onMessage._listener=listener;this.on(method,onMessage);}else if(method==='close'){// store a reference so we can return the original function from the
// addEventListener hook
onClose._listener=listener;this.on(method,onClose);}else if(method==='error'){// store a reference so we can return the original function from the
// addEventListener hook
onError._listener=listener;this.on(method,onError);}else if(method==='open'){// store a reference so we can return the original function from the
// addEventListener hook
onOpen._listener=listener;this.on(method,onOpen);}else{this.on(method,listener);}}};module.exports=WebSocket;module.exports.buildHostHeader=buildHostHeader;/**
	 * W3C MessageEvent
	 *
	 * @see http://www.w3.org/TR/html5/comms.html
	 * @constructor
	 * @api private
	 */function MessageEvent(dataArg,isBinary,target){this.type='message';this.data=dataArg;this.target=target;this.binary=isBinary;// non-standard.
}/**
	 * W3C CloseEvent
	 *
	 * @see http://www.w3.org/TR/html5/comms.html
	 * @constructor
	 * @api private
	 */function CloseEvent(code,reason,target){this.type='close';this.wasClean=typeof code==='undefined'||code===1000;this.code=code;this.reason=reason;this.target=target;}/**
	 * W3C OpenEvent
	 *
	 * @see http://www.w3.org/TR/html5/comms.html
	 * @constructor
	 * @api private
	 */function OpenEvent(target){this.type='open';this.target=target;}// Append port number to Host header, only if specified in the url
// and non-default
function buildHostHeader(isSecure,hostname,port){var headerHost=hostname;if(hostname){if(isSecure&&port!=443||!isSecure&&port!=80){headerHost=headerHost+':'+port;}}return headerHost;}/**
	 * Entirely private apis,
	 * which may or may not be bound to a sepcific WebSocket instance.
	 */function initAsServerClient(req,socket,upgradeHead,options){options=new Options({protocolVersion:protocolVersion,protocol:null,extensions:{},maxPayload:0}).merge(options);// expose state properties
this.protocol=options.value.protocol;this.protocolVersion=options.value.protocolVersion;this.extensions=options.value.extensions;this.supports.binary=this.protocolVersion!=='hixie-76';this.upgradeReq=req;this.readyState=WebSocket.CONNECTING;this._isServer=true;this.maxPayload=options.value.maxPayload;// establish connection
if(options.value.protocolVersion==='hixie-76'){establishConnection.call(this,ReceiverHixie,SenderHixie,socket,upgradeHead);}else{establishConnection.call(this,Receiver,Sender,socket,upgradeHead);}}function initAsClient(address,protocols,options){options=new Options({origin:null,protocolVersion:protocolVersion,host:null,headers:null,protocol:protocols.join(','),agent:null,// ssl-related options
pfx:null,key:null,passphrase:null,cert:null,ca:null,ciphers:null,rejectUnauthorized:null,perMessageDeflate:true,localAddress:null}).merge(options);if(options.value.protocolVersion!==8&&options.value.protocolVersion!==13){throw new Error('unsupported protocol version');}// verify URL and establish http class
var serverUrl=url.parse(address);var isUnixSocket=serverUrl.protocol==='ws+unix:';if(!serverUrl.host&&!isUnixSocket)throw new Error('invalid url');var isSecure=serverUrl.protocol==='wss:'||serverUrl.protocol==='https:';var httpObj=isSecure?https:http;var port=serverUrl.port||(isSecure?443:80);var auth=serverUrl.auth;// prepare extensions
var extensionsOffer={};var perMessageDeflate;if(options.value.perMessageDeflate){perMessageDeflate=new PerMessageDeflate(typeof options.value.perMessageDeflate!==true?options.value.perMessageDeflate:{},false);extensionsOffer[PerMessageDeflate.extensionName]=perMessageDeflate.offer();}// expose state properties
this._isServer=false;this.url=address;this.protocolVersion=options.value.protocolVersion;this.supports.binary=this.protocolVersion!=='hixie-76';// begin handshake
var key=new Buffer(options.value.protocolVersion+'-'+Date.now()).toString('base64');var shasum=crypto.createHash('sha1');shasum.update(key+'258EAFA5-E914-47DA-95CA-C5AB0DC85B11');var expectedServerKey=shasum.digest('base64');var agent=options.value.agent;var headerHost=buildHostHeader(isSecure,serverUrl.hostname,port);var requestOptions={port:port,host:serverUrl.hostname,headers:{'Connection':'Upgrade','Upgrade':'websocket','Host':headerHost,'Sec-WebSocket-Version':options.value.protocolVersion,'Sec-WebSocket-Key':key}};// If we have basic auth.
if(auth){requestOptions.headers.Authorization='Basic '+new Buffer(auth).toString('base64');}if(options.value.protocol){requestOptions.headers['Sec-WebSocket-Protocol']=options.value.protocol;}if(options.value.host){requestOptions.headers.Host=options.value.host;}if(options.value.headers){for(var header in options.value.headers){if(options.value.headers.hasOwnProperty(header)){requestOptions.headers[header]=options.value.headers[header];}}}if(Object.keys(extensionsOffer).length){requestOptions.headers['Sec-WebSocket-Extensions']=Extensions.format(extensionsOffer);}if(options.isDefinedAndNonNull('pfx')||options.isDefinedAndNonNull('key')||options.isDefinedAndNonNull('passphrase')||options.isDefinedAndNonNull('cert')||options.isDefinedAndNonNull('ca')||options.isDefinedAndNonNull('ciphers')||options.isDefinedAndNonNull('rejectUnauthorized')){if(options.isDefinedAndNonNull('pfx'))requestOptions.pfx=options.value.pfx;if(options.isDefinedAndNonNull('key'))requestOptions.key=options.value.key;if(options.isDefinedAndNonNull('passphrase'))requestOptions.passphrase=options.value.passphrase;if(options.isDefinedAndNonNull('cert'))requestOptions.cert=options.value.cert;if(options.isDefinedAndNonNull('ca'))requestOptions.ca=options.value.ca;if(options.isDefinedAndNonNull('ciphers'))requestOptions.ciphers=options.value.ciphers;if(options.isDefinedAndNonNull('rejectUnauthorized'))requestOptions.rejectUnauthorized=options.value.rejectUnauthorized;if(!agent){// global agent ignores client side certificates
agent=new httpObj.Agent(requestOptions);}}requestOptions.path=serverUrl.path||'/';if(agent){requestOptions.agent=agent;}if(isUnixSocket){requestOptions.socketPath=serverUrl.pathname;}if(options.value.localAddress){requestOptions.localAddress=options.value.localAddress;}if(options.value.origin){if(options.value.protocolVersion<13)requestOptions.headers['Sec-WebSocket-Origin']=options.value.origin;else requestOptions.headers.Origin=options.value.origin;}var self=this;var req=httpObj.request(requestOptions);req.on('error',function onerror(error){self.emit('error',error);cleanupWebsocketResources.call(self,error);});req.once('response',function response(res){var error;if(!self.emit('unexpected-response',req,res)){error=new Error('unexpected server response ('+res.statusCode+')');req.abort();self.emit('error',error);}cleanupWebsocketResources.call(self,error);});req.once('upgrade',function upgrade(res,socket,upgradeHead){if(self.readyState===WebSocket.CLOSED){// client closed before server accepted connection
self.emit('close');self.removeAllListeners();socket.end();return;}var serverKey=res.headers['sec-websocket-accept'];if(typeof serverKey==='undefined'||serverKey!==expectedServerKey){self.emit('error','invalid server key');self.removeAllListeners();socket.end();return;}var serverProt=res.headers['sec-websocket-protocol'];var protList=(options.value.protocol||"").split(/, */);var protError=null;if(!options.value.protocol&&serverProt){protError='server sent a subprotocol even though none requested';}else if(options.value.protocol&&!serverProt){protError='server sent no subprotocol even though requested';}else if(serverProt&&protList.indexOf(serverProt)===-1){protError='server responded with an invalid protocol';}if(protError){self.emit('error',protError);self.removeAllListeners();socket.end();return;}else if(serverProt){self.protocol=serverProt;}var serverExtensions=Extensions.parse(res.headers['sec-websocket-extensions']);if(perMessageDeflate&&serverExtensions[PerMessageDeflate.extensionName]){try{perMessageDeflate.accept(serverExtensions[PerMessageDeflate.extensionName]);}catch(err){self.emit('error','invalid extension parameter');self.removeAllListeners();socket.end();return;}self.extensions[PerMessageDeflate.extensionName]=perMessageDeflate;}establishConnection.call(self,Receiver,Sender,socket,upgradeHead);// perform cleanup on http resources
req.removeAllListeners();req=null;agent=null;});req.end();this.readyState=WebSocket.CONNECTING;}function establishConnection(ReceiverClass,SenderClass,socket,upgradeHead){var ultron=this._ultron=new Ultron(socket),called=false,self=this;socket.setTimeout(0);socket.setNoDelay(true);this._receiver=new ReceiverClass(this.extensions,this.maxPayload);this._socket=socket;// socket cleanup handlers
ultron.on('end',cleanupWebsocketResources.bind(this));ultron.on('close',cleanupWebsocketResources.bind(this));ultron.on('error',cleanupWebsocketResources.bind(this));// ensure that the upgradeHead is added to the receiver
function firstHandler(data){if(called||self.readyState===WebSocket.CLOSED)return;called=true;socket.removeListener('data',firstHandler);ultron.on('data',realHandler);if(upgradeHead&&upgradeHead.length>0){realHandler(upgradeHead);upgradeHead=null;}if(data)realHandler(data);}// subsequent packets are pushed straight to the receiver
function realHandler(data){self.bytesReceived+=data.length;self._receiver.add(data);}ultron.on('data',firstHandler);// if data was passed along with the http upgrade,
// this will schedule a push of that on to the receiver.
// this has to be done on next tick, since the caller
// hasn't had a chance to set event handlers on this client
// object yet.
process.nextTick(firstHandler);// receiver event handlers
self._receiver.ontext=function ontext(data,flags){flags=flags||{};self.emit('message',data,flags);};self._receiver.onbinary=function onbinary(data,flags){flags=flags||{};flags.binary=true;self.emit('message',data,flags);};self._receiver.onping=function onping(data,flags){flags=flags||{};self.pong(data,{mask:!self._isServer,binary:flags.binary===true},true);self.emit('ping',data,flags);};self._receiver.onpong=function onpong(data,flags){self.emit('pong',data,flags||{});};self._receiver.onclose=function onclose(code,data,flags){flags=flags||{};self._closeReceived=true;self.close(code,data);};self._receiver.onerror=function onerror(reason,errorCode){// close the connection when the receiver reports a HyBi error code
self.close(typeof errorCode!=='undefined'?errorCode:1002,'');self.emit('error',reason instanceof Error?reason:new Error(reason));};// finalize the client
this._sender=new SenderClass(socket,this.extensions);this._sender.on('error',function onerror(error){self.close(1002,'');self.emit('error',error);});this.readyState=WebSocket.OPEN;this.emit('open');}function startQueue(instance){instance._queue=instance._queue||[];}function executeQueueSends(instance){var queue=instance._queue;if(typeof queue==='undefined')return;delete instance._queue;for(var i=0,l=queue.length;i<l;++i){queue[i]();}}function sendStream(instance,stream,options,cb){stream.on('data',function incoming(data){if(instance.readyState!==WebSocket.OPEN){if(typeof cb==='function')cb(new Error('not opened'));else{delete instance._queue;instance.emit('error',new Error('not opened'));}return;}options.fin=false;instance._sender.send(data,options);});stream.on('end',function end(){if(instance.readyState!==WebSocket.OPEN){if(typeof cb==='function')cb(new Error('not opened'));else{delete instance._queue;instance.emit('error',new Error('not opened'));}return;}options.fin=true;instance._sender.send(null,options);if(typeof cb==='function')cb(null);});}function cleanupWebsocketResources(error){if(this.readyState===WebSocket.CLOSED)return;this.readyState=WebSocket.CLOSED;clearTimeout(this._closeTimer);this._closeTimer=null;// If the connection was closed abnormally (with an error), or if
// the close control frame was not received then the close code
// must default to 1006.
if(error||!this._closeReceived){this._closeCode=1006;}this.emit('close',this._closeCode||1000,this._closeMessage||'');if(this._socket){if(this._ultron)this._ultron.destroy();this._socket.on('error',function onerror(){try{this.destroy();}catch(e){}});try{if(!error)this._socket.end();else this._socket.destroy();}catch(e){/* Ignore termination errors */}this._socket=null;this._ultron=null;}if(this._sender){this._sender.removeAllListeners();this._sender=null;}if(this._receiver){this._receiver.cleanup();this._receiver=null;}if(this.extensions[PerMessageDeflate.extensionName]){this.extensions[PerMessageDeflate.extensionName].cleanup();}this.extensions=null;this.removeAllListeners();this.on('error',function onerror(){});// catch all errors after this
delete this._queue;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer,__webpack_require__(8));/***/},/* 125 *//***/function(module,exports,__webpack_require__){var http=__webpack_require__(2);var https=module.exports;for(var key in http){if(http.hasOwnProperty(key))https[key]=http[key];};https.request=function(params,cb){if(!params)params={};params.scheme='https';params.protocol='https:';return http.request.call(this,params,cb);};/***/},/* 126 *//***/function(module,exports){'use strict';var has=Object.prototype.hasOwnProperty;/**
	 * An auto incrementing id which we can use to create "unique" Ultron instances
	 * so we can track the event emitters that are added through the Ultron
	 * interface.
	 *
	 * @type {Number}
	 * @private
	 */var id=0;/**
	 * Ultron is high-intelligence robot. It gathers intelligence so it can start improving
	 * upon his rudimentary design. It will learn from your EventEmitting patterns
	 * and exterminate them.
	 *
	 * @constructor
	 * @param {EventEmitter} ee EventEmitter instance we need to wrap.
	 * @api public
	 */function Ultron(ee){if(!(this instanceof Ultron))return new Ultron(ee);this.id=id++;this.ee=ee;}/**
	 * Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {Functon} fn Callback function.
	 * @param {Mixed} context The context of the function.
	 * @returns {Ultron}
	 * @api public
	 */Ultron.prototype.on=function on(event,fn,context){fn.__ultron=this.id;this.ee.on(event,fn,context);return this;};/**
	 * Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} context The context of the function.
	 * @returns {Ultron}
	 * @api public
	 */Ultron.prototype.once=function once(event,fn,context){fn.__ultron=this.id;this.ee.once(event,fn,context);return this;};/**
	 * Remove the listeners we assigned for the given event.
	 *
	 * @returns {Ultron}
	 * @api public
	 */Ultron.prototype.remove=function remove(){var args=arguments,event;//
// When no event names are provided we assume that we need to clear all the
// events that were assigned through us.
//
if(args.length===1&&'string'===typeof args[0]){args=args[0].split(/[, ]+/);}else if(!args.length){args=[];for(event in this.ee._events){if(has.call(this.ee._events,event))args.push(event);}}for(var i=0;i<args.length;i++){var listeners=this.ee.listeners(args[i]);for(var j=0;j<listeners.length;j++){event=listeners[j];//
// Once listeners have a `listener` property that stores the real listener
// in the EventEmitter that ships with Node.js.
//
if(event.listener){if(event.listener.__ultron!==this.id)continue;delete event.listener.__ultron;}else{if(event.__ultron!==this.id)continue;delete event.__ultron;}this.ee.removeListener(args[i],event);}}return this;};/**
	 * Destroy the Ultron instance, remove all listeners and release all references.
	 *
	 * @returns {Boolean}
	 * @api public
	 */Ultron.prototype.destroy=function destroy(){if(!this.ee)return false;this.remove();this.ee=null;return true;};//
// Expose the module.
//
module.exports=Ultron;/***/},/* 127 *//***/function(module,exports,__webpack_require__){/*!
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var fs=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"fs\"");e.code='MODULE_NOT_FOUND';throw e;}());function Options(defaults){var internalValues={};var values=this.value={};Object.keys(defaults).forEach(function(key){internalValues[key]=defaults[key];Object.defineProperty(values,key,{get:function get(){return internalValues[key];},configurable:false,enumerable:true});});this.reset=function(){Object.keys(defaults).forEach(function(key){internalValues[key]=defaults[key];});return this;};this.merge=function(options,required){options=options||{};if(Object.prototype.toString.call(required)==='[object Array]'){var missing=[];for(var i=0,l=required.length;i<l;++i){var key=required[i];if(!(key in options)){missing.push(key);}}if(missing.length>0){if(missing.length>1){throw new Error('options '+missing.slice(0,missing.length-1).join(', ')+' and '+missing[missing.length-1]+' must be defined');}else throw new Error('option '+missing[0]+' must be defined');}}Object.keys(options).forEach(function(key){if(key in internalValues){internalValues[key]=options[key];}});return this;};this.copy=function(keys){var obj={};Object.keys(defaults).forEach(function(key){if(keys.indexOf(key)!==-1){obj[key]=values[key];}});return obj;};this.read=function(filename,cb){if(typeof cb=='function'){var self=this;fs.readFile(filename,function(error,data){if(error)return cb(error);var conf=JSON.parse(data);self.merge(conf);cb();});}else{var conf=JSON.parse(fs.readFileSync(filename));this.merge(conf);}return this;};this.isDefined=function(key){return typeof values[key]!='undefined';};this.isDefinedAndNonNull=function(key){return typeof values[key]!='undefined'&&values[key]!==null;};Object.freeze(values);Object.freeze(this);}module.exports=Options;/***/},/* 128 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var events=__webpack_require__(14),util=__webpack_require__(53),crypto=__webpack_require__(46),EventEmitter=events.EventEmitter,ErrorCodes=__webpack_require__(129),bufferUtil=__webpack_require__(130).BufferUtil,PerMessageDeflate=__webpack_require__(132);/**
	 * HyBi Sender implementation
	 */function Sender(socket,extensions){if(this instanceof Sender===false){throw new TypeError("Classes can't be function-called");}events.EventEmitter.call(this);this._socket=socket;this.extensions=extensions||{};this.firstFragment=true;this.compress=false;this.messageHandlers=[];this.processing=false;}/**
	 * Inherits from EventEmitter.
	 */util.inherits(Sender,events.EventEmitter);/**
	 * Sends a close instruction to the remote party.
	 *
	 * @api public
	 */Sender.prototype.close=function(code,data,mask,cb){if(typeof code!=='undefined'){if(typeof code!=='number'||!ErrorCodes.isValidErrorCode(code))throw new Error('first argument must be a valid error code number');}code=code||1000;var dataBuffer=new Buffer(2+(data?Buffer.byteLength(data):0));writeUInt16BE.call(dataBuffer,code,0);if(dataBuffer.length>2)dataBuffer.write(data,2);var self=this;this.messageHandlers.push(function(){self.frameAndSend(0x8,dataBuffer,true,mask);if(typeof cb=='function')cb();});this.flush();};/**
	 * Sends a ping message to the remote party.
	 *
	 * @api public
	 */Sender.prototype.ping=function(data,options){var mask=options&&options.mask;var self=this;this.messageHandlers.push(function(){self.frameAndSend(0x9,data||'',true,mask);});this.flush();};/**
	 * Sends a pong message to the remote party.
	 *
	 * @api public
	 */Sender.prototype.pong=function(data,options){var mask=options&&options.mask;var self=this;this.messageHandlers.push(function(){self.frameAndSend(0xa,data||'',true,mask);});this.flush();};/**
	 * Sends text or binary data to the remote party.
	 *
	 * @api public
	 */Sender.prototype.send=function(data,options,cb){var finalFragment=options&&options.fin===false?false:true;var mask=options&&options.mask;var compress=options&&options.compress;var opcode=options&&options.binary?2:1;if(this.firstFragment===false){opcode=0;compress=false;}else{this.firstFragment=false;this.compress=compress;}if(finalFragment)this.firstFragment=true;var compressFragment=this.compress;var self=this;this.messageHandlers.push(function(){if(!data||!compressFragment){self.frameAndSend(opcode,data,finalFragment,mask,compress,cb);return;}self.processing=true;self.applyExtensions(data,finalFragment,compressFragment,function(err,data){if(err){if(typeof cb=='function')cb(err);else self.emit('error',err);return;}self.frameAndSend(opcode,data,finalFragment,mask,compress,cb);self.processing=false;self.flush();});});this.flush();};/**
	 * Frames and sends a piece of data according to the HyBi WebSocket protocol.
	 *
	 * @api private
	 */Sender.prototype.frameAndSend=function(opcode,data,finalFragment,maskData,compressed,cb){var canModifyData=false;if(!data){try{this._socket.write(new Buffer([opcode|(finalFragment?0x80:0),0|(maskData?0x80:0)].concat(maskData?[0,0,0,0]:[])),'binary',cb);}catch(e){if(typeof cb=='function')cb(e);else this.emit('error',e);}return;}if(!Buffer.isBuffer(data)){canModifyData=true;if(data&&(typeof data.byteLength!=='undefined'||typeof data.buffer!=='undefined')){data=getArrayBuffer(data);}else{//
// If people want to send a number, this would allocate the number in
// bytes as memory size instead of storing the number as buffer value. So
// we need to transform it to string in order to prevent possible
// vulnerabilities / memory attacks.
//
if(typeof data==='number')data=data.toString();data=new Buffer(data);}}var dataLength=data.length,dataOffset=maskData?6:2,secondByte=dataLength;if(dataLength>=65536){dataOffset+=8;secondByte=127;}else if(dataLength>125){dataOffset+=2;secondByte=126;}var mergeBuffers=dataLength<32768||maskData&&!canModifyData;var totalLength=mergeBuffers?dataLength+dataOffset:dataOffset;var outputBuffer=new Buffer(totalLength);outputBuffer[0]=finalFragment?opcode|0x80:opcode;if(compressed)outputBuffer[0]|=0x40;switch(secondByte){case 126:writeUInt16BE.call(outputBuffer,dataLength,2);break;case 127:writeUInt32BE.call(outputBuffer,0,2);writeUInt32BE.call(outputBuffer,dataLength,6);}if(maskData){outputBuffer[1]=secondByte|0x80;var mask=getRandomMask();outputBuffer[dataOffset-4]=mask[0];outputBuffer[dataOffset-3]=mask[1];outputBuffer[dataOffset-2]=mask[2];outputBuffer[dataOffset-1]=mask[3];if(mergeBuffers){bufferUtil.mask(data,mask,outputBuffer,dataOffset,dataLength);try{this._socket.write(outputBuffer,'binary',cb);}catch(e){if(typeof cb=='function')cb(e);else this.emit('error',e);}}else{bufferUtil.mask(data,mask,data,0,dataLength);try{this._socket.write(outputBuffer,'binary');this._socket.write(data,'binary',cb);}catch(e){if(typeof cb=='function')cb(e);else this.emit('error',e);}}}else{outputBuffer[1]=secondByte;if(mergeBuffers){data.copy(outputBuffer,dataOffset);try{this._socket.write(outputBuffer,'binary',cb);}catch(e){if(typeof cb=='function')cb(e);else this.emit('error',e);}}else{try{this._socket.write(outputBuffer,'binary');this._socket.write(data,'binary',cb);}catch(e){if(typeof cb=='function')cb(e);else this.emit('error',e);}}}};/**
	 * Execute message handler buffers
	 *
	 * @api private
	 */Sender.prototype.flush=function(){while(!this.processing&&this.messageHandlers.length){this.messageHandlers.shift()();}};/**
	 * Apply extensions to message
	 *
	 * @api private
	 */Sender.prototype.applyExtensions=function(data,fin,compress,callback){if((data.buffer||data)instanceof ArrayBuffer){data=getArrayBuffer(data);}this.extensions[PerMessageDeflate.extensionName].compress(data,fin,callback);};module.exports=Sender;function writeUInt16BE(value,offset){this[offset]=(value&0xff00)>>8;this[offset+1]=value&0xff;}function writeUInt32BE(value,offset){this[offset]=(value&0xff000000)>>24;this[offset+1]=(value&0xff0000)>>16;this[offset+2]=(value&0xff00)>>8;this[offset+3]=value&0xff;}function getArrayBuffer(data){// data is either an ArrayBuffer or ArrayBufferView.
var array=new Uint8Array(data.buffer||data),l=data.byteLength||data.length,o=data.byteOffset||0,buffer=new Buffer(l);for(var i=0;i<l;++i){buffer[i]=array[o+i];}return buffer;}function getRandomMask(){return crypto.randomBytes(4);}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 129 *//***/function(module,exports){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */module.exports={isValidErrorCode:function isValidErrorCode(code){return code>=1000&&code<=1011&&code!=1004&&code!=1005&&code!=1006||code>=3000&&code<=4999;},1000:'normal',1001:'going away',1002:'protocol error',1003:'unsupported data',1004:'reserved',1005:'reserved for extensions',1006:'reserved for extensions',1007:'inconsistent or invalid data',1008:'policy violation',1009:'message too big',1010:'extension handshake missing',1011:'an unexpected condition prevented the request from being fulfilled'};/***/},/* 130 *//***/function(module,exports,__webpack_require__){'use strict';/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */try{module.exports=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"bufferutil\"");e.code='MODULE_NOT_FOUND';throw e;}());}catch(e){module.exports=__webpack_require__(131);}/***/},/* 131 *//***/function(module,exports){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */exports.BufferUtil={merge:function merge(mergedBuffer,buffers){var offset=0;for(var i=0,l=buffers.length;i<l;++i){var buf=buffers[i];buf.copy(mergedBuffer,offset);offset+=buf.length;}},mask:function mask(source,_mask,output,offset,length){var maskNum=_mask.readUInt32LE(0,true);var i=0;for(;i<length-3;i+=4){var num=maskNum^source.readUInt32LE(i,true);if(num<0)num=4294967296+num;output.writeUInt32LE(num,offset+i,true);}switch(length%4){case 3:output[offset+i+2]=source[i+2]^_mask[2];case 2:output[offset+i+1]=source[i+1]^_mask[1];case 1:output[offset+i]=source[i]^_mask[0];case 0:;}},unmask:function unmask(data,mask){var maskNum=mask.readUInt32LE(0,true);var length=data.length;var i=0;for(;i<length-3;i+=4){var num=maskNum^data.readUInt32LE(i,true);if(num<0)num=4294967296+num;data.writeUInt32LE(num,i,true);}switch(length%4){case 3:data[i+2]=data[i+2]^mask[2];case 2:data[i+1]=data[i+1]^mask[1];case 1:data[i]=data[i]^mask[0];case 0:;}}};/***/},/* 132 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){var zlib=__webpack_require__(94);var AVAILABLE_WINDOW_BITS=[8,9,10,11,12,13,14,15];var DEFAULT_WINDOW_BITS=15;var DEFAULT_MEM_LEVEL=8;PerMessageDeflate.extensionName='permessage-deflate';/**
	 * Per-message Compression Extensions implementation
	 */function PerMessageDeflate(options,isServer,maxPayload){if(this instanceof PerMessageDeflate===false){throw new TypeError("Classes can't be function-called");}this._options=options||{};this._isServer=!!isServer;this._inflate=null;this._deflate=null;this.params=null;this._maxPayload=maxPayload||0;}/**
	 * Create extension parameters offer
	 *
	 * @api public
	 */PerMessageDeflate.prototype.offer=function(){var params={};if(this._options.serverNoContextTakeover){params.server_no_context_takeover=true;}if(this._options.clientNoContextTakeover){params.client_no_context_takeover=true;}if(this._options.serverMaxWindowBits){params.server_max_window_bits=this._options.serverMaxWindowBits;}if(this._options.clientMaxWindowBits){params.client_max_window_bits=this._options.clientMaxWindowBits;}else if(this._options.clientMaxWindowBits==null){params.client_max_window_bits=true;}return params;};/**
	 * Accept extension offer
	 *
	 * @api public
	 */PerMessageDeflate.prototype.accept=function(paramsList){paramsList=this.normalizeParams(paramsList);var params;if(this._isServer){params=this.acceptAsServer(paramsList);}else{params=this.acceptAsClient(paramsList);}this.params=params;return params;};/**
	 * Releases all resources used by the extension
	 *
	 * @api public
	 */PerMessageDeflate.prototype.cleanup=function(){if(this._inflate){if(this._inflate.writeInProgress){this._inflate.pendingClose=true;}else{if(this._inflate.close)this._inflate.close();this._inflate=null;}}if(this._deflate){if(this._deflate.writeInProgress){this._deflate.pendingClose=true;}else{if(this._deflate.close)this._deflate.close();this._deflate=null;}}};/**
	 * Accept extension offer from client
	 *
	 * @api private
	 */PerMessageDeflate.prototype.acceptAsServer=function(paramsList){var accepted={};var result=paramsList.some(function(params){accepted={};if(this._options.serverNoContextTakeover===false&&params.server_no_context_takeover){return;}if(this._options.serverMaxWindowBits===false&&params.server_max_window_bits){return;}if(typeof this._options.serverMaxWindowBits==='number'&&typeof params.server_max_window_bits==='number'&&this._options.serverMaxWindowBits>params.server_max_window_bits){return;}if(typeof this._options.clientMaxWindowBits==='number'&&!params.client_max_window_bits){return;}if(this._options.serverNoContextTakeover||params.server_no_context_takeover){accepted.server_no_context_takeover=true;}if(this._options.clientNoContextTakeover){accepted.client_no_context_takeover=true;}if(this._options.clientNoContextTakeover!==false&&params.client_no_context_takeover){accepted.client_no_context_takeover=true;}if(typeof this._options.serverMaxWindowBits==='number'){accepted.server_max_window_bits=this._options.serverMaxWindowBits;}else if(typeof params.server_max_window_bits==='number'){accepted.server_max_window_bits=params.server_max_window_bits;}if(typeof this._options.clientMaxWindowBits==='number'){accepted.client_max_window_bits=this._options.clientMaxWindowBits;}else if(this._options.clientMaxWindowBits!==false&&typeof params.client_max_window_bits==='number'){accepted.client_max_window_bits=params.client_max_window_bits;}return true;},this);if(!result){throw new Error('Doesn\'t support the offered configuration');}return accepted;};/**
	 * Accept extension response from server
	 *
	 * @api privaye
	 */PerMessageDeflate.prototype.acceptAsClient=function(paramsList){var params=paramsList[0];if(this._options.clientNoContextTakeover!=null){if(this._options.clientNoContextTakeover===false&&params.client_no_context_takeover){throw new Error('Invalid value for "client_no_context_takeover"');}}if(this._options.clientMaxWindowBits!=null){if(this._options.clientMaxWindowBits===false&&params.client_max_window_bits){throw new Error('Invalid value for "client_max_window_bits"');}if(typeof this._options.clientMaxWindowBits==='number'&&(!params.client_max_window_bits||params.client_max_window_bits>this._options.clientMaxWindowBits)){throw new Error('Invalid value for "client_max_window_bits"');}}return params;};/**
	 * Normalize extensions parameters
	 *
	 * @api private
	 */PerMessageDeflate.prototype.normalizeParams=function(paramsList){return paramsList.map(function(params){Object.keys(params).forEach(function(key){var value=params[key];if(value.length>1){throw new Error('Multiple extension parameters for '+key);}value=value[0];switch(key){case'server_no_context_takeover':case'client_no_context_takeover':if(value!==true){throw new Error('invalid extension parameter value for '+key+' ('+value+')');}params[key]=true;break;case'server_max_window_bits':case'client_max_window_bits':if(typeof value==='string'){value=parseInt(value,10);if(!~AVAILABLE_WINDOW_BITS.indexOf(value)){throw new Error('invalid extension parameter value for '+key+' ('+value+')');}}if(!this._isServer&&value===true){throw new Error('Missing extension parameter value for '+key);}params[key]=value;break;default:throw new Error('Not defined extension parameter ('+key+')');}},this);return params;},this);};/**
	 * Decompress message
	 *
	 * @api public
	 */PerMessageDeflate.prototype.decompress=function(data,fin,callback){var endpoint=this._isServer?'client':'server';if(!this._inflate){var maxWindowBits=this.params[endpoint+'_max_window_bits'];this._inflate=zlib.createInflateRaw({windowBits:'number'===typeof maxWindowBits?maxWindowBits:DEFAULT_WINDOW_BITS});}this._inflate.writeInProgress=true;var self=this;var buffers=[];var cumulativeBufferLength=0;this._inflate.on('error',onError).on('data',onData);this._inflate.write(data);if(fin){this._inflate.write(new Buffer([0x00,0x00,0xff,0xff]));}this._inflate.flush(function(){cleanup();callback(null,Buffer.concat(buffers));});function onError(err){cleanup();callback(err);}function onData(data){if(self._maxPayload!==undefined&&self._maxPayload!==null&&self._maxPayload>0){cumulativeBufferLength+=data.length;if(cumulativeBufferLength>self._maxPayload){buffers=[];cleanup();var err={type:1009};callback(err);return;}}buffers.push(data);}function cleanup(){if(!self._inflate)return;self._inflate.removeListener('error',onError);self._inflate.removeListener('data',onData);self._inflate.writeInProgress=false;if(fin&&self.params[endpoint+'_no_context_takeover']||self._inflate.pendingClose){if(self._inflate.close)self._inflate.close();self._inflate=null;}}};/**
	 * Compress message
	 *
	 * @api public
	 */PerMessageDeflate.prototype.compress=function(data,fin,callback){var endpoint=this._isServer?'server':'client';if(!this._deflate){var maxWindowBits=this.params[endpoint+'_max_window_bits'];this._deflate=zlib.createDeflateRaw({flush:zlib.Z_SYNC_FLUSH,windowBits:'number'===typeof maxWindowBits?maxWindowBits:DEFAULT_WINDOW_BITS,memLevel:this._options.memLevel||DEFAULT_MEM_LEVEL});}this._deflate.writeInProgress=true;var self=this;var buffers=[];this._deflate.on('error',onError).on('data',onData);this._deflate.write(data);this._deflate.flush(function(){cleanup();var data=Buffer.concat(buffers);if(fin){data=data.slice(0,data.length-4);}callback(null,data);});function onError(err){cleanup();callback(err);}function onData(data){buffers.push(data);}function cleanup(){if(!self._deflate)return;self._deflate.removeListener('error',onError);self._deflate.removeListener('data',onData);self._deflate.writeInProgress=false;if(fin&&self.params[endpoint+'_no_context_takeover']||self._deflate.pendingClose){if(self._deflate.close)self._deflate.close();self._deflate=null;}}};module.exports=PerMessageDeflate;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 133 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var util=__webpack_require__(53),Validation=__webpack_require__(134).Validation,ErrorCodes=__webpack_require__(129),BufferPool=__webpack_require__(136),bufferUtil=__webpack_require__(130).BufferUtil,PerMessageDeflate=__webpack_require__(132);/**
	 * HyBi Receiver implementation
	 */function Receiver(extensions,maxPayload){if(this instanceof Receiver===false){throw new TypeError("Classes can't be function-called");}if(typeof extensions==='number'){maxPayload=extensions;extensions={};}// memory pool for fragmented messages
var fragmentedPoolPrevUsed=-1;this.fragmentedBufferPool=new BufferPool(1024,function(db,length){return db.used+length;},function(db){return fragmentedPoolPrevUsed=fragmentedPoolPrevUsed>=0?Math.ceil((fragmentedPoolPrevUsed+db.used)/2):db.used;});// memory pool for unfragmented messages
var unfragmentedPoolPrevUsed=-1;this.unfragmentedBufferPool=new BufferPool(1024,function(db,length){return db.used+length;},function(db){return unfragmentedPoolPrevUsed=unfragmentedPoolPrevUsed>=0?Math.ceil((unfragmentedPoolPrevUsed+db.used)/2):db.used;});this.extensions=extensions||{};this.maxPayload=maxPayload||0;this.currentPayloadLength=0;this.state={activeFragmentedOperation:null,lastFragment:false,masked:false,opcode:0,fragmentedOperation:false};this.overflow=[];this.headerBuffer=new Buffer(10);this.expectOffset=0;this.expectBuffer=null;this.expectHandler=null;this.currentMessage=[];this.currentMessageLength=0;this.messageHandlers=[];this.expectHeader(2,this.processPacket);this.dead=false;this.processing=false;this.onerror=function(){};this.ontext=function(){};this.onbinary=function(){};this.onclose=function(){};this.onping=function(){};this.onpong=function(){};}module.exports=Receiver;/**
	 * Add new data to the parser.
	 *
	 * @api public
	 */Receiver.prototype.add=function(data){if(this.dead)return;var dataLength=data.length;if(dataLength==0)return;if(this.expectBuffer==null){this.overflow.push(data);return;}var toRead=Math.min(dataLength,this.expectBuffer.length-this.expectOffset);fastCopy(toRead,data,this.expectBuffer,this.expectOffset);this.expectOffset+=toRead;if(toRead<dataLength){this.overflow.push(data.slice(toRead));}while(this.expectBuffer&&this.expectOffset==this.expectBuffer.length){var bufferForHandler=this.expectBuffer;this.expectBuffer=null;this.expectOffset=0;this.expectHandler.call(this,bufferForHandler);}};/**
	 * Releases all resources used by the receiver.
	 *
	 * @api public
	 */Receiver.prototype.cleanup=function(){this.dead=true;this.overflow=null;this.headerBuffer=null;this.expectBuffer=null;this.expectHandler=null;this.unfragmentedBufferPool=null;this.fragmentedBufferPool=null;this.state=null;this.currentMessage=null;this.onerror=null;this.ontext=null;this.onbinary=null;this.onclose=null;this.onping=null;this.onpong=null;};/**
	 * Waits for a certain amount of header bytes to be available, then fires a callback.
	 *
	 * @api private
	 */Receiver.prototype.expectHeader=function(length,handler){if(length==0){handler(null);return;}this.expectBuffer=this.headerBuffer.slice(this.expectOffset,this.expectOffset+length);this.expectHandler=handler;var toRead=length;while(toRead>0&&this.overflow.length>0){var fromOverflow=this.overflow.pop();if(toRead<fromOverflow.length)this.overflow.push(fromOverflow.slice(toRead));var read=Math.min(fromOverflow.length,toRead);fastCopy(read,fromOverflow,this.expectBuffer,this.expectOffset);this.expectOffset+=read;toRead-=read;}};/**
	 * Waits for a certain amount of data bytes to be available, then fires a callback.
	 *
	 * @api private
	 */Receiver.prototype.expectData=function(length,handler){if(length==0){handler(null);return;}this.expectBuffer=this.allocateFromPool(length,this.state.fragmentedOperation);this.expectHandler=handler;var toRead=length;while(toRead>0&&this.overflow.length>0){var fromOverflow=this.overflow.pop();if(toRead<fromOverflow.length)this.overflow.push(fromOverflow.slice(toRead));var read=Math.min(fromOverflow.length,toRead);fastCopy(read,fromOverflow,this.expectBuffer,this.expectOffset);this.expectOffset+=read;toRead-=read;}};/**
	 * Allocates memory from the buffer pool.
	 *
	 * @api private
	 */Receiver.prototype.allocateFromPool=function(length,isFragmented){return(isFragmented?this.fragmentedBufferPool:this.unfragmentedBufferPool).get(length);};/**
	 * Start processing a new packet.
	 *
	 * @api private
	 */Receiver.prototype.processPacket=function(data){if(this.extensions[PerMessageDeflate.extensionName]){if((data[0]&0x30)!=0){this.error('reserved fields (2, 3) must be empty',1002);return;}}else{if((data[0]&0x70)!=0){this.error('reserved fields must be empty',1002);return;}}this.state.lastFragment=(data[0]&0x80)==0x80;this.state.masked=(data[1]&0x80)==0x80;var compressed=(data[0]&0x40)==0x40;var opcode=data[0]&0xf;if(opcode===0){if(compressed){this.error('continuation frame cannot have the Per-message Compressed bits',1002);return;}// continuation frame
this.state.fragmentedOperation=true;this.state.opcode=this.state.activeFragmentedOperation;if(!(this.state.opcode==1||this.state.opcode==2)){this.error('continuation frame cannot follow current opcode',1002);return;}}else{if(opcode<3&&this.state.activeFragmentedOperation!=null){this.error('data frames after the initial data frame must have opcode 0',1002);return;}if(opcode>=8&&compressed){this.error('control frames cannot have the Per-message Compressed bits',1002);return;}this.state.compressed=compressed;this.state.opcode=opcode;if(this.state.lastFragment===false){this.state.fragmentedOperation=true;this.state.activeFragmentedOperation=opcode;}else this.state.fragmentedOperation=false;}var handler=opcodes[this.state.opcode];if(typeof handler=='undefined')this.error('no handler for opcode '+this.state.opcode,1002);else{handler.start.call(this,data);}};/**
	 * Endprocessing a packet.
	 *
	 * @api private
	 */Receiver.prototype.endPacket=function(){if(this.dead)return;if(!this.state.fragmentedOperation)this.unfragmentedBufferPool.reset(true);else if(this.state.lastFragment)this.fragmentedBufferPool.reset(true);this.expectOffset=0;this.expectBuffer=null;this.expectHandler=null;if(this.state.lastFragment&&this.state.opcode===this.state.activeFragmentedOperation){// end current fragmented operation
this.state.activeFragmentedOperation=null;}this.currentPayloadLength=0;this.state.lastFragment=false;this.state.opcode=this.state.activeFragmentedOperation!=null?this.state.activeFragmentedOperation:0;this.state.masked=false;this.expectHeader(2,this.processPacket);};/**
	 * Reset the parser state.
	 *
	 * @api private
	 */Receiver.prototype.reset=function(){if(this.dead)return;this.state={activeFragmentedOperation:null,lastFragment:false,masked:false,opcode:0,fragmentedOperation:false};this.fragmentedBufferPool.reset(true);this.unfragmentedBufferPool.reset(true);this.expectOffset=0;this.expectBuffer=null;this.expectHandler=null;this.overflow=[];this.currentMessage=[];this.currentMessageLength=0;this.messageHandlers=[];this.currentPayloadLength=0;};/**
	 * Unmask received data.
	 *
	 * @api private
	 */Receiver.prototype.unmask=function(mask,buf,binary){if(mask!=null&&buf!=null)bufferUtil.unmask(buf,mask);if(binary)return buf;return buf!=null?buf.toString('utf8'):'';};/**
	 * Handles an error
	 *
	 * @api private
	 */Receiver.prototype.error=function(reason,protocolErrorCode){if(this.dead)return;this.reset();if(typeof reason=='string'){this.onerror(new Error(reason),protocolErrorCode);}else if(reason.constructor==Error){this.onerror(reason,protocolErrorCode);}else{this.onerror(new Error("An error occured"),protocolErrorCode);}return this;};/**
	 * Execute message handler buffers
	 *
	 * @api private
	 */Receiver.prototype.flush=function(){if(this.processing||this.dead)return;var handler=this.messageHandlers.shift();if(!handler)return;this.processing=true;var self=this;handler(function(){self.processing=false;self.flush();});};/**
	 * Apply extensions to message
	 *
	 * @api private
	 */Receiver.prototype.applyExtensions=function(messageBuffer,fin,compressed,callback){var self=this;if(compressed){this.extensions[PerMessageDeflate.extensionName].decompress(messageBuffer,fin,function(err,buffer){if(self.dead)return;if(err){callback(new Error('invalid compressed data'));return;}callback(null,buffer);});}else{callback(null,messageBuffer);}};/**
	* Checks payload size, disconnects socket when it exceeds maxPayload
	*
	* @api private
	*/Receiver.prototype.maxPayloadExceeded=function(length){if(this.maxPayload===undefined||this.maxPayload===null||this.maxPayload<1){return false;}var fullLength=this.currentPayloadLength+length;if(fullLength<this.maxPayload){this.currentPayloadLength=fullLength;return false;}this.error('payload cannot exceed '+this.maxPayload+' bytes',1009);this.messageBuffer=[];this.cleanup();return true;};/**
	 * Buffer utilities
	 */function readUInt16BE(start){return(this[start]<<8)+this[start+1];}function readUInt32BE(start){return(this[start]<<24)+(this[start+1]<<16)+(this[start+2]<<8)+this[start+3];}function fastCopy(length,srcBuffer,dstBuffer,dstOffset){switch(length){default:srcBuffer.copy(dstBuffer,dstOffset,0,length);break;case 16:dstBuffer[dstOffset+15]=srcBuffer[15];case 15:dstBuffer[dstOffset+14]=srcBuffer[14];case 14:dstBuffer[dstOffset+13]=srcBuffer[13];case 13:dstBuffer[dstOffset+12]=srcBuffer[12];case 12:dstBuffer[dstOffset+11]=srcBuffer[11];case 11:dstBuffer[dstOffset+10]=srcBuffer[10];case 10:dstBuffer[dstOffset+9]=srcBuffer[9];case 9:dstBuffer[dstOffset+8]=srcBuffer[8];case 8:dstBuffer[dstOffset+7]=srcBuffer[7];case 7:dstBuffer[dstOffset+6]=srcBuffer[6];case 6:dstBuffer[dstOffset+5]=srcBuffer[5];case 5:dstBuffer[dstOffset+4]=srcBuffer[4];case 4:dstBuffer[dstOffset+3]=srcBuffer[3];case 3:dstBuffer[dstOffset+2]=srcBuffer[2];case 2:dstBuffer[dstOffset+1]=srcBuffer[1];case 1:dstBuffer[dstOffset]=srcBuffer[0];}}function clone(obj){var cloned={};for(var k in obj){if(obj.hasOwnProperty(k)){cloned[k]=obj[k];}}return cloned;}/**
	 * Opcode handlers
	 */var opcodes={// text
'1':{start:function start(data){var self=this;// decode length
var firstLength=data[1]&0x7f;if(firstLength<126){if(self.maxPayloadExceeded(firstLength)){self.error('Maximumpayload exceeded in compressed text message. Aborting...',1009);return;}opcodes['1'].getData.call(self,firstLength);}else if(firstLength==126){self.expectHeader(2,function(data){var length=readUInt16BE.call(data,0);if(self.maxPayloadExceeded(length)){self.error('Maximumpayload exceeded in compressed text message. Aborting...',1009);return;}opcodes['1'].getData.call(self,length);});}else if(firstLength==127){self.expectHeader(8,function(data){if(readUInt32BE.call(data,0)!=0){self.error('packets with length spanning more than 32 bit is currently not supported',1008);return;}var length=readUInt32BE.call(data,4);if(self.maxPayloadExceeded(length)){self.error('Maximumpayload exceeded in compressed text message. Aborting...',1009);return;}opcodes['1'].getData.call(self,readUInt32BE.call(data,4));});}},getData:function getData(length){var self=this;if(self.state.masked){self.expectHeader(4,function(data){var mask=data;self.expectData(length,function(data){opcodes['1'].finish.call(self,mask,data);});});}else{self.expectData(length,function(data){opcodes['1'].finish.call(self,null,data);});}},finish:function finish(mask,data){var self=this;var packet=this.unmask(mask,data,true)||new Buffer(0);var state=clone(this.state);this.messageHandlers.push(function(callback){self.applyExtensions(packet,state.lastFragment,state.compressed,function(err,buffer){if(err){if(err.type===1009){return self.error('Maximumpayload exceeded in compressed text message. Aborting...',1009);}return self.error(err.message,1007);}if(buffer!=null){if(self.maxPayload==0||self.maxPayload>0&&self.currentMessageLength+buffer.length<self.maxPayload){self.currentMessage.push(buffer);}else{self.currentMessage=null;self.currentMessage=[];self.currentMessageLength=0;self.error(new Error('Maximum payload exceeded. maxPayload: '+self.maxPayload),1009);return;}self.currentMessageLength+=buffer.length;}if(state.lastFragment){var messageBuffer=Buffer.concat(self.currentMessage);self.currentMessage=[];self.currentMessageLength=0;if(!Validation.isValidUTF8(messageBuffer)){self.error('invalid utf8 sequence',1007);return;}self.ontext(messageBuffer.toString('utf8'),{masked:state.masked,buffer:messageBuffer});}callback();});});this.flush();this.endPacket();}},// binary
'2':{start:function start(data){var self=this;// decode length
var firstLength=data[1]&0x7f;if(firstLength<126){if(self.maxPayloadExceeded(firstLength)){self.error('Max payload exceeded in compressed text message. Aborting...',1009);return;}opcodes['2'].getData.call(self,firstLength);}else if(firstLength==126){self.expectHeader(2,function(data){var length=readUInt16BE.call(data,0);if(self.maxPayloadExceeded(length)){self.error('Max payload exceeded in compressed text message. Aborting...',1009);return;}opcodes['2'].getData.call(self,length);});}else if(firstLength==127){self.expectHeader(8,function(data){if(readUInt32BE.call(data,0)!=0){self.error('packets with length spanning more than 32 bit is currently not supported',1008);return;}var length=readUInt32BE.call(data,4,true);if(self.maxPayloadExceeded(length)){self.error('Max payload exceeded in compressed text message. Aborting...',1009);return;}opcodes['2'].getData.call(self,length);});}},getData:function getData(length){var self=this;if(self.state.masked){self.expectHeader(4,function(data){var mask=data;self.expectData(length,function(data){opcodes['2'].finish.call(self,mask,data);});});}else{self.expectData(length,function(data){opcodes['2'].finish.call(self,null,data);});}},finish:function finish(mask,data){var self=this;var packet=this.unmask(mask,data,true)||new Buffer(0);var state=clone(this.state);this.messageHandlers.push(function(callback){self.applyExtensions(packet,state.lastFragment,state.compressed,function(err,buffer){if(err){if(err.type===1009){return self.error('Max payload exceeded in compressed binary message. Aborting...',1009);}return self.error(err.message,1007);}if(buffer!=null){if(self.maxPayload==0||self.maxPayload>0&&self.currentMessageLength+buffer.length<self.maxPayload){self.currentMessage.push(buffer);}else{self.currentMessage=null;self.currentMessage=[];self.currentMessageLength=0;self.error(new Error('Maximum payload exceeded'),1009);return;}self.currentMessageLength+=buffer.length;}if(state.lastFragment){var messageBuffer=Buffer.concat(self.currentMessage);self.currentMessage=[];self.currentMessageLength=0;self.onbinary(messageBuffer,{masked:state.masked,buffer:messageBuffer});}callback();});});this.flush();this.endPacket();}},// close
'8':{start:function start(data){var self=this;if(self.state.lastFragment==false){self.error('fragmented close is not supported',1002);return;}// decode length
var firstLength=data[1]&0x7f;if(firstLength<126){opcodes['8'].getData.call(self,firstLength);}else{self.error('control frames cannot have more than 125 bytes of data',1002);}},getData:function getData(length){var self=this;if(self.state.masked){self.expectHeader(4,function(data){var mask=data;self.expectData(length,function(data){opcodes['8'].finish.call(self,mask,data);});});}else{self.expectData(length,function(data){opcodes['8'].finish.call(self,null,data);});}},finish:function finish(mask,data){var self=this;data=self.unmask(mask,data,true);var state=clone(this.state);this.messageHandlers.push(function(){if(data&&data.length==1){self.error('close packets with data must be at least two bytes long',1002);return;}var code=data&&data.length>1?readUInt16BE.call(data,0):1000;if(!ErrorCodes.isValidErrorCode(code)){self.error('invalid error code',1002);return;}var message='';if(data&&data.length>2){var messageBuffer=data.slice(2);if(!Validation.isValidUTF8(messageBuffer)){self.error('invalid utf8 sequence',1007);return;}message=messageBuffer.toString('utf8');}self.onclose(code,message,{masked:state.masked});self.reset();});this.flush();}},// ping
'9':{start:function start(data){var self=this;if(self.state.lastFragment==false){self.error('fragmented ping is not supported',1002);return;}// decode length
var firstLength=data[1]&0x7f;if(firstLength<126){opcodes['9'].getData.call(self,firstLength);}else{self.error('control frames cannot have more than 125 bytes of data',1002);}},getData:function getData(length){var self=this;if(self.state.masked){self.expectHeader(4,function(data){var mask=data;self.expectData(length,function(data){opcodes['9'].finish.call(self,mask,data);});});}else{self.expectData(length,function(data){opcodes['9'].finish.call(self,null,data);});}},finish:function finish(mask,data){var self=this;data=this.unmask(mask,data,true);var state=clone(this.state);this.messageHandlers.push(function(callback){self.onping(data,{masked:state.masked,binary:true});callback();});this.flush();this.endPacket();}},// pong
'10':{start:function start(data){var self=this;if(self.state.lastFragment==false){self.error('fragmented pong is not supported',1002);return;}// decode length
var firstLength=data[1]&0x7f;if(firstLength<126){opcodes['10'].getData.call(self,firstLength);}else{self.error('control frames cannot have more than 125 bytes of data',1002);}},getData:function getData(length){var self=this;if(this.state.masked){this.expectHeader(4,function(data){var mask=data;self.expectData(length,function(data){opcodes['10'].finish.call(self,mask,data);});});}else{this.expectData(length,function(data){opcodes['10'].finish.call(self,null,data);});}},finish:function finish(mask,data){var self=this;data=self.unmask(mask,data,true);var state=clone(this.state);this.messageHandlers.push(function(callback){self.onpong(data,{masked:state.masked,binary:true});callback();});this.flush();this.endPacket();}}};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 134 *//***/function(module,exports,__webpack_require__){'use strict';/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */try{module.exports=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"utf-8-validate\"");e.code='MODULE_NOT_FOUND';throw e;}());}catch(e){module.exports=__webpack_require__(135);}/***/},/* 135 *//***/function(module,exports){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */exports.Validation={isValidUTF8:function isValidUTF8(buffer){return true;}};/***/},/* 136 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var util=__webpack_require__(53);function BufferPool(initialSize,growStrategy,shrinkStrategy){if(this instanceof BufferPool===false){throw new TypeError("Classes can't be function-called");}if(typeof initialSize==='function'){shrinkStrategy=growStrategy;growStrategy=initialSize;initialSize=0;}else if(typeof initialSize==='undefined'){initialSize=0;}this._growStrategy=(growStrategy||function(db,size){return db.used+size;}).bind(null,this);this._shrinkStrategy=(shrinkStrategy||function(db){return initialSize;}).bind(null,this);this._buffer=initialSize?new Buffer(initialSize):null;this._offset=0;this._used=0;this._changeFactor=0;this.__defineGetter__('size',function(){return this._buffer==null?0:this._buffer.length;});this.__defineGetter__('used',function(){return this._used;});}BufferPool.prototype.get=function(length){if(this._buffer==null||this._offset+length>this._buffer.length){var newBuf=new Buffer(this._growStrategy(length));this._buffer=newBuf;this._offset=0;}this._used+=length;var buf=this._buffer.slice(this._offset,this._offset+length);this._offset+=length;return buf;};BufferPool.prototype.reset=function(forceNewBuffer){var len=this._shrinkStrategy();if(len<this.size)this._changeFactor-=1;if(forceNewBuffer||this._changeFactor<-2){this._changeFactor=0;this._buffer=len?new Buffer(len):null;}this._offset=0;this._used=0;};module.exports=BufferPool;/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 137 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var events=__webpack_require__(14),util=__webpack_require__(53),EventEmitter=events.EventEmitter;/**
	 * Hixie Sender implementation
	 */function Sender(socket){if(this instanceof Sender===false){throw new TypeError("Classes can't be function-called");}events.EventEmitter.call(this);this.socket=socket;this.continuationFrame=false;this.isClosed=false;}module.exports=Sender;/**
	 * Inherits from EventEmitter.
	 */util.inherits(Sender,events.EventEmitter);/**
	 * Frames and writes data.
	 *
	 * @api public
	 */Sender.prototype.send=function(data,options,cb){if(this.isClosed)return;var isString=typeof data=='string',length=isString?Buffer.byteLength(data):data.length,lengthbytes=length>127?2:1// assume less than 2**14 bytes
,writeStartMarker=this.continuationFrame==false,writeEndMarker=!options||!(typeof options.fin!='undefined'&&!options.fin),buffer=new Buffer((writeStartMarker?options&&options.binary?1+lengthbytes:1:0)+length+(writeEndMarker&&!(options&&options.binary)?1:0)),offset=writeStartMarker?1:0;if(writeStartMarker){if(options&&options.binary){buffer.write('\x80','binary');// assume length less than 2**14 bytes
if(lengthbytes>1)buffer.write(String.fromCharCode(128+length/128),offset++,'binary');buffer.write(String.fromCharCode(length&0x7f),offset++,'binary');}else buffer.write('\x00','binary');}if(isString)buffer.write(data,offset,'utf8');else data.copy(buffer,offset,0);if(writeEndMarker){if(options&&options.binary){// sending binary, not writing end marker
}else buffer.write('\xff',offset+length,'binary');this.continuationFrame=false;}else this.continuationFrame=true;try{this.socket.write(buffer,'binary',cb);}catch(e){this.error(e.toString());}};/**
	 * Sends a close instruction to the remote party.
	 *
	 * @api public
	 */Sender.prototype.close=function(code,data,mask,cb){if(this.isClosed)return;this.isClosed=true;try{if(this.continuationFrame)this.socket.write(new Buffer([0xff],'binary'));this.socket.write(new Buffer([0xff,0x00]),'binary',cb);}catch(e){this.error(e.toString());}};/**
	 * Sends a ping message to the remote party. Not available for hixie.
	 *
	 * @api public
	 */Sender.prototype.ping=function(data,options){};/**
	 * Sends a pong message to the remote party. Not available for hixie.
	 *
	 * @api public
	 */Sender.prototype.pong=function(data,options){};/**
	 * Handles an error
	 *
	 * @api private
	 */Sender.prototype.error=function(reason){this.emit('error',reason);return this;};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 138 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var util=__webpack_require__(53);/**
	 * State constants
	 */var EMPTY=0,BODY=1;var BINARYLENGTH=2,BINARYBODY=3;/**
	 * Hixie Receiver implementation
	 */function Receiver(){if(this instanceof Receiver===false){throw new TypeError("Classes can't be function-called");}this.state=EMPTY;this.buffers=[];this.messageEnd=-1;this.spanLength=0;this.dead=false;this.onerror=function(){};this.ontext=function(){};this.onbinary=function(){};this.onclose=function(){};this.onping=function(){};this.onpong=function(){};}module.exports=Receiver;/**
	 * Add new data to the parser.
	 *
	 * @api public
	 */Receiver.prototype.add=function(data){if(this.dead)return;var self=this;function doAdd(){if(self.state===EMPTY){if(data.length==2&&data[0]==0xFF&&data[1]==0x00){self.reset();self.onclose();return;}if(data[0]===0x80){self.messageEnd=0;self.state=BINARYLENGTH;data=data.slice(1);}else{if(data[0]!==0x00){self.error('payload must start with 0x00 byte',true);return;}data=data.slice(1);self.state=BODY;}}if(self.state===BINARYLENGTH){var i=0;while(i<data.length&&data[i]&0x80){self.messageEnd=128*self.messageEnd+(data[i]&0x7f);++i;}if(i<data.length){self.messageEnd=128*self.messageEnd+(data[i]&0x7f);self.state=BINARYBODY;++i;}if(i>0)data=data.slice(i);}if(self.state===BINARYBODY){var dataleft=self.messageEnd-self.spanLength;if(data.length>=dataleft){// consume the whole buffer to finish the frame
self.buffers.push(data);self.spanLength+=dataleft;self.messageEnd=dataleft;return self.parse();}// frame's not done even if we consume it all
self.buffers.push(data);self.spanLength+=data.length;return;}self.buffers.push(data);if((self.messageEnd=bufferIndex(data,0xFF))!=-1){self.spanLength+=self.messageEnd;return self.parse();}else self.spanLength+=data.length;}while(data){data=doAdd();}};/**
	 * Releases all resources used by the receiver.
	 *
	 * @api public
	 */Receiver.prototype.cleanup=function(){this.dead=true;this.state=EMPTY;this.buffers=[];};/**
	 * Process buffered data.
	 *
	 * @api public
	 */Receiver.prototype.parse=function(){var output=new Buffer(this.spanLength);var outputIndex=0;for(var bi=0,bl=this.buffers.length;bi<bl-1;++bi){var buffer=this.buffers[bi];buffer.copy(output,outputIndex);outputIndex+=buffer.length;}var lastBuffer=this.buffers[this.buffers.length-1];if(this.messageEnd>0)lastBuffer.copy(output,outputIndex,0,this.messageEnd);if(this.state!==BODY)--this.messageEnd;var tail=null;if(this.messageEnd<lastBuffer.length-1){tail=lastBuffer.slice(this.messageEnd+1);}this.reset();this.ontext(output.toString('utf8'));return tail;};/**
	 * Handles an error
	 *
	 * @api private
	 */Receiver.prototype.error=function(reason,terminate){if(this.dead)return;this.reset();if(typeof reason=='string'){this.onerror(new Error(reason),terminate);}else if(reason.constructor==Error){this.onerror(reason,terminate);}else{this.onerror(new Error("An error occured"),terminate);}return this;};/**
	 * Reset parser state
	 *
	 * @api private
	 */Receiver.prototype.reset=function(reason){if(this.dead)return;this.state=EMPTY;this.buffers=[];this.messageEnd=-1;this.spanLength=0;};/**
	 * Internal api
	 */function bufferIndex(buffer,byte){for(var i=0,l=buffer.length;i<l;++i){if(buffer[i]===byte)return i;}return-1;}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 139 *//***/function(module,exports,__webpack_require__){var util=__webpack_require__(53);/**
	 * Module exports.
	 */exports.parse=parse;exports.format=format;/**
	 * Parse extensions header value
	 */function parse(value){value=value||'';var extensions={};value.split(',').forEach(function(v){var params=v.split(';');var token=params.shift().trim();var paramsList=extensions[token]=extensions[token]||[];var parsedParams={};params.forEach(function(param){var parts=param.trim().split('=');var key=parts[0];var value=parts[1];if(typeof value==='undefined'){value=true;}else{// unquote value
if(value[0]==='"'){value=value.slice(1);}if(value[value.length-1]==='"'){value=value.slice(0,value.length-1);}}(parsedParams[key]=parsedParams[key]||[]).push(value);});paramsList.push(parsedParams);});return extensions;}/**
	 * Format extensions header value
	 */function format(value){return Object.keys(value).map(function(token){var paramsList=value[token];if(!util.isArray(paramsList)){paramsList=[paramsList];}return paramsList.map(function(params){return[token].concat(Object.keys(params).map(function(k){var p=params[k];if(!util.isArray(p))p=[p];return p.map(function(v){return v===true?k:k+'='+v;}).join('; ');})).join('; ');}).join(', ');}).join(', ');}/***/},/* 140 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(Buffer){/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var util=__webpack_require__(53),events=__webpack_require__(14),http=__webpack_require__(2),crypto=__webpack_require__(46),Options=__webpack_require__(127),WebSocket=__webpack_require__(124),Extensions=__webpack_require__(139),PerMessageDeflate=__webpack_require__(132),tls=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"tls\"");e.code='MODULE_NOT_FOUND';throw e;}()),url=__webpack_require__(36);/**
	 * WebSocket Server implementation
	 */function WebSocketServer(options,callback){if(this instanceof WebSocketServer===false){return new WebSocketServer(options,callback);}events.EventEmitter.call(this);options=new Options({host:'0.0.0.0',port:null,server:null,verifyClient:null,handleProtocols:null,path:null,noServer:false,disableHixie:false,clientTracking:true,perMessageDeflate:true,maxPayload:100*1024*1024}).merge(options);if(!options.isDefinedAndNonNull('port')&&!options.isDefinedAndNonNull('server')&&!options.value.noServer){throw new TypeError('`port` or a `server` must be provided');}var self=this;if(options.isDefinedAndNonNull('port')){this._server=http.createServer(function(req,res){var body=http.STATUS_CODES[426];res.writeHead(426,{'Content-Length':body.length,'Content-Type':'text/plain'});res.end(body);});this._server.allowHalfOpen=false;this._server.listen(options.value.port,options.value.host,callback);this._closeServer=function(){if(self._server)self._server.close();};}else if(options.value.server){this._server=options.value.server;if(options.value.path){// take note of the path, to avoid collisions when multiple websocket servers are
// listening on the same http server
if(this._server._webSocketPaths&&options.value.server._webSocketPaths[options.value.path]){throw new Error('two instances of WebSocketServer cannot listen on the same http server path');}if(_typeof(this._server._webSocketPaths)!=='object'){this._server._webSocketPaths={};}this._server._webSocketPaths[options.value.path]=1;}}if(this._server){this._onceServerListening=function(){self.emit('listening');};this._server.once('listening',this._onceServerListening);}if(typeof this._server!='undefined'){this._onServerError=function(error){self.emit('error',error);};this._server.on('error',this._onServerError);this._onServerUpgrade=function(req,socket,upgradeHead){//copy upgradeHead to avoid retention of large slab buffers used in node core
var head=new Buffer(upgradeHead.length);upgradeHead.copy(head);self.handleUpgrade(req,socket,head,function(client){self.emit('connection'+req.url,client);self.emit('connection',client);});};this._server.on('upgrade',this._onServerUpgrade);}this.options=options.value;this.path=options.value.path;this.clients=[];}/**
	 * Inherits from EventEmitter.
	 */util.inherits(WebSocketServer,events.EventEmitter);/**
	 * Immediately shuts down the connection.
	 *
	 * @api public
	 */WebSocketServer.prototype.close=function(callback){// terminate all associated clients
var error=null;try{for(var i=0,l=this.clients.length;i<l;++i){this.clients[i].terminate();}}catch(e){error=e;}// remove path descriptor, if any
if(this.path&&this._server._webSocketPaths){delete this._server._webSocketPaths[this.path];if(Object.keys(this._server._webSocketPaths).length==0){delete this._server._webSocketPaths;}}// close the http server if it was internally created
try{if(typeof this._closeServer!=='undefined'){this._closeServer();}}finally{if(this._server){this._server.removeListener('listening',this._onceServerListening);this._server.removeListener('error',this._onServerError);this._server.removeListener('upgrade',this._onServerUpgrade);}delete this._server;}if(callback)callback(error);else if(error)throw error;};/**
	 * Handle a HTTP Upgrade request.
	 *
	 * @api public
	 */WebSocketServer.prototype.handleUpgrade=function(req,socket,upgradeHead,cb){// check for wrong path
if(this.options.path){var u=url.parse(req.url);if(u&&u.pathname!==this.options.path)return;}if(typeof req.headers.upgrade==='undefined'||req.headers.upgrade.toLowerCase()!=='websocket'){abortConnection(socket,400,'Bad Request');return;}if(req.headers['sec-websocket-key1'])handleHixieUpgrade.apply(this,arguments);else handleHybiUpgrade.apply(this,arguments);};module.exports=WebSocketServer;/**
	 * Entirely private apis,
	 * which may or may not be bound to a sepcific WebSocket instance.
	 */function handleHybiUpgrade(req,socket,upgradeHead,cb){// handle premature socket errors
var errorHandler=function errorHandler(){try{socket.destroy();}catch(e){}};socket.on('error',errorHandler);// verify key presence
if(!req.headers['sec-websocket-key']){abortConnection(socket,400,'Bad Request');return;}// verify version
var version=parseInt(req.headers['sec-websocket-version']);if([8,13].indexOf(version)===-1){abortConnection(socket,400,'Bad Request');return;}// verify protocol
var protocols=req.headers['sec-websocket-protocol'];// verify client
var origin=version<13?req.headers['sec-websocket-origin']:req.headers['origin'];// handle extensions offer
var extensionsOffer=Extensions.parse(req.headers['sec-websocket-extensions']);// handler to call when the connection sequence completes
var self=this;var completeHybiUpgrade2=function completeHybiUpgrade2(protocol){// calc key
var key=req.headers['sec-websocket-key'];var shasum=crypto.createHash('sha1');shasum.update(key+"258EAFA5-E914-47DA-95CA-C5AB0DC85B11");key=shasum.digest('base64');var headers=['HTTP/1.1 101 Switching Protocols','Upgrade: websocket','Connection: Upgrade','Sec-WebSocket-Accept: '+key];if(typeof protocol!='undefined'){headers.push('Sec-WebSocket-Protocol: '+protocol);}var extensions={};try{extensions=acceptExtensions.call(self,extensionsOffer);}catch(err){abortConnection(socket,400,'Bad Request');return;}if(Object.keys(extensions).length){var serverExtensions={};Object.keys(extensions).forEach(function(token){serverExtensions[token]=[extensions[token].params];});headers.push('Sec-WebSocket-Extensions: '+Extensions.format(serverExtensions));}// allows external modification/inspection of handshake headers
self.emit('headers',headers);socket.setTimeout(0);socket.setNoDelay(true);try{socket.write(headers.concat('','').join('\r\n'));}catch(e){// if the upgrade write fails, shut the connection down hard
try{socket.destroy();}catch(e){}return;}var client=new WebSocket([req,socket,upgradeHead],{protocolVersion:version,protocol:protocol,extensions:extensions,maxPayload:self.options.maxPayload});if(self.options.clientTracking){self.clients.push(client);client.on('close',function(){var index=self.clients.indexOf(client);if(index!=-1){self.clients.splice(index,1);}});}// signal upgrade complete
socket.removeListener('error',errorHandler);cb(client);};// optionally call external protocol selection handler before
// calling completeHybiUpgrade2
var completeHybiUpgrade1=function completeHybiUpgrade1(){// choose from the sub-protocols
if(typeof self.options.handleProtocols=='function'){var protList=(protocols||"").split(/, */);var callbackCalled=false;var res=self.options.handleProtocols(protList,function(result,protocol){callbackCalled=true;if(!result)abortConnection(socket,401,'Unauthorized');else completeHybiUpgrade2(protocol);});if(!callbackCalled){// the handleProtocols handler never called our callback
abortConnection(socket,501,'Could not process protocols');}return;}else{if(typeof protocols!=='undefined'){completeHybiUpgrade2(protocols.split(/, */)[0]);}else{completeHybiUpgrade2();}}};// optionally call external client verification handler
if(typeof this.options.verifyClient=='function'){var info={origin:origin,secure:typeof req.connection.authorized!=='undefined'||typeof req.connection.encrypted!=='undefined',req:req};if(this.options.verifyClient.length==2){this.options.verifyClient(info,function(result,code,name){if(typeof code==='undefined')code=401;if(typeof name==='undefined')name=http.STATUS_CODES[code];if(!result)abortConnection(socket,code,name);else completeHybiUpgrade1();});return;}else if(!this.options.verifyClient(info)){abortConnection(socket,401,'Unauthorized');return;}}completeHybiUpgrade1();}function handleHixieUpgrade(req,socket,upgradeHead,cb){// handle premature socket errors
var errorHandler=function errorHandler(){try{socket.destroy();}catch(e){}};socket.on('error',errorHandler);// bail if options prevent hixie
if(this.options.disableHixie){abortConnection(socket,401,'Hixie support disabled');return;}// verify key presence
if(!req.headers['sec-websocket-key2']){abortConnection(socket,400,'Bad Request');return;}var origin=req.headers['origin'],self=this;// setup handshake completion to run after client has been verified
var onClientVerified=function onClientVerified(){var wshost;if(!req.headers['x-forwarded-host'])wshost=req.headers.host;else wshost=req.headers['x-forwarded-host'];var location=(req.headers['x-forwarded-proto']==='https'||socket.encrypted?'wss':'ws')+'://'+wshost+req.url,protocol=req.headers['sec-websocket-protocol'];// build the response header and return a Buffer
var buildResponseHeader=function buildResponseHeader(){var headers=['HTTP/1.1 101 Switching Protocols','Upgrade: WebSocket','Connection: Upgrade','Sec-WebSocket-Location: '+location];if(typeof protocol!='undefined')headers.push('Sec-WebSocket-Protocol: '+protocol);if(typeof origin!='undefined')headers.push('Sec-WebSocket-Origin: '+origin);return new Buffer(headers.concat('','').join('\r\n'));};// send handshake response before receiving the nonce
var handshakeResponse=function handshakeResponse(){socket.setTimeout(0);socket.setNoDelay(true);var headerBuffer=buildResponseHeader();try{socket.write(headerBuffer,'binary',function(err){// remove listener if there was an error
if(err)socket.removeListener('data',handler);return;});}catch(e){try{socket.destroy();}catch(e){}return;};};// handshake completion code to run once nonce has been successfully retrieved
var completeHandshake=function completeHandshake(nonce,rest,headerBuffer){// calculate key
var k1=req.headers['sec-websocket-key1'],k2=req.headers['sec-websocket-key2'],md5=crypto.createHash('md5');[k1,k2].forEach(function(k){var n=parseInt(k.replace(/[^\d]/g,'')),spaces=k.replace(/[^ ]/g,'').length;if(spaces===0||n%spaces!==0){abortConnection(socket,400,'Bad Request');return;}n/=spaces;md5.update(String.fromCharCode(n>>24&0xFF,n>>16&0xFF,n>>8&0xFF,n&0xFF));});md5.update(nonce.toString('binary'));socket.setTimeout(0);socket.setNoDelay(true);try{var hashBuffer=new Buffer(md5.digest('binary'),'binary');var handshakeBuffer=new Buffer(headerBuffer.length+hashBuffer.length);headerBuffer.copy(handshakeBuffer,0);hashBuffer.copy(handshakeBuffer,headerBuffer.length);// do a single write, which - upon success - causes a new client websocket to be setup
socket.write(handshakeBuffer,'binary',function(err){if(err)return;// do not create client if an error happens
var client=new WebSocket([req,socket,rest],{protocolVersion:'hixie-76',protocol:protocol});if(self.options.clientTracking){self.clients.push(client);client.on('close',function(){var index=self.clients.indexOf(client);if(index!=-1){self.clients.splice(index,1);}});}// signal upgrade complete
socket.removeListener('error',errorHandler);cb(client);});}catch(e){try{socket.destroy();}catch(e){}return;}};// retrieve nonce
var nonceLength=8;if(upgradeHead&&upgradeHead.length>=nonceLength){var nonce=upgradeHead.slice(0,nonceLength);var rest=upgradeHead.length>nonceLength?upgradeHead.slice(nonceLength):null;completeHandshake.call(self,nonce,rest,buildResponseHeader());}else{// nonce not present in upgradeHead
var nonce=new Buffer(nonceLength);upgradeHead.copy(nonce,0);var received=upgradeHead.length;var rest=null;var handler=function handler(data){var toRead=Math.min(data.length,nonceLength-received);if(toRead===0)return;data.copy(nonce,received,0,toRead);received+=toRead;if(received==nonceLength){socket.removeListener('data',handler);if(toRead<data.length)rest=data.slice(toRead);// complete the handshake but send empty buffer for headers since they have already been sent
completeHandshake.call(self,nonce,rest,new Buffer(0));}};// handle additional data as we receive it
socket.on('data',handler);// send header response before we have the nonce to fix haproxy buffering
handshakeResponse();}};// verify client
if(typeof this.options.verifyClient=='function'){var info={origin:origin,secure:typeof req.connection.authorized!=='undefined'||typeof req.connection.encrypted!=='undefined',req:req};if(this.options.verifyClient.length==2){var self=this;this.options.verifyClient(info,function(result,code,name){if(typeof code==='undefined')code=401;if(typeof name==='undefined')name=http.STATUS_CODES[code];if(!result)abortConnection(socket,code,name);else onClientVerified.apply(self);});return;}else if(!this.options.verifyClient(info)){abortConnection(socket,401,'Unauthorized');return;}}// no client verification required
onClientVerified();}function acceptExtensions(offer){var extensions={};var options=this.options.perMessageDeflate;var maxPayload=this.options.maxPayload;if(options&&offer[PerMessageDeflate.extensionName]){var perMessageDeflate=new PerMessageDeflate(options!==true?options:{},true,maxPayload);perMessageDeflate.accept(offer[PerMessageDeflate.extensionName]);extensions[PerMessageDeflate.extensionName]=perMessageDeflate;}return extensions;}function abortConnection(socket,code,name){try{var response=['HTTP/1.1 '+code+' '+name,'Content-type: text/html'];socket.write(response.concat('','').join('\r\n'));}catch(e){/* ignore errors - we've aborted this connection */}finally{// ensure that an early aborted connection is shut down completely
try{socket.destroy();}catch(e){}}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4).Buffer);/***/},/* 141 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var url=__webpack_require__(142);var parser=__webpack_require__(146);var Manager=__webpack_require__(156);var debug=__webpack_require__(144)('socket.io-client');/**
	 * Module exports.
	 */module.exports=exports=lookup;/**
	 * Managers cache.
	 */var cache=exports.managers={};/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */function lookup(uri,opts){if((typeof uri==="undefined"?"undefined":_typeof(uri))==='object'){opts=uri;uri=undefined;}opts=opts||{};var parsed=url(uri);var source=parsed.source;var id=parsed.id;var path=parsed.path;var sameNamespace=cache[id]&&path in cache[id].nsps;var newConnection=opts.forceNew||opts['force new connection']||false===opts.multiplex||sameNamespace;var io;if(newConnection){debug('ignoring socket cache for %s',source);io=Manager(source,opts);}else{if(!cache[id]){debug('new io instance for %s',source);cache[id]=Manager(source,opts);}io=cache[id];}if(parsed.query&&!opts.query){opts.query=parsed.query;}else if(opts&&'object'===_typeof(opts.query)){opts.query=encodeQueryString(opts.query);}return io.socket(parsed.path,opts);}/**
	 *  Helper method to parse query objects to string.
	 * @param {object} query
	 * @returns {string}
	 */function encodeQueryString(obj){var str=[];for(var p in obj){if(obj.hasOwnProperty(p)){str.push(encodeURIComponent(p)+'='+encodeURIComponent(obj[p]));}}return str.join('&');}/**
	 * Protocol version.
	 *
	 * @api public
	 */exports.protocol=parser.protocol;/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */exports.connect=lookup;/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */exports.Manager=__webpack_require__(156);exports.Socket=__webpack_require__(177);/***/},/* 142 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module dependencies.
	 */var parseuri=__webpack_require__(143);var debug=__webpack_require__(144)('socket.io-client:url');/**
	 * Module exports.
	 */module.exports=url;/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */function url(uri,loc){var obj=uri;// default to window.location
loc=loc||global.location;if(null==uri)uri=loc.protocol+'//'+loc.host;// relative path support
if('string'===typeof uri){if('/'===uri.charAt(0)){if('/'===uri.charAt(1)){uri=loc.protocol+uri;}else{uri=loc.host+uri;}}if(!/^(https?|wss?):\/\//.test(uri)){debug('protocol-less url %s',uri);if('undefined'!==typeof loc){uri=loc.protocol+'//'+uri;}else{uri='https://'+uri;}}// parse
debug('parse %s',uri);obj=parseuri(uri);}// make sure we treat `localhost:80` and `localhost` equally
if(!obj.port){if(/^(http|ws)$/.test(obj.protocol)){obj.port='80';}else if(/^(http|ws)s$/.test(obj.protocol)){obj.port='443';}}obj.path=obj.path||'/';var ipv6=obj.host.indexOf(':')!==-1;var host=ipv6?'['+obj.host+']':obj.host;// define unique id
obj.id=obj.protocol+'://'+host+':'+obj.port;// define href
obj.href=obj.protocol+'://'+host+(loc&&loc.port===obj.port?'':':'+obj.port);return obj;}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 143 *//***/function(module,exports){/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */var re=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;var parts=['source','protocol','authority','userInfo','user','password','host','port','relative','path','directory','file','query','anchor'];module.exports=function parseuri(str){var src=str,b=str.indexOf('['),e=str.indexOf(']');if(b!=-1&&e!=-1){str=str.substring(0,b)+str.substring(b,e).replace(/:/g,';')+str.substring(e,str.length);}var m=re.exec(str||''),uri={},i=14;while(i--){uri[parts[i]]=m[i]||'';}if(b!=-1&&e!=-1){uri.source=src;uri.host=uri.host.substring(1,uri.host.length-1).replace(/;/g,':');uri.authority=uri.authority.replace('[','').replace(']','').replace(/;/g,':');uri.ipv6uri=true;}return uri;};/***/},/* 144 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=__webpack_require__(145);exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage='undefined'!=typeof chrome&&'undefined'!=typeof chrome.storage?chrome.storage.local:localstorage();/**
	 * Colors.
	 */exports.colors=['lightseagreen','forestgreen','goldenrod','dodgerblue','darkorchid','crimson'];/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */function useColors(){// is webkit? http://stackoverflow.com/a/16459606/376773
// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
return typeof document!=='undefined'&&'WebkitAppearance'in document.documentElement.style||// is firebug? http://stackoverflow.com/a/398120/376773
window.console&&(console.firebug||console.exception&&console.table)||// is firefox >= v31?
// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31;}/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */exports.formatters.j=function(v){try{return JSON.stringify(v);}catch(err){return'[UnexpectedJSONParseError]: '+err.message;}};/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?'%c':'')+this.namespace+(useColors?' %c':' ')+args[0]+(useColors?'%c ':' ')+'+'+exports.humanize(this.diff);if(!useColors)return args;var c='color: '+this.color;args=[args[0],c,'color: inherit'].concat(Array.prototype.slice.call(args,1));// the final "%c" is somewhat tricky, because there could be other
// arguments passed either before or after the %c, so we need to
// figure out the correct index to insert the CSS into
var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if('%%'===match)return;index++;if('%c'===match){// we only are interested in the *last* %c
// (the user may have provided their own)
lastC=index;}});args.splice(lastC,0,c);return args;}/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */function log(){// this hackery is required for IE8/9, where
// the `console.log` function doesn't have 'apply'
return'object'===(typeof console==="undefined"?"undefined":_typeof(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments);}/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */function save(namespaces){try{if(null==namespaces){exports.storage.removeItem('debug');}else{exports.storage.debug=namespaces;}}catch(e){}}/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */function load(){var r;try{return exports.storage.debug;}catch(e){}// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
if(typeof process!=='undefined'&&'env'in process){return process.env.DEBUG;}}/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */exports.enable(load());/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */function localstorage(){try{return window.localStorage;}catch(e){}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 145 *//***/function(module,exports,__webpack_require__){/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=debug.debug=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=__webpack_require__(93);/**
	 * The currently active debug mode names, and names to skip.
	 */exports.names=[];exports.skips=[];/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */exports.formatters={};/**
	 * Previously assigned color.
	 */var prevColor=0;/**
	 * Previous log timestamp.
	 */var prevTime;/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */function selectColor(){return exports.colors[prevColor++%exports.colors.length];}/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */function debug(namespace){// define the `disabled` version
function disabled(){}disabled.enabled=false;// define the `enabled` version
function enabled(){var self=enabled;// set `diff` timestamp
var curr=+new Date();var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;// add the `color` if not set
if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i];}args[0]=exports.coerce(args[0]);if('string'!==typeof args[0]){// anything else let's inspect with %o
args=['%o'].concat(args);}// apply any `formatters` transformations
var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){// if we encounter an escaped % then don't increase the array index
if(match==='%%')return match;index++;var formatter=exports.formatters[format];if('function'===typeof formatter){var val=args[index];match=formatter.call(self,val);// now we need to remove `args[index]` since it's inlined in the `format`
args.splice(index,1);index--;}return match;});// apply env-specific formatting
args=exports.formatArgs.apply(self,args);var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args);}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn;}/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */function enable(namespaces){exports.save(namespaces);var split=(namespaces||'').split(/[\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;// ignore empty strings
namespaces=split[i].replace(/[\\^$+?.()|[\]{}]/g,'\\$&').replace(/\*/g,'.*?');if(namespaces[0]==='-'){exports.skips.push(new RegExp('^'+namespaces.substr(1)+'$'));}else{exports.names.push(new RegExp('^'+namespaces+'$'));}}}/**
	 * Disable debug output.
	 *
	 * @api public
	 */function disable(){exports.enable('');}/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false;}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true;}}return false;}/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */function coerce(val){if(val instanceof Error)return val.stack||val.message;return val;}/***/},/* 146 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var debug=__webpack_require__(147)('socket.io-parser');var json=__webpack_require__(150);var Emitter=__webpack_require__(152);var binary=__webpack_require__(153);var isBuf=__webpack_require__(155);/**
	 * Protocol version.
	 *
	 * @api public
	 */exports.protocol=4;/**
	 * Packet types.
	 *
	 * @api public
	 */exports.types=['CONNECT','DISCONNECT','EVENT','ACK','ERROR','BINARY_EVENT','BINARY_ACK'];/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */exports.CONNECT=0;/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */exports.DISCONNECT=1;/**
	 * Packet type `event`.
	 *
	 * @api public
	 */exports.EVENT=2;/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */exports.ACK=3;/**
	 * Packet type `error`.
	 *
	 * @api public
	 */exports.ERROR=4;/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */exports.BINARY_EVENT=5;/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */exports.BINARY_ACK=6;/**
	 * Encoder constructor.
	 *
	 * @api public
	 */exports.Encoder=Encoder;/**
	 * Decoder constructor.
	 *
	 * @api public
	 */exports.Decoder=Decoder;/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */function Encoder(){}/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */Encoder.prototype.encode=function(obj,callback){debug('encoding packet %j',obj);if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){encodeAsBinary(obj,callback);}else{var encoding=encodeAsString(obj);callback([encoding]);}};/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */function encodeAsString(obj){var str='';var nsp=false;// first is type
str+=obj.type;// attachments if we have them
if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){str+=obj.attachments;str+='-';}// if we have a namespace other than `/`
// we append it followed by a comma `,`
if(obj.nsp&&'/'!=obj.nsp){nsp=true;str+=obj.nsp;}// immediately followed by the id
if(null!=obj.id){if(nsp){str+=',';nsp=false;}str+=obj.id;}// json data
if(null!=obj.data){if(nsp)str+=',';str+=json.stringify(obj.data);}debug('encoded %j as %s',obj,str);return str;}/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */function encodeAsBinary(obj,callback){function writeEncoding(bloblessData){var deconstruction=binary.deconstructPacket(bloblessData);var pack=encodeAsString(deconstruction.packet);var buffers=deconstruction.buffers;buffers.unshift(pack);// add packet info to beginning of data list
callback(buffers);// write all the buffers
}binary.removeBlobs(obj,writeEncoding);}/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */function Decoder(){this.reconstructor=null;}/**
	 * Mix in `Emitter` with Decoder.
	 */Emitter(Decoder.prototype);/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */Decoder.prototype.add=function(obj){var packet;if('string'==typeof obj){packet=decodeString(obj);if(exports.BINARY_EVENT==packet.type||exports.BINARY_ACK==packet.type){// binary packet's json
this.reconstructor=new BinaryReconstructor(packet);// no attachments, labeled binary but no binary data to follow
if(this.reconstructor.reconPack.attachments===0){this.emit('decoded',packet);}}else{// non-binary full packet
this.emit('decoded',packet);}}else if(isBuf(obj)||obj.base64){// raw binary data
if(!this.reconstructor){throw new Error('got binary data when not reconstructing a packet');}else{packet=this.reconstructor.takeBinaryData(obj);if(packet){// received final buffer
this.reconstructor=null;this.emit('decoded',packet);}}}else{throw new Error('Unknown type: '+obj);}};/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */function decodeString(str){var p={};var i=0;// look up type
p.type=Number(str.charAt(0));if(null==exports.types[p.type])return error();// look up attachments if type binary
if(exports.BINARY_EVENT==p.type||exports.BINARY_ACK==p.type){var buf='';while(str.charAt(++i)!='-'){buf+=str.charAt(i);if(i==str.length)break;}if(buf!=Number(buf)||str.charAt(i)!='-'){throw new Error('Illegal attachments');}p.attachments=Number(buf);}// look up namespace (if any)
if('/'==str.charAt(i+1)){p.nsp='';while(++i){var c=str.charAt(i);if(','==c)break;p.nsp+=c;if(i==str.length)break;}}else{p.nsp='/';}// look up id
var next=str.charAt(i+1);if(''!==next&&Number(next)==next){p.id='';while(++i){var c=str.charAt(i);if(null==c||Number(c)!=c){--i;break;}p.id+=str.charAt(i);if(i==str.length)break;}p.id=Number(p.id);}// look up json data
if(str.charAt(++i)){p=tryParse(p,str.substr(i));}debug('decoded %s as %j',str,p);return p;}function tryParse(p,str){try{p.data=json.parse(str);}catch(e){return error();}return p;};/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */Decoder.prototype.destroy=function(){if(this.reconstructor){this.reconstructor.finishedReconstruction();}};/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */function BinaryReconstructor(packet){this.reconPack=packet;this.buffers=[];}/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */BinaryReconstructor.prototype.takeBinaryData=function(binData){this.buffers.push(binData);if(this.buffers.length==this.reconPack.attachments){// done with buffer list
var packet=binary.reconstructPacket(this.reconPack,this.buffers);this.finishedReconstruction();return packet;}return null;};/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null;this.buffers=[];};function error(data){return{type:exports.ERROR,data:'parser error'};}/***/},/* 147 *//***/function(module,exports,__webpack_require__){/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=__webpack_require__(148);exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage='undefined'!=typeof chrome&&'undefined'!=typeof chrome.storage?chrome.storage.local:localstorage();/**
	 * Colors.
	 */exports.colors=['lightseagreen','forestgreen','goldenrod','dodgerblue','darkorchid','crimson'];/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */function useColors(){// is webkit? http://stackoverflow.com/a/16459606/376773
return'WebkitAppearance'in document.documentElement.style||// is firebug? http://stackoverflow.com/a/398120/376773
window.console&&(console.firebug||console.exception&&console.table)||// is firefox >= v31?
// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31;}/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */exports.formatters.j=function(v){return JSON.stringify(v);};/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?'%c':'')+this.namespace+(useColors?' %c':' ')+args[0]+(useColors?'%c ':' ')+'+'+exports.humanize(this.diff);if(!useColors)return args;var c='color: '+this.color;args=[args[0],c,'color: inherit'].concat(Array.prototype.slice.call(args,1));// the final "%c" is somewhat tricky, because there could be other
// arguments passed either before or after the %c, so we need to
// figure out the correct index to insert the CSS into
var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if('%%'===match)return;index++;if('%c'===match){// we only are interested in the *last* %c
// (the user may have provided their own)
lastC=index;}});args.splice(lastC,0,c);return args;}/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */function log(){// this hackery is required for IE8/9, where
// the `console.log` function doesn't have 'apply'
return'object'===(typeof console==="undefined"?"undefined":_typeof(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments);}/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */function save(namespaces){try{if(null==namespaces){exports.storage.removeItem('debug');}else{exports.storage.debug=namespaces;}}catch(e){}}/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */function load(){var r;try{r=exports.storage.debug;}catch(e){}return r;}/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */exports.enable(load());/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */function localstorage(){try{return window.localStorage;}catch(e){}}/***/},/* 148 *//***/function(module,exports,__webpack_require__){/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=__webpack_require__(149);/**
	 * The currently active debug mode names, and names to skip.
	 */exports.names=[];exports.skips=[];/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */exports.formatters={};/**
	 * Previously assigned color.
	 */var prevColor=0;/**
	 * Previous log timestamp.
	 */var prevTime;/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */function selectColor(){return exports.colors[prevColor++%exports.colors.length];}/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */function debug(namespace){// define the `disabled` version
function disabled(){}disabled.enabled=false;// define the `enabled` version
function enabled(){var self=enabled;// set `diff` timestamp
var curr=+new Date();var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;// add the `color` if not set
if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=Array.prototype.slice.call(arguments);args[0]=exports.coerce(args[0]);if('string'!==typeof args[0]){// anything else let's inspect with %o
args=['%o'].concat(args);}// apply any `formatters` transformations
var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){// if we encounter an escaped % then don't increase the array index
if(match==='%%')return match;index++;var formatter=exports.formatters[format];if('function'===typeof formatter){var val=args[index];match=formatter.call(self,val);// now we need to remove `args[index]` since it's inlined in the `format`
args.splice(index,1);index--;}return match;});if('function'===typeof exports.formatArgs){args=exports.formatArgs.apply(self,args);}var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args);}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn;}/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */function enable(namespaces){exports.save(namespaces);var split=(namespaces||'').split(/[\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;// ignore empty strings
namespaces=split[i].replace(/\*/g,'.*?');if(namespaces[0]==='-'){exports.skips.push(new RegExp('^'+namespaces.substr(1)+'$'));}else{exports.names.push(new RegExp('^'+namespaces+'$'));}}}/**
	 * Disable debug output.
	 *
	 * @api public
	 */function disable(){exports.enable('');}/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false;}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true;}}return false;}/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */function coerce(val){if(val instanceof Error)return val.stack||val.message;return val;}/***/},/* 149 *//***/function(module,exports){/**
	 * Helpers.
	 */var s=1000;var m=s*60;var h=m*60;var d=h*24;var y=d*365.25;/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */module.exports=function(val,options){options=options||{};if('string'==typeof val)return parse(val);return options.long?long(val):short(val);};/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */function parse(str){str=''+str;if(str.length>10000)return;var match=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);var type=(match[2]||'ms').toLowerCase();switch(type){case'years':case'year':case'yrs':case'yr':case'y':return n*y;case'days':case'day':case'd':return n*d;case'hours':case'hour':case'hrs':case'hr':case'h':return n*h;case'minutes':case'minute':case'mins':case'min':case'm':return n*m;case'seconds':case'second':case'secs':case'sec':case's':return n*s;case'milliseconds':case'millisecond':case'msecs':case'msec':case'ms':return n;}}/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */function short(ms){if(ms>=d)return Math.round(ms/d)+'d';if(ms>=h)return Math.round(ms/h)+'h';if(ms>=m)return Math.round(ms/m)+'m';if(ms>=s)return Math.round(ms/s)+'s';return ms+'ms';}/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */function long(ms){return plural(ms,d,'day')||plural(ms,h,'hour')||plural(ms,m,'minute')||plural(ms,s,'second')||ms+' ms';}/**
	 * Pluralization helper.
	 */function plural(ms,n,name){if(ms<n)return;if(ms<n*1.5)return Math.floor(ms/n)+' '+name;return Math.ceil(ms/n)+' '+name+'s';}/***/},/* 150 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module,global){/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */;(function(){// Detect the `define` function exposed by asynchronous module loaders. The
// strict `define` check is necessary for compatibility with `r.js`.
var isLoader="function"==="function"&&__webpack_require__(151);// A set of types used to distinguish objects from primitives.
var objectTypes={"function":true,"object":true};// Detect the `exports` object exposed by CommonJS implementations.
var freeExports=objectTypes[typeof exports==="undefined"?"undefined":_typeof(exports)]&&exports&&!exports.nodeType&&exports;// Use the `global` object exposed by Node (including Browserify via
// `insert-module-globals`), Narwhal, and Ringo as the default context,
// and the `window` object in browsers. Rhino exports a `global` function
// instead.
var root=objectTypes[typeof window==="undefined"?"undefined":_typeof(window)]&&window||this,freeGlobal=freeExports&&objectTypes[typeof module==="undefined"?"undefined":_typeof(module)]&&module&&!module.nodeType&&(typeof global==="undefined"?"undefined":_typeof(global))=="object"&&global;if(freeGlobal&&(freeGlobal["global"]===freeGlobal||freeGlobal["window"]===freeGlobal||freeGlobal["self"]===freeGlobal)){root=freeGlobal;}// Public: Initializes JSON 3 using the given `context` object, attaching the
// `stringify` and `parse` functions to the specified `exports` object.
function runInContext(context,exports){context||(context=root["Object"]());exports||(exports=root["Object"]());// Native constructor aliases.
var Number=context["Number"]||root["Number"],String=context["String"]||root["String"],Object=context["Object"]||root["Object"],Date=context["Date"]||root["Date"],SyntaxError=context["SyntaxError"]||root["SyntaxError"],TypeError=context["TypeError"]||root["TypeError"],Math=context["Math"]||root["Math"],nativeJSON=context["JSON"]||root["JSON"];// Delegate to the native `stringify` and `parse` implementations.
if((typeof nativeJSON==="undefined"?"undefined":_typeof(nativeJSON))=="object"&&nativeJSON){exports.stringify=nativeJSON.stringify;exports.parse=nativeJSON.parse;}// Convenience aliases.
var objectProto=Object.prototype,getClass=objectProto.toString,_isProperty,_forEach,undef;// Test the `Date#getUTC*` methods. Based on work by @Yaffle.
var isExtended=new Date(-3509827334573292);try{// The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
// results for certain dates in Opera >= 10.53.
isExtended=isExtended.getUTCFullYear()==-109252&&isExtended.getUTCMonth()===0&&isExtended.getUTCDate()===1&&// Safari < 2.0.2 stores the internal millisecond time value correctly,
// but clips the values returned by the date methods to the range of
// signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
isExtended.getUTCHours()==10&&isExtended.getUTCMinutes()==37&&isExtended.getUTCSeconds()==6&&isExtended.getUTCMilliseconds()==708;}catch(exception){}// Internal: Determines whether the native `JSON.stringify` and `parse`
// implementations are spec-compliant. Based on work by Ken Snyder.
function has(name){if(has[name]!==undef){// Return cached feature test result.
return has[name];}var isSupported;if(name=="bug-string-char-index"){// IE <= 7 doesn't support accessing string characters using square
// bracket notation. IE 8 only supports this for primitives.
isSupported="a"[0]!="a";}else if(name=="json"){// Indicates whether both `JSON.stringify` and `JSON.parse` are
// supported.
isSupported=has("json-stringify")&&has("json-parse");}else{var value,serialized="{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";// Test `JSON.stringify`.
if(name=="json-stringify"){var stringify=exports.stringify,stringifySupported=typeof stringify=="function"&&isExtended;if(stringifySupported){// A test function object with a custom `toJSON` method.
(value=function value(){return 1;}).toJSON=value;try{stringifySupported=// Firefox 3.1b1 and b2 serialize string, number, and boolean
// primitives as object literals.
stringify(0)==="0"&&// FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
// literals.
stringify(new Number())==="0"&&stringify(new String())=='""'&&// FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
// does not define a canonical JSON representation (this applies to
// objects with `toJSON` properties as well, *unless* they are nested
// within an object or array).
stringify(getClass)===undef&&// IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
// FF 3.1b3 pass this test.
stringify(undef)===undef&&// Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
// respectively, if the value is omitted entirely.
stringify()===undef&&// FF 3.1b1, 2 throw an error if the given value is not a number,
// string, array, object, Boolean, or `null` literal. This applies to
// objects with custom `toJSON` methods as well, unless they are nested
// inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
// methods entirely.
stringify(value)==="1"&&stringify([value])=="[1]"&&// Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
// `"[null]"`.
stringify([undef])=="[null]"&&// YUI 3.0.0b1 fails to serialize `null` literals.
stringify(null)=="null"&&// FF 3.1b1, 2 halts serialization if an array contains a function:
// `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
// elides non-JSON values from objects and arrays, unless they
// define custom `toJSON` methods.
stringify([undef,getClass,null])=="[null,null,null]"&&// Simple serialization test. FF 3.1b1 uses Unicode escape sequences
// where character escape codes are expected (e.g., `\b` => `\u0008`).
stringify({"a":[value,true,false,null,"\x00\b\n\f\r\t"]})==serialized&&// FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
stringify(null,value)==="1"&&stringify([1,2],null,1)=="[\n 1,\n 2\n]"&&// JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
// serialize extended years.
stringify(new Date(-8.64e15))=='"-271821-04-20T00:00:00.000Z"'&&// The milliseconds are optional in ES 5, but required in 5.1.
stringify(new Date(8.64e15))=='"+275760-09-13T00:00:00.000Z"'&&// Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
// four-digit years instead of six-digit years. Credits: @Yaffle.
stringify(new Date(-621987552e5))=='"-000001-01-01T00:00:00.000Z"'&&// Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
// values less than 1000. Credits: @Yaffle.
stringify(new Date(-1))=='"1969-12-31T23:59:59.999Z"';}catch(exception){stringifySupported=false;}}isSupported=stringifySupported;}// Test `JSON.parse`.
if(name=="json-parse"){var parse=exports.parse;if(typeof parse=="function"){try{// FF 3.1b1, b2 will throw an exception if a bare literal is provided.
// Conforming implementations should also coerce the initial argument to
// a string prior to parsing.
if(parse("0")===0&&!parse(false)){// Simple parsing test.
value=parse(serialized);var parseSupported=value["a"].length==5&&value["a"][0]===1;if(parseSupported){try{// Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
parseSupported=!parse('"\t"');}catch(exception){}if(parseSupported){try{// FF 4.0 and 4.0.1 allow leading `+` signs and leading
// decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
// certain octal literals.
parseSupported=parse("01")!==1;}catch(exception){}}if(parseSupported){try{// FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
// points. These environments, along with FF 3.1b1 and 2,
// also allow trailing commas in JSON objects and arrays.
parseSupported=parse("1.")!==1;}catch(exception){}}}}}catch(exception){parseSupported=false;}}isSupported=parseSupported;}}return has[name]=!!isSupported;}if(!has("json")){// Common `[[Class]]` name aliases.
var functionClass="[object Function]",dateClass="[object Date]",numberClass="[object Number]",stringClass="[object String]",arrayClass="[object Array]",booleanClass="[object Boolean]";// Detect incomplete support for accessing string characters by index.
var charIndexBuggy=has("bug-string-char-index");// Define additional utility methods if the `Date` methods are buggy.
if(!isExtended){var floor=Math.floor;// A mapping between the months of the year and the number of days between
// January 1st and the first of the respective month.
var Months=[0,31,59,90,120,151,181,212,243,273,304,334];// Internal: Calculates the number of days between the Unix epoch and the
// first day of the given month.
var getDay=function getDay(year,month){return Months[month]+365*(year-1970)+floor((year-1969+(month=+(month>1)))/4)-floor((year-1901+month)/100)+floor((year-1601+month)/400);};}// Internal: Determines if a property is a direct property of the given
// object. Delegates to the native `Object#hasOwnProperty` method.
if(!(_isProperty=objectProto.hasOwnProperty)){_isProperty=function isProperty(property){var members={},constructor;if((members.__proto__=null,members.__proto__={// The *proto* property cannot be set multiple times in recent
// versions of Firefox and SeaMonkey.
"toString":1},members).toString!=getClass){// Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
// supports the mutable *proto* property.
_isProperty=function isProperty(property){// Capture and break the object's prototype chain (see section 8.6.2
// of the ES 5.1 spec). The parenthesized expression prevents an
// unsafe transformation by the Closure Compiler.
var original=this.__proto__,result=property in(this.__proto__=null,this);// Restore the original prototype chain.
this.__proto__=original;return result;};}else{// Capture a reference to the top-level `Object` constructor.
constructor=members.constructor;// Use the `constructor` property to simulate `Object#hasOwnProperty` in
// other environments.
_isProperty=function isProperty(property){var parent=(this.constructor||constructor).prototype;return property in this&&!(property in parent&&this[property]===parent[property]);};}members=null;return _isProperty.call(this,property);};}// Internal: Normalizes the `for...in` iteration algorithm across
// environments. Each enumerated key is yielded to a `callback` function.
_forEach=function forEach(object,callback){var size=0,Properties,members,property;// Tests for bugs in the current environment's `for...in` algorithm. The
// `valueOf` property inherits the non-enumerable flag from
// `Object.prototype` in older versions of IE, Netscape, and Mozilla.
(Properties=function Properties(){this.valueOf=0;}).prototype.valueOf=0;// Iterate over a new instance of the `Properties` class.
members=new Properties();for(property in members){// Ignore all properties inherited from `Object.prototype`.
if(_isProperty.call(members,property)){size++;}}Properties=members=null;// Normalize the iteration algorithm.
if(!size){// A list of non-enumerable properties inherited from `Object.prototype`.
members=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"];// IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
// properties.
_forEach=function forEach(object,callback){var isFunction=getClass.call(object)==functionClass,property,length;var hasProperty=!isFunction&&typeof object.constructor!="function"&&objectTypes[_typeof(object.hasOwnProperty)]&&object.hasOwnProperty||_isProperty;for(property in object){// Gecko <= 1.0 enumerates the `prototype` property of functions under
// certain conditions; IE does not.
if(!(isFunction&&property=="prototype")&&hasProperty.call(object,property)){callback(property);}}// Manually invoke the callback for each non-enumerable property.
for(length=members.length;property=members[--length];hasProperty.call(object,property)&&callback(property)){}};}else if(size==2){// Safari <= 2.0.4 enumerates shadowed properties twice.
_forEach=function forEach(object,callback){// Create a set of iterated properties.
var members={},isFunction=getClass.call(object)==functionClass,property;for(property in object){// Store each property name to prevent double enumeration. The
// `prototype` property of functions is not enumerated due to cross-
// environment inconsistencies.
if(!(isFunction&&property=="prototype")&&!_isProperty.call(members,property)&&(members[property]=1)&&_isProperty.call(object,property)){callback(property);}}};}else{// No bugs detected; use the standard `for...in` algorithm.
_forEach=function forEach(object,callback){var isFunction=getClass.call(object)==functionClass,property,isConstructor;for(property in object){if(!(isFunction&&property=="prototype")&&_isProperty.call(object,property)&&!(isConstructor=property==="constructor")){callback(property);}}// Manually invoke the callback for the `constructor` property due to
// cross-environment inconsistencies.
if(isConstructor||_isProperty.call(object,property="constructor")){callback(property);}};}return _forEach(object,callback);};// Public: Serializes a JavaScript `value` as a JSON string. The optional
// `filter` argument may specify either a function that alters how object and
// array members are serialized, or an array of strings and numbers that
// indicates which properties should be serialized. The optional `width`
// argument may be either a string or number that specifies the indentation
// level of the output.
if(!has("json-stringify")){// Internal: A map of control characters and their escaped equivalents.
var Escapes={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"};// Internal: Converts `value` into a zero-padded string such that its
// length is at least equal to `width`. The `width` must be <= 6.
var leadingZeroes="000000";var toPaddedString=function toPaddedString(width,value){// The `|| 0` expression is necessary to work around a bug in
// Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
return(leadingZeroes+(value||0)).slice(-width);};// Internal: Double-quotes a string `value`, replacing all ASCII control
// characters (characters with code unit values between 0 and 31) with
// their escaped equivalents. This is an implementation of the
// `Quote(value)` operation defined in ES 5.1 section 15.12.3.
var unicodePrefix="\\u00";var quote=function quote(value){var result='"',index=0,length=value.length,useCharIndex=!charIndexBuggy||length>10;var symbols=useCharIndex&&(charIndexBuggy?value.split(""):value);for(;index<length;index++){var charCode=value.charCodeAt(index);// If the character is a control character, append its Unicode or
// shorthand escape sequence; otherwise, append the character as-is.
switch(charCode){case 8:case 9:case 10:case 12:case 13:case 34:case 92:result+=Escapes[charCode];break;default:if(charCode<32){result+=unicodePrefix+toPaddedString(2,charCode.toString(16));break;}result+=useCharIndex?symbols[index]:value.charAt(index);}}return result+'"';};// Internal: Recursively serializes an object. Implements the
// `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
var serialize=function serialize(property,object,callback,properties,whitespace,indentation,stack){var value,className,year,month,date,time,hours,minutes,seconds,milliseconds,results,element,index,length,prefix,result;try{// Necessary for host object support.
value=object[property];}catch(exception){}if((typeof value==="undefined"?"undefined":_typeof(value))=="object"&&value){className=getClass.call(value);if(className==dateClass&&!_isProperty.call(value,"toJSON")){if(value>-1/0&&value<1/0){// Dates are serialized according to the `Date#toJSON` method
// specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
// for the ISO 8601 date time string format.
if(getDay){// Manually compute the year, month, date, hours, minutes,
// seconds, and milliseconds if the `getUTC*` methods are
// buggy. Adapted from @Yaffle's `date-shim` project.
date=floor(value/864e5);for(year=floor(date/365.2425)+1970-1;getDay(year+1,0)<=date;year++){}for(month=floor((date-getDay(year,0))/30.42);getDay(year,month+1)<=date;month++){}date=1+date-getDay(year,month);// The `time` value specifies the time within the day (see ES
// 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
// to compute `A modulo B`, as the `%` operator does not
// correspond to the `modulo` operation for negative numbers.
time=(value%864e5+864e5)%864e5;// The hours, minutes, seconds, and milliseconds are obtained by
// decomposing the time within the day. See section 15.9.1.10.
hours=floor(time/36e5)%24;minutes=floor(time/6e4)%60;seconds=floor(time/1e3)%60;milliseconds=time%1e3;}else{year=value.getUTCFullYear();month=value.getUTCMonth();date=value.getUTCDate();hours=value.getUTCHours();minutes=value.getUTCMinutes();seconds=value.getUTCSeconds();milliseconds=value.getUTCMilliseconds();}// Serialize extended years correctly.
value=(year<=0||year>=1e4?(year<0?"-":"+")+toPaddedString(6,year<0?-year:year):toPaddedString(4,year))+"-"+toPaddedString(2,month+1)+"-"+toPaddedString(2,date)+// Months, dates, hours, minutes, and seconds should have two
// digits; milliseconds should have three.
"T"+toPaddedString(2,hours)+":"+toPaddedString(2,minutes)+":"+toPaddedString(2,seconds)+// Milliseconds are optional in ES 5.0, but required in 5.1.
"."+toPaddedString(3,milliseconds)+"Z";}else{value=null;}}else if(typeof value.toJSON=="function"&&(className!=numberClass&&className!=stringClass&&className!=arrayClass||_isProperty.call(value,"toJSON"))){// Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
// `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
// ignores all `toJSON` methods on these objects unless they are
// defined directly on an instance.
value=value.toJSON(property);}}if(callback){// If a replacement function was provided, call it to obtain the value
// for serialization.
value=callback.call(object,property,value);}if(value===null){return"null";}className=getClass.call(value);if(className==booleanClass){// Booleans are represented literally.
return""+value;}else if(className==numberClass){// JSON numbers must be finite. `Infinity` and `NaN` are serialized as
// `"null"`.
return value>-1/0&&value<1/0?""+value:"null";}else if(className==stringClass){// Strings are double-quoted and escaped.
return quote(""+value);}// Recursively serialize objects and arrays.
if((typeof value==="undefined"?"undefined":_typeof(value))=="object"){// Check for cyclic structures. This is a linear search; performance
// is inversely proportional to the number of unique nested objects.
for(length=stack.length;length--;){if(stack[length]===value){// Cyclic structures cannot be serialized by `JSON.stringify`.
throw TypeError();}}// Add the object to the stack of traversed objects.
stack.push(value);results=[];// Save the current indentation level and indent one additional level.
prefix=indentation;indentation+=whitespace;if(className==arrayClass){// Recursively serialize array elements.
for(index=0,length=value.length;index<length;index++){element=serialize(index,value,callback,properties,whitespace,indentation,stack);results.push(element===undef?"null":element);}result=results.length?whitespace?"[\n"+indentation+results.join(",\n"+indentation)+"\n"+prefix+"]":"["+results.join(",")+"]":"[]";}else{// Recursively serialize object members. Members are selected from
// either a user-specified list of property names, or the object
// itself.
_forEach(properties||value,function(property){var element=serialize(property,value,callback,properties,whitespace,indentation,stack);if(element!==undef){// According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
// is not the empty string, let `member` {quote(property) + ":"}
// be the concatenation of `member` and the `space` character."
// The "`space` character" refers to the literal space
// character, not the `space` {width} argument provided to
// `JSON.stringify`.
results.push(quote(property)+":"+(whitespace?" ":"")+element);}});result=results.length?whitespace?"{\n"+indentation+results.join(",\n"+indentation)+"\n"+prefix+"}":"{"+results.join(",")+"}":"{}";}// Remove the object from the traversed object stack.
stack.pop();return result;}};// Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
exports.stringify=function(source,filter,width){var whitespace,callback,properties,className;if(objectTypes[typeof filter==="undefined"?"undefined":_typeof(filter)]&&filter){if((className=getClass.call(filter))==functionClass){callback=filter;}else if(className==arrayClass){// Convert the property names array into a makeshift set.
properties={};for(var index=0,length=filter.length,value;index<length;value=filter[index++],(className=getClass.call(value),className==stringClass||className==numberClass)&&(properties[value]=1)){}}}if(width){if((className=getClass.call(width))==numberClass){// Convert the `width` to an integer and create a string containing
// `width` number of space characters.
if((width-=width%1)>0){for(whitespace="",width>10&&(width=10);whitespace.length<width;whitespace+=" "){}}}else if(className==stringClass){whitespace=width.length<=10?width:width.slice(0,10);}}// Opera <= 7.54u2 discards the values associated with empty string keys
// (`""`) only if they are used directly within an object member list
// (e.g., `!("" in { "": 1})`).
return serialize("",(value={},value[""]=source,value),callback,properties,whitespace,"",[]);};}// Public: Parses a JSON source string.
if(!has("json-parse")){var fromCharCode=String.fromCharCode;// Internal: A map of escaped control characters and their unescaped
// equivalents.
var Unescapes={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"};// Internal: Stores the parser state.
var Index,Source;// Internal: Resets the parser state and throws a `SyntaxError`.
var abort=function abort(){Index=Source=null;throw SyntaxError();};// Internal: Returns the next token, or `"$"` if the parser has reached
// the end of the source string. A token may be a string, number, `null`
// literal, or Boolean literal.
var lex=function lex(){var source=Source,length=source.length,value,begin,position,isSigned,charCode;while(Index<length){charCode=source.charCodeAt(Index);switch(charCode){case 9:case 10:case 13:case 32:// Skip whitespace tokens, including tabs, carriage returns, line
// feeds, and space characters.
Index++;break;case 123:case 125:case 91:case 93:case 58:case 44:// Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
// the current position.
value=charIndexBuggy?source.charAt(Index):source[Index];Index++;return value;case 34:// `"` delimits a JSON string; advance to the next character and
// begin parsing the string. String tokens are prefixed with the
// sentinel `@` character to distinguish them from punctuators and
// end-of-string tokens.
for(value="@",Index++;Index<length;){charCode=source.charCodeAt(Index);if(charCode<32){// Unescaped ASCII control characters (those with a code unit
// less than the space character) are not permitted.
abort();}else if(charCode==92){// A reverse solidus (`\`) marks the beginning of an escaped
// control character (including `"`, `\`, and `/`) or Unicode
// escape sequence.
charCode=source.charCodeAt(++Index);switch(charCode){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:// Revive escaped control characters.
value+=Unescapes[charCode];Index++;break;case 117:// `\u` marks the beginning of a Unicode escape sequence.
// Advance to the first character and validate the
// four-digit code point.
begin=++Index;for(position=Index+4;Index<position;Index++){charCode=source.charCodeAt(Index);// A valid sequence comprises four hexdigits (case-
// insensitive) that form a single hexadecimal value.
if(!(charCode>=48&&charCode<=57||charCode>=97&&charCode<=102||charCode>=65&&charCode<=70)){// Invalid Unicode escape sequence.
abort();}}// Revive the escaped character.
value+=fromCharCode("0x"+source.slice(begin,Index));break;default:// Invalid escape sequence.
abort();}}else{if(charCode==34){// An unescaped double-quote character marks the end of the
// string.
break;}charCode=source.charCodeAt(Index);begin=Index;// Optimize for the common case where a string is valid.
while(charCode>=32&&charCode!=92&&charCode!=34){charCode=source.charCodeAt(++Index);}// Append the string as-is.
value+=source.slice(begin,Index);}}if(source.charCodeAt(Index)==34){// Advance to the next character and return the revived string.
Index++;return value;}// Unterminated string.
abort();default:// Parse numbers and literals.
begin=Index;// Advance past the negative sign, if one is specified.
if(charCode==45){isSigned=true;charCode=source.charCodeAt(++Index);}// Parse an integer or floating-point value.
if(charCode>=48&&charCode<=57){// Leading zeroes are interpreted as octal literals.
if(charCode==48&&(charCode=source.charCodeAt(Index+1),charCode>=48&&charCode<=57)){// Illegal octal literal.
abort();}isSigned=false;// Parse the integer component.
for(;Index<length&&(charCode=source.charCodeAt(Index),charCode>=48&&charCode<=57);Index++){}// Floats cannot contain a leading decimal point; however, this
// case is already accounted for by the parser.
if(source.charCodeAt(Index)==46){position=++Index;// Parse the decimal component.
for(;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++){}if(position==Index){// Illegal trailing decimal.
abort();}Index=position;}// Parse exponents. The `e` denoting the exponent is
// case-insensitive.
charCode=source.charCodeAt(Index);if(charCode==101||charCode==69){charCode=source.charCodeAt(++Index);// Skip past the sign following the exponent, if one is
// specified.
if(charCode==43||charCode==45){Index++;}// Parse the exponential component.
for(position=Index;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++){}if(position==Index){// Illegal empty exponent.
abort();}Index=position;}// Coerce the parsed value to a JavaScript number.
return+source.slice(begin,Index);}// A negative sign may only precede numbers.
if(isSigned){abort();}// `true`, `false`, and `null` literals.
if(source.slice(Index,Index+4)=="true"){Index+=4;return true;}else if(source.slice(Index,Index+5)=="false"){Index+=5;return false;}else if(source.slice(Index,Index+4)=="null"){Index+=4;return null;}// Unrecognized token.
abort();}}// Return the sentinel `$` character if the parser has reached the end
// of the source string.
return"$";};// Internal: Parses a JSON `value` token.
var get=function get(value){var results,hasMembers;if(value=="$"){// Unexpected end of input.
abort();}if(typeof value=="string"){if((charIndexBuggy?value.charAt(0):value[0])=="@"){// Remove the sentinel `@` character.
return value.slice(1);}// Parse object and array literals.
if(value=="["){// Parses a JSON array, returning a new JavaScript array.
results=[];for(;;hasMembers||(hasMembers=true)){value=lex();// A closing square bracket marks the end of the array literal.
if(value=="]"){break;}// If the array literal contains elements, the current token
// should be a comma separating the previous element from the
// next.
if(hasMembers){if(value==","){value=lex();if(value=="]"){// Unexpected trailing `,` in array literal.
abort();}}else{// A `,` must separate each array element.
abort();}}// Elisions and leading commas are not permitted.
if(value==","){abort();}results.push(get(value));}return results;}else if(value=="{"){// Parses a JSON object, returning a new JavaScript object.
results={};for(;;hasMembers||(hasMembers=true)){value=lex();// A closing curly brace marks the end of the object literal.
if(value=="}"){break;}// If the object literal contains members, the current token
// should be a comma separator.
if(hasMembers){if(value==","){value=lex();if(value=="}"){// Unexpected trailing `,` in object literal.
abort();}}else{// A `,` must separate each object member.
abort();}}// Leading commas are not permitted, object property names must be
// double-quoted strings, and a `:` must separate each property
// name and value.
if(value==","||typeof value!="string"||(charIndexBuggy?value.charAt(0):value[0])!="@"||lex()!=":"){abort();}results[value.slice(1)]=get(lex());}return results;}// Unexpected token encountered.
abort();}return value;};// Internal: Updates a traversed object member.
var update=function update(source,property,callback){var element=walk(source,property,callback);if(element===undef){delete source[property];}else{source[property]=element;}};// Internal: Recursively traverses a parsed JSON object, invoking the
// `callback` function for each value. This is an implementation of the
// `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
var walk=function walk(source,property,callback){var value=source[property],length;if((typeof value==="undefined"?"undefined":_typeof(value))=="object"&&value){// `forEach` can't be used to traverse an array in Opera <= 8.54
// because its `Object#hasOwnProperty` implementation returns `false`
// for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
if(getClass.call(value)==arrayClass){for(length=value.length;length--;){update(value,length,callback);}}else{_forEach(value,function(property){update(value,property,callback);});}}return callback.call(source,property,value);};// Public: `JSON.parse`. See ES 5.1 section 15.12.2.
exports.parse=function(source,callback){var result,value;Index=0;Source=""+source;result=get(lex());// If a JSON string contains multiple tokens, it is invalid.
if(lex()!="$"){abort();}// Reset the parser state.
Index=Source=null;return callback&&getClass.call(callback)==functionClass?walk((value={},value[""]=result,value),"",callback):result;};}}exports["runInContext"]=runInContext;return exports;}if(freeExports&&!isLoader){// Export for CommonJS environments.
runInContext(root,freeExports);}else{// Export for web browsers and JavaScript engines.
var nativeJSON=root.JSON,previousJSON=root["JSON3"],isRestored=false;var JSON3=runInContext(root,root["JSON3"]={// Public: Restores the original value of the global `JSON` object and
// returns a reference to the `JSON3` object.
"noConflict":function noConflict(){if(!isRestored){isRestored=true;root.JSON=nativeJSON;root["JSON3"]=previousJSON;nativeJSON=previousJSON=null;}return JSON3;}});root.JSON={"parse":JSON3.parse,"stringify":JSON3.stringify};}// Export for asynchronous module loaders.
if(isLoader){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return JSON3;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}}).call(this);/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(38)(module),function(){return this;}());/***/},/* 151 *//***/function(module,exports){/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__){module.exports=__webpack_amd_options__;/* WEBPACK VAR INJECTION */}).call(exports,{});/***/},/* 152 *//***/function(module,exports){/**
	 * Expose `Emitter`.
	 */module.exports=Emitter;/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */function Emitter(obj){if(obj)return mixin(obj);};/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key];}return obj;}/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[event]=this._callbacks[event]||[]).push(fn);return this;};/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.once=function(event,fn){var self=this;this._callbacks=this._callbacks||{};function on(){self.off(event,on);fn.apply(this,arguments);}on.fn=fn;this.on(event,on);return this;};/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};// all
if(0==arguments.length){this._callbacks={};return this;}// specific event
var callbacks=this._callbacks[event];if(!callbacks)return this;// remove all handlers
if(1==arguments.length){delete this._callbacks[event];return this;}// remove specific handler
var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break;}}return this;};/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args);}}return this;};/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[event]||[];};/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length;};/***/},/* 153 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/*global Blob,File*//**
	 * Module requirements
	 */var isArray=__webpack_require__(154);var isBuf=__webpack_require__(155);/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */exports.deconstructPacket=function(packet){var buffers=[];var packetData=packet.data;function _deconstructPacket(data){if(!data)return data;if(isBuf(data)){var placeholder={_placeholder:true,num:buffers.length};buffers.push(data);return placeholder;}else if(isArray(data)){var newData=new Array(data.length);for(var i=0;i<data.length;i++){newData[i]=_deconstructPacket(data[i]);}return newData;}else if('object'==(typeof data==="undefined"?"undefined":_typeof(data))&&!(data instanceof Date)){var newData={};for(var key in data){newData[key]=_deconstructPacket(data[key]);}return newData;}return data;}var pack=packet;pack.data=_deconstructPacket(packetData);pack.attachments=buffers.length;// number of binary 'attachments'
return{packet:pack,buffers:buffers};};/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */exports.reconstructPacket=function(packet,buffers){var curPlaceHolder=0;function _reconstructPacket(data){if(data&&data._placeholder){var buf=buffers[data.num];// appropriate buffer (should be natural order anyway)
return buf;}else if(isArray(data)){for(var i=0;i<data.length;i++){data[i]=_reconstructPacket(data[i]);}return data;}else if(data&&'object'==(typeof data==="undefined"?"undefined":_typeof(data))){for(var key in data){data[key]=_reconstructPacket(data[key]);}return data;}return data;}packet.data=_reconstructPacket(packet.data);packet.attachments=undefined;// no longer useful
return packet;};/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */exports.removeBlobs=function(data,callback){function _removeBlobs(obj,curKey,containingObject){if(!obj)return obj;// convert any blob
if(global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){pendingBlobs++;// async filereader
var fileReader=new FileReader();fileReader.onload=function(){// this.result == arraybuffer
if(containingObject){containingObject[curKey]=this.result;}else{bloblessData=this.result;}// if nothing pending its callback time
if(! --pendingBlobs){callback(bloblessData);}};fileReader.readAsArrayBuffer(obj);// blob -> arraybuffer
}else if(isArray(obj)){// handle array
for(var i=0;i<obj.length;i++){_removeBlobs(obj[i],i,obj);}}else if(obj&&'object'==(typeof obj==="undefined"?"undefined":_typeof(obj))&&!isBuf(obj)){// and object
for(var key in obj){_removeBlobs(obj[key],key,obj);}}}var pendingBlobs=0;var bloblessData=data;_removeBlobs(bloblessData);if(!pendingBlobs){callback(bloblessData);}};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 154 *//***/function(module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)=='[object Array]';};/***/},/* 155 *//***/function(module,exports){/* WEBPACK VAR INJECTION */(function(global){module.exports=isBuf;/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */function isBuf(obj){return global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer;}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 156 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var eio=__webpack_require__(157);var Socket=__webpack_require__(177);var Emitter=__webpack_require__(178);var parser=__webpack_require__(146);var on=__webpack_require__(180);var bind=__webpack_require__(181);var debug=__webpack_require__(144)('socket.io-client:manager');var indexOf=__webpack_require__(175);var Backoff=__webpack_require__(182);/**
	 * IE6+ hasOwnProperty
	 */var has=Object.prototype.hasOwnProperty;/**
	 * Module exports
	 */module.exports=Manager;/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */function Manager(uri,opts){if(!(this instanceof Manager))return new Manager(uri,opts);if(uri&&'object'===(typeof uri==="undefined"?"undefined":_typeof(uri))){opts=uri;uri=undefined;}opts=opts||{};opts.path=opts.path||'/socket.io';this.nsps={};this.subs=[];this.opts=opts;this.reconnection(opts.reconnection!==false);this.reconnectionAttempts(opts.reconnectionAttempts||Infinity);this.reconnectionDelay(opts.reconnectionDelay||1000);this.reconnectionDelayMax(opts.reconnectionDelayMax||5000);this.randomizationFactor(opts.randomizationFactor||0.5);this.backoff=new Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()});this.timeout(null==opts.timeout?20000:opts.timeout);this.readyState='closed';this.uri=uri;this.connecting=[];this.lastPing=null;this.encoding=false;this.packetBuffer=[];this.encoder=new parser.Encoder();this.decoder=new parser.Decoder();this.autoConnect=opts.autoConnect!==false;if(this.autoConnect)this.open();}/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */Manager.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].emit.apply(this.nsps[nsp],arguments);}}};/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */Manager.prototype.updateSocketIds=function(){for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].id=this.engine.id;}}};/**
	 * Mix in `Emitter`.
	 */Emitter(Manager.prototype);/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */Manager.prototype.reconnection=function(v){if(!arguments.length)return this._reconnection;this._reconnection=!!v;return this;};/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */Manager.prototype.reconnectionAttempts=function(v){if(!arguments.length)return this._reconnectionAttempts;this._reconnectionAttempts=v;return this;};/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */Manager.prototype.reconnectionDelay=function(v){if(!arguments.length)return this._reconnectionDelay;this._reconnectionDelay=v;this.backoff&&this.backoff.setMin(v);return this;};Manager.prototype.randomizationFactor=function(v){if(!arguments.length)return this._randomizationFactor;this._randomizationFactor=v;this.backoff&&this.backoff.setJitter(v);return this;};/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */Manager.prototype.reconnectionDelayMax=function(v){if(!arguments.length)return this._reconnectionDelayMax;this._reconnectionDelayMax=v;this.backoff&&this.backoff.setMax(v);return this;};/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */Manager.prototype.timeout=function(v){if(!arguments.length)return this._timeout;this._timeout=v;return this;};/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */Manager.prototype.maybeReconnectOnOpen=function(){// Only try to reconnect if it's the first time we're connecting
if(!this.reconnecting&&this._reconnection&&this.backoff.attempts===0){// keeps reconnection from firing twice for the same reconnection loop
this.reconnect();}};/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */Manager.prototype.open=Manager.prototype.connect=function(fn,opts){debug('readyState %s',this.readyState);if(~this.readyState.indexOf('open'))return this;debug('opening %s',this.uri);this.engine=eio(this.uri,this.opts);var socket=this.engine;var self=this;this.readyState='opening';this.skipReconnect=false;// emit `open`
var openSub=on(socket,'open',function(){self.onopen();fn&&fn();});// emit `connect_error`
var errorSub=on(socket,'error',function(data){debug('connect_error');self.cleanup();self.readyState='closed';self.emitAll('connect_error',data);if(fn){var err=new Error('Connection error');err.data=data;fn(err);}else{// Only do this if there is no fn to handle the error
self.maybeReconnectOnOpen();}});// emit `connect_timeout`
if(false!==this._timeout){var timeout=this._timeout;debug('connect attempt will timeout after %d',timeout);// set timer
var timer=setTimeout(function(){debug('connect attempt timed out after %d',timeout);openSub.destroy();socket.close();socket.emit('error','timeout');self.emitAll('connect_timeout',timeout);},timeout);this.subs.push({destroy:function destroy(){clearTimeout(timer);}});}this.subs.push(openSub);this.subs.push(errorSub);return this;};/**
	 * Called upon transport open.
	 *
	 * @api private
	 */Manager.prototype.onopen=function(){debug('open');// clear old subs
this.cleanup();// mark as open
this.readyState='open';this.emit('open');// add new subs
var socket=this.engine;this.subs.push(on(socket,'data',bind(this,'ondata')));this.subs.push(on(socket,'ping',bind(this,'onping')));this.subs.push(on(socket,'pong',bind(this,'onpong')));this.subs.push(on(socket,'error',bind(this,'onerror')));this.subs.push(on(socket,'close',bind(this,'onclose')));this.subs.push(on(this.decoder,'decoded',bind(this,'ondecoded')));};/**
	 * Called upon a ping.
	 *
	 * @api private
	 */Manager.prototype.onping=function(){this.lastPing=new Date();this.emitAll('ping');};/**
	 * Called upon a packet.
	 *
	 * @api private
	 */Manager.prototype.onpong=function(){this.emitAll('pong',new Date()-this.lastPing);};/**
	 * Called with data.
	 *
	 * @api private
	 */Manager.prototype.ondata=function(data){this.decoder.add(data);};/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */Manager.prototype.ondecoded=function(packet){this.emit('packet',packet);};/**
	 * Called upon socket error.
	 *
	 * @api private
	 */Manager.prototype.onerror=function(err){debug('error',err);this.emitAll('error',err);};/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */Manager.prototype.socket=function(nsp,opts){var socket=this.nsps[nsp];if(!socket){socket=new Socket(this,nsp,opts);this.nsps[nsp]=socket;var self=this;socket.on('connecting',onConnecting);socket.on('connect',function(){socket.id=self.engine.id;});if(this.autoConnect){// manually call here since connecting evnet is fired before listening
onConnecting();}}function onConnecting(){if(!~indexOf(self.connecting,socket)){self.connecting.push(socket);}}return socket;};/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */Manager.prototype.destroy=function(socket){var index=indexOf(this.connecting,socket);if(~index)this.connecting.splice(index,1);if(this.connecting.length)return;this.close();};/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */Manager.prototype.packet=function(packet){debug('writing packet %j',packet);var self=this;if(packet.query&&packet.type===0)packet.nsp+='?'+packet.query;if(!self.encoding){// encode, then write to engine with result
self.encoding=true;this.encoder.encode(packet,function(encodedPackets){for(var i=0;i<encodedPackets.length;i++){self.engine.write(encodedPackets[i],packet.options);}self.encoding=false;self.processPacketQueue();});}else{// add packet to the queue
self.packetBuffer.push(packet);}};/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */Manager.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var pack=this.packetBuffer.shift();this.packet(pack);}};/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */Manager.prototype.cleanup=function(){debug('cleanup');var subsLength=this.subs.length;for(var i=0;i<subsLength;i++){var sub=this.subs.shift();sub.destroy();}this.packetBuffer=[];this.encoding=false;this.lastPing=null;this.decoder.destroy();};/**
	 * Close the current socket.
	 *
	 * @api private
	 */Manager.prototype.close=Manager.prototype.disconnect=function(){debug('disconnect');this.skipReconnect=true;this.reconnecting=false;if('opening'===this.readyState){// `onclose` will not fire because
// an open event never happened
this.cleanup();}this.backoff.reset();this.readyState='closed';if(this.engine)this.engine.close();};/**
	 * Called upon engine close.
	 *
	 * @api private
	 */Manager.prototype.onclose=function(reason){debug('onclose');this.cleanup();this.backoff.reset();this.readyState='closed';this.emit('close',reason);if(this._reconnection&&!this.skipReconnect){this.reconnect();}};/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */Manager.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var self=this;if(this.backoff.attempts>=this._reconnectionAttempts){debug('reconnect failed');this.backoff.reset();this.emitAll('reconnect_failed');this.reconnecting=false;}else{var delay=this.backoff.duration();debug('will wait %dms before reconnect attempt',delay);this.reconnecting=true;var timer=setTimeout(function(){if(self.skipReconnect)return;debug('attempting reconnect');self.emitAll('reconnect_attempt',self.backoff.attempts);self.emitAll('reconnecting',self.backoff.attempts);// check again for the case socket closed in above events
if(self.skipReconnect)return;self.open(function(err){if(err){debug('reconnect attempt error');self.reconnecting=false;self.reconnect();self.emitAll('reconnect_error',err.data);}else{debug('reconnect success');self.onreconnect();}});},delay);this.subs.push({destroy:function destroy(){clearTimeout(timer);}});}};/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */Manager.prototype.onreconnect=function(){var attempt=this.backoff.attempts;this.reconnecting=false;this.backoff.reset();this.updateSocketIds();this.emitAll('reconnect',attempt);};/***/},/* 157 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(158);/***/},/* 158 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(159);/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */module.exports.parser=__webpack_require__(82);/***/},/* 159 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module dependencies.
	 */var transports=__webpack_require__(160);var Emitter=__webpack_require__(166);var debug=__webpack_require__(170)('engine.io-client:socket');var index=__webpack_require__(175);var parser=__webpack_require__(82);var parseuri=__webpack_require__(143);var parsejson=__webpack_require__(176);var parseqs=__webpack_require__(167);/**
	 * Module exports.
	 */module.exports=Socket;/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */function Socket(uri,opts){if(!(this instanceof Socket))return new Socket(uri,opts);opts=opts||{};if(uri&&'object'===(typeof uri==="undefined"?"undefined":_typeof(uri))){opts=uri;uri=null;}if(uri){uri=parseuri(uri);opts.hostname=uri.host;opts.secure=uri.protocol==='https'||uri.protocol==='wss';opts.port=uri.port;if(uri.query)opts.query=uri.query;}else if(opts.host){opts.hostname=parseuri(opts.host).host;}this.secure=null!=opts.secure?opts.secure:global.location&&'https:'===location.protocol;if(opts.hostname&&!opts.port){// if no port is specified manually, use the protocol default
opts.port=this.secure?'443':'80';}this.agent=opts.agent||false;this.hostname=opts.hostname||(global.location?location.hostname:'localhost');this.port=opts.port||(global.location&&location.port?location.port:this.secure?443:80);this.query=opts.query||{};if('string'===typeof this.query)this.query=parseqs.decode(this.query);this.upgrade=false!==opts.upgrade;this.path=(opts.path||'/engine.io').replace(/\/$/,'')+'/';this.forceJSONP=!!opts.forceJSONP;this.jsonp=false!==opts.jsonp;this.forceBase64=!!opts.forceBase64;this.enablesXDR=!!opts.enablesXDR;this.timestampParam=opts.timestampParam||'t';this.timestampRequests=opts.timestampRequests;this.transports=opts.transports||['polling','websocket'];this.readyState='';this.writeBuffer=[];this.prevBufferLen=0;this.policyPort=opts.policyPort||843;this.rememberUpgrade=opts.rememberUpgrade||false;this.binaryType=null;this.onlyBinaryUpgrades=opts.onlyBinaryUpgrades;this.perMessageDeflate=false!==opts.perMessageDeflate?opts.perMessageDeflate||{}:false;if(true===this.perMessageDeflate)this.perMessageDeflate={};if(this.perMessageDeflate&&null==this.perMessageDeflate.threshold){this.perMessageDeflate.threshold=1024;}// SSL options for Node.js client
this.pfx=opts.pfx||null;this.key=opts.key||null;this.passphrase=opts.passphrase||null;this.cert=opts.cert||null;this.ca=opts.ca||null;this.ciphers=opts.ciphers||null;this.rejectUnauthorized=opts.rejectUnauthorized===undefined?null:opts.rejectUnauthorized;this.forceNode=!!opts.forceNode;// other options for Node.js client
var freeGlobal=(typeof global==="undefined"?"undefined":_typeof(global))==='object'&&global;if(freeGlobal.global===freeGlobal){if(opts.extraHeaders&&Object.keys(opts.extraHeaders).length>0){this.extraHeaders=opts.extraHeaders;}if(opts.localAddress){this.localAddress=opts.localAddress;}}// set on handshake
this.id=null;this.upgrades=null;this.pingInterval=null;this.pingTimeout=null;// set on heartbeat
this.pingIntervalTimer=null;this.pingTimeoutTimer=null;this.open();}Socket.priorWebsocketSuccess=false;/**
	 * Mix in `Emitter`.
	 */Emitter(Socket.prototype);/**
	 * Protocol version.
	 *
	 * @api public
	 */Socket.protocol=parser.protocol;// this is an int
/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */Socket.Socket=Socket;Socket.Transport=__webpack_require__(165);Socket.transports=__webpack_require__(160);Socket.parser=__webpack_require__(82);/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */Socket.prototype.createTransport=function(name){debug('creating transport "%s"',name);var query=clone(this.query);// append engine.io protocol identifier
query.EIO=parser.protocol;// transport name
query.transport=name;// session id if we already have one
if(this.id)query.sid=this.id;var transport=new transports[name]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:query,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders,forceNode:this.forceNode,localAddress:this.localAddress});return transport;};function clone(obj){var o={};for(var i in obj){if(obj.hasOwnProperty(i)){o[i]=obj[i];}}return o;}/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */Socket.prototype.open=function(){var transport;if(this.rememberUpgrade&&Socket.priorWebsocketSuccess&&this.transports.indexOf('websocket')!==-1){transport='websocket';}else if(0===this.transports.length){// Emit error on next tick so it can be listened to
var self=this;setTimeout(function(){self.emit('error','No transports available');},0);return;}else{transport=this.transports[0];}this.readyState='opening';// Retry with the next transport if the transport is disabled (jsonp: false)
try{transport=this.createTransport(transport);}catch(e){this.transports.shift();this.open();return;}transport.open();this.setTransport(transport);};/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */Socket.prototype.setTransport=function(transport){debug('setting transport %s',transport.name);var self=this;if(this.transport){debug('clearing existing transport %s',this.transport.name);this.transport.removeAllListeners();}// set up transport
this.transport=transport;// set up transport listeners
transport.on('drain',function(){self.onDrain();}).on('packet',function(packet){self.onPacket(packet);}).on('error',function(e){self.onError(e);}).on('close',function(){self.onClose('transport close');});};/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */Socket.prototype.probe=function(name){debug('probing transport "%s"',name);var transport=this.createTransport(name,{probe:1});var failed=false;var self=this;Socket.priorWebsocketSuccess=false;function onTransportOpen(){if(self.onlyBinaryUpgrades){var upgradeLosesBinary=!this.supportsBinary&&self.transport.supportsBinary;failed=failed||upgradeLosesBinary;}if(failed)return;debug('probe transport "%s" opened',name);transport.send([{type:'ping',data:'probe'}]);transport.once('packet',function(msg){if(failed)return;if('pong'===msg.type&&'probe'===msg.data){debug('probe transport "%s" pong',name);self.upgrading=true;self.emit('upgrading',transport);if(!transport)return;Socket.priorWebsocketSuccess='websocket'===transport.name;debug('pausing current transport "%s"',self.transport.name);self.transport.pause(function(){if(failed)return;if('closed'===self.readyState)return;debug('changing transport and sending upgrade packet');cleanup();self.setTransport(transport);transport.send([{type:'upgrade'}]);self.emit('upgrade',transport);transport=null;self.upgrading=false;self.flush();});}else{debug('probe transport "%s" failed',name);var err=new Error('probe error');err.transport=transport.name;self.emit('upgradeError',err);}});}function freezeTransport(){if(failed)return;// Any callback called by transport should be ignored since now
failed=true;cleanup();transport.close();transport=null;}// Handle any error that happens while probing
function onerror(err){var error=new Error('probe error: '+err);error.transport=transport.name;freezeTransport();debug('probe transport "%s" failed because of error: %s',name,err);self.emit('upgradeError',error);}function onTransportClose(){onerror('transport closed');}// When the socket is closed while we're probing
function onclose(){onerror('socket closed');}// When the socket is upgraded while we're probing
function onupgrade(to){if(transport&&to.name!==transport.name){debug('"%s" works - aborting "%s"',to.name,transport.name);freezeTransport();}}// Remove all listeners on the transport and on self
function cleanup(){transport.removeListener('open',onTransportOpen);transport.removeListener('error',onerror);transport.removeListener('close',onTransportClose);self.removeListener('close',onclose);self.removeListener('upgrading',onupgrade);}transport.once('open',onTransportOpen);transport.once('error',onerror);transport.once('close',onTransportClose);this.once('close',onclose);this.once('upgrading',onupgrade);transport.open();};/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */Socket.prototype.onOpen=function(){debug('socket open');this.readyState='open';Socket.priorWebsocketSuccess='websocket'===this.transport.name;this.emit('open');this.flush();// we check for `readyState` in case an `open`
// listener already closed the socket
if('open'===this.readyState&&this.upgrade&&this.transport.pause){debug('starting upgrade probes');for(var i=0,l=this.upgrades.length;i<l;i++){this.probe(this.upgrades[i]);}}};/**
	 * Handles a packet.
	 *
	 * @api private
	 */Socket.prototype.onPacket=function(packet){if('opening'===this.readyState||'open'===this.readyState||'closing'===this.readyState){debug('socket receive: type "%s", data "%s"',packet.type,packet.data);this.emit('packet',packet);// Socket is live - any packet counts
this.emit('heartbeat');switch(packet.type){case'open':this.onHandshake(parsejson(packet.data));break;case'pong':this.setPing();this.emit('pong');break;case'error':var err=new Error('server error');err.code=packet.data;this.onError(err);break;case'message':this.emit('data',packet.data);this.emit('message',packet.data);break;}}else{debug('packet received with socket readyState "%s"',this.readyState);}};/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */Socket.prototype.onHandshake=function(data){this.emit('handshake',data);this.id=data.sid;this.transport.query.sid=data.sid;this.upgrades=this.filterUpgrades(data.upgrades);this.pingInterval=data.pingInterval;this.pingTimeout=data.pingTimeout;this.onOpen();// In case open handler closes socket
if('closed'===this.readyState)return;this.setPing();// Prolong liveness of socket on heartbeat
this.removeListener('heartbeat',this.onHeartbeat);this.on('heartbeat',this.onHeartbeat);};/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */Socket.prototype.onHeartbeat=function(timeout){clearTimeout(this.pingTimeoutTimer);var self=this;self.pingTimeoutTimer=setTimeout(function(){if('closed'===self.readyState)return;self.onClose('ping timeout');},timeout||self.pingInterval+self.pingTimeout);};/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */Socket.prototype.setPing=function(){var self=this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer=setTimeout(function(){debug('writing ping packet - expecting pong within %sms',self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout);},self.pingInterval);};/**
	* Sends a ping packet.
	*
	* @api private
	*/Socket.prototype.ping=function(){var self=this;this.sendPacket('ping',function(){self.emit('ping');});};/**
	 * Called on `drain` event
	 *
	 * @api private
	 */Socket.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen);// setting prevBufferLen = 0 is very important
// for example, when upgrading, upgrade packet is sent over,
// and a nonzero prevBufferLen could cause problems on `drain`
this.prevBufferLen=0;if(0===this.writeBuffer.length){this.emit('drain');}else{this.flush();}};/**
	 * Flush write buffers.
	 *
	 * @api private
	 */Socket.prototype.flush=function(){if('closed'!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){debug('flushing %d packets in socket',this.writeBuffer.length);this.transport.send(this.writeBuffer);// keep track of current length of writeBuffer
// splice writeBuffer and callbackBuffer on `drain`
this.prevBufferLen=this.writeBuffer.length;this.emit('flush');}};/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */Socket.prototype.write=Socket.prototype.send=function(msg,options,fn){this.sendPacket('message',msg,options,fn);return this;};/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */Socket.prototype.sendPacket=function(type,data,options,fn){if('function'===typeof data){fn=data;data=undefined;}if('function'===typeof options){fn=options;options=null;}if('closing'===this.readyState||'closed'===this.readyState){return;}options=options||{};options.compress=false!==options.compress;var packet={type:type,data:data,options:options};this.emit('packetCreate',packet);this.writeBuffer.push(packet);if(fn)this.once('flush',fn);this.flush();};/**
	 * Closes the connection.
	 *
	 * @api private
	 */Socket.prototype.close=function(){if('opening'===this.readyState||'open'===this.readyState){this.readyState='closing';var self=this;if(this.writeBuffer.length){this.once('drain',function(){if(this.upgrading){waitForUpgrade();}else{close();}});}else if(this.upgrading){waitForUpgrade();}else{close();}}function close(){self.onClose('forced close');debug('socket closing - telling transport to close');self.transport.close();}function cleanupAndClose(){self.removeListener('upgrade',cleanupAndClose);self.removeListener('upgradeError',cleanupAndClose);close();}function waitForUpgrade(){// wait for upgrade to finish since we can't send packets while pausing a transport
self.once('upgrade',cleanupAndClose);self.once('upgradeError',cleanupAndClose);}return this;};/**
	 * Called upon transport error
	 *
	 * @api private
	 */Socket.prototype.onError=function(err){debug('socket error %j',err);Socket.priorWebsocketSuccess=false;this.emit('error',err);this.onClose('transport error',err);};/**
	 * Called upon transport close.
	 *
	 * @api private
	 */Socket.prototype.onClose=function(reason,desc){if('opening'===this.readyState||'open'===this.readyState||'closing'===this.readyState){debug('socket close with reason: "%s"',reason);var self=this;// clear timers
clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);// stop event from firing again for transport
this.transport.removeAllListeners('close');// ensure transport won't stay open
this.transport.close();// ignore further transport communication
this.transport.removeAllListeners();// set ready state
this.readyState='closed';// clear session id
this.id=null;// emit close event
this.emit('close',reason,desc);// clean buffers after, so users can still
// grab the buffers on `close` event
self.writeBuffer=[];self.prevBufferLen=0;}};/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */Socket.prototype.filterUpgrades=function(upgrades){var filteredUpgrades=[];for(var i=0,j=upgrades.length;i<j;i++){if(~index(this.transports,upgrades[i]))filteredUpgrades.push(upgrades[i]);}return filteredUpgrades;};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 160 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module dependencies
	 */var XMLHttpRequest=__webpack_require__(161);var XHR=__webpack_require__(163);var JSONP=__webpack_require__(172);var websocket=__webpack_require__(173);/**
	 * Export transports.
	 */exports.polling=polling;exports.websocket=websocket;/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */function polling(opts){var xhr;var xd=false;var xs=false;var jsonp=false!==opts.jsonp;if(global.location){var isSSL='https:'===location.protocol;var port=location.port;// some user agents have empty `location.port`
if(!port){port=isSSL?443:80;}xd=opts.hostname!==location.hostname||port!==opts.port;xs=opts.secure!==isSSL;}opts.xdomain=xd;opts.xscheme=xs;xhr=new XMLHttpRequest(opts);if('open'in xhr&&!opts.forceJSONP){return new XHR(opts);}else{if(!jsonp)throw new Error('JSONP disabled');return new JSONP(opts);}}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 161 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){// browser shim for xmlhttprequest module
var hasCORS=__webpack_require__(162);module.exports=function(opts){var xdomain=opts.xdomain;// scheme must be same when usign XDomainRequest
// http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
var xscheme=opts.xscheme;// XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
// https://github.com/Automattic/engine.io-client/pull/217
var enablesXDR=opts.enablesXDR;// XMLHttpRequest can be disabled on IE
try{if('undefined'!==typeof XMLHttpRequest&&(!xdomain||hasCORS)){return new XMLHttpRequest();}}catch(e){}// Use XDomainRequest for IE8 if enablesXDR is true
// because loading bar keeps flashing when using jsonp-polling
// https://github.com/yujiosaka/socke.io-ie8-loading-example
try{if('undefined'!==typeof XDomainRequest&&!xscheme&&enablesXDR){return new XDomainRequest();}}catch(e){}if(!xdomain){try{return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');}catch(e){}}};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 162 *//***/function(module,exports){/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */try{module.exports=typeof XMLHttpRequest!=='undefined'&&'withCredentials'in new XMLHttpRequest();}catch(err){// if XMLHttp support is disabled in IE then it will throw
// when trying to create
module.exports=false;}/***/},/* 163 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module requirements.
	 */var XMLHttpRequest=__webpack_require__(161);var Polling=__webpack_require__(164);var Emitter=__webpack_require__(166);var inherit=__webpack_require__(168);var debug=__webpack_require__(170)('engine.io-client:polling-xhr');/**
	 * Module exports.
	 */module.exports=XHR;module.exports.Request=Request;/**
	 * Empty function
	 */function empty(){}/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */function XHR(opts){Polling.call(this,opts);this.requestTimeout=opts.requestTimeout;if(global.location){var isSSL='https:'===location.protocol;var port=location.port;// some user agents have empty `location.port`
if(!port){port=isSSL?443:80;}this.xd=opts.hostname!==global.location.hostname||port!==opts.port;this.xs=opts.secure!==isSSL;}else{this.extraHeaders=opts.extraHeaders;}}/**
	 * Inherits from Polling.
	 */inherit(XHR,Polling);/**
	 * XHR supports binary
	 */XHR.prototype.supportsBinary=true;/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */XHR.prototype.request=function(opts){opts=opts||{};opts.uri=this.uri();opts.xd=this.xd;opts.xs=this.xs;opts.agent=this.agent||false;opts.supportsBinary=this.supportsBinary;opts.enablesXDR=this.enablesXDR;// SSL options for Node.js client
opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;opts.requestTimeout=this.requestTimeout;// other options for Node.js client
opts.extraHeaders=this.extraHeaders;return new Request(opts);};/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */XHR.prototype.doWrite=function(data,fn){var isBinary=typeof data!=='string'&&data!==undefined;var req=this.request({method:'POST',data:data,isBinary:isBinary});var self=this;req.on('success',fn);req.on('error',function(err){self.onError('xhr post error',err);});this.sendXhr=req;};/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */XHR.prototype.doPoll=function(){debug('xhr poll');var req=this.request();var self=this;req.on('data',function(data){self.onData(data);});req.on('error',function(err){self.onError('xhr poll error',err);});this.pollXhr=req;};/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */function Request(opts){this.method=opts.method||'GET';this.uri=opts.uri;this.xd=!!opts.xd;this.xs=!!opts.xs;this.async=false!==opts.async;this.data=undefined!==opts.data?opts.data:null;this.agent=opts.agent;this.isBinary=opts.isBinary;this.supportsBinary=opts.supportsBinary;this.enablesXDR=opts.enablesXDR;this.requestTimeout=opts.requestTimeout;// SSL options for Node.js client
this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;// other options for Node.js client
this.extraHeaders=opts.extraHeaders;this.create();}/**
	 * Mix in `Emitter`.
	 */Emitter(Request.prototype);/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */Request.prototype.create=function(){var opts={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};// SSL options for Node.js client
opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;var xhr=this.xhr=new XMLHttpRequest(opts);var self=this;try{debug('xhr open %s: %s',this.method,this.uri);xhr.open(this.method,this.uri,this.async);try{if(this.extraHeaders){xhr.setDisableHeaderCheck(true);for(var i in this.extraHeaders){if(this.extraHeaders.hasOwnProperty(i)){xhr.setRequestHeader(i,this.extraHeaders[i]);}}}}catch(e){}if(this.supportsBinary){// This has to be done after open because Firefox is stupid
// http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
xhr.responseType='arraybuffer';}if('POST'===this.method){try{if(this.isBinary){xhr.setRequestHeader('Content-type','application/octet-stream');}else{xhr.setRequestHeader('Content-type','text/plain;charset=UTF-8');}}catch(e){}}try{xhr.setRequestHeader('Accept','*/*');}catch(e){}// ie6 check
if('withCredentials'in xhr){xhr.withCredentials=true;}if(this.requestTimeout){xhr.timeout=this.requestTimeout;}if(this.hasXDR()){xhr.onload=function(){self.onLoad();};xhr.onerror=function(){self.onError(xhr.responseText);};}else{xhr.onreadystatechange=function(){if(4!==xhr.readyState)return;if(200===xhr.status||1223===xhr.status){self.onLoad();}else{// make sure the `error` event handler that's user-set
// does not throw in the same tick and gets caught here
setTimeout(function(){self.onError(xhr.status);},0);}};}debug('xhr data %s',this.data);xhr.send(this.data);}catch(e){// Need to defer since .create() is called directly fhrom the constructor
// and thus the 'error' event can only be only bound *after* this exception
// occurs.  Therefore, also, we cannot throw here at all.
setTimeout(function(){self.onError(e);},0);return;}if(global.document){this.index=Request.requestsCount++;Request.requests[this.index]=this;}};/**
	 * Called upon successful response.
	 *
	 * @api private
	 */Request.prototype.onSuccess=function(){this.emit('success');this.cleanup();};/**
	 * Called if we have data.
	 *
	 * @api private
	 */Request.prototype.onData=function(data){this.emit('data',data);this.onSuccess();};/**
	 * Called upon error.
	 *
	 * @api private
	 */Request.prototype.onError=function(err){this.emit('error',err);this.cleanup(true);};/**
	 * Cleans up house.
	 *
	 * @api private
	 */Request.prototype.cleanup=function(fromError){if('undefined'===typeof this.xhr||null===this.xhr){return;}// xmlhttprequest
if(this.hasXDR()){this.xhr.onload=this.xhr.onerror=empty;}else{this.xhr.onreadystatechange=empty;}if(fromError){try{this.xhr.abort();}catch(e){}}if(global.document){delete Request.requests[this.index];}this.xhr=null;};/**
	 * Called upon load.
	 *
	 * @api private
	 */Request.prototype.onLoad=function(){var data;try{var contentType;try{contentType=this.xhr.getResponseHeader('Content-Type').split(';')[0];}catch(e){}if(contentType==='application/octet-stream'){data=this.xhr.response||this.xhr.responseText;}else{if(!this.supportsBinary){data=this.xhr.responseText;}else{try{data=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response));}catch(e){var ui8Arr=new Uint8Array(this.xhr.response);var dataArray=[];for(var idx=0,length=ui8Arr.length;idx<length;idx++){dataArray.push(ui8Arr[idx]);}data=String.fromCharCode.apply(null,dataArray);}}}}catch(e){this.onError(e);}if(null!=data){this.onData(data);}};/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */Request.prototype.hasXDR=function(){return'undefined'!==typeof global.XDomainRequest&&!this.xs&&this.enablesXDR;};/**
	 * Aborts the request.
	 *
	 * @api public
	 */Request.prototype.abort=function(){this.cleanup();};/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */Request.requestsCount=0;Request.requests={};if(global.document){if(global.attachEvent){global.attachEvent('onunload',unloadHandler);}else if(global.addEventListener){global.addEventListener('beforeunload',unloadHandler,false);}}function unloadHandler(){for(var i in Request.requests){if(Request.requests.hasOwnProperty(i)){Request.requests[i].abort();}}}/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 164 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var Transport=__webpack_require__(165);var parseqs=__webpack_require__(167);var parser=__webpack_require__(82);var inherit=__webpack_require__(168);var yeast=__webpack_require__(169);var debug=__webpack_require__(170)('engine.io-client:polling');/**
	 * Module exports.
	 */module.exports=Polling;/**
	 * Is XHR2 supported?
	 */var hasXHR2=function(){var XMLHttpRequest=__webpack_require__(161);var xhr=new XMLHttpRequest({xdomain:false});return null!=xhr.responseType;}();/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */function Polling(opts){var forceBase64=opts&&opts.forceBase64;if(!hasXHR2||forceBase64){this.supportsBinary=false;}Transport.call(this,opts);}/**
	 * Inherits from Transport.
	 */inherit(Polling,Transport);/**
	 * Transport name.
	 */Polling.prototype.name='polling';/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */Polling.prototype.doOpen=function(){this.poll();};/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */Polling.prototype.pause=function(onPause){var self=this;this.readyState='pausing';function pause(){debug('paused');self.readyState='paused';onPause();}if(this.polling||!this.writable){var total=0;if(this.polling){debug('we are currently polling - waiting to pause');total++;this.once('pollComplete',function(){debug('pre-pause polling complete');--total||pause();});}if(!this.writable){debug('we are currently writing - waiting to pause');total++;this.once('drain',function(){debug('pre-pause writing complete');--total||pause();});}}else{pause();}};/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */Polling.prototype.poll=function(){debug('polling');this.polling=true;this.doPoll();this.emit('poll');};/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */Polling.prototype.onData=function(data){var self=this;debug('polling got data %s',data);var callback=function callback(packet,index,total){// if its the first message we consider the transport open
if('opening'===self.readyState){self.onOpen();}// if its a close packet, we close the ongoing requests
if('close'===packet.type){self.onClose();return false;}// otherwise bypass onData and handle the message
self.onPacket(packet);};// decode payload
parser.decodePayload(data,this.socket.binaryType,callback);// if an event did not trigger closing
if('closed'!==this.readyState){// if we got data we're not polling
this.polling=false;this.emit('pollComplete');if('open'===this.readyState){this.poll();}else{debug('ignoring poll - transport state "%s"',this.readyState);}}};/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */Polling.prototype.doClose=function(){var self=this;function close(){debug('writing close packet');self.write([{type:'close'}]);}if('open'===this.readyState){debug('transport open - closing');close();}else{// in case we're trying to close while
// handshaking is in progress (GH-164)
debug('transport not open - deferring close');this.once('open',close);}};/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */Polling.prototype.write=function(packets){var self=this;this.writable=false;var callbackfn=function callbackfn(){self.writable=true;self.emit('drain');};parser.encodePayload(packets,this.supportsBinary,function(data){self.doWrite(data,callbackfn);});};/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */Polling.prototype.uri=function(){var query=this.query||{};var schema=this.secure?'https':'http';var port='';// cache busting is forced
if(false!==this.timestampRequests){query[this.timestampParam]=yeast();}if(!this.supportsBinary&&!query.sid){query.b64=1;}query=parseqs.encode(query);// avoid port if default for schema
if(this.port&&('https'===schema&&Number(this.port)!==443||'http'===schema&&Number(this.port)!==80)){port=':'+this.port;}// prepend ? to query
if(query.length){query='?'+query;}var ipv6=this.hostname.indexOf(':')!==-1;return schema+'://'+(ipv6?'['+this.hostname+']':this.hostname)+port+this.path+query;};/***/},/* 165 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var parser=__webpack_require__(82);var Emitter=__webpack_require__(166);/**
	 * Module exports.
	 */module.exports=Transport;/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */function Transport(opts){this.path=opts.path;this.hostname=opts.hostname;this.port=opts.port;this.secure=opts.secure;this.query=opts.query;this.timestampParam=opts.timestampParam;this.timestampRequests=opts.timestampRequests;this.readyState='';this.agent=opts.agent||false;this.socket=opts.socket;this.enablesXDR=opts.enablesXDR;// SSL options for Node.js client
this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.forceNode=opts.forceNode;// other options for Node.js client
this.extraHeaders=opts.extraHeaders;this.localAddress=opts.localAddress;}/**
	 * Mix in `Emitter`.
	 */Emitter(Transport.prototype);/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */Transport.prototype.onError=function(msg,desc){var err=new Error(msg);err.type='TransportError';err.description=desc;this.emit('error',err);return this;};/**
	 * Opens the transport.
	 *
	 * @api public
	 */Transport.prototype.open=function(){if('closed'===this.readyState||''===this.readyState){this.readyState='opening';this.doOpen();}return this;};/**
	 * Closes the transport.
	 *
	 * @api private
	 */Transport.prototype.close=function(){if('opening'===this.readyState||'open'===this.readyState){this.doClose();this.onClose();}return this;};/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */Transport.prototype.send=function(packets){if('open'===this.readyState){this.write(packets);}else{throw new Error('Transport not open');}};/**
	 * Called upon open
	 *
	 * @api private
	 */Transport.prototype.onOpen=function(){this.readyState='open';this.writable=true;this.emit('open');};/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */Transport.prototype.onData=function(data){var packet=parser.decodePacket(data,this.socket.binaryType);this.onPacket(packet);};/**
	 * Called with a decoded packet.
	 */Transport.prototype.onPacket=function(packet){this.emit('packet',packet);};/**
	 * Called upon close.
	 *
	 * @api private
	 */Transport.prototype.onClose=function(){this.readyState='closed';this.emit('close');};/***/},/* 166 *//***/function(module,exports,__webpack_require__){/**
	 * Expose `Emitter`.
	 */if(true){module.exports=Emitter;}/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */function Emitter(obj){if(obj)return mixin(obj);};/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key];}return obj;}/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks['$'+event]=this._callbacks['$'+event]||[]).push(fn);return this;};/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.once=function(event,fn){function on(){this.off(event,on);fn.apply(this,arguments);}on.fn=fn;this.on(event,on);return this;};/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};// all
if(0==arguments.length){this._callbacks={};return this;}// specific event
var callbacks=this._callbacks['$'+event];if(!callbacks)return this;// remove all handlers
if(1==arguments.length){delete this._callbacks['$'+event];return this;}// remove specific handler
var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break;}}return this;};/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks['$'+event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args);}}return this;};/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks['$'+event]||[];};/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length;};/***/},/* 167 *//***/function(module,exports){/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */exports.encode=function(obj){var str='';for(var i in obj){if(obj.hasOwnProperty(i)){if(str.length)str+='&';str+=encodeURIComponent(i)+'='+encodeURIComponent(obj[i]);}}return str;};/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */exports.decode=function(qs){var qry={};var pairs=qs.split('&');for(var i=0,l=pairs.length;i<l;i++){var pair=pairs[i].split('=');qry[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]);}return qry;};/***/},/* 168 *//***/function(module,exports){module.exports=function(a,b){var fn=function fn(){};fn.prototype=b.prototype;a.prototype=new fn();a.prototype.constructor=a;};/***/},/* 169 *//***/function(module,exports){'use strict';var alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),length=64,map={},seed=0,i=0,prev;/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */function encode(num){var encoded='';do{encoded=alphabet[num%length]+encoded;num=Math.floor(num/length);}while(num>0);return encoded;}/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */function decode(str){var decoded=0;for(i=0;i<str.length;i++){decoded=decoded*length+map[str.charAt(i)];}return decoded;}/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */function yeast(){var now=encode(+new Date());if(now!==prev)return seed=0,prev=now;return now+'.'+encode(seed++);}//
// Map each character to its index.
//
for(;i<length;i++){map[alphabet[i]]=i;}//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode=encode;yeast.decode=decode;module.exports=yeast;/***/},/* 170 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=__webpack_require__(171);exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage='undefined'!=typeof chrome&&'undefined'!=typeof chrome.storage?chrome.storage.local:localstorage();/**
	 * Colors.
	 */exports.colors=['lightseagreen','forestgreen','goldenrod','dodgerblue','darkorchid','crimson'];/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */function useColors(){// is webkit? http://stackoverflow.com/a/16459606/376773
// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
return typeof document!=='undefined'&&'WebkitAppearance'in document.documentElement.style||// is firebug? http://stackoverflow.com/a/398120/376773
window.console&&(console.firebug||console.exception&&console.table)||// is firefox >= v31?
// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31;}/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */exports.formatters.j=function(v){try{return JSON.stringify(v);}catch(err){return'[UnexpectedJSONParseError]: '+err.message;}};/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?'%c':'')+this.namespace+(useColors?' %c':' ')+args[0]+(useColors?'%c ':' ')+'+'+exports.humanize(this.diff);if(!useColors)return args;var c='color: '+this.color;args=[args[0],c,'color: inherit'].concat(Array.prototype.slice.call(args,1));// the final "%c" is somewhat tricky, because there could be other
// arguments passed either before or after the %c, so we need to
// figure out the correct index to insert the CSS into
var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if('%%'===match)return;index++;if('%c'===match){// we only are interested in the *last* %c
// (the user may have provided their own)
lastC=index;}});args.splice(lastC,0,c);return args;}/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */function log(){// this hackery is required for IE8/9, where
// the `console.log` function doesn't have 'apply'
return'object'===(typeof console==="undefined"?"undefined":_typeof(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments);}/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */function save(namespaces){try{if(null==namespaces){exports.storage.removeItem('debug');}else{exports.storage.debug=namespaces;}}catch(e){}}/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */function load(){var r;try{return exports.storage.debug;}catch(e){}// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
if(typeof process!=='undefined'&&'env'in process){return process.env.DEBUG;}}/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */exports.enable(load());/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */function localstorage(){try{return window.localStorage;}catch(e){}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 171 *//***/function(module,exports,__webpack_require__){/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=debug.debug=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=__webpack_require__(93);/**
	 * The currently active debug mode names, and names to skip.
	 */exports.names=[];exports.skips=[];/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */exports.formatters={};/**
	 * Previously assigned color.
	 */var prevColor=0;/**
	 * Previous log timestamp.
	 */var prevTime;/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */function selectColor(){return exports.colors[prevColor++%exports.colors.length];}/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */function debug(namespace){// define the `disabled` version
function disabled(){}disabled.enabled=false;// define the `enabled` version
function enabled(){var self=enabled;// set `diff` timestamp
var curr=+new Date();var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;// add the `color` if not set
if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i];}args[0]=exports.coerce(args[0]);if('string'!==typeof args[0]){// anything else let's inspect with %o
args=['%o'].concat(args);}// apply any `formatters` transformations
var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){// if we encounter an escaped % then don't increase the array index
if(match==='%%')return match;index++;var formatter=exports.formatters[format];if('function'===typeof formatter){var val=args[index];match=formatter.call(self,val);// now we need to remove `args[index]` since it's inlined in the `format`
args.splice(index,1);index--;}return match;});// apply env-specific formatting
args=exports.formatArgs.apply(self,args);var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args);}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn;}/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */function enable(namespaces){exports.save(namespaces);var split=(namespaces||'').split(/[\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;// ignore empty strings
namespaces=split[i].replace(/[\\^$+?.()|[\]{}]/g,'\\$&').replace(/\*/g,'.*?');if(namespaces[0]==='-'){exports.skips.push(new RegExp('^'+namespaces.substr(1)+'$'));}else{exports.names.push(new RegExp('^'+namespaces+'$'));}}}/**
	 * Disable debug output.
	 *
	 * @api public
	 */function disable(){exports.enable('');}/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false;}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true;}}return false;}/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */function coerce(val){if(val instanceof Error)return val.stack||val.message;return val;}/***/},/* 172 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module requirements.
	 */var Polling=__webpack_require__(164);var inherit=__webpack_require__(168);/**
	 * Module exports.
	 */module.exports=JSONPPolling;/**
	 * Cached regular expressions.
	 */var rNewline=/\n/g;var rEscapedNewline=/\\n/g;/**
	 * Global JSONP callbacks.
	 */var callbacks;/**
	 * Noop.
	 */function empty(){}/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */function JSONPPolling(opts){Polling.call(this,opts);this.query=this.query||{};// define global callbacks array if not present
// we do this here (lazily) to avoid unneeded global pollution
if(!callbacks){// we need to consider multiple engines in the same page
if(!global.___eio)global.___eio=[];callbacks=global.___eio;}// callback identifier
this.index=callbacks.length;// add callback to jsonp global
var self=this;callbacks.push(function(msg){self.onData(msg);});// append to query string
this.query.j=this.index;// prevent spurious errors from being emitted when the window is unloaded
if(global.document&&global.addEventListener){global.addEventListener('beforeunload',function(){if(self.script)self.script.onerror=empty;},false);}}/**
	 * Inherits from Polling.
	 */inherit(JSONPPolling,Polling);/*
	 * JSONP only supports binary as base64 encoded strings
	 */JSONPPolling.prototype.supportsBinary=false;/**
	 * Closes the socket.
	 *
	 * @api private
	 */JSONPPolling.prototype.doClose=function(){if(this.script){this.script.parentNode.removeChild(this.script);this.script=null;}if(this.form){this.form.parentNode.removeChild(this.form);this.form=null;this.iframe=null;}Polling.prototype.doClose.call(this);};/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */JSONPPolling.prototype.doPoll=function(){var self=this;var script=document.createElement('script');if(this.script){this.script.parentNode.removeChild(this.script);this.script=null;}script.async=true;script.src=this.uri();script.onerror=function(e){self.onError('jsonp poll error',e);};var insertAt=document.getElementsByTagName('script')[0];if(insertAt){insertAt.parentNode.insertBefore(script,insertAt);}else{(document.head||document.body).appendChild(script);}this.script=script;var isUAgecko='undefined'!==typeof navigator&&/gecko/i.test(navigator.userAgent);if(isUAgecko){setTimeout(function(){var iframe=document.createElement('iframe');document.body.appendChild(iframe);document.body.removeChild(iframe);},100);}};/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */JSONPPolling.prototype.doWrite=function(data,fn){var self=this;if(!this.form){var form=document.createElement('form');var area=document.createElement('textarea');var id=this.iframeId='eio_iframe_'+this.index;var iframe;form.className='socketio';form.style.position='absolute';form.style.top='-1000px';form.style.left='-1000px';form.target=id;form.method='POST';form.setAttribute('accept-charset','utf-8');area.name='d';form.appendChild(area);document.body.appendChild(form);this.form=form;this.area=area;}this.form.action=this.uri();function complete(){initIframe();fn();}function initIframe(){if(self.iframe){try{self.form.removeChild(self.iframe);}catch(e){self.onError('jsonp polling iframe removal error',e);}}try{// ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
var html='<iframe src="javascript:0" name="'+self.iframeId+'">';iframe=document.createElement(html);}catch(e){iframe=document.createElement('iframe');iframe.name=self.iframeId;iframe.src='javascript:0';}iframe.id=self.iframeId;self.form.appendChild(iframe);self.iframe=iframe;}initIframe();// escape \n to prevent it from being converted into \r\n by some UAs
// double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
data=data.replace(rEscapedNewline,'\\\n');this.area.value=data.replace(rNewline,'\\n');try{this.form.submit();}catch(e){}if(this.iframe.attachEvent){this.iframe.onreadystatechange=function(){if(self.iframe.readyState==='complete'){complete();}};}else{this.iframe.onload=complete;}};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 173 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(global){/**
	 * Module dependencies.
	 */var Transport=__webpack_require__(165);var parser=__webpack_require__(82);var parseqs=__webpack_require__(167);var inherit=__webpack_require__(168);var yeast=__webpack_require__(169);var debug=__webpack_require__(170)('engine.io-client:websocket');var BrowserWebSocket=global.WebSocket||global.MozWebSocket;var NodeWebSocket;if(typeof window==='undefined'){try{NodeWebSocket=__webpack_require__(174);}catch(e){}}/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */var WebSocket=BrowserWebSocket;if(!WebSocket&&typeof window==='undefined'){WebSocket=NodeWebSocket;}/**
	 * Module exports.
	 */module.exports=WS;/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */function WS(opts){var forceBase64=opts&&opts.forceBase64;if(forceBase64){this.supportsBinary=false;}this.perMessageDeflate=opts.perMessageDeflate;this.usingBrowserWebSocket=BrowserWebSocket&&!opts.forceNode;if(!this.usingBrowserWebSocket){WebSocket=NodeWebSocket;}Transport.call(this,opts);}/**
	 * Inherits from Transport.
	 */inherit(WS,Transport);/**
	 * Transport name.
	 *
	 * @api public
	 */WS.prototype.name='websocket';/*
	 * WebSockets support binary
	 */WS.prototype.supportsBinary=true;/**
	 * Opens socket.
	 *
	 * @api private
	 */WS.prototype.doOpen=function(){if(!this.check()){// let probe timeout
return;}var uri=this.uri();var protocols=void 0;var opts={agent:this.agent,perMessageDeflate:this.perMessageDeflate};// SSL options for Node.js client
opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;if(this.extraHeaders){opts.headers=this.extraHeaders;}if(this.localAddress){opts.localAddress=this.localAddress;}try{this.ws=this.usingBrowserWebSocket?new WebSocket(uri):new WebSocket(uri,protocols,opts);}catch(err){return this.emit('error',err);}if(this.ws.binaryType===undefined){this.supportsBinary=false;}if(this.ws.supports&&this.ws.supports.binary){this.supportsBinary=true;this.ws.binaryType='nodebuffer';}else{this.ws.binaryType='arraybuffer';}this.addEventListeners();};/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */WS.prototype.addEventListeners=function(){var self=this;this.ws.onopen=function(){self.onOpen();};this.ws.onclose=function(){self.onClose();};this.ws.onmessage=function(ev){self.onData(ev.data);};this.ws.onerror=function(e){self.onError('websocket error',e);};};/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */WS.prototype.write=function(packets){var self=this;this.writable=false;// encodePacket efficient as it uses WS framing
// no need for encodePayload
var total=packets.length;for(var i=0,l=total;i<l;i++){(function(packet){parser.encodePacket(packet,self.supportsBinary,function(data){if(!self.usingBrowserWebSocket){// always create a new object (GH-437)
var opts={};if(packet.options){opts.compress=packet.options.compress;}if(self.perMessageDeflate){var len='string'===typeof data?global.Buffer.byteLength(data):data.length;if(len<self.perMessageDeflate.threshold){opts.compress=false;}}}// Sometimes the websocket has already been closed but the browser didn't
// have a chance of informing us about it yet, in that case send will
// throw an error
try{if(self.usingBrowserWebSocket){// TypeError is thrown when passing the second argument on Safari
self.ws.send(data);}else{self.ws.send(data,opts);}}catch(e){debug('websocket closed before onclose event');}--total||done();});})(packets[i]);}function done(){self.emit('flush');// fake drain
// defer to next tick to allow Socket to clear writeBuffer
setTimeout(function(){self.writable=true;self.emit('drain');},0);}};/**
	 * Called upon close
	 *
	 * @api private
	 */WS.prototype.onClose=function(){Transport.prototype.onClose.call(this);};/**
	 * Closes socket.
	 *
	 * @api private
	 */WS.prototype.doClose=function(){if(typeof this.ws!=='undefined'){this.ws.close();}};/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */WS.prototype.uri=function(){var query=this.query||{};var schema=this.secure?'wss':'ws';var port='';// avoid port if default for schema
if(this.port&&('wss'===schema&&Number(this.port)!==443||'ws'===schema&&Number(this.port)!==80)){port=':'+this.port;}// append timestamp to URI
if(this.timestampRequests){query[this.timestampParam]=yeast();}// communicate binary support capabilities
if(!this.supportsBinary){query.b64=1;}query=parseqs.encode(query);// prepend ? to query
if(query.length){query='?'+query;}var ipv6=this.hostname.indexOf(':')!==-1;return schema+'://'+(ipv6?'['+this.hostname+']':this.hostname)+port+this.path+query;};/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */WS.prototype.check=function(){return!!WebSocket&&!('__initialize'in WebSocket&&this.name===WS.prototype.name);};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 174 *//***/function(module,exports){/* (ignored) *//***/},/* 175 *//***/function(module,exports){var indexOf=[].indexOf;module.exports=function(arr,obj){if(indexOf)return arr.indexOf(obj);for(var i=0;i<arr.length;++i){if(arr[i]===obj)return i;}return-1;};/***/},/* 176 *//***/function(module,exports){/* WEBPACK VAR INJECTION */(function(global){/**
	 * JSON parse.
	 *
	 * @see Based on jQuery#parseJSON (MIT) and JSON2
	 * @api private
	 */var rvalidchars=/^[\],:{}\s]*$/;var rvalidescape=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;var rvalidbraces=/(?:^|:|,)(?:\s*\[)+/g;var rtrimLeft=/^\s+/;var rtrimRight=/\s+$/;module.exports=function parsejson(data){if('string'!=typeof data||!data){return null;}data=data.replace(rtrimLeft,'').replace(rtrimRight,'');// Attempt to parse using the native JSON parser first
if(global.JSON&&JSON.parse){return JSON.parse(data);}if(rvalidchars.test(data.replace(rvalidescape,'@').replace(rvalidtokens,']').replace(rvalidbraces,''))){return new Function('return '+data)();}};/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 177 *//***/function(module,exports,__webpack_require__){/**
	 * Module dependencies.
	 */var parser=__webpack_require__(146);var Emitter=__webpack_require__(178);var toArray=__webpack_require__(179);var on=__webpack_require__(180);var bind=__webpack_require__(181);var debug=__webpack_require__(144)('socket.io-client:socket');var hasBin=__webpack_require__(84);/**
	 * Module exports.
	 */module.exports=exports=Socket;/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1};/**
	 * Shortcut to `Emitter#emit`.
	 */var emit=Emitter.prototype.emit;/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */function Socket(io,nsp,opts){this.io=io;this.nsp=nsp;this.json=this;// compat
this.ids=0;this.acks={};this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;if(opts&&opts.query){this.query=opts.query;}if(this.io.autoConnect)this.open();}/**
	 * Mix in `Emitter`.
	 */Emitter(Socket.prototype);/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */Socket.prototype.subEvents=function(){if(this.subs)return;var io=this.io;this.subs=[on(io,'open',bind(this,'onopen')),on(io,'packet',bind(this,'onpacket')),on(io,'close',bind(this,'onclose'))];};/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected)return this;this.subEvents();this.io.open();// ensure open
if('open'===this.io.readyState)this.onopen();this.emit('connecting');return this;};/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.send=function(){var args=toArray(arguments);args.unshift('message');this.emit.apply(this,args);return this;};/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.emit=function(ev){if(events.hasOwnProperty(ev)){emit.apply(this,arguments);return this;}var args=toArray(arguments);var parserType=parser.EVENT;// default
if(hasBin(args)){parserType=parser.BINARY_EVENT;}// binary
var packet={type:parserType,data:args};packet.options={};packet.options.compress=!this.flags||false!==this.flags.compress;// event ack callback
if('function'===typeof args[args.length-1]){debug('emitting packet with ack id %d',this.ids);this.acks[this.ids]=args.pop();packet.id=this.ids++;}if(this.connected){this.packet(packet);}else{this.sendBuffer.push(packet);}delete this.flags;return this;};/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */Socket.prototype.packet=function(packet){packet.nsp=this.nsp;this.io.packet(packet);};/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */Socket.prototype.onopen=function(){debug('transport is open - connecting');// write connect packet if necessary
if('/'!==this.nsp){if(this.query){this.packet({type:parser.CONNECT,query:this.query});}else{this.packet({type:parser.CONNECT});}}};/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */Socket.prototype.onclose=function(reason){debug('close (%s)',reason);this.connected=false;this.disconnected=true;delete this.id;this.emit('disconnect',reason);};/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */Socket.prototype.onpacket=function(packet){if(packet.nsp!==this.nsp)return;switch(packet.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(packet);break;case parser.BINARY_EVENT:this.onevent(packet);break;case parser.ACK:this.onack(packet);break;case parser.BINARY_ACK:this.onack(packet);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit('error',packet.data);break;}};/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */Socket.prototype.onevent=function(packet){var args=packet.data||[];debug('emitting event %j',args);if(null!=packet.id){debug('attaching ack callback to event');args.push(this.ack(packet.id));}if(this.connected){emit.apply(this,args);}else{this.receiveBuffer.push(args);}};/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */Socket.prototype.ack=function(id){var self=this;var sent=false;return function(){// prevent double callbacks
if(sent)return;sent=true;var args=toArray(arguments);debug('sending ack %j',args);var type=hasBin(args)?parser.BINARY_ACK:parser.ACK;self.packet({type:type,id:id,data:args});};};/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */Socket.prototype.onack=function(packet){var ack=this.acks[packet.id];if('function'===typeof ack){debug('calling ack %s with %j',packet.id,packet.data);ack.apply(this,packet.data);delete this.acks[packet.id];}else{debug('bad ack %s',packet.id);}};/**
	 * Called upon server connect.
	 *
	 * @api private
	 */Socket.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit('connect');this.emitBuffered();};/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */Socket.prototype.emitBuffered=function(){var i;for(i=0;i<this.receiveBuffer.length;i++){emit.apply(this,this.receiveBuffer[i]);}this.receiveBuffer=[];for(i=0;i<this.sendBuffer.length;i++){this.packet(this.sendBuffer[i]);}this.sendBuffer=[];};/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */Socket.prototype.ondisconnect=function(){debug('server disconnect (%s)',this.nsp);this.destroy();this.onclose('io server disconnect');};/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */Socket.prototype.destroy=function(){if(this.subs){// clean subscriptions to avoid reconnections
for(var i=0;i<this.subs.length;i++){this.subs[i].destroy();}this.subs=null;}this.io.destroy(this);};/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.close=Socket.prototype.disconnect=function(){if(this.connected){debug('performing disconnect (%s)',this.nsp);this.packet({type:parser.DISCONNECT});}// remove socket from pool
this.destroy();if(this.connected){// fire events
this.onclose('io client disconnect');}return this;};/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.compress=function(compress){this.flags=this.flags||{};this.flags.compress=compress;return this;};/***/},/* 178 *//***/function(module,exports,__webpack_require__){/**
	 * Expose `Emitter`.
	 */if(true){module.exports=Emitter;}/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */function Emitter(obj){if(obj)return mixin(obj);};/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key];}return obj;}/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks['$'+event]=this._callbacks['$'+event]||[]).push(fn);return this;};/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.once=function(event,fn){function on(){this.off(event,on);fn.apply(this,arguments);}on.fn=fn;this.on(event,on);return this;};/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};// all
if(0==arguments.length){this._callbacks={};return this;}// specific event
var callbacks=this._callbacks['$'+event];if(!callbacks)return this;// remove all handlers
if(1==arguments.length){delete this._callbacks['$'+event];return this;}// remove specific handler
var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break;}}return this;};/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks['$'+event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args);}}return this;};/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks['$'+event]||[];};/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length;};/***/},/* 179 *//***/function(module,exports){module.exports=toArray;function toArray(list,index){var array=[];index=index||0;for(var i=index||0;i<list.length;i++){array[i-index]=list[i];}return array;}/***/},/* 180 *//***/function(module,exports){/**
	 * Module exports.
	 */module.exports=on;/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */function on(obj,ev,fn){obj.on(ev,fn);return{destroy:function destroy(){obj.removeListener(ev,fn);}};}/***/},/* 181 *//***/function(module,exports){/**
	 * Slice reference.
	 */var slice=[].slice;/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */module.exports=function(obj,fn){if('string'==typeof fn)fn=obj[fn];if('function'!=typeof fn)throw new Error('bind() requires a function');var args=slice.call(arguments,2);return function(){return fn.apply(obj,args.concat(slice.call(arguments)));};};/***/},/* 182 *//***/function(module,exports){/**
	 * Expose `Backoff`.
	 */module.exports=Backoff;/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */function Backoff(opts){opts=opts||{};this.ms=opts.min||100;this.max=opts.max||10000;this.factor=opts.factor||2;this.jitter=opts.jitter>0&&opts.jitter<=1?opts.jitter:0;this.attempts=0;}/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */Backoff.prototype.duration=function(){var ms=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var rand=Math.random();var deviation=Math.floor(rand*this.jitter*ms);ms=(Math.floor(rand*10)&1)==0?ms-deviation:ms+deviation;}return Math.min(ms,this.max)|0;};/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */Backoff.prototype.reset=function(){this.attempts=0;};/**
	 * Set the minimum duration
	 *
	 * @api public
	 */Backoff.prototype.setMin=function(min){this.ms=min;};/**
	 * Set the maximum duration
	 *
	 * @api public
	 */Backoff.prototype.setMax=function(max){this.max=max;};/**
	 * Set the jitter
	 *
	 * @api public
	 */Backoff.prototype.setJitter=function(jitter){this.jitter=jitter;};/***/},,/* 183 *//* 184 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * Module dependencies.
	 */var parser=__webpack_require__(146);var debug=__webpack_require__(185)('socket.io:client');var url=__webpack_require__(36);/**
	 * Module exports.
	 */module.exports=Client;/**
	 * Client constructor.
	 *
	 * @param {Server} server instance
	 * @param {Socket} conn
	 * @api private
	 */function Client(server,conn){this.server=server;this.conn=conn;this.encoder=new parser.Encoder();this.decoder=new parser.Decoder();this.id=conn.id;this.request=conn.request;this.setup();this.sockets={};this.nsps={};this.connectBuffer=[];}/**
	 * Sets up event listeners.
	 *
	 * @api private
	 */Client.prototype.setup=function(){this.onclose=this.onclose.bind(this);this.ondata=this.ondata.bind(this);this.onerror=this.onerror.bind(this);this.ondecoded=this.ondecoded.bind(this);this.decoder.on('decoded',this.ondecoded);this.conn.on('data',this.ondata);this.conn.on('error',this.onerror);this.conn.on('close',this.onclose);};/**
	 * Connects a client to a namespace.
	 *
	 * @param {String} name namespace
	 * @api private
	 */Client.prototype.connect=function(name,query){debug('connecting to namespace %s',name);var nsp=this.server.nsps[name];if(!nsp){this.packet({type:parser.ERROR,nsp:name,data:'Invalid namespace'});return;}if('/'!=name&&!this.nsps['/']){this.connectBuffer.push(name);return;}var self=this;var socket=nsp.add(this,query,function(){self.sockets[socket.id]=socket;self.nsps[nsp.name]=socket;if('/'==nsp.name&&self.connectBuffer.length>0){self.connectBuffer.forEach(self.connect,self);self.connectBuffer=[];}});};/**
	 * Disconnects from all namespaces and closes transport.
	 *
	 * @api private
	 */Client.prototype.disconnect=function(){for(var id in this.sockets){if(this.sockets.hasOwnProperty(id)){this.sockets[id].disconnect();}}this.sockets={};this.close();};/**
	 * Removes a socket. Called by each `Socket`.
	 *
	 * @api private
	 */Client.prototype.remove=function(socket){if(this.sockets.hasOwnProperty(socket.id)){var nsp=this.sockets[socket.id].nsp.name;delete this.sockets[socket.id];delete this.nsps[nsp];}else{debug('ignoring remove for %s',socket.id);}};/**
	 * Closes the underlying connection.
	 *
	 * @api private
	 */Client.prototype.close=function(){if('open'==this.conn.readyState){debug('forcing transport close');this.conn.close();this.onclose('forced server close');}};/**
	 * Writes a packet to the transport.
	 *
	 * @param {Object} packet object
	 * @param {Object} opts
	 * @api private
	 */Client.prototype.packet=function(packet,opts){opts=opts||{};var self=this;// this writes to the actual connection
function writeToEngine(encodedPackets){if(opts.volatile&&!self.conn.transport.writable)return;for(var i=0;i<encodedPackets.length;i++){self.conn.write(encodedPackets[i],{compress:opts.compress});}}if('open'==this.conn.readyState){debug('writing packet %j',packet);if(!opts.preEncoded){// not broadcasting, need to encode
this.encoder.encode(packet,function(encodedPackets){// encode, then write results to engine
writeToEngine(encodedPackets);});}else{// a broadcast pre-encodes a packet
writeToEngine(packet);}}else{debug('ignoring packet write %j',packet);}};/**
	 * Called with incoming transport data.
	 *
	 * @api private
	 */Client.prototype.ondata=function(data){// try/catch is needed for protocol violations (GH-1880)
try{this.decoder.add(data);}catch(e){this.onerror(e);}};/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */Client.prototype.ondecoded=function(packet){if(parser.CONNECT==packet.type){this.connect(url.parse(packet.nsp).pathname,url.parse(packet.nsp,true).query);}else{var socket=this.nsps[packet.nsp];if(socket){process.nextTick(function(){socket.onpacket(packet);});}else{debug('no socket for namespace %s',packet.nsp);}}};/**
	 * Handles an error.
	 *
	 * @param {Object} err object
	 * @api private
	 */Client.prototype.onerror=function(err){for(var id in this.sockets){if(this.sockets.hasOwnProperty(id)){this.sockets[id].onerror(err);}}this.onclose('client error');};/**
	 * Called upon transport close.
	 *
	 * @param {String} reason
	 * @api private
	 */Client.prototype.onclose=function(reason){debug('client close with reason %s',reason);// ignore a potential subsequent `close` event
this.destroy();// `nsps` and `sockets` are cleaned up seamlessly
for(var id in this.sockets){if(this.sockets.hasOwnProperty(id)){this.sockets[id].onclose(reason);}}this.sockets={};this.decoder.destroy();// clean up decoder
};/**
	 * Cleans up event listeners.
	 *
	 * @api private
	 */Client.prototype.destroy=function(){this.conn.removeListener('data',this.ondata);this.conn.removeListener('error',this.onerror);this.conn.removeListener('close',this.onclose);this.decoder.removeListener('decoded',this.ondecoded);};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 185 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=__webpack_require__(186);exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage='undefined'!=typeof chrome&&'undefined'!=typeof chrome.storage?chrome.storage.local:localstorage();/**
	 * Colors.
	 */exports.colors=['lightseagreen','forestgreen','goldenrod','dodgerblue','darkorchid','crimson'];/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */function useColors(){// is webkit? http://stackoverflow.com/a/16459606/376773
// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
return typeof document!=='undefined'&&'WebkitAppearance'in document.documentElement.style||// is firebug? http://stackoverflow.com/a/398120/376773
window.console&&(console.firebug||console.exception&&console.table)||// is firefox >= v31?
// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31;}/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */exports.formatters.j=function(v){try{return JSON.stringify(v);}catch(err){return'[UnexpectedJSONParseError]: '+err.message;}};/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?'%c':'')+this.namespace+(useColors?' %c':' ')+args[0]+(useColors?'%c ':' ')+'+'+exports.humanize(this.diff);if(!useColors)return args;var c='color: '+this.color;args=[args[0],c,'color: inherit'].concat(Array.prototype.slice.call(args,1));// the final "%c" is somewhat tricky, because there could be other
// arguments passed either before or after the %c, so we need to
// figure out the correct index to insert the CSS into
var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if('%%'===match)return;index++;if('%c'===match){// we only are interested in the *last* %c
// (the user may have provided their own)
lastC=index;}});args.splice(lastC,0,c);return args;}/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */function log(){// this hackery is required for IE8/9, where
// the `console.log` function doesn't have 'apply'
return'object'===(typeof console==="undefined"?"undefined":_typeof(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments);}/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */function save(namespaces){try{if(null==namespaces){exports.storage.removeItem('debug');}else{exports.storage.debug=namespaces;}}catch(e){}}/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */function load(){var r;try{return exports.storage.debug;}catch(e){}// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
if(typeof process!=='undefined'&&'env'in process){return process.env.DEBUG;}}/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */exports.enable(load());/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */function localstorage(){try{return window.localStorage;}catch(e){}}/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 186 *//***/function(module,exports,__webpack_require__){/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */exports=module.exports=debug.debug=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=__webpack_require__(93);/**
	 * The currently active debug mode names, and names to skip.
	 */exports.names=[];exports.skips=[];/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */exports.formatters={};/**
	 * Previously assigned color.
	 */var prevColor=0;/**
	 * Previous log timestamp.
	 */var prevTime;/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */function selectColor(){return exports.colors[prevColor++%exports.colors.length];}/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */function debug(namespace){// define the `disabled` version
function disabled(){}disabled.enabled=false;// define the `enabled` version
function enabled(){var self=enabled;// set `diff` timestamp
var curr=+new Date();var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;// add the `color` if not set
if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i];}args[0]=exports.coerce(args[0]);if('string'!==typeof args[0]){// anything else let's inspect with %o
args=['%o'].concat(args);}// apply any `formatters` transformations
var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){// if we encounter an escaped % then don't increase the array index
if(match==='%%')return match;index++;var formatter=exports.formatters[format];if('function'===typeof formatter){var val=args[index];match=formatter.call(self,val);// now we need to remove `args[index]` since it's inlined in the `format`
args.splice(index,1);index--;}return match;});// apply env-specific formatting
args=exports.formatArgs.apply(self,args);var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args);}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn;}/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */function enable(namespaces){exports.save(namespaces);var split=(namespaces||'').split(/[\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;// ignore empty strings
namespaces=split[i].replace(/[\\^$+?.()|[\]{}]/g,'\\$&').replace(/\*/g,'.*?');if(namespaces[0]==='-'){exports.skips.push(new RegExp('^'+namespaces.substr(1)+'$'));}else{exports.names.push(new RegExp('^'+namespaces+'$'));}}}/**
	 * Disable debug output.
	 *
	 * @api public
	 */function disable(){exports.enable('');}/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false;}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true;}}return false;}/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */function coerce(val){if(val instanceof Error)return val.stack||val.message;return val;}/***/},/* 187 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * Module dependencies.
	 */var Socket=__webpack_require__(188);var Emitter=__webpack_require__(14).EventEmitter;var parser=__webpack_require__(146);var debug=__webpack_require__(185)('socket.io:namespace');var hasBin=__webpack_require__(84);/**
	 * Module exports.
	 */module.exports=exports=Namespace;/**
	 * Blacklisted events.
	 */exports.events=['connect',// for symmetry with client
'connection','newListener'];/**
	 * Flags.
	 */exports.flags=['json','volatile','local'];/**
	 * `EventEmitter#emit` reference.
	 */var emit=Emitter.prototype.emit;/**
	 * Namespace constructor.
	 *
	 * @param {Server} server instance
	 * @param {Socket} name
	 * @api private
	 */function Namespace(server,name){this.name=name;this.server=server;this.sockets={};this.connected={};this.fns=[];this.ids=0;this.initAdapter();}/**
	 * Inherits from `EventEmitter`.
	 */Namespace.prototype.__proto__=Emitter.prototype;/**
	 * Apply flags from `Socket`.
	 */exports.flags.forEach(function(flag){Object.defineProperty(Namespace.prototype,flag,{get:function get(){this.flags=this.flags||{};this.flags[flag]=true;return this;}});});/**
	 * Initializes the `Adapter` for this nsp.
	 * Run upon changing adapter by `Server#adapter`
	 * in addition to the constructor.
	 *
	 * @api private
	 */Namespace.prototype.initAdapter=function(){this.adapter=new(this.server.adapter())(this);};/**
	 * Sets up namespace middleware.
	 *
	 * @return {Namespace} self
	 * @api public
	 */Namespace.prototype.use=function(fn){this.fns.push(fn);return this;};/**
	 * Executes the middleware for an incoming client.
	 *
	 * @param {Socket} socket that will get added
	 * @param {Function} fn last fn call in the middleware
	 * @api private
	 */Namespace.prototype.run=function(socket,fn){var fns=this.fns.slice(0);if(!fns.length)return fn(null);function run(i){fns[i](socket,function(err){// upon error, short-circuit
if(err)return fn(err);// if no middleware left, summon callback
if(!fns[i+1])return fn(null);// go on to next
run(i+1);});}run(0);};/**
	 * Targets a room when emitting.
	 *
	 * @param {String} name
	 * @return {Namespace} self
	 * @api public
	 */Namespace.prototype.to=Namespace.prototype.in=function(name){this.rooms=this.rooms||[];if(!~this.rooms.indexOf(name))this.rooms.push(name);return this;};/**
	 * Adds a new client.
	 *
	 * @return {Socket}
	 * @api private
	 */Namespace.prototype.add=function(client,query,fn){debug('adding socket to nsp %s',this.name);var socket=new Socket(this,client,query);var self=this;this.run(socket,function(err){process.nextTick(function(){if('open'==client.conn.readyState){if(err)return socket.error(err.data||err.message);// track socket
self.sockets[socket.id]=socket;// it's paramount that the internal `onconnect` logic
// fires before user-set events to prevent state order
// violations (such as a disconnection before the connection
// logic is complete)
socket.onconnect();if(fn)fn();// fire user-set events
self.emit('connect',socket);self.emit('connection',socket);}else{debug('next called after client was closed - ignoring socket');}});});return socket;};/**
	 * Removes a client. Called by each `Socket`.
	 *
	 * @api private
	 */Namespace.prototype.remove=function(socket){if(this.sockets.hasOwnProperty(socket.id)){delete this.sockets[socket.id];}else{debug('ignoring remove for %s',socket.id);}};/**
	 * Emits to all clients.
	 *
	 * @return {Namespace} self
	 * @api public
	 */Namespace.prototype.emit=function(ev){if(~exports.events.indexOf(ev)){emit.apply(this,arguments);}else{// set up packet object
var args=Array.prototype.slice.call(arguments);var parserType=parser.EVENT;// default
if(hasBin(args)){parserType=parser.BINARY_EVENT;}// binary
var packet={type:parserType,data:args};if('function'==typeof args[args.length-1]){throw new Error('Callbacks are not supported when broadcasting');}this.adapter.broadcast(packet,{rooms:this.rooms,flags:this.flags});delete this.rooms;delete this.flags;}return this;};/**
	 * Sends a `message` event to all clients.
	 *
	 * @return {Namespace} self
	 * @api public
	 */Namespace.prototype.send=Namespace.prototype.write=function(){var args=Array.prototype.slice.call(arguments);args.unshift('message');this.emit.apply(this,args);return this;};/**
	 * Gets a list of clients.
	 *
	 * @return {Namespace} self
	 * @api public
	 */Namespace.prototype.clients=function(fn){this.adapter.clients(this.rooms,fn);// delete rooms flag for scenario:
// .in('room').clients() (GH-1978)
delete this.rooms;return this;};/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} compress if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */Namespace.prototype.compress=function(compress){this.flags=this.flags||{};this.flags.compress=compress;return this;};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 188 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * Module dependencies.
	 */var Emitter=__webpack_require__(14).EventEmitter;var parser=__webpack_require__(146);var url=__webpack_require__(36);var debug=__webpack_require__(185)('socket.io:socket');var hasBin=__webpack_require__(84);var assign=__webpack_require__(189);/**
	 * Module exports.
	 */module.exports=exports=Socket;/**
	 * Blacklisted events.
	 *
	 * @api public
	 */exports.events=['error','connect','disconnect','disconnecting','newListener','removeListener'];/**
	 * Flags.
	 *
	 * @api private
	 */var flags=['json','volatile','broadcast'];/**
	 * `EventEmitter#emit` reference.
	 */var emit=Emitter.prototype.emit;/**
	 * Interface to a `Client` for a given `Namespace`.
	 *
	 * @param {Namespace} nsp
	 * @param {Client} client
	 * @api public
	 */function Socket(nsp,client,query){this.nsp=nsp;this.server=nsp.server;this.adapter=this.nsp.adapter;this.id=nsp.name!=='/'?nsp.name+'#'+client.id:client.id;this.client=client;this.conn=client.conn;this.rooms={};this.acks={};this.connected=true;this.disconnected=false;this.handshake=this.buildHandshake(query);this.fns=[];}/**
	 * Inherits from `EventEmitter`.
	 */Socket.prototype.__proto__=Emitter.prototype;/**
	 * Apply flags from `Socket`.
	 */flags.forEach(function(flag){Object.defineProperty(Socket.prototype,flag,{get:function get(){this.flags=this.flags||{};this.flags[flag]=true;return this;}});});/**
	 * `request` engine.io shortcut.
	 *
	 * @api public
	 */Object.defineProperty(Socket.prototype,'request',{get:function get(){return this.conn.request;}});/**
	 * Builds the `handshake` BC object
	 *
	 * @api private
	 */Socket.prototype.buildHandshake=function(query){var self=this;function buildQuery(){var requestQuery=url.parse(self.request.url,true).query;//if socket-specific query exist, replace query strings in requestQuery
return assign({},query,requestQuery);}return{headers:this.request.headers,time:new Date()+'',address:this.conn.remoteAddress,xdomain:!!this.request.headers.origin,secure:!!this.request.connection.encrypted,issued:+new Date(),url:this.request.url,query:buildQuery()};};/**
	 * Emits to this client.
	 *
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.emit=function(ev){if(~exports.events.indexOf(ev)){emit.apply(this,arguments);}else{var args=Array.prototype.slice.call(arguments);var packet={};packet.type=hasBin(args)?parser.BINARY_EVENT:parser.EVENT;packet.data=args;var flags=this.flags||{};// access last argument to see if it's an ACK callback
if('function'==typeof args[args.length-1]){if(this._rooms||flags.broadcast){throw new Error('Callbacks are not supported when broadcasting');}debug('emitting packet with ack id %d',this.nsp.ids);this.acks[this.nsp.ids]=args.pop();packet.id=this.nsp.ids++;}if(this._rooms||flags.broadcast){this.adapter.broadcast(packet,{except:[this.id],rooms:this._rooms,flags:flags});}else{// dispatch packet
this.packet(packet,{volatile:flags.volatile,compress:flags.compress});}// reset flags
delete this._rooms;delete this.flags;}return this;};/**
	 * Targets a room when broadcasting.
	 *
	 * @param {String} name
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.to=Socket.prototype.in=function(name){this._rooms=this._rooms||[];if(!~this._rooms.indexOf(name))this._rooms.push(name);return this;};/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.send=Socket.prototype.write=function(){var args=Array.prototype.slice.call(arguments);args.unshift('message');this.emit.apply(this,args);return this;};/**
	 * Writes a packet.
	 *
	 * @param {Object} packet object
	 * @param {Object} opts options
	 * @api private
	 */Socket.prototype.packet=function(packet,opts){packet.nsp=this.nsp.name;opts=opts||{};opts.compress=false!==opts.compress;this.client.packet(packet,opts);};/**
	 * Joins a room.
	 *
	 * @param {String} room
	 * @param {Function} fn optional, callback
	 * @return {Socket} self
	 * @api private
	 */Socket.prototype.join=function(room,fn){debug('joining room %s',room);var self=this;if(this.rooms.hasOwnProperty(room)){fn&&fn(null);return this;}this.adapter.add(this.id,room,function(err){if(err)return fn&&fn(err);debug('joined room %s',room);self.rooms[room]=room;fn&&fn(null);});return this;};/**
	 * Leaves a room.
	 *
	 * @param {String} room
	 * @param {Function} fn optional, callback
	 * @return {Socket} self
	 * @api private
	 */Socket.prototype.leave=function(room,fn){debug('leave room %s',room);var self=this;this.adapter.del(this.id,room,function(err){if(err)return fn&&fn(err);debug('left room %s',room);delete self.rooms[room];fn&&fn(null);});return this;};/**
	 * Leave all rooms.
	 *
	 * @api private
	 */Socket.prototype.leaveAll=function(){this.adapter.delAll(this.id);this.rooms={};};/**
	 * Called by `Namespace` upon successful
	 * middleware execution (ie: authorization).
	 * Socket is added to namespace array before
	 * call to join, so adapters can access it.
	 *
	 * @api private
	 */Socket.prototype.onconnect=function(){debug('socket connected - writing packet');this.nsp.connected[this.id]=this;this.join(this.id);this.packet({type:parser.CONNECT});};/**
	 * Called with each packet. Called by `Client`.
	 *
	 * @param {Object} packet
	 * @api private
	 */Socket.prototype.onpacket=function(packet){debug('got packet %j',packet);switch(packet.type){case parser.EVENT:this.onevent(packet);break;case parser.BINARY_EVENT:this.onevent(packet);break;case parser.ACK:this.onack(packet);break;case parser.BINARY_ACK:this.onack(packet);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit('error',packet.data);}};/**
	 * Called upon event packet.
	 *
	 * @param {Object} packet object
	 * @api private
	 */Socket.prototype.onevent=function(packet){var args=packet.data||[];debug('emitting event %j',args);if(null!=packet.id){debug('attaching ack callback to event');args.push(this.ack(packet.id));}this.dispatch(args);};/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @param {Number} id packet id
	 * @api private
	 */Socket.prototype.ack=function(id){var self=this;var sent=false;return function(){// prevent double callbacks
if(sent)return;var args=Array.prototype.slice.call(arguments);debug('sending ack %j',args);var type=hasBin(args)?parser.BINARY_ACK:parser.ACK;self.packet({id:id,type:type,data:args});sent=true;};};/**
	 * Called upon ack packet.
	 *
	 * @api private
	 */Socket.prototype.onack=function(packet){var ack=this.acks[packet.id];if('function'==typeof ack){debug('calling ack %s with %j',packet.id,packet.data);ack.apply(this,packet.data);delete this.acks[packet.id];}else{debug('bad ack %s',packet.id);}};/**
	 * Called upon client disconnect packet.
	 *
	 * @api private
	 */Socket.prototype.ondisconnect=function(){debug('got disconnect packet');this.onclose('client namespace disconnect');};/**
	 * Handles a client error.
	 *
	 * @api private
	 */Socket.prototype.onerror=function(err){if(this.listeners('error').length){this.emit('error',err);}else{console.error('Missing error handler on `socket`.');console.error(err.stack);}};/**
	 * Called upon closing. Called by `Client`.
	 *
	 * @param {String} reason
	 * @throw {Error} optional error object
	 * @api private
	 */Socket.prototype.onclose=function(reason){if(!this.connected)return this;debug('closing socket - reason %s',reason);this.emit('disconnecting',reason);this.leaveAll();this.nsp.remove(this);this.client.remove(this);this.connected=false;this.disconnected=true;delete this.nsp.connected[this.id];this.emit('disconnect',reason);};/**
	 * Produces an `error` packet.
	 *
	 * @param {Object} err error object
	 * @api private
	 */Socket.prototype.error=function(err){this.packet({type:parser.ERROR,data:err});};/**
	 * Disconnects this client.
	 *
	 * @param {Boolean} close if `true`, closes the underlying connection
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.disconnect=function(close){if(!this.connected)return this;if(close){this.client.disconnect();}else{this.packet({type:parser.DISCONNECT});this.onclose('server namespace disconnect');}return this;};/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} compress if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.compress=function(compress){this.flags=this.flags||{};this.flags.compress=compress;return this;};/**
	 * Dispatch incoming event to socket listeners.
	 *
	 * @param {Array} event that will get emitted
	 * @api private
	 */Socket.prototype.dispatch=function(event){debug('dispatching an event %j',event);var self=this;this.run(event,function(err){process.nextTick(function(){if(err){return self.error(err.data||err.message);}emit.apply(self,event);});});};/**
	 * Sets up socket middleware.
	 *
	 * @param {Function} middleware function (event, next)
	 * @return {Socket} self
	 * @api public
	 */Socket.prototype.use=function(fn){this.fns.push(fn);return this;};/**
	 * Executes the middleware for an incoming event.
	 *
	 * @param {Array} event that will get emitted
	 * @param {Function} last fn call in the middleware
	 * @api private
	 */Socket.prototype.run=function(event,fn){var fns=this.fns.slice(0);if(!fns.length)return fn(null);function run(i){fns[i](event,function(err){// upon error, short-circuit
if(err)return fn(err);// if no middleware left, summon callback
if(!fns[i+1])return fn(null);// go on to next
run(i+1);});}run(0);};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 189 *//***/function(module,exports){'use strict';/* eslint-disable no-unused-vars */var hasOwnProperty=Object.prototype.hasOwnProperty;var propIsEnumerable=Object.prototype.propertyIsEnumerable;function toObject(val){if(val===null||val===undefined){throw new TypeError('Object.assign cannot be called with null or undefined');}return Object(val);}function shouldUseNative(){try{if(!Object.assign){return false;}// Detect buggy property enumeration order in older V8 versions.
// https://bugs.chromium.org/p/v8/issues/detail?id=4118
var test1=new String('abc');// eslint-disable-line
test1[5]='de';if(Object.getOwnPropertyNames(test1)[0]==='5'){return false;}// https://bugs.chromium.org/p/v8/issues/detail?id=3056
var test2={};for(var i=0;i<10;i++){test2['_'+String.fromCharCode(i)]=i;}var order2=Object.getOwnPropertyNames(test2).map(function(n){return test2[n];});if(order2.join('')!=='0123456789'){return false;}// https://bugs.chromium.org/p/v8/issues/detail?id=3056
var test3={};'abcdefghijklmnopqrst'.split('').forEach(function(letter){test3[letter]=letter;});if(Object.keys(Object.assign({},test3)).join('')!=='abcdefghijklmnopqrst'){return false;}return true;}catch(e){// We don't expect any of the above to throw, but better to be safe.
return false;}}module.exports=shouldUseNative()?Object.assign:function(target,source){var from;var to=toObject(target);var symbols;for(var s=1;s<arguments.length;s++){from=Object(arguments[s]);for(var key in from){if(hasOwnProperty.call(from,key)){to[key]=from[key];}}if(Object.getOwnPropertySymbols){symbols=Object.getOwnPropertySymbols(from);for(var i=0;i<symbols.length;i++){if(propIsEnumerable.call(from,symbols[i])){to[symbols[i]]=from[symbols[i]];}}}}return to;};/***/},/* 190 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(process){/**
	 * Module dependencies.
	 */var Emitter=__webpack_require__(14).EventEmitter;var parser=__webpack_require__(146);/**
	 * Module exports.
	 */module.exports=Adapter;/**
	 * Memory adapter constructor.
	 *
	 * @param {Namespace} nsp
	 * @api public
	 */function Adapter(nsp){this.nsp=nsp;this.rooms={};this.sids={};this.encoder=new parser.Encoder();}/**
	 * Inherits from `EventEmitter`.
	 */Adapter.prototype.__proto__=Emitter.prototype;/**
	 * Adds a socket to a room.
	 *
	 * @param {String} socket id
	 * @param {String} room name
	 * @param {Function} callback
	 * @api public
	 */Adapter.prototype.add=function(id,room,fn){this.sids[id]=this.sids[id]||{};this.sids[id][room]=true;this.rooms[room]=this.rooms[room]||Room();this.rooms[room].add(id);if(fn)process.nextTick(fn.bind(null,null));};/**
	 * Removes a socket from a room.
	 *
	 * @param {String} socket id
	 * @param {String} room name
	 * @param {Function} callback
	 * @api public
	 */Adapter.prototype.del=function(id,room,fn){this.sids[id]=this.sids[id]||{};delete this.sids[id][room];if(this.rooms.hasOwnProperty(room)){this.rooms[room].del(id);if(this.rooms[room].length===0)delete this.rooms[room];}if(fn)process.nextTick(fn.bind(null,null));};/**
	 * Removes a socket from all rooms it's joined.
	 *
	 * @param {String} socket id
	 * @param {Function} callback
	 * @api public
	 */Adapter.prototype.delAll=function(id,fn){var rooms=this.sids[id];if(rooms){for(var room in rooms){if(this.rooms.hasOwnProperty(room)){this.rooms[room].del(id);if(this.rooms[room].length===0)delete this.rooms[room];}}}delete this.sids[id];if(fn)process.nextTick(fn.bind(null,null));};/**
	 * Broadcasts a packet.
	 *
	 * Options:
	 *  - `flags` {Object} flags for this packet
	 *  - `except` {Array} sids that should be excluded
	 *  - `rooms` {Array} list of rooms to broadcast to
	 *
	 * @param {Object} packet object
	 * @api public
	 */Adapter.prototype.broadcast=function(packet,opts){var rooms=opts.rooms||[];var except=opts.except||[];var flags=opts.flags||{};var packetOpts={preEncoded:true,volatile:flags.volatile,compress:flags.compress};var ids={};var self=this;var socket;packet.nsp=this.nsp.name;this.encoder.encode(packet,function(encodedPackets){if(rooms.length){for(var i=0;i<rooms.length;i++){var room=self.rooms[rooms[i]];if(!room)continue;var sockets=room.sockets;for(var id in sockets){if(sockets.hasOwnProperty(id)){if(ids[id]||~except.indexOf(id))continue;socket=self.nsp.connected[id];if(socket){socket.packet(encodedPackets,packetOpts);ids[id]=true;}}}}}else{for(var id in self.sids){if(self.sids.hasOwnProperty(id)){if(~except.indexOf(id))continue;socket=self.nsp.connected[id];if(socket)socket.packet(encodedPackets,packetOpts);}}}});};/**
	 * Gets a list of clients by sid.
	 *
	 * @param {Array} explicit set of rooms to check.
	 * @param {Function} callback
	 * @api public
	 */Adapter.prototype.clients=function(rooms,fn){if('function'==typeof rooms){fn=rooms;rooms=null;}rooms=rooms||[];var ids={};var self=this;var sids=[];var socket;if(rooms.length){for(var i=0;i<rooms.length;i++){var room=self.rooms[rooms[i]];if(!room)continue;var sockets=room.sockets;for(var id in sockets){if(sockets.hasOwnProperty(id)){if(ids[id])continue;socket=self.nsp.connected[id];if(socket){sids.push(id);ids[id]=true;}}}}}else{for(var id in self.sids){if(self.sids.hasOwnProperty(id)){socket=self.nsp.connected[id];if(socket)sids.push(id);}}}if(fn)process.nextTick(fn.bind(null,null,sids));};/**
	 * Gets the list of rooms a given client has joined.
	 *
	 * @param {String} socket id
	 * @param {Function} callback
	 * @api public
	 */Adapter.prototype.clientRooms=function(id,fn){var rooms=this.sids[id];if(fn)process.nextTick(fn.bind(null,null,rooms?Object.keys(rooms):null));};/**
	* Room constructor.
	*
	* @api private
	*/function Room(){if(!(this instanceof Room))return new Room();this.sockets={};this.length=0;}/**
	 * Adds a socket to a room.
	 *
	 * @param {String} socket id
	 * @api private
	 */Room.prototype.add=function(id){if(!this.sockets.hasOwnProperty(id)){this.sockets[id]=true;this.length++;}};/**
	 * Removes a socket from a room.
	 *
	 * @param {String} socket id
	 * @api private
	 */Room.prototype.del=function(id){if(this.sockets.hasOwnProperty(id)){delete this.sockets[id];this.length--;}};/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(8));/***/},/* 191 *//***/function(module,exports,__webpack_require__){!function(t,e){true?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==(typeof exports==="undefined"?"undefined":_typeof(exports))?exports.io=e():t.io=e();}(this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports;}var r={};return e.m=t,e.c=r,e.p="",e(0);}([function(t,e,r){"use strict";function n(t,e){"object"===("undefined"==typeof t?"undefined":i(t))&&(e=t,t=void 0),e=e||{};var r,n=s(t),a=n.source,p=n.id,f=n.path,l=h[p]&&f in h[p].nsps,d=e.forceNew||e["force new connection"]||!1===e.multiplex||l;return d?(u("ignoring socket cache for %s",a),r=c(a,e)):(h[p]||(u("new io instance for %s",a),h[p]=c(a,e)),r=h[p]),n.query&&!e.query?e.query=n.query:e&&"object"===i(e.query)&&(e.query=o(e.query)),r.socket(n.path,e);}function o(t){var e=[];for(var r in t){t.hasOwnProperty(r)&&e.push(encodeURIComponent(r)+"="+encodeURIComponent(t[r]));}return e.join("&");}var i="function"==typeof Symbol&&"symbol"==_typeof(Symbol.iterator)?function(t){return typeof t==="undefined"?"undefined":_typeof(t);}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t==="undefined"?"undefined":_typeof(t);},s=r(1),a=r(7),c=r(17),u=r(3)("socket.io-client");t.exports=e=n;var h=e.managers={};e.protocol=a.protocol,e.connect=n,e.Manager=r(17),e.Socket=r(44);},function(t,e,r){(function(e){"use strict";function n(t,r){var n=t;r=r||e.location,null==t&&(t=r.protocol+"//"+r.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?r.protocol+t:r.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t="undefined"!=typeof r?r.protocol+"//"+t:"https://"+t),i("parse %s",t),n=o(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";var s=n.host.indexOf(":")!==-1,a=s?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+a+":"+n.port,n.href=n.protocol+"://"+a+(r&&r.port===n.port?"":":"+n.port),n;}var o=r(2),i=r(3)("socket.io-client:url");t.exports=n;}).call(e,function(){return this;}());},function(t,e){var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");o!=-1&&i!=-1&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=r.exec(t||""),a={},c=14;c--;){a[n[c]]=s[c]||"";}return o!=-1&&i!=-1&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a;};},function(t,e,r){(function(n){function o(){return"undefined"!=typeof document&&"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31;}function i(){var t=arguments,r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return t;var n="color: "+this.color;t=[t[0],n,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o));}),t.splice(i,0,n),t;}function s(){return"object"==(typeof console==="undefined"?"undefined":_typeof(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments);}function a(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t;}catch(t){}}function c(){try{return e.storage.debug;}catch(t){}if("undefined"!=typeof n&&"env"in n)return n.env.DEBUG;}function u(){try{return window.localStorage;}catch(t){}}e=t.exports=r(5),e.log=s,e.formatArgs=i,e.save=a,e.load=c,e.useColors=o,e.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:u(),e.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],e.formatters.j=function(t){try{return JSON.stringify(t);}catch(t){return"[UnexpectedJSONParseError]: "+t.message;}},e.enable(c());}).call(e,r(4));},function(t,e){function r(){throw new Error("setTimeout has not been defined");}function n(){throw new Error("clearTimeout has not been defined");}function o(t){if(h===setTimeout)return setTimeout(t,0);if((h===r||!h)&&setTimeout)return h=setTimeout,setTimeout(t,0);try{return h(t,0);}catch(e){try{return h.call(null,t,0);}catch(e){return h.call(this,t,0);}}}function i(t){if(p===clearTimeout)return clearTimeout(t);if((p===n||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(t);try{return p(t);}catch(e){try{return p.call(null,t);}catch(e){return p.call(this,t);}}}function s(){y&&l&&(y=!1,l.length?d=l.concat(d):g=-1,d.length&&a());}function a(){if(!y){var t=o(s);y=!0;for(var e=d.length;e;){for(l=d,d=[];++g<e;){l&&l[g].run();}g=-1,e=d.length;}l=null,y=!1,i(t);}}function c(t,e){this.fun=t,this.array=e;}function u(){}var h,p,f=t.exports={};!function(){try{h="function"==typeof setTimeout?setTimeout:r;}catch(t){h=r;}try{p="function"==typeof clearTimeout?clearTimeout:n;}catch(t){p=n;}}();var l,d=[],y=!1,g=-1;f.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++){e[r-1]=arguments[r];}d.push(new c(t,e)),1!==d.length||y||o(a);},c.prototype.run=function(){this.fun.apply(null,this.array);},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.binding=function(t){throw new Error("process.binding is not supported");},f.cwd=function(){return"/";},f.chdir=function(t){throw new Error("process.chdir is not supported");},f.umask=function(){return 0;};},function(t,e,r){function n(){return e.colors[h++%e.colors.length];}function o(t){function r(){}function o(){var t=o,r=+new Date(),i=r-(u||r);t.diff=i,t.prev=u,t.curr=r,u=r,null==t.useColors&&(t.useColors=e.useColors()),null==t.color&&t.useColors&&(t.color=n());for(var s=new Array(arguments.length),a=0;a<s.length;a++){s[a]=arguments[a];}s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var c=0;s[0]=s[0].replace(/%([a-z%])/g,function(r,n){if("%%"===r)return r;c++;var o=e.formatters[n];if("function"==typeof o){var i=s[c];r=o.call(t,i),s.splice(c,1),c--;}return r;}),s=e.formatArgs.apply(t,s);var h=o.log||e.log||console.log.bind(console);h.apply(t,s);}r.enabled=!1,o.enabled=!0;var i=e.enabled(t)?o:r;return i.namespace=t,i;}function i(t){e.save(t);for(var r=(t||"").split(/[\s,]+/),n=r.length,o=0;o<n;o++){r[o]&&(t=r[o].replace(/[\\^$+?.()|[\]{}]/g,"\\$&").replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));}}function s(){e.enable("");}function a(t){var r,n;for(r=0,n=e.skips.length;r<n;r++){if(e.skips[r].test(t))return!1;}for(r=0,n=e.names.length;r<n;r++){if(e.names[r].test(t))return!0;}return!1;}function c(t){return t instanceof Error?t.stack||t.message:t;}e=t.exports=o.debug=o,e.coerce=c,e.disable=s,e.enable=i,e.enabled=a,e.humanize=r(6),e.names=[],e.skips=[],e.formatters={};var u,h=0;},function(t,e){function r(t){if(t=String(t),!(t.length>1e4)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var r=parseFloat(e[1]),n=(e[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return r*h;case"days":case"day":case"d":return r*u;case"hours":case"hour":case"hrs":case"hr":case"h":return r*c;case"minutes":case"minute":case"mins":case"min":case"m":return r*a;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return;}}}}function n(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms";}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms";}function i(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s";}var s=1e3,a=60*s,c=60*a,u=24*c,h=365.25*u;t.exports=function(t,e){e=e||{};var i=typeof t==="undefined"?"undefined":_typeof(t);if("string"===i&&t.length>0)return r(t);if("number"===i&&isNaN(t)===!1)return e.long?o(t):n(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t));};},function(t,e,r){function n(){}function o(t){var r="",n=!1;return r+=t.type,e.BINARY_EVENT!=t.type&&e.BINARY_ACK!=t.type||(r+=t.attachments,r+="-"),t.nsp&&"/"!=t.nsp&&(n=!0,r+=t.nsp),null!=t.id&&(n&&(r+=",",n=!1),r+=t.id),null!=t.data&&(n&&(r+=","),r+=f.stringify(t.data)),p("encoded %j as %s",t,r),r;}function i(t,e){function r(t){var r=d.deconstructPacket(t),n=o(r.packet),i=r.buffers;i.unshift(n),e(i);}d.removeBlobs(t,r);}function s(){this.reconstructor=null;}function a(t){var r={},n=0;if(r.type=Number(t.charAt(0)),null==e.types[r.type])return h();if(e.BINARY_EVENT==r.type||e.BINARY_ACK==r.type){for(var o="";"-"!=t.charAt(++n)&&(o+=t.charAt(n),n!=t.length);){}if(o!=Number(o)||"-"!=t.charAt(n))throw new Error("Illegal attachments");r.attachments=Number(o);}if("/"==t.charAt(n+1))for(r.nsp="";++n;){var i=t.charAt(n);if(","==i)break;if(r.nsp+=i,n==t.length)break;}else r.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(r.id="";++n;){var i=t.charAt(n);if(null==i||Number(i)!=i){--n;break;}if(r.id+=t.charAt(n),n==t.length)break;}r.id=Number(r.id);}return t.charAt(++n)&&(r=c(r,t.substr(n))),p("decoded %s as %j",t,r),r;}function c(t,e){try{t.data=f.parse(e);}catch(t){return h();}return t;}function u(t){this.reconPack=t,this.buffers=[];}function h(t){return{type:e.ERROR,data:"parser error"};}var p=r(8)("socket.io-parser"),f=r(11),l=r(13),d=r(14),y=r(16);e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=n,e.Decoder=s,n.prototype.encode=function(t,r){if(p("encoding packet %j",t),e.BINARY_EVENT==t.type||e.BINARY_ACK==t.type)i(t,r);else{var n=o(t);r([n]);}},l(s.prototype),s.prototype.add=function(t){var r;if("string"==typeof t)r=a(t),e.BINARY_EVENT==r.type||e.BINARY_ACK==r.type?(this.reconstructor=new u(r),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",r)):this.emit("decoded",r);else{if(!y(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");r=this.reconstructor.takeBinaryData(t),r&&(this.reconstructor=null,this.emit("decoded",r));}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction();},u.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length==this.reconPack.attachments){var e=d.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e;}return null;},u.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[];};},function(t,e,r){function n(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31;}function o(){var t=arguments,r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return t;var n="color: "+this.color;t=[t[0],n,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o));}),t.splice(i,0,n),t;}function i(){return"object"==(typeof console==="undefined"?"undefined":_typeof(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments);}function s(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t;}catch(t){}}function a(){var t;try{t=e.storage.debug;}catch(t){}return t;}function c(){try{return window.localStorage;}catch(t){}}e=t.exports=r(9),e.log=i,e.formatArgs=o,e.save=s,e.load=a,e.useColors=n,e.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:c(),e.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],e.formatters.j=function(t){return JSON.stringify(t);},e.enable(a());},function(t,e,r){function n(){return e.colors[h++%e.colors.length];}function o(t){function r(){}function o(){var t=o,r=+new Date(),i=r-(u||r);t.diff=i,t.prev=u,t.curr=r,u=r,null==t.useColors&&(t.useColors=e.useColors()),null==t.color&&t.useColors&&(t.color=n());var s=Array.prototype.slice.call(arguments);s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var a=0;s[0]=s[0].replace(/%([a-z%])/g,function(r,n){if("%%"===r)return r;a++;var o=e.formatters[n];if("function"==typeof o){var i=s[a];r=o.call(t,i),s.splice(a,1),a--;}return r;}),"function"==typeof e.formatArgs&&(s=e.formatArgs.apply(t,s));var c=o.log||e.log||console.log.bind(console);c.apply(t,s);}r.enabled=!1,o.enabled=!0;var i=e.enabled(t)?o:r;return i.namespace=t,i;}function i(t){e.save(t);for(var r=(t||"").split(/[\s,]+/),n=r.length,o=0;o<n;o++){r[o]&&(t=r[o].replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));}}function s(){e.enable("");}function a(t){var r,n;for(r=0,n=e.skips.length;r<n;r++){if(e.skips[r].test(t))return!1;}for(r=0,n=e.names.length;r<n;r++){if(e.names[r].test(t))return!0;}return!1;}function c(t){return t instanceof Error?t.stack||t.message:t;}e=t.exports=o,e.coerce=c,e.disable=s,e.enable=i,e.enabled=a,e.humanize=r(10),e.names=[],e.skips=[],e.formatters={};var u,h=0;},function(t,e){function r(t){if(t=""+t,!(t.length>1e4)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var r=parseFloat(e[1]),n=(e[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return r*h;case"days":case"day":case"d":return r*u;case"hours":case"hour":case"hrs":case"hr":case"h":return r*c;case"minutes":case"minute":case"mins":case"min":case"m":return r*a;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;}}}}function n(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms";}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms";}function i(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s";}var s=1e3,a=60*s,c=60*a,u=24*c,h=365.25*u;t.exports=function(t,e){return e=e||{},"string"==typeof t?r(t):e.long?o(t):n(t);};},function(t,e,r){(function(t,r){var n=!1;(function(){function o(t,e){function r(t){if(r[t]!==g)return r[t];var o;if("bug-string-char-index"==t)o="a"!="a"[0];else if("json"==t)o=r("json-stringify")&&r("json-parse");else{var s,a="{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";if("json-stringify"==t){var c=e.stringify,h="function"==typeof c&&b;if(h){(s=function s(){return 1;}).toJSON=s;try{h="0"===c(0)&&"0"===c(new n())&&'""'==c(new i())&&c(v)===g&&c(g)===g&&c()===g&&"1"===c(s)&&"[1]"==c([s])&&"[null]"==c([g])&&"null"==c(null)&&"[null,null,null]"==c([g,v,null])&&c({a:[s,!0,!1,null,"\0\b\n\f\r\t"]})==a&&"1"===c(null,s)&&"[\n 1,\n 2\n]"==c([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==c(new u(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==c(new u(864e13))&&'"-000001-01-01T00:00:00.000Z"'==c(new u(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==c(new u(-1));}catch(t){h=!1;}}o=h;}if("json-parse"==t){var p=e.parse;if("function"==typeof p)try{if(0===p("0")&&!p(!1)){s=p(a);var f=5==s.a.length&&1===s.a[0];if(f){try{f=!p('"\t"');}catch(t){}if(f)try{f=1!==p("01");}catch(t){}if(f)try{f=1!==p("1.");}catch(t){}}}}catch(t){f=!1;}o=f;}}return r[t]=!!o;}t||(t=c.Object()),e||(e=c.Object());var n=t.Number||c.Number,i=t.String||c.String,a=t.Object||c.Object,u=t.Date||c.Date,h=t.SyntaxError||c.SyntaxError,p=t.TypeError||c.TypeError,f=t.Math||c.Math,l=t.JSON||c.JSON;"object"==(typeof l==="undefined"?"undefined":_typeof(l))&&l&&(e.stringify=l.stringify,e.parse=l.parse);var _d2,_y,g,m=a.prototype,v=m.toString,b=new u(-0xc782b5b800cec);try{b=b.getUTCFullYear()==-109252&&0===b.getUTCMonth()&&1===b.getUTCDate()&&10==b.getUTCHours()&&37==b.getUTCMinutes()&&6==b.getUTCSeconds()&&708==b.getUTCMilliseconds();}catch(t){}if(!r("json")){var w="[object Function]",k="[object Date]",x="[object Number]",A="[object String]",C="[object Array]",B="[object Boolean]",S=r("bug-string-char-index");if(!b)var T=f.floor,E=[0,31,59,90,120,151,181,212,243,273,304,334],_=function _(t,e){return E[e]+365*(t-1970)+T((t-1969+(e=+(e>1)))/4)-T((t-1901+e)/100)+T((t-1601+e)/400);};if((_d2=m.hasOwnProperty)||(_d2=function d(t){var e,r={};return(r.__proto__=null,r.__proto__={toString:1},r).toString!=v?_d2=function d(t){var e=this.__proto__,r=t in(this.__proto__=null,this);return this.__proto__=e,r;}:(e=r.constructor,_d2=function d(t){var r=(this.constructor||e).prototype;return t in this&&!(t in r&&this[t]===r[t]);}),r=null,_d2.call(this,t);}),_y=function y(t,e){var r,n,o,i=0;(r=function r(){this.valueOf=0;}).prototype.valueOf=0,n=new r();for(o in n){_d2.call(n,o)&&i++;}return r=n=null,i?_y=2==i?function(t,e){var r,n={},o=v.call(t)==w;for(r in t){o&&"prototype"==r||_d2.call(n,r)||!(n[r]=1)||!_d2.call(t,r)||e(r);}}:function(t,e){var r,n,o=v.call(t)==w;for(r in t){o&&"prototype"==r||!_d2.call(t,r)||(n="constructor"===r)||e(r);}(n||_d2.call(t,r="constructor"))&&e(r);}:(n=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],_y=function y(t,e){var r,o,i=v.call(t)==w,a=!i&&"function"!=typeof t.constructor&&s[_typeof(t.hasOwnProperty)]&&t.hasOwnProperty||_d2;for(r in t){i&&"prototype"==r||!a.call(t,r)||e(r);}for(o=n.length;r=n[--o];a.call(t,r)&&e(r)){}}),_y(t,e);},!r("json-stringify")){var N={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},j="000000",O=function O(t,e){return(j+(e||0)).slice(-t);},P="\\u00",R=function R(t){for(var e='"',r=0,n=t.length,o=!S||n>10,i=o&&(S?t.split(""):t);r<n;r++){var s=t.charCodeAt(r);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:e+=N[s];break;default:if(s<32){e+=P+O(2,s.toString(16));break;}e+=o?i[r]:t.charAt(r);}}return e+'"';},D=function D(t,e,r,n,o,i,s){var a,c,u,h,f,l,m,b,w,S,E,N,j,P,q,U;try{a=e[t];}catch(t){}if("object"==(typeof a==="undefined"?"undefined":_typeof(a))&&a)if(c=v.call(a),c!=k||_d2.call(a,"toJSON"))"function"==typeof a.toJSON&&(c!=x&&c!=A&&c!=C||_d2.call(a,"toJSON"))&&(a=a.toJSON(t));else if(a>-1/0&&a<1/0){if(_){for(f=T(a/864e5),u=T(f/365.2425)+1970-1;_(u+1,0)<=f;u++){}for(h=T((f-_(u,0))/30.42);_(u,h+1)<=f;h++){}f=1+f-_(u,h),l=(a%864e5+864e5)%864e5,m=T(l/36e5)%24,b=T(l/6e4)%60,w=T(l/1e3)%60,S=l%1e3;}else u=a.getUTCFullYear(),h=a.getUTCMonth(),f=a.getUTCDate(),m=a.getUTCHours(),b=a.getUTCMinutes(),w=a.getUTCSeconds(),S=a.getUTCMilliseconds();a=(u<=0||u>=1e4?(u<0?"-":"+")+O(6,u<0?-u:u):O(4,u))+"-"+O(2,h+1)+"-"+O(2,f)+"T"+O(2,m)+":"+O(2,b)+":"+O(2,w)+"."+O(3,S)+"Z";}else a=null;if(r&&(a=r.call(e,t,a)),null===a)return"null";if(c=v.call(a),c==B)return""+a;if(c==x)return a>-1/0&&a<1/0?""+a:"null";if(c==A)return R(""+a);if("object"==(typeof a==="undefined"?"undefined":_typeof(a))){for(P=s.length;P--;){if(s[P]===a)throw p();}if(s.push(a),E=[],q=i,i+=o,c==C){for(j=0,P=a.length;j<P;j++){N=D(j,a,r,n,o,i,s),E.push(N===g?"null":N);}U=E.length?o?"[\n"+i+E.join(",\n"+i)+"\n"+q+"]":"["+E.join(",")+"]":"[]";}else _y(n||a,function(t){var e=D(t,a,r,n,o,i,s);e!==g&&E.push(R(t)+":"+(o?" ":"")+e);}),U=E.length?o?"{\n"+i+E.join(",\n"+i)+"\n"+q+"}":"{"+E.join(",")+"}":"{}";return s.pop(),U;}};e.stringify=function(t,e,r){var n,o,i,a;if(s[typeof e==="undefined"?"undefined":_typeof(e)]&&e)if((a=v.call(e))==w)o=e;else if(a==C){i={};for(var c,u=0,h=e.length;u<h;c=e[u++],a=v.call(c),(a==A||a==x)&&(i[c]=1)){}}if(r)if((a=v.call(r))==x){if((r-=r%1)>0)for(n="",r>10&&(r=10);n.length<r;n+=" "){}}else a==A&&(n=r.length<=10?r:r.slice(0,10));return D("",(c={},c[""]=t,c),o,i,n,"",[]);};}if(!r("json-parse")){var q,U,M=i.fromCharCode,L={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},I=function I(){throw q=U=null,h();},H=function H(){for(var t,e,r,n,o,i=U,s=i.length;q<s;){switch(o=i.charCodeAt(q)){case 9:case 10:case 13:case 32:q++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=S?i.charAt(q):i[q],q++,t;case 34:for(t="@",q++;q<s;){if(o=i.charCodeAt(q),o<32)I();else if(92==o)switch(o=i.charCodeAt(++q)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=L[o],q++;break;case 117:for(e=++q,r=q+4;q<r;q++){o=i.charCodeAt(q),o>=48&&o<=57||o>=97&&o<=102||o>=65&&o<=70||I();}t+=M("0x"+i.slice(e,q));break;default:I();}else{if(34==o)break;for(o=i.charCodeAt(q),e=q;o>=32&&92!=o&&34!=o;){o=i.charCodeAt(++q);}t+=i.slice(e,q);}}if(34==i.charCodeAt(q))return q++,t;I();default:if(e=q,45==o&&(n=!0,o=i.charCodeAt(++q)),o>=48&&o<=57){for(48==o&&(o=i.charCodeAt(q+1),o>=48&&o<=57)&&I(),n=!1;q<s&&(o=i.charCodeAt(q),o>=48&&o<=57);q++){}if(46==i.charCodeAt(q)){for(r=++q;r<s&&(o=i.charCodeAt(r),o>=48&&o<=57);r++){}r==q&&I(),q=r;}if(o=i.charCodeAt(q),101==o||69==o){for(o=i.charCodeAt(++q),43!=o&&45!=o||q++,r=q;r<s&&(o=i.charCodeAt(r),o>=48&&o<=57);r++){}r==q&&I(),q=r;}return+i.slice(e,q);}if(n&&I(),"true"==i.slice(q,q+4))return q+=4,!0;if("false"==i.slice(q,q+5))return q+=5,!1;if("null"==i.slice(q,q+4))return q+=4,null;I();}}return"$";},z=function z(t){var e,r;if("$"==t&&I(),"string"==typeof t){if("@"==(S?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];t=H(),"]"!=t;r||(r=!0)){r&&(","==t?(t=H(),"]"==t&&I()):I()),","==t&&I(),e.push(z(t));}return e;}if("{"==t){for(e={};t=H(),"}"!=t;r||(r=!0)){r&&(","==t?(t=H(),"}"==t&&I()):I()),","!=t&&"string"==typeof t&&"@"==(S?t.charAt(0):t[0])&&":"==H()||I(),e[t.slice(1)]=z(H());}return e;}I();}return t;},J=function J(t,e,r){var n=X(t,e,r);n===g?delete t[e]:t[e]=n;},X=function X(t,e,r){var n,o=t[e];if("object"==(typeof o==="undefined"?"undefined":_typeof(o))&&o)if(v.call(o)==C)for(n=o.length;n--;){J(o,n,r);}else _y(o,function(t){J(o,t,r);});return r.call(t,e,o);};e.parse=function(t,e){var r,n;return q=0,U=""+t,r=z(H()),"$"!=H()&&I(),q=U=null,e&&v.call(e)==w?X((n={},n[""]=r,n),"",e):r;};}}return e.runInContext=o,e;}var i="function"==typeof n&&n.amd,s={function:!0,object:!0},a=s[typeof e==="undefined"?"undefined":_typeof(e)]&&e&&!e.nodeType&&e,c=s[typeof window==="undefined"?"undefined":_typeof(window)]&&window||this,u=a&&s[typeof t==="undefined"?"undefined":_typeof(t)]&&t&&!t.nodeType&&"object"==(typeof r==="undefined"?"undefined":_typeof(r))&&r;if(!u||u.global!==u&&u.window!==u&&u.self!==u||(c=u),a&&!i)o(c,a);else{var h=c.JSON,p=c.JSON3,f=!1,l=o(c,c.JSON3={noConflict:function noConflict(){return f||(f=!0,c.JSON=h,c.JSON3=p,h=p=null),l;}});c.JSON={parse:l.parse,stringify:l.stringify};}i&&n(function(){return l;});}).call(this);}).call(e,r(12)(t),function(){return this;}());},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t;};},function(t,e){function r(t){if(t)return n(t);}function n(t){for(var e in r.prototype){t[e]=r.prototype[e];}return t;}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[t]=this._callbacks[t]||[]).push(e),this;},r.prototype.once=function(t,e){function r(){n.off(t,r),e.apply(this,arguments);}var n=this;return this._callbacks=this._callbacks||{},r.fn=e,this.on(t,r),this;},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r=this._callbacks[t];if(!r)return this;if(1==arguments.length)return delete this._callbacks[t],this;for(var n,o=0;o<r.length;o++){if(n=r[o],n===e||n.fn===e){r.splice(o,1);break;}}return this;},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks[t];if(r){r=r.slice(0);for(var n=0,o=r.length;n<o;++n){r[n].apply(this,e);}}return this;},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[t]||[];},r.prototype.hasListeners=function(t){return!!this.listeners(t).length;};},function(t,e,r){(function(t){var n=r(15),o=r(16);e.deconstructPacket=function(t){function e(t){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:r.length};return r.push(t),i;}if(n(t)){for(var s=new Array(t.length),a=0;a<t.length;a++){s[a]=e(t[a]);}return s;}if("object"==(typeof t==="undefined"?"undefined":_typeof(t))&&!(t instanceof Date)){var s={};for(var c in t){s[c]=e(t[c]);}return s;}return t;}var r=[],i=t.data,s=t;return s.data=e(i),s.attachments=r.length,{packet:s,buffers:r};},e.reconstructPacket=function(t,e){function r(t){if(t&&t._placeholder){var o=e[t.num];return o;}if(n(t)){for(var i=0;i<t.length;i++){t[i]=r(t[i]);}return t;}if(t&&"object"==(typeof t==="undefined"?"undefined":_typeof(t))){for(var s in t){t[s]=r(t[s]);}return t;}return t;}return t.data=r(t.data),t.attachments=void 0,t;},e.removeBlobs=function(e,r){function i(e,c,u){if(!e)return e;if(t.Blob&&e instanceof Blob||t.File&&e instanceof File){s++;var h=new FileReader();h.onload=function(){u?u[c]=this.result:a=this.result,--s||r(a);},h.readAsArrayBuffer(e);}else if(n(e))for(var p=0;p<e.length;p++){i(e[p],p,e);}else if(e&&"object"==(typeof e==="undefined"?"undefined":_typeof(e))&&!o(e))for(var f in e){i(e[f],f,e);}}var s=0,a=e;i(a),s||r(a);};}).call(e,function(){return this;}());},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t);};},function(t,e){(function(e){function r(t){return e.Buffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer;}t.exports=r;}).call(e,function(){return this;}());},function(t,e,r){"use strict";function n(t,e){return this instanceof n?(t&&"object"===("undefined"==typeof t?"undefined":o(t))&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new l({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[],this.encoder=new c.Encoder(),this.decoder=new c.Decoder(),this.autoConnect=e.autoConnect!==!1,void(this.autoConnect&&this.open())):new n(t,e);}var o="function"==typeof Symbol&&"symbol"==_typeof(Symbol.iterator)?function(t){return typeof t==="undefined"?"undefined":_typeof(t);}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t==="undefined"?"undefined":_typeof(t);},i=r(18),s=r(44),a=r(35),c=r(7),u=r(46),h=r(47),p=r(3)("socket.io-client:manager"),f=r(42),l=r(48),d=Object.prototype.hasOwnProperty;t.exports=n,n.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps){d.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments);}},n.prototype.updateSocketIds=function(){for(var t in this.nsps){d.call(this.nsps,t)&&(this.nsps[t].id=this.engine.id);}},a(n.prototype),n.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection;},n.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts;},n.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay;},n.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor;},n.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax;},n.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout;},n.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect();},n.prototype.open=n.prototype.connect=function(t,e){if(p("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=i(this.uri,this.opts);var r=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var o=u(r,"open",function(){n.onopen(),t&&t();}),s=u(r,"error",function(e){if(p("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r);}else n.maybeReconnectOnOpen();});if(!1!==this._timeout){var a=this._timeout;p("connect attempt will timeout after %d",a);var c=setTimeout(function(){p("connect attempt timed out after %d",a),o.destroy(),r.close(),r.emit("error","timeout"),n.emitAll("connect_timeout",a);},a);this.subs.push({destroy:function destroy(){clearTimeout(c);}});}return this.subs.push(o),this.subs.push(s),this;},n.prototype.onopen=function(){p("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(u(t,"data",h(this,"ondata"))),this.subs.push(u(t,"ping",h(this,"onping"))),this.subs.push(u(t,"pong",h(this,"onpong"))),this.subs.push(u(t,"error",h(this,"onerror"))),this.subs.push(u(t,"close",h(this,"onclose"))),this.subs.push(u(this.decoder,"decoded",h(this,"ondecoded")));},n.prototype.onping=function(){this.lastPing=new Date(),this.emitAll("ping");},n.prototype.onpong=function(){this.emitAll("pong",new Date()-this.lastPing);},n.prototype.ondata=function(t){this.decoder.add(t);},n.prototype.ondecoded=function(t){this.emit("packet",t);},n.prototype.onerror=function(t){p("error",t),this.emitAll("error",t);},n.prototype.socket=function(t,e){function r(){~f(o.connecting,n)||o.connecting.push(n);}var n=this.nsps[t];if(!n){n=new s(this,t,e),this.nsps[t]=n;var o=this;n.on("connecting",r),n.on("connect",function(){n.id=o.engine.id;}),this.autoConnect&&r();}return n;},n.prototype.destroy=function(t){var e=f(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close();},n.prototype.packet=function(t){p("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(r){for(var n=0;n<r.length;n++){e.engine.write(r[n],t.options);}e.encoding=!1,e.processPacketQueue();}));},n.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t);}},n.prototype.cleanup=function(){p("cleanup");for(var t=this.subs.length,e=0;e<t;e++){var r=this.subs.shift();r.destroy();}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy();},n.prototype.close=n.prototype.disconnect=function(){p("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close();},n.prototype.onclose=function(t){p("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect();},n.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();p("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout(function(){t.skipReconnect||(p("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(p("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(p("reconnect success"),t.onreconnect());}));},e);this.subs.push({destroy:function destroy(){clearTimeout(r);}});}},n.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t);};},function(t,e,r){t.exports=r(19);},function(t,e,r){t.exports=r(20),t.exports.parser=r(27);},function(t,e,r){(function(e){function n(t,r){if(!(this instanceof n))return new n(t,r);r=r||{},t&&"object"==(typeof t==="undefined"?"undefined":_typeof(t))&&(r=t,t=null),t?(t=h(t),r.hostname=t.host,r.secure="https"===t.protocol||"wss"===t.protocol,r.port=t.port,t.query&&(r.query=t.query)):r.host&&(r.hostname=h(r.host).host),this.secure=null!=r.secure?r.secure:e.location&&"https:"===location.protocol,r.hostname&&!r.port&&(r.port=this.secure?"443":"80"),this.agent=r.agent||!1,this.hostname=r.hostname||(e.location?location.hostname:"localhost"),this.port=r.port||(e.location&&location.port?location.port:this.secure?443:80),this.query=r.query||{},"string"==typeof this.query&&(this.query=f.decode(this.query)),this.upgrade=!1!==r.upgrade,this.path=(r.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!r.forceJSONP,this.jsonp=!1!==r.jsonp,this.forceBase64=!!r.forceBase64,this.enablesXDR=!!r.enablesXDR,this.timestampParam=r.timestampParam||"t",this.timestampRequests=r.timestampRequests,this.transports=r.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=r.policyPort||843,this.rememberUpgrade=r.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=r.onlyBinaryUpgrades,this.perMessageDeflate=!1!==r.perMessageDeflate&&(r.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=r.pfx||null,this.key=r.key||null,this.passphrase=r.passphrase||null,this.cert=r.cert||null,this.ca=r.ca||null,this.ciphers=r.ciphers||null,this.rejectUnauthorized=void 0===r.rejectUnauthorized?null:r.rejectUnauthorized,this.forceNode=!!r.forceNode;var o="object"==(typeof e==="undefined"?"undefined":_typeof(e))&&e;o.global===o&&(r.extraHeaders&&Object.keys(r.extraHeaders).length>0&&(this.extraHeaders=r.extraHeaders),r.localAddress&&(this.localAddress=r.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open();}function o(t){var e={};for(var r in t){t.hasOwnProperty(r)&&(e[r]=t[r]);}return e;}var i=r(21),s=r(35),a=r(3)("engine.io-client:socket"),c=r(42),u=r(27),h=r(2),p=r(43),f=r(36);t.exports=n,n.priorWebsocketSuccess=!1,s(n.prototype),n.protocol=u.protocol,n.Socket=n,n.Transport=r(26),n.transports=r(21),n.parser=r(27),n.prototype.createTransport=function(t){a('creating transport "%s"',t);var e=o(this.query);e.EIO=u.protocol,e.transport=t,this.id&&(e.sid=this.id);var r=new i[t]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:e,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders,forceNode:this.forceNode,localAddress:this.localAddress});return r;},n.prototype.open=function(){var t;if(this.rememberUpgrade&&n.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available");},0);}t=this.transports[0];}this.readyState="opening";try{t=this.createTransport(t);}catch(t){return this.transports.shift(),void this.open();}t.open(),this.setTransport(t);},n.prototype.setTransport=function(t){a("setting transport %s",t.name);var e=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain();}).on("packet",function(t){e.onPacket(t);}).on("error",function(t){e.onError(t);}).on("close",function(){e.onClose("transport close");});},n.prototype.probe=function(t){function e(){if(f.onlyBinaryUpgrades){var e=!this.supportsBinary&&f.transport.supportsBinary;p=p||e;}p||(a('probe transport "%s" opened',t),h.send([{type:"ping",data:"probe"}]),h.once("packet",function(e){if(!p)if("pong"===e.type&&"probe"===e.data){if(a('probe transport "%s" pong',t),f.upgrading=!0,f.emit("upgrading",h),!h)return;n.priorWebsocketSuccess="websocket"===h.name,a('pausing current transport "%s"',f.transport.name),f.transport.pause(function(){p||"closed"!==f.readyState&&(a("changing transport and sending upgrade packet"),u(),f.setTransport(h),h.send([{type:"upgrade"}]),f.emit("upgrade",h),h=null,f.upgrading=!1,f.flush());});}else{a('probe transport "%s" failed',t);var r=new Error("probe error");r.transport=h.name,f.emit("upgradeError",r);}}));}function r(){p||(p=!0,u(),h.close(),h=null);}function o(e){var n=new Error("probe error: "+e);n.transport=h.name,r(),a('probe transport "%s" failed because of error: %s',t,e),f.emit("upgradeError",n);}function i(){o("transport closed");}function s(){o("socket closed");}function c(t){h&&t.name!==h.name&&(a('"%s" works - aborting "%s"',t.name,h.name),r());}function u(){h.removeListener("open",e),h.removeListener("error",o),h.removeListener("close",i),f.removeListener("close",s),f.removeListener("upgrading",c);}a('probing transport "%s"',t);var h=this.createTransport(t,{probe:1}),p=!1,f=this;n.priorWebsocketSuccess=!1,h.once("open",e),h.once("error",o),h.once("close",i),this.once("close",s),this.once("upgrading",c),h.open();},n.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",n.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++){this.probe(this.upgrades[t]);}}},n.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(p(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data);}else a('packet received with socket readyState "%s"',this.readyState);},n.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat));},n.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout");},t||e.pingInterval+e.pingTimeout);},n.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout);},t.pingInterval);},n.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping");});},n.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush();},n.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"));},n.prototype.write=n.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this;},n.prototype.sendPacket=function(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){r=r||{},r.compress=!1!==r.compress;var o={type:t,data:e,options:r};this.emit("packetCreate",o),this.writeBuffer.push(o),n&&this.once("flush",n),this.flush();}},n.prototype.close=function(){function t(){n.onClose("forced close"),a("socket closing - telling transport to close"),n.transport.close();}function e(){n.removeListener("upgrade",e),n.removeListener("upgradeError",e),t();}function r(){n.once("upgrade",e),n.once("upgradeError",e);}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var n=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t();}):this.upgrading?r():t();}return this;},n.prototype.onError=function(t){a("socket error %j",t),n.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t);},n.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',t);var r=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),r.writeBuffer=[],r.prevBufferLen=0;}},n.prototype.filterUpgrades=function(t){for(var e=[],r=0,n=t.length;r<n;r++){~c(this.transports,t[r])&&e.push(t[r]);}return e;};}).call(e,function(){return this;}());},function(t,e,r){(function(t){function n(e){var r,n=!1,a=!1,c=!1!==e.jsonp;if(t.location){var u="https:"===location.protocol,h=location.port;h||(h=u?443:80),n=e.hostname!==location.hostname||h!==e.port,a=e.secure!==u;}if(e.xdomain=n,e.xscheme=a,r=new o(e),"open"in r&&!e.forceJSONP)return new i(e);if(!c)throw new Error("JSONP disabled");return new s(e);}var o=r(22),i=r(24),s=r(39),a=r(40);e.polling=n,e.websocket=a;}).call(e,function(){return this;}());},function(t,e,r){(function(e){var n=r(23);t.exports=function(t){var r=t.xdomain,o=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!r||n))return new XMLHttpRequest();}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest();}catch(t){}if(!r)try{return new e[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");}catch(t){}};}).call(e,function(){return this;}());},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest();}catch(e){t.exports=!1;}},function(t,e,r){(function(e){function n(){}function o(t){if(c.call(this,t),this.requestTimeout=t.requestTimeout,e.location){var r="https:"===location.protocol,n=location.port;n||(n=r?443:80),this.xd=t.hostname!==e.location.hostname||n!==t.port,this.xs=t.secure!==r;}else this.extraHeaders=t.extraHeaders;}function i(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create();}function s(){for(var t in i.requests){i.requests.hasOwnProperty(t)&&i.requests[t].abort();}}var a=r(22),c=r(25),u=r(35),h=r(37),p=r(3)("engine.io-client:polling-xhr");t.exports=o,t.exports.Request=i,h(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new i(t);},o.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,n=this.request({method:"POST",data:t,isBinary:r}),o=this;n.on("success",e),n.on("error",function(t){o.onError("xhr post error",t);}),this.sendXhr=n;},o.prototype.doPoll=function(){p("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t);}),t.on("error",function(t){e.onError("xhr poll error",t);}),this.pollXhr=t;},u(i.prototype),i.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var r=this.xhr=new a(t),n=this;try{p("xhr open %s: %s",this.method,this.uri),r.open(this.method,this.uri,this.async);try{if(this.extraHeaders){r.setDisableHeaderCheck(!0);for(var o in this.extraHeaders){this.extraHeaders.hasOwnProperty(o)&&r.setRequestHeader(o,this.extraHeaders[o]);}}}catch(t){}if(this.supportsBinary&&(r.responseType="arraybuffer"),"POST"===this.method)try{this.isBinary?r.setRequestHeader("Content-type","application/octet-stream"):r.setRequestHeader("Content-type","text/plain;charset=UTF-8");}catch(t){}try{r.setRequestHeader("Accept","*/*");}catch(t){}"withCredentials"in r&&(r.withCredentials=!0),this.requestTimeout&&(r.timeout=this.requestTimeout),this.hasXDR()?(r.onload=function(){n.onLoad();},r.onerror=function(){n.onError(r.responseText);}):r.onreadystatechange=function(){4===r.readyState&&(200===r.status||1223===r.status?n.onLoad():setTimeout(function(){n.onError(r.status);},0));},p("xhr data %s",this.data),r.send(this.data);}catch(t){return void setTimeout(function(){n.onError(t);},0);}e.document&&(this.index=i.requestsCount++,i.requests[this.index]=this);},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup();},i.prototype.onData=function(t){this.emit("data",t),this.onSuccess();},i.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0);},i.prototype.cleanup=function(t){if("undefined"!=typeof this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=n:this.xhr.onreadystatechange=n,t)try{this.xhr.abort();}catch(t){}e.document&&delete i.requests[this.index],this.xhr=null;}},i.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type").split(";")[0];}catch(t){}if("application/octet-stream"===e)t=this.xhr.response||this.xhr.responseText;else if(this.supportsBinary)try{t=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response));}catch(e){for(var r=new Uint8Array(this.xhr.response),n=[],o=0,i=r.length;o<i;o++){n.push(r[o]);}t=String.fromCharCode.apply(null,n);}else t=this.xhr.responseText;}catch(t){this.onError(t);}null!=t&&this.onData(t);},i.prototype.hasXDR=function(){return"undefined"!=typeof e.XDomainRequest&&!this.xs&&this.enablesXDR;},i.prototype.abort=function(){this.cleanup();},i.requestsCount=0,i.requests={},e.document&&(e.attachEvent?e.attachEvent("onunload",s):e.addEventListener&&e.addEventListener("beforeunload",s,!1));}).call(e,function(){return this;}());},function(t,e,r){function n(t){var e=t&&t.forceBase64;h&&!e||(this.supportsBinary=!1),o.call(this,t);}var o=r(26),i=r(36),s=r(27),a=r(37),c=r(38),u=r(3)("engine.io-client:polling");t.exports=n;var h=function(){var t=r(22),e=new t({xdomain:!1});return null!=e.responseType;}();a(n,o),n.prototype.name="polling",n.prototype.doOpen=function(){this.poll();},n.prototype.pause=function(t){function e(){u("paused"),r.readyState="paused",t();}var r=this;if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(u("we are currently polling - waiting to pause"),n++,this.once("pollComplete",function(){u("pre-pause polling complete"),--n||e();})),this.writable||(u("we are currently writing - waiting to pause"),n++,this.once("drain",function(){u("pre-pause writing complete"),--n||e();}));}else e();},n.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll");},n.prototype.onData=function(t){var e=this;u("polling got data %s",t);var r=function r(t,_r,n){return"opening"===e.readyState&&e.onOpen(),"close"===t.type?(e.onClose(),!1):void e.onPacket(t);};s.decodePayload(t,this.socket.binaryType,r),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState));},n.prototype.doClose=function(){function t(){u("writing close packet"),e.write([{type:"close"}]);}var e=this;"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t));},n.prototype.write=function(t){var e=this;this.writable=!1;var r=function r(){e.writable=!0,e.emit("drain");};s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,r);});},n.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";!1!==this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t);var n=this.hostname.indexOf(":")!==-1;return e+"://"+(n?"["+this.hostname+"]":this.hostname)+r+this.path+t;};},function(t,e,r){function n(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress;}var o=r(27),i=r(35);t.exports=n,i(n.prototype),n.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this;},n.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this;},n.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this;},n.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t);},n.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open");},n.prototype.onData=function(t){var e=o.decodePacket(t,this.socket.binaryType);this.onPacket(e);},n.prototype.onPacket=function(t){this.emit("packet",t);},n.prototype.onClose=function(){this.readyState="closed",this.emit("close");};},function(t,e,r){(function(t){function n(t,r){var n="b"+e.packets[t.type]+t.data.data;return r(n);}function o(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=v[t.type];for(var a=0;a<i.length;a++){s[a+1]=i[a];}return n(s.buffer);}function i(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=new FileReader();return o.onload=function(){t.data=o.result,e.encodePacket(t,r,!0,n);},o.readAsArrayBuffer(t.data);}function s(t,r,n){if(!r)return e.encodeBase64Packet(t,n);if(m)return i(t,r,n);var o=new Uint8Array(1);o[0]=v[t.type];var s=new k([o.buffer,t.data]);return n(s);}function a(t){try{t=d.decode(t);}catch(t){return!1;}return t;}function c(t,e,r){for(var n=new Array(t.length),o=l(t.length,r),i=function i(t,r,o){e(r,function(e,r){n[t]=r,o(e,n);});},s=0;s<t.length;s++){i(s,t[s],o);}}var u,h=r(28),p=r(29),f=r(30),l=r(31),d=r(32);t&&t.ArrayBuffer&&(u=r(33));var y="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),g="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),m=y||g;e.protocol=3;var v=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=h(v),w={type:"error",data:"parser error"},k=r(34);e.encodePacket=function(e,r,i,a){"function"==typeof r&&(a=r,r=!1),"function"==typeof i&&(a=i,i=null);var c=void 0===e.data?void 0:e.data.buffer||e.data;if(t.ArrayBuffer&&c instanceof ArrayBuffer)return o(e,r,a);if(k&&c instanceof t.Blob)return s(e,r,a);if(c&&c.base64)return n(e,a);var u=v[e.type];return void 0!==e.data&&(u+=i?d.encode(String(e.data)):String(e.data)),a(""+u);},e.encodeBase64Packet=function(r,n){var o="b"+e.packets[r.type];if(k&&r.data instanceof t.Blob){var i=new FileReader();return i.onload=function(){var t=i.result.split(",")[1];n(o+t);},i.readAsDataURL(r.data);}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(r.data));}catch(t){for(var a=new Uint8Array(r.data),c=new Array(a.length),u=0;u<a.length;u++){c[u]=a[u];}s=String.fromCharCode.apply(null,c);}return o+=t.btoa(s),n(o);},e.decodePacket=function(t,r,n){if(void 0===t)return w;if("string"==typeof t){if("b"==t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(n&&(t=a(t),t===!1))return w;var o=t.charAt(0);return Number(o)==o&&b[o]?t.length>1?{type:b[o],data:t.substring(1)}:{type:b[o]}:w;}var i=new Uint8Array(t),o=i[0],s=f(t,1);return k&&"blob"===r&&(s=new k([s])),{type:b[o],data:s};},e.decodeBase64Packet=function(t,e){var r=b[t.charAt(0)];if(!u)return{type:r,data:{base64:!0,data:t.substr(1)}};var n=u.decode(t.substr(1));return"blob"===e&&k&&(n=new k([n])),{type:r,data:n};},e.encodePayload=function(t,r,n){function o(t){return t.length+":"+t;}function i(t,n){e.encodePacket(t,!!s&&r,!0,function(t){n(null,o(t));});}"function"==typeof r&&(n=r,r=null);var s=p(t);return r&&s?k&&!m?e.encodePayloadAsBlob(t,n):e.encodePayloadAsArrayBuffer(t,n):t.length?void c(t,i,function(t,e){return n(e.join(""));}):n("0:");},e.decodePayload=function(t,r,n){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,n);"function"==typeof r&&(n=r,r=null);var o;if(""==t)return n(w,0,1);for(var i,s,a="",c=0,u=t.length;c<u;c++){var h=t.charAt(c);if(":"!=h)a+=h;else{if(""==a||a!=(i=Number(a)))return n(w,0,1);if(s=t.substr(c+1,i),a!=s.length)return n(w,0,1);if(s.length){if(o=e.decodePacket(s,r,!0),w.type==o.type&&w.data==o.data)return n(w,0,1);var p=n(o,c+i,u);if(!1===p)return;}c+=i,a="";}}return""!=a?n(w,0,1):void 0;},e.encodePayloadAsArrayBuffer=function(t,r){function n(t,r){e.encodePacket(t,!0,!0,function(t){return r(null,t);});}return t.length?void c(t,n,function(t,e){var n=e.reduce(function(t,e){var r;return r="string"==typeof e?e.length:e.byteLength,t+r.toString().length+r+2;},0),o=new Uint8Array(n),i=0;return e.forEach(function(t){var e="string"==typeof t,r=t;if(e){for(var n=new Uint8Array(t.length),s=0;s<t.length;s++){n[s]=t.charCodeAt(s);}r=n.buffer;}e?o[i++]=0:o[i++]=1;for(var a=r.byteLength.toString(),s=0;s<a.length;s++){o[i++]=parseInt(a[s]);}o[i++]=255;for(var n=new Uint8Array(r),s=0;s<n.length;s++){o[i++]=n[s];}}),r(o.buffer);}):r(new ArrayBuffer(0));},e.encodePayloadAsBlob=function(t,r){function n(t,r){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var n=new Uint8Array(t.length),o=0;o<t.length;o++){n[o]=t.charCodeAt(o);}t=n.buffer,e[0]=0;}for(var i=t instanceof ArrayBuffer?t.byteLength:t.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++){a[o]=parseInt(s[o]);}if(a[s.length]=255,k){var c=new k([e.buffer,a.buffer,t]);r(null,c);}});}c(t,n,function(t,e){return r(new k(e));});},e.decodePayloadAsBinary=function(t,r,n){"function"==typeof r&&(n=r,r=null);for(var o=t,i=[],s=!1;o.byteLength>0;){for(var a=new Uint8Array(o),c=0===a[0],u="",h=1;255!=a[h];h++){if(u.length>310){s=!0;break;}u+=a[h];}if(s)return n(w,0,1);o=f(o,2+u.length),u=parseInt(u);var p=f(o,0,u);if(c)try{p=String.fromCharCode.apply(null,new Uint8Array(p));}catch(t){var l=new Uint8Array(p);p="";for(var h=0;h<l.length;h++){p+=String.fromCharCode(l[h]);}}i.push(p),o=f(o,u);}var d=i.length;i.forEach(function(t,o){n(e.decodePacket(t,r,!0),o,d);});};}).call(e,function(){return this;}());},function(t,e){t.exports=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var n in t){r.call(t,n)&&e.push(n);}return e;};},function(t,e,r){(function(e){function n(t){function r(t){if(!t)return!1;if(e.Buffer&&e.Buffer.isBuffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer||e.Blob&&t instanceof Blob||e.File&&t instanceof File)return!0;if(o(t)){for(var n=0;n<t.length;n++){if(r(t[n]))return!0;}}else if(t&&"object"==(typeof t==="undefined"?"undefined":_typeof(t))){t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON());for(var i in t){if(Object.prototype.hasOwnProperty.call(t,i)&&r(t[i]))return!0;}}return!1;}return r(t);}var o=r(15);t.exports=n;}).call(e,function(){return this;}());},function(t,e){t.exports=function(t,e,r){var n=t.byteLength;if(e=e||0,r=r||n,t.slice)return t.slice(e,r);if(e<0&&(e+=n),r<0&&(r+=n),r>n&&(r=n),e>=n||e>=r||0===n)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(r-e),s=e,a=0;s<r;s++,a++){i[a]=o[s];}return i.buffer;};},function(t,e){function r(t,e,r){function o(t,n){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(i=!0,e(t),e=r):0!==o.count||i||e(null,n);}var i=!1;return r=r||n,o.count=t,0===t?e():o;}function n(){}t.exports=r;},function(t,e,r){var n;(function(t,o){!function(i){function s(t){for(var e,r,n=[],o=0,i=t.length;o<i;){e=t.charCodeAt(o++),e>=55296&&e<=56319&&o<i?(r=t.charCodeAt(o++),56320==(64512&r)?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--)):n.push(e);}return n;}function a(t){for(var e,r=t.length,n=-1,o="";++n<r;){e=t[n],e>65535&&(e-=65536,o+=b(e>>>10&1023|55296),e=56320|1023&e),o+=b(e);}return o;}function c(t,e){return b(t>>e&63|128);}function u(t){if(0==(4294967168&t))return b(t);var e="";return 0==(4294965248&t)?e=b(t>>6&31|192):0==(4294901760&t)?(e=b(t>>12&15|224),e+=c(t,6)):0==(4292870144&t)&&(e=b(t>>18&7|240),e+=c(t,12),e+=c(t,6)),e+=b(63&t|128);}function h(t){for(var e,r=s(t),n=r.length,o=-1,i="";++o<n;){e=r[o],i+=u(e);}return i;}function p(){if(v>=m)throw Error("Invalid byte index");var t=255&g[v];if(v++,128==(192&t))return 63&t;throw Error("Invalid continuation byte");}function f(){var t,e,r,n,o;if(v>m)throw Error("Invalid byte index");if(v==m)return!1;if(t=255&g[v],v++,0==(128&t))return t;if(192==(224&t)){var e=p();if(o=(31&t)<<6|e,o>=128)return o;throw Error("Invalid continuation byte");}if(224==(240&t)){if(e=p(),r=p(),o=(15&t)<<12|e<<6|r,o>=2048)return o;throw Error("Invalid continuation byte");}if(240==(248&t)&&(e=p(),r=p(),n=p(),o=(15&t)<<18|e<<12|r<<6|n,o>=65536&&o<=1114111))return o;throw Error("Invalid WTF-8 detected");}function l(t){g=s(t),m=g.length,v=0;for(var e,r=[];(e=f())!==!1;){r.push(e);}return a(r);}var d="object"==(typeof e==="undefined"?"undefined":_typeof(e))&&e,y=("object"==(typeof t==="undefined"?"undefined":_typeof(t))&&t&&t.exports==d&&t,"object"==(typeof o==="undefined"?"undefined":_typeof(o))&&o);y.global!==y&&y.window!==y||(i=y);var g,m,v,b=String.fromCharCode,w={version:"1.0.0",encode:h,decode:l};n=function(){return w;}.call(e,r,e,t),!(void 0!==n&&(t.exports=n));}(this);}).call(e,r(12)(t),function(){return this;}());},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),n=0;n<t.length;n++){r[t.charCodeAt(n)]=n;}e.encode=function(e){var r,n=new Uint8Array(e),o=n.length,i="";for(r=0;r<o;r+=3){i+=t[n[r]>>2],i+=t[(3&n[r])<<4|n[r+1]>>4],i+=t[(15&n[r+1])<<2|n[r+2]>>6],i+=t[63&n[r+2]];}return o%3===2?i=i.substring(0,i.length-1)+"=":o%3===1&&(i=i.substring(0,i.length-2)+"=="),i;},e.decode=function(t){var e,n,o,i,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var h=new ArrayBuffer(a),p=new Uint8Array(h);for(e=0;e<c;e+=4){n=r[t.charCodeAt(e)],o=r[t.charCodeAt(e+1)],i=r[t.charCodeAt(e+2)],s=r[t.charCodeAt(e+3)],p[u++]=n<<2|o>>4,p[u++]=(15&o)<<4|i>>2,p[u++]=(3&i)<<6|63&s;}return h;};}();},function(t,e){(function(e){function r(t){for(var e=0;e<t.length;e++){var r=t[e];if(r.buffer instanceof ArrayBuffer){var n=r.buffer;if(r.byteLength!==n.byteLength){var o=new Uint8Array(r.byteLength);o.set(new Uint8Array(n,r.byteOffset,r.byteLength)),n=o.buffer;}t[e]=n;}}}function n(t,e){e=e||{};var n=new i();r(t);for(var o=0;o<t.length;o++){n.append(t[o]);}return e.type?n.getBlob(e.type):n.getBlob();}function o(t,e){return r(t),new Blob(t,e||{});}var i=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder,s=function(){try{var t=new Blob(["hi"]);return 2===t.size;}catch(t){return!1;}}(),a=s&&function(){try{var t=new Blob([new Uint8Array([1,2])]);return 2===t.size;}catch(t){return!1;}}(),c=i&&i.prototype.append&&i.prototype.getBlob;t.exports=function(){return s?a?e.Blob:o:c?n:void 0;}();}).call(e,function(){return this;}());},function(t,e,r){function n(t){if(t)return o(t);}function o(t){for(var e in n.prototype){t[e]=n.prototype[e];}return t;}t.exports=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this;},n.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments);}return r.fn=e,this.on(t,r),this;},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var n,o=0;o<r.length;o++){if(n=r[o],n===e||n.fn===e){r.splice(o,1);break;}}return this;},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r){r=r.slice(0);for(var n=0,o=r.length;n<o;++n){r[n].apply(this,e);}}return this;},n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[];},n.prototype.hasListeners=function(t){return!!this.listeners(t).length;};},function(t,e){e.encode=function(t){var e="";for(var r in t){t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));}return e;},e.decode=function(t){for(var e={},r=t.split("&"),n=0,o=r.length;n<o;n++){var i=r[n].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1]);}return e;};},function(t,e){t.exports=function(t,e){var r=function r(){};r.prototype=e.prototype,t.prototype=new r(),t.prototype.constructor=t;};},function(t,e){"use strict";function r(t){var e="";do{e=s[t%a]+e,t=Math.floor(t/a);}while(t>0);return e;}function n(t){var e=0;for(h=0;h<t.length;h++){e=e*a+c[t.charAt(h)];}return e;}function o(){var t=r(+new Date());return t!==i?(u=0,i=t):t+"."+r(u++);}for(var i,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),a=64,c={},u=0,h=0;h<a;h++){c[s[h]]=h;}o.encode=r,o.decode=n,t.exports=o;},function(t,e,r){(function(e){function n(){}function o(t){i.call(this,t),this.query=this.query||{},a||(e.___eio||(e.___eio=[]),a=e.___eio),this.index=a.length;var r=this;a.push(function(t){r.onData(t);}),this.query.j=this.index,e.document&&e.addEventListener&&e.addEventListener("beforeunload",function(){r.script&&(r.script.onerror=n);},!1);}var i=r(25),s=r(37);t.exports=o;var a,c=/\n/g,u=/\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this);},o.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e);};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e;var n="undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent);n&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t);},100);},o.prototype.doWrite=function(t,e){function r(){n(),e();}function n(){if(o.iframe)try{o.form.removeChild(o.iframe);}catch(t){o.onError("jsonp polling iframe removal error",t);}try{var t='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(t);}catch(t){i=document.createElement("iframe"),i.name=o.iframeId,i.src="javascript:0";}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i;}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),h=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=h,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a;}this.form.action=this.uri(),n(),t=t.replace(u,"\\\n"),this.area.value=t.replace(c,"\\n");try{this.form.submit();}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===o.iframe.readyState&&r();}:this.iframe.onload=r;};}).call(e,function(){return this;}());},function(t,e,r){(function(e){function n(t){var e=t&&t.forceBase64;e&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=p&&!t.forceNode,this.usingBrowserWebSocket||(f=o),i.call(this,t);}var o,i=r(26),s=r(27),a=r(36),c=r(37),u=r(38),h=r(3)("engine.io-client:websocket"),p=e.WebSocket||e.MozWebSocket;if("undefined"==typeof window)try{o=r(41);}catch(t){}var f=p;f||"undefined"!=typeof window||(f=o),t.exports=n,c(n,i),n.prototype.name="websocket",n.prototype.supportsBinary=!0,n.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=void 0,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?new f(t):new f(t,e,r);}catch(t){return this.emit("error",t);}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners();}},n.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen();},this.ws.onclose=function(){t.onClose();},this.ws.onmessage=function(e){t.onData(e.data);},this.ws.onerror=function(e){t.onError("websocket error",e);};},n.prototype.write=function(t){function r(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain");},0);}var n=this;this.writable=!1;for(var o=t.length,i=0,a=o;i<a;i++){!function(t){s.encodePacket(t,n.supportsBinary,function(i){if(!n.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),n.perMessageDeflate){var a="string"==typeof i?e.Buffer.byteLength(i):i.length;a<n.perMessageDeflate.threshold&&(s.compress=!1);}}try{n.usingBrowserWebSocket?n.ws.send(i):n.ws.send(i,s);}catch(t){h("websocket closed before onclose event");}--o||r();});}(t[i]);}},n.prototype.onClose=function(){i.prototype.onClose.call(this);},n.prototype.doClose=function(){"undefined"!=typeof this.ws&&this.ws.close();},n.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=u()),this.supportsBinary||(t.b64=1),t=a.encode(t),t.length&&(t="?"+t);var n=this.hostname.indexOf(":")!==-1;return e+"://"+(n?"["+this.hostname+"]":this.hostname)+r+this.path+t;},n.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===n.prototype.name);};}).call(e,function(){return this;}());},function(t,e){},function(t,e){var r=[].indexOf;t.exports=function(t,e){if(r)return t.indexOf(e);for(var n=0;n<t.length;++n){if(t[n]===e)return n;}return-1;};},function(t,e){(function(e){var r=/^[\],:{}\s]*$/,n=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,o=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,i=/(?:^|:|,)(?:\s*\[)+/g,s=/^\s+/,a=/\s+$/;t.exports=function(t){return"string"==typeof t&&t?(t=t.replace(s,"").replace(a,""),e.JSON&&JSON.parse?JSON.parse(t):r.test(t.replace(n,"@").replace(o,"]").replace(i,""))?new Function("return "+t)():void 0):null;};}).call(e,function(){return this;}());},function(t,e,r){"use strict";function n(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open();}var o=r(7),i=r(35),s=r(45),a=r(46),c=r(47),u=r(3)("socket.io-client:socket"),h=r(29);t.exports=e=n;var p={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=i.prototype.emit;i(n.prototype),n.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[a(t,"open",c(this,"onopen")),a(t,"packet",c(this,"onpacket")),a(t,"close",c(this,"onclose"))];}},n.prototype.open=n.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this);},n.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this;},n.prototype.emit=function(t){if(p.hasOwnProperty(t))return f.apply(this,arguments),this;var e=s(arguments),r=o.EVENT;h(e)&&(r=o.BINARY_EVENT);var n={type:r,data:e};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),delete this.flags,this;},n.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t);},n.prototype.onopen=function(){u("transport is open - connecting"),"/"!==this.nsp&&(this.query?this.packet({type:o.CONNECT,query:this.query}):this.packet({type:o.CONNECT}));},n.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t);},n.prototype.onpacket=function(t){if(t.nsp===this.nsp)switch(t.type){case o.CONNECT:this.onconnect();break;case o.EVENT:this.onevent(t);break;case o.BINARY_EVENT:this.onevent(t);break;case o.ACK:this.onack(t);break;case o.BINARY_ACK:this.onack(t);break;case o.DISCONNECT:this.ondisconnect();break;case o.ERROR:this.emit("error",t.data);}},n.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?f.apply(this,e):this.receiveBuffer.push(e);},n.prototype.ack=function(t){var e=this,r=!1;return function(){if(!r){r=!0;var n=s(arguments);u("sending ack %j",n);var i=h(n)?o.BINARY_ACK:o.ACK;e.packet({type:i,id:t,data:n});}};},n.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id);},n.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered();},n.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++){f.apply(this,this.receiveBuffer[t]);}for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++){this.packet(this.sendBuffer[t]);}this.sendBuffer=[];},n.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect");},n.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++){this.subs[t].destroy();}this.subs=null;}this.io.destroy(this);},n.prototype.close=n.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:o.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this;},n.prototype.compress=function(t){return this.flags=this.flags||{},this.flags.compress=t,this;};},function(t,e){function r(t,e){var r=[];e=e||0;for(var n=e||0;n<t.length;n++){r[n-e]=t[n];}return r;}t.exports=r;},function(t,e){"use strict";function r(t,e,r){return t.on(e,r),{destroy:function destroy(){t.removeListener(e,r);}};}t.exports=r;},function(t,e){var r=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return e.apply(t,n.concat(r.call(arguments)));};};},function(t,e){function r(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0;}t.exports=r,r.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r;}return 0|Math.min(t,this.max);},r.prototype.reset=function(){this.attempts=0;},r.prototype.setMin=function(t){this.ms=t;},r.prototype.setMax=function(t){this.max=t;},r.prototype.setJitter=function(t){this.jitter=t;};}]);});/***/}/******/]);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, __webpack_require__(252).setImmediate, __webpack_require__(252).clearImmediate))

/***/ }),
/* 491 */,
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * accepts
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var Negotiator = __webpack_require__(582)
var mime = __webpack_require__(581)

/**
 * Module exports.
 * @public
 */

module.exports = Accepts

/**
 * Create a new Accepts object for the given req.
 *
 * @param {object} req
 * @public
 */

function Accepts(req) {
  if (!(this instanceof Accepts))
    return new Accepts(req)

  this.headers = req.headers
  this.negotiator = new Negotiator(req)
}

/**
 * Check if the given `type(s)` is acceptable, returning
 * the best match when true, otherwise `undefined`, in which
 * case you should respond with 406 "Not Acceptable".
 *
 * The `type` value may be a single mime type string
 * such as "application/json", the extension name
 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
 * or array is given the _best_ match, if any is returned.
 *
 * Examples:
 *
 *     // Accept: text/html
 *     this.types('html');
 *     // => "html"
 *
 *     // Accept: text/*, application/json
 *     this.types('html');
 *     // => "html"
 *     this.types('text/html');
 *     // => "text/html"
 *     this.types('json', 'text');
 *     // => "json"
 *     this.types('application/json');
 *     // => "application/json"
 *
 *     // Accept: text/*, application/json
 *     this.types('image/png');
 *     this.types('png');
 *     // => undefined
 *
 *     // Accept: text/*;q=.5, application/json
 *     this.types(['html', 'json']);
 *     this.types('html', 'json');
 *     // => "json"
 *
 * @param {String|Array} types...
 * @return {String|Array|Boolean}
 * @public
 */

Accepts.prototype.type =
Accepts.prototype.types = function (types_) {
  var types = types_

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length)
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i]
    }
  }

  // no types, return all requested types
  if (!types || types.length === 0) {
    return this.negotiator.mediaTypes()
  }

  if (!this.headers.accept) return types[0];
  var mimes = types.map(extToMime);
  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
  var first = accepts[0];
  if (!first) return false;
  return types[mimes.indexOf(first)];
}

/**
 * Return accepted encodings or best fit based on `encodings`.
 *
 * Given `Accept-Encoding: gzip, deflate`
 * an array sorted by quality is returned:
 *
 *     ['gzip', 'deflate']
 *
 * @param {String|Array} encodings...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.encoding =
Accepts.prototype.encodings = function (encodings_) {
  var encodings = encodings_

  // support flattened arguments
  if (encodings && !Array.isArray(encodings)) {
    encodings = new Array(arguments.length)
    for (var i = 0; i < encodings.length; i++) {
      encodings[i] = arguments[i]
    }
  }

  // no encodings, return all requested encodings
  if (!encodings || encodings.length === 0) {
    return this.negotiator.encodings()
  }

  return this.negotiator.encodings(encodings)[0] || false
}

/**
 * Return accepted charsets or best fit based on `charsets`.
 *
 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
 * an array sorted by quality is returned:
 *
 *     ['utf-8', 'utf-7', 'iso-8859-1']
 *
 * @param {String|Array} charsets...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.charset =
Accepts.prototype.charsets = function (charsets_) {
  var charsets = charsets_

  // support flattened arguments
  if (charsets && !Array.isArray(charsets)) {
    charsets = new Array(arguments.length)
    for (var i = 0; i < charsets.length; i++) {
      charsets[i] = arguments[i]
    }
  }

  // no charsets, return all requested charsets
  if (!charsets || charsets.length === 0) {
    return this.negotiator.charsets()
  }

  return this.negotiator.charsets(charsets)[0] || false
}

/**
 * Return accepted languages or best fit based on `langs`.
 *
 * Given `Accept-Language: en;q=0.8, es, pt`
 * an array sorted by quality is returned:
 *
 *     ['es', 'pt', 'en']
 *
 * @param {String|Array} langs...
 * @return {Array|String}
 * @public
 */

Accepts.prototype.lang =
Accepts.prototype.langs =
Accepts.prototype.language =
Accepts.prototype.languages = function (languages_) {
  var languages = languages_

  // support flattened arguments
  if (languages && !Array.isArray(languages)) {
    languages = new Array(arguments.length)
    for (var i = 0; i < languages.length; i++) {
      languages[i] = arguments[i]
    }
  }

  // no languages, return all requested languages
  if (!languages || languages.length === 0) {
    return this.negotiator.languages()
  }

  return this.negotiator.languages(languages)[0] || false
}

/**
 * Convert extnames to mime.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function extToMime(type) {
  return type.indexOf('/') === -1
    ? mime.lookup(type)
    : type
}

/**
 * Check if mime is valid.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function validMime(type) {
  return typeof type === 'string';
}


/***/ }),
/* 493 */
/***/ (function(module, exports) {

module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}


/***/ }),
/* 494 */
/***/ (function(module, exports) {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(217);
var inherits = __webpack_require__(11);

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(642).runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__(116).Reporter;
var EncoderBuffer = __webpack_require__(116).EncoderBuffer;
var DecoderBuffer = __webpack_require__(116).DecoderBuffer;
var assert = __webpack_require__(79);

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(11);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(436);

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__(437);
decoders.pem = __webpack_require__(500);


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(11);
var Buffer = __webpack_require__(1).Buffer;

var DERDecoder = __webpack_require__(437);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__(438);
encoders.pem = __webpack_require__(502);


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(11);

var DEREncoder = __webpack_require__(438);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(37);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 504 */
/***/ (function(module, exports) {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),
/* 505 */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * base64id v0.1.0
 */

/**
 * Module dependencies
 */

var crypto = __webpack_require__(222);

/**
 * Constructor
 */

var Base64Id = function() { };

/**
 * Get random bytes
 *
 * Uses a buffer if available, falls back to crypto.randomBytes
 */

Base64Id.prototype.getRandomBytes = function(bytes) {

  var BUFFER_SIZE = 4096
  var self = this;  
  
  bytes = bytes || 12;

  if (bytes > BUFFER_SIZE) {
    return crypto.randomBytes(bytes);
  }
  
  var bytesInBuffer = parseInt(BUFFER_SIZE/bytes);
  var threshold = parseInt(bytesInBuffer*0.85);

  if (!threshold) {
    return crypto.randomBytes(bytes);
  }

  if (this.bytesBufferIndex == null) {
     this.bytesBufferIndex = -1;
  }

  if (this.bytesBufferIndex == bytesInBuffer) {
    this.bytesBuffer = null;
    this.bytesBufferIndex = -1;
  }

  // No buffered bytes available or index above threshold
  if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {
     
    if (!this.isGeneratingBytes) {
      this.isGeneratingBytes = true;
      crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {
        self.bytesBuffer = bytes;
        self.bytesBufferIndex = 0;
        self.isGeneratingBytes = false;
      }); 
    }
    
    // Fall back to sync call when no buffered bytes are available
    if (this.bytesBufferIndex == -1) {
      return crypto.randomBytes(bytes);
    }
  }
  
  var result = this.bytesBuffer.slice(bytes*this.bytesBufferIndex, bytes*(this.bytesBufferIndex+1)); 
  this.bytesBufferIndex++; 
  
  return result;
}

/**
 * Generates a base64 id
 *
 * (Original version from socket.io <http://socket.io>)
 */

Base64Id.prototype.generateId = function () {
  var rand = new Buffer(15); // multiple of 3 for base64
  if (!rand.writeInt32BE) {
    return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString()
      + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();
  }
  this.sequenceNumber = (this.sequenceNumber + 1) | 0;
  rand.writeInt32BE(this.sequenceNumber, 11);
  if (crypto.randomBytes) {
    this.getRandomBytes(12).copy(rand);
  } else {
    // not secure for node 0.4
    [0, 4, 8].forEach(function(i) {
      rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);
    });
  }
  return rand.toString('base64').replace(/\//g, '_').replace(/\+/g, '-');
};

/**
 * Export
 */

exports = module.exports = new Base64Id();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(218)
var Transform = __webpack_require__(110)
var inherits = __webpack_require__(11)
var modes = __webpack_require__(219)
var StreamCipher = __webpack_require__(447)
var AuthCipher = __webpack_require__(440)
var ebtk = __webpack_require__(226)

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: __webpack_require__(445),
  CBC: __webpack_require__(441),
  CFB: __webpack_require__(442),
  CFB8: __webpack_require__(444),
  CFB1: __webpack_require__(443),
  OFB: __webpack_require__(446),
  CTR: __webpack_require__(220),
  GCM: __webpack_require__(220)
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(218)
var Transform = __webpack_require__(110)
var inherits = __webpack_require__(11)
var modes = __webpack_require__(219)
var ebtk = __webpack_require__(226)
var StreamCipher = __webpack_require__(447)
var AuthCipher = __webpack_require__(440)
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: __webpack_require__(445),
  CBC: __webpack_require__(441),
  CFB: __webpack_require__(442),
  CFB8: __webpack_require__(444),
  CFB1: __webpack_require__(443),
  OFB: __webpack_require__(446),
  CTR: __webpack_require__(220),
  GCM: __webpack_require__(220)
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

var ebtk = __webpack_require__(226)
var aes = __webpack_require__(235)
var DES = __webpack_require__(512)
var desModes = __webpack_require__(513)
var aesModes = __webpack_require__(219)
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var CipherBase = __webpack_require__(110)
var des = __webpack_require__(239)
var inherits = __webpack_require__(11)

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 513 */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var _algos = __webpack_require__(448)
var createHash = __webpack_require__(111)
var inherits = __webpack_require__(11)
var sign = __webpack_require__(515)
var stream = __webpack_require__(82)
var verify = __webpack_require__(516)

var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)

  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') {
    sig = new Buffer(sig, enc)
  }

  this.end()
  var hash = this._hash.digest()

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(238)
var crt = __webpack_require__(236)
var curves = __webpack_require__(449)
var elliptic = __webpack_require__(51)
var parseKeys = __webpack_require__(231)

var BN = __webpack_require__(30)
var EC = elliptic.ec

function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') throw new Error('wrong private key type')

    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa') throw new Error('wrong private key type')
  }

  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.genKeyPair()

  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) {
    r = [ 0 ].concat(r)
  }
  // Pad values
  if (s[0] & 0x80) {
    s = [0].concat(s)
  }

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t, k

  do {
    t = new Buffer('')

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k)
      .update(kv.v)
      .update(new Buffer([0]))
      .digest()
    kv.v = createHmac(algo, kv.k)
      .update(kv.v)
      .digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var curves = __webpack_require__(449)
var elliptic = __webpack_require__(51)
var parseKeys = __webpack_require__(231)

var BN = __webpack_require__(30)
var EC = elliptic.ec

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(
      y.toRed(montp)
        .redPow(r.mul(w).mod(q))
        .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(470);
var zstream = __webpack_require__(593);
var zlib_deflate = __webpack_require__(588);
var zlib_inflate = __webpack_require__(590);
var constants = __webpack_require__(587);

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (mode < exports.DEFLATE || mode > exports.UNZIP)
    throw new TypeError("Bad argument");
    
  this.mode = mode;
  this.init_done = false;
  this.write_in_progress = false;
  this.pending_close = false;
  this.windowBits = 0;
  this.level = 0;
  this.memLevel = 0;
  this.strategy = 0;
  this.dictionary = null;
}

Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
  this.windowBits = windowBits;
  this.level = level;
  this.memLevel = memLevel;
  this.strategy = strategy;
  // dictionary not supported.
  
  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
    this.windowBits += 16;
    
  if (this.mode === exports.UNZIP)
    this.windowBits += 32;
    
  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
    this.windowBits = -this.windowBits;
    
  this.strm = new zstream();
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateInit2(
        this.strm,
        this.level,
        exports.Z_DEFLATED,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      var status  = zlib_inflate.inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
    return;
  }
  
  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype.params = function() {
  throw new Error("deflateParams Not supported");
};

Zlib.prototype._writeCheck = function() {
  if (!this.init_done)
    throw new Error("write before init");
    
  if (this.mode === exports.NONE)
    throw new Error("already finalized");
    
  if (this.write_in_progress)
    throw new Error("write already in progress");
    
  if (this.pending_close)
    throw new Error("close is pending");
};

Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
  this._writeCheck();
  this.write_in_progress = true;
  
  var self = this;
  process.nextTick(function() {
    self.write_in_progress = false;
    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
    self.callback(res[0], res[1]);
    
    if (self.pending_close)
      self.close();
  });
  
  return this;
};

// set method for Node buffers, used by pako
function bufferSet(data, offset) {
  for (var i = 0; i < data.length; i++) {
    this[offset + i] = data[i];
  }
}

Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this._writeCheck();
  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this.write_in_progress = true;
  
  if (flush !== exports.Z_NO_FLUSH &&
      flush !== exports.Z_PARTIAL_FLUSH &&
      flush !== exports.Z_SYNC_FLUSH &&
      flush !== exports.Z_FULL_FLUSH &&
      flush !== exports.Z_FINISH &&
      flush !== exports.Z_BLOCK) {
    throw new Error("Invalid flush value");
  }
  
  if (input == null) {
    input = new Buffer(0);
    in_len = 0;
    in_off = 0;
  }
  
  if (out._set)
    out.set = out._set;
  else
    out.set = bufferSet;
  
  var strm = this.strm;
  strm.avail_in = in_len;
  strm.input = input;
  strm.next_in = in_off;
  strm.avail_out = out_len;
  strm.output = out;
  strm.next_out = out_off;
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflate(strm, flush);
      break;
    case exports.UNZIP:
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflate(strm, flush);
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
    this._error(status);
  }
  
  this.write_in_progress = false;
  return [strm.avail_in, strm.avail_out];
};

Zlib.prototype.close = function() {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }
  
  this.pending_close = false;
  
  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else {
    zlib_inflate.inflateEnd(this.strm);
  }
  
  this.mode = exports.NONE;
};

Zlib.prototype.reset = function() {
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflateReset(this.strm);
      break;
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
  }
};

Zlib.prototype._error = function(status) {
  this.onerror(msg[status] + ': ' + this.strm.msg, status);
  
  this.write_in_progress = false;
  if (this.pending_close)
    this.close();
};

exports.Zlib = Zlib;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16), __webpack_require__(1).Buffer))

/***/ }),
/* 518 */
/***/ (function(module, exports) {

module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}


/***/ }),
/* 519 */
/***/ (function(module, exports) {


/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

exports.parse = parse;
exports.serialize = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {}
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim()
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(51);
var BN = __webpack_require__(30);

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(79);
var inherits = __webpack_require__(11);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(79);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(79);
var inherits = __webpack_require__(11);

var des = __webpack_require__(239);
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(79);
var inherits = __webpack_require__(11);

var des = __webpack_require__(239);
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(453)
var primes = __webpack_require__(530)

var DH = __webpack_require__(529)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(30);
var MillerRabin = __webpack_require__(465);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(453);
var randomBytes = __webpack_require__(122);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 530 */
/***/ (function(module, exports) {

module.exports = {
	"modp1": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
	},
	"modp2": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
	},
	"modp5": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
	},
	"modp14": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
	},
	"modp15": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
	},
	"modp16": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
	},
	"modp17": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
	},
	"modp18": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
	}
};

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(30);
var elliptic = __webpack_require__(51);
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(223);
var elliptic = __webpack_require__(51);
var BN = __webpack_require__(30);
var inherits = __webpack_require__(11);
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(223);
var BN = __webpack_require__(30);
var inherits = __webpack_require__(11);
var Base = curve.base;

var elliptic = __webpack_require__(51);
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(223);
var elliptic = __webpack_require__(51);
var BN = __webpack_require__(30);
var inherits = __webpack_require__(11);
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(78);
var elliptic = __webpack_require__(51);

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(542);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(30);
var HmacDRBG = __webpack_require__(576);
var elliptic = __webpack_require__(51);
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = __webpack_require__(537);
var Signature = __webpack_require__(538);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(30);
var elliptic = __webpack_require__(51);
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(30);

var elliptic = __webpack_require__(51);
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(78);
var elliptic = __webpack_require__(51);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(540);
var Signature = __webpack_require__(541);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = __webpack_require__(51);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(30);
var elliptic = __webpack_require__(51);
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 542 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(30);
var minAssert = __webpack_require__(79);
var minUtils = __webpack_require__(466);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 544 */
/***/ (function(module, exports) {

module.exports = {
	"_args": [
		[
			{
				"raw": "elliptic@^6.0.0",
				"scope": null,
				"escapedName": "elliptic",
				"name": "elliptic",
				"rawSpec": "^6.0.0",
				"spec": ">=6.0.0 <7.0.0",
				"type": "range"
			},
			"/Users/amikulski/Documents/dev/nES6/multines/node_modules/browserify-sign"
		]
	],
	"_from": "elliptic@>=6.0.0 <7.0.0",
	"_id": "elliptic@6.4.0",
	"_inCache": true,
	"_location": "/elliptic",
	"_nodeVersion": "7.0.0",
	"_npmOperationalInternal": {
		"host": "packages-18-east.internal.npmjs.com",
		"tmp": "tmp/elliptic-6.4.0.tgz_1487798866428_0.30510620190761983"
	},
	"_npmUser": {
		"name": "indutny",
		"email": "fedor@indutny.com"
	},
	"_npmVersion": "3.10.8",
	"_phantomChildren": {},
	"_requested": {
		"raw": "elliptic@^6.0.0",
		"scope": null,
		"escapedName": "elliptic",
		"name": "elliptic",
		"rawSpec": "^6.0.0",
		"spec": ">=6.0.0 <7.0.0",
		"type": "range"
	},
	"_requiredBy": [
		"/browserify-sign",
		"/create-ecdh"
	],
	"_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
	"_shasum": "cac9af8762c85836187003c8dfe193e5e2eae5df",
	"_shrinkwrap": null,
	"_spec": "elliptic@^6.0.0",
	"_where": "/Users/amikulski/Documents/dev/nES6/multines/node_modules/browserify-sign",
	"author": {
		"name": "Fedor Indutny",
		"email": "fedor@indutny.com"
	},
	"bugs": {
		"url": "https://github.com/indutny/elliptic/issues"
	},
	"dependencies": {
		"bn.js": "^4.4.0",
		"brorand": "^1.0.1",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.0",
		"inherits": "^2.0.1",
		"minimalistic-assert": "^1.0.0",
		"minimalistic-crypto-utils": "^1.0.0"
	},
	"description": "EC cryptography",
	"devDependencies": {
		"brfs": "^1.4.3",
		"coveralls": "^2.11.3",
		"grunt": "^0.4.5",
		"grunt-browserify": "^5.0.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-connect": "^1.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^1.0.1",
		"grunt-mocha-istanbul": "^3.0.1",
		"grunt-saucelabs": "^8.6.2",
		"istanbul": "^0.4.2",
		"jscs": "^2.9.0",
		"jshint": "^2.6.0",
		"mocha": "^2.1.0"
	},
	"directories": {},
	"dist": {
		"shasum": "cac9af8762c85836187003c8dfe193e5e2eae5df",
		"tarball": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz"
	},
	"files": [
		"lib"
	],
	"gitHead": "6b0d2b76caae91471649c8e21f0b1d3ba0f96090",
	"homepage": "https://github.com/indutny/elliptic",
	"keywords": [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	],
	"license": "MIT",
	"main": "lib/elliptic.js",
	"maintainers": [
		{
			"name": "indutny",
			"email": "fedor@indutny.com"
		}
	],
	"name": "elliptic",
	"optionalDependencies": {},
	"readme": "ERROR: No README data found!",
	"repository": {
		"type": "git",
		"url": "git+ssh://git@github.com/indutny/elliptic.git"
	},
	"scripts": {
		"jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		"jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		"lint": "npm run jscs && npm run jshint",
		"test": "npm run lint && npm run unit",
		"unit": "istanbul test _mocha --reporter=spec test/index.js",
		"version": "grunt dist && git add dist/"
	},
	"version": "6.4.0"
};

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(546);


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(547);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(62);


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var transports = __webpack_require__(454);
var Emitter = __webpack_require__(242);
var debug = __webpack_require__(224)('engine.io-client:socket');
var index = __webpack_require__(244);
var parser = __webpack_require__(62);
var parseuri = __webpack_require__(471);
var parsejson = __webpack_require__(597);
var parseqs = __webpack_require__(245);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (global.location && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = typeof global === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(240);
Socket.transports = __webpack_require__(454);
Socket.parser = __webpack_require__(62);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    agent: this.agent,
    hostname: this.hostname,
    port: this.port,
    secure: this.secure,
    path: this.path,
    query: query,
    forceJSONP: this.forceJSONP,
    jsonp: this.jsonp,
    forceBase64: this.forceBase64,
    enablesXDR: this.enablesXDR,
    timestampRequests: this.timestampRequests,
    timestampParam: this.timestampParam,
    policyPort: this.policyPort,
    socket: this,
    pfx: this.pfx,
    key: this.key,
    passphrase: this.passphrase,
    cert: this.cert,
    ca: this.ca,
    ciphers: this.ciphers,
    rejectUnauthorized: this.rejectUnauthorized,
    perMessageDeflate: this.perMessageDeflate,
    extraHeaders: this.extraHeaders,
    forceNode: this.forceNode,
    localAddress: this.localAddress
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module requirements.
 */

var Polling = __webpack_require__(455);
var inherit = __webpack_require__(221);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(241);
var Polling = __webpack_require__(455);
var Emitter = __webpack_require__(242);
var inherit = __webpack_require__(221);
var debug = __webpack_require__(224)('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  } else {
    this.extraHeaders = opts.extraHeaders;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}
    if (this.supportsBinary) {
      // This has to be done after open because Firefox is stupid
      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
      xhr.responseType = 'arraybuffer';
    }

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      if (!this.supportsBinary) {
        data = this.xhr.responseText;
      } else {
        try {
          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
        } catch (e) {
          var ui8Arr = new Uint8Array(this.xhr.response);
          var dataArray = [];
          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
            dataArray.push(ui8Arr[idx]);
          }

          data = String.fromCharCode.apply(null, dataArray);
        }
      }
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var Transport = __webpack_require__(240);
var parser = __webpack_require__(62);
var parseqs = __webpack_require__(245);
var inherit = __webpack_require__(221);
var yeast = __webpack_require__(488);
var debug = __webpack_require__(224)('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(649);
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = void (0);
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(228);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 552 */
/***/ (function(module, exports) {


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};


/***/ }),
/* 553 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 553;


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var http = __webpack_require__(123);

/**
 * Invoking the library as a function delegates to attach if the first argument
 * is an `http.Server`.
 *
 * If there are no arguments or the first argument is an options object, then
 * a new Server instance is returned.
 *
 * @param {http.Server} server (if specified, will be attached to by the new Server instance)
 * @param {Object} options
 * @return {Server} engine server
 * @api public
 */

exports = module.exports = function () {
  // backwards compatible use as `.attach`
  // if first argument is an http server
  if (arguments.length && arguments[0] instanceof http.Server) {
    return attach.apply(this, arguments);
  }

  // if first argument is not an http server, then just make a regular eio server
  return exports.Server.apply(null, arguments);
};

/**
 * Protocol revision number.
 *
 * @api public
 */

exports.protocol = 1;

/**
 * Expose Server constructor.
 *
 * @api public
 */

exports.Server = __webpack_require__(555);

/**
 * Expose Socket constructor.
 *
 * @api public
 */

exports.Socket = __webpack_require__(456);

/**
 * Expose Transport constructor.
 *
 * @api public
 */

exports.Transport = __webpack_require__(243);

/**
 * Expose mutable list of available transports.
 *
 * @api public
 */

exports.transports = __webpack_require__(457);

/**
 * Exports parser.
 *
 * @api public
 */

exports.parser = __webpack_require__(62);

/**
 * Creates an http.Server exclusively used for WS upgrades.
 *
 * @param {Number} port
 * @param {Function} callback
 * @param {Object} options
 * @return {Server} websocket.io server
 * @api public
 */

exports.listen = listen;

function listen (port, options, fn) {
  if ('function' === typeof options) {
    fn = options;
    options = {};
  }

  var server = http.createServer(function (req, res) {
    res.writeHead(501);
    res.end('Not Implemented');
  });

  server.listen(port, fn);

  // create engine server
  var engine = exports.attach(server, options);
  engine.httpServer = server;

  return engine;
}

/**
 * Captures upgrade requests for a http.Server.
 *
 * @param {http.Server} server
 * @param {Object} options
 * @return {Server} engine server
 * @api public
 */

exports.attach = attach;

function attach (server, options) {
  var engine = new exports.Server(options);
  engine.attach(server, options);
  return engine;
}


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {
/**
 * Module dependencies.
 */

var qs = __webpack_require__(247);
var parse = __webpack_require__(83).parse;
var base64id = __webpack_require__(506);
var transports = __webpack_require__(457);
var EventEmitter = __webpack_require__(41).EventEmitter;
var Socket = __webpack_require__(456);
var util = __webpack_require__(37);
var debug = __webpack_require__(120)('engine');
var cookieMod = __webpack_require__(520);

/**
 * Module exports.
 */

module.exports = Server;

/**
 * Server constructor.
 *
 * @param {Object} options
 * @api public
 */

function Server (opts) {
  if (!(this instanceof Server)) {
    return new Server(opts);
  }

  this.clients = {};
  this.clientsCount = 0;

  opts = opts || {};

  this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE;
  this.pingTimeout = opts.pingTimeout || 60000;
  this.pingInterval = opts.pingInterval || 25000;
  this.upgradeTimeout = opts.upgradeTimeout || 10000;
  this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;
  this.transports = opts.transports || Object.keys(transports);
  this.allowUpgrades = false !== opts.allowUpgrades;
  this.allowRequest = opts.allowRequest;
  this.cookie = false !== opts.cookie ? (opts.cookie || 'io') : false;
  this.cookiePath = false !== opts.cookiePath ? (opts.cookiePath || '/') : false;
  this.cookieHttpOnly = false !== opts.cookieHttpOnly;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || true) : false;
  this.httpCompression = false !== opts.httpCompression ? (opts.httpCompression || {}) : false;

  var self = this;

  // initialize compression options
  ['perMessageDeflate', 'httpCompression'].forEach(function (type) {
    var compression = self[type];
    if (true === compression) self[type] = compression = {};
    if (compression && null == compression.threshold) {
      compression.threshold = 1024;
    }
  });

  // initialize websocket server
  if (~this.transports.indexOf('websocket')) {
    // keep require('ws') as separate expression for packers (browserify, etc)
    var WebSocketServer = (this.wsEngine ? !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND';; throw e; }()) : __webpack_require__(561)).Server;
    this.ws = new WebSocketServer({
      noServer: true,
      clientTracking: false,
      perMessageDeflate: this.perMessageDeflate,
      maxPayload: this.maxHttpBufferSize
    });
  }
}

/**
 * Protocol errors mappings.
 */

Server.errors = {
  UNKNOWN_TRANSPORT: 0,
  UNKNOWN_SID: 1,
  BAD_HANDSHAKE_METHOD: 2,
  BAD_REQUEST: 3
};

Server.errorMessages = {
  0: 'Transport unknown',
  1: 'Session ID unknown',
  2: 'Bad handshake method',
  3: 'Bad request'
};

/**
 * Inherits from EventEmitter.
 */

util.inherits(Server, EventEmitter);

/**
 * Hash of open clients.
 *
 * @api public
 */

Server.prototype.clients;

/**
 * Returns a list of available transports for upgrade given a certain transport.
 *
 * @return {Array}
 * @api public
 */

Server.prototype.upgrades = function (transport) {
  if (!this.allowUpgrades) return [];
  return transports[transport].upgradesTo || [];
};

/**
 * Verifies a request.
 *
 * @param {http.IncomingMessage}
 * @return {Boolean} whether the request is valid
 * @api private
 */

Server.prototype.verify = function (req, upgrade, fn) {
  // transport check
  var transport = req._query.transport;
  if (!~this.transports.indexOf(transport)) {
    debug('unknown transport "%s"', transport);
    return fn(Server.errors.UNKNOWN_TRANSPORT, false);
  }

  // sid check
  var sid = req._query.sid;
  if (sid) {
    if (!this.clients.hasOwnProperty(sid)) {
      return fn(Server.errors.UNKNOWN_SID, false);
    }
    if (!upgrade && this.clients[sid].transport.name !== transport) {
      debug('bad request: unexpected transport without upgrade');
      return fn(Server.errors.BAD_REQUEST, false);
    }
  } else {
    // handshake is GET only
    if ('GET' !== req.method) return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);
    if (!this.allowRequest) return fn(null, true);
    return this.allowRequest(req, fn);
  }

  fn(null, true);
};

/**
 * Prepares a request by processing the query string.
 *
 * @api private
 */

Server.prototype.prepare = function (req) {
  // try to leverage pre-existing `req._query` (e.g: from connect)
  if (!req._query) {
    req._query = ~req.url.indexOf('?') ? qs.parse(parse(req.url).query) : {};
  }
};

/**
 * Closes all clients.
 *
 * @api public
 */

Server.prototype.close = function () {
  debug('closing all open clients');
  for (var i in this.clients) {
    if (this.clients.hasOwnProperty(i)) {
      this.clients[i].close(true);
    }
  }
  if (this.ws) {
    debug('closing webSocketServer');
    this.ws.close();
    // don't delete this.ws because it can be used again if the http server starts listening again
  }
  return this;
};

/**
 * Handles an Engine.IO HTTP request.
 *
 * @param {http.IncomingMessage} request
 * @param {http.ServerResponse|http.OutgoingMessage} response
 * @api public
 */

Server.prototype.handleRequest = function (req, res) {
  debug('handling "%s" http request "%s"', req.method, req.url);
  this.prepare(req);
  req.res = res;

  var self = this;
  this.verify(req, false, function (err, success) {
    if (!success) {
      sendErrorMessage(req, res, err);
      return;
    }

    if (req._query.sid) {
      debug('setting new request for existing client');
      self.clients[req._query.sid].transport.onRequest(req);
    } else {
      self.handshake(req._query.transport, req);
    }
  });
};

/**
 * Sends an Engine.IO Error Message
 *
 * @param {http.ServerResponse} response
 * @param {code} error code
 * @api private
 */

function sendErrorMessage (req, res, code) {
  var headers = { 'Content-Type': 'application/json' };

  if (req.headers.origin) {
    headers['Access-Control-Allow-Credentials'] = 'true';
    headers['Access-Control-Allow-Origin'] = req.headers.origin;
  } else {
    headers['Access-Control-Allow-Origin'] = '*';
  }
  res.writeHead(400, headers);
  res.end(JSON.stringify({
    code: code,
    message: Server.errorMessages[code]
  }));
}

/**
 * generate a socket id.
 * Overwrite this method to generate your custom socket id
 *
 * @param {Object} request object
 * @api public
 */

Server.prototype.generateId = function (req) {
  return base64id.generateId();
};

/**
 * Handshakes a new client.
 *
 * @param {String} transport name
 * @param {Object} request object
 * @api private
 */

Server.prototype.handshake = function (transportName, req) {
  var id = this.generateId(req);

  debug('handshaking client "%s"', id);

  try {
    var transport = new transports[transportName](req);
    if ('polling' === transportName) {
      transport.maxHttpBufferSize = this.maxHttpBufferSize;
      transport.httpCompression = this.httpCompression;
    } else if ('websocket' === transportName) {
      transport.perMessageDeflate = this.perMessageDeflate;
    }

    if (req._query && req._query.b64) {
      transport.supportsBinary = false;
    } else {
      transport.supportsBinary = true;
    }
  } catch (e) {
    sendErrorMessage(req, req.res, Server.errors.BAD_REQUEST);
    return;
  }
  var socket = new Socket(id, this, transport, req);
  var self = this;

  if (false !== this.cookie) {
    transport.on('headers', function (headers) {
      headers['Set-Cookie'] = cookieMod.serialize(self.cookie, id,
        {
          path: self.cookiePath,
          httpOnly: self.cookiePath ? self.cookieHttpOnly : false
        });
    });
  }

  transport.onRequest(req);

  this.clients[id] = socket;
  this.clientsCount++;

  socket.once('close', function () {
    delete self.clients[id];
    self.clientsCount--;
  });

  this.emit('connection', socket);
};

/**
 * Handles an Engine.IO HTTP Upgrade.
 *
 * @api public
 */

Server.prototype.handleUpgrade = function (req, socket, upgradeHead) {
  this.prepare(req);

  var self = this;
  this.verify(req, true, function (err, success) {
    if (!success) {
      abortConnection(socket, err);
      return;
    }

    var head = new Buffer(upgradeHead.length);
    upgradeHead.copy(head);
    upgradeHead = null;

    // delegate to ws
    self.ws.handleUpgrade(req, socket, head, function (conn) {
      self.onWebSocket(req, conn);
    });
  });
};

/**
 * Called upon a ws.io connection.
 *
 * @param {ws.Socket} websocket
 * @api private
 */

Server.prototype.onWebSocket = function (req, socket) {
  socket.on('error', onUpgradeError);

  if (!transports[req._query.transport].prototype.handlesUpgrades) {
    debug('transport doesnt handle upgraded requests');
    socket.close();
    return;
  }

  // get client id
  var id = req._query.sid;

  // keep a reference to the ws.Socket
  req.websocket = socket;

  if (id) {
    var client = this.clients[id];
    if (!client) {
      debug('upgrade attempt for closed client');
      socket.close();
    } else if (client.upgrading) {
      debug('transport has already been trying to upgrade');
      socket.close();
    } else if (client.upgraded) {
      debug('transport had already been upgraded');
      socket.close();
    } else {
      debug('upgrading existing transport');

      // transport error handling takes over
      socket.removeListener('error', onUpgradeError);

      var transport = new transports[req._query.transport](req);
      if (req._query && req._query.b64) {
        transport.supportsBinary = false;
      } else {
        transport.supportsBinary = true;
      }
      transport.perMessageDeflate = this.perMessageDeflate;
      client.maybeUpgrade(transport);
    }
  } else {
    // transport error handling takes over
    socket.removeListener('error', onUpgradeError);

    this.handshake(req._query.transport, req);
  }

  function onUpgradeError () {
    debug('websocket error before upgrade');
    // socket.close() not needed
  }
};

/**
 * Captures upgrade requests for a http.Server.
 *
 * @param {http.Server} server
 * @param {Object} options
 * @api public
 */

Server.prototype.attach = function (server, options) {
  var self = this;
  options = options || {};
  var path = (options.path || '/engine.io').replace(/\/$/, '');

  var destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;

  // normalize path
  path += '/';

  function check (req) {
    return path === req.url.substr(0, path.length);
  }

  // cache and clean up listeners
  var listeners = server.listeners('request').slice(0);
  server.removeAllListeners('request');
  server.on('close', self.close.bind(self));

  // add request handler
  server.on('request', function (req, res) {
    if (check(req)) {
      debug('intercepting request for path "%s"', path);
      self.handleRequest(req, res);
    } else {
      for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i].call(server, req, res);
      }
    }
  });

  if (~self.transports.indexOf('websocket')) {
    server.on('upgrade', function (req, socket, head) {
      if (check(req)) {
        self.handleUpgrade(req, socket, head);
      } else if (false !== options.destroyUpgrade) {
        // default node behavior is to disconnect when no handlers
        // but by adding a handler, we prevent that
        // and if no eio thing handles the upgrade
        // then the socket needs to die!
        setTimeout(function () {
          if (socket.writable && socket.bytesWritten <= 0) {
            return socket.end();
          }
        }, destroyUpgradeTimeout);
      }
    });
  }
};

/**
 * Closes the connection
 *
 * @param {net.Socket} socket
 * @param {code} error code
 * @api private
 */

function abortConnection (socket, code) {
  if (socket.writable) {
    var message = Server.errorMessages.hasOwnProperty(code) ? Server.errorMessages[code] : code;
    var length = Buffer.byteLength(message);
    socket.write(
      'HTTP/1.1 400 Bad Request\r\n' +
      'Connection: close\r\n' +
      'Content-type: text/html\r\n' +
      'Content-Length: ' + length + '\r\n' +
      '\r\n' +
      message
    );
  }
  socket.destroy();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16), __webpack_require__(1).Buffer))

/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var Polling = __webpack_require__(458);
var qs = __webpack_require__(247);
var rDoubleSlashes = /\\\\n/g;
var rSlashes = /(\\)?\\n/g;
var util = __webpack_require__(37);

/**
 * Module exports.
 */

module.exports = JSONP;

/**
 * JSON-P polling transport.
 *
 * @api public
 */

function JSONP (req) {
  Polling.call(this, req);

  this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';
  this.foot = ');';
}

/**
 * Inherits from Polling.
 */

util.inherits(JSONP, Polling);

/**
 * Handles incoming data.
 * Due to a bug in \n handling by browsers, we expect a escaped string.
 *
 * @api private
 */

JSONP.prototype.onData = function (data) {
  // we leverage the qs module so that we get built-in DoS protection
  // and the fast alternative to decodeURIComponent
  data = qs.parse(data).d;
  if ('string' === typeof data) {
    // client will send already escaped newlines as \\\\n and newlines as \\n
    // \\n must be replaced with \n and \\\\n with \\n
    data = data.replace(rSlashes, function (match, slashes) {
      return slashes ? match : '\n';
    });
    Polling.prototype.onData.call(this, data.replace(rDoubleSlashes, '\\n'));
  }
};

/**
 * Performs the write.
 *
 * @api private
 */

JSONP.prototype.doWrite = function (data, options, callback) {
  // we must output valid javascript, not valid json
  // see: http://timelessrepo.com/json-isnt-a-javascript-subset
  var js = JSON.stringify(data)
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029');

  // prepare response
  data = this.head + js + this.foot;

  Polling.prototype.doWrite.call(this, data, options, callback);
};


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var Polling = __webpack_require__(458);
var util = __webpack_require__(37);

/**
 * Module exports.
 */

module.exports = XHR;

/**
 * Ajax polling transport.
 *
 * @api public
 */

function XHR (req) {
  Polling.call(this, req);
}

/**
 * Inherits from Polling.
 */

util.inherits(XHR, Polling);

/**
 * Overrides `onRequest` to handle `OPTIONS`..
 *
 * @param {http.IncomingMessage}
 * @api private
 */

XHR.prototype.onRequest = function (req) {
  if ('OPTIONS' === req.method) {
    var res = req.res;
    var headers = this.headers(req);
    headers['Access-Control-Allow-Headers'] = 'Content-Type';
    res.writeHead(200, headers);
    res.end();
  } else {
    Polling.prototype.onRequest.call(this, req);
  }
};

/**
 * Returns headers for a response.
 *
 * @param {http.IncomingMessage} request
 * @param {Object} extra headers
 * @api private
 */

XHR.prototype.headers = function (req, headers) {
  headers = headers || {};

  if (req.headers.origin) {
    headers['Access-Control-Allow-Credentials'] = 'true';
    headers['Access-Control-Allow-Origin'] = req.headers.origin;
  } else {
    headers['Access-Control-Allow-Origin'] = '*';
  }

  return Polling.prototype.headers.call(this, req, headers);
};


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * Module dependencies.
 */

var Transport = __webpack_require__(243);
var parser = __webpack_require__(62);
var util = __webpack_require__(37);
var debug = __webpack_require__(120)('engine:ws');

/**
 * Export the constructor.
 */

module.exports = WebSocket;

/**
 * WebSocket transport
 *
 * @param {http.IncomingMessage}
 * @api public
 */

function WebSocket (req) {
  Transport.call(this, req);
  var self = this;
  this.socket = req.websocket;
  this.socket.on('message', this.onData.bind(this));
  this.socket.once('close', this.onClose.bind(this));
  this.socket.on('error', this.onError.bind(this));
  this.socket.on('headers', onHeaders);
  this.writable = true;
  this.perMessageDeflate = null;

  function onHeaders (headers) {
    self.emit('headers', headers);
  }
}

/**
 * Inherits from Transport.
 */

util.inherits(WebSocket, Transport);

/**
 * Transport name
 *
 * @api public
 */

WebSocket.prototype.name = 'websocket';

/**
 * Advertise upgrade support.
 *
 * @api public
 */

WebSocket.prototype.handlesUpgrades = true;

/**
 * Advertise framing support.
 *
 * @api public
 */

WebSocket.prototype.supportsFraming = true;

/**
 * Processes the incoming data.
 *
 * @param {String} encoded packet
 * @api private
 */

WebSocket.prototype.onData = function (data) {
  debug('received "%s"', data);
  Transport.prototype.onData.call(this, data);
};

/**
 * Writes a packet payload.
 *
 * @param {Array} packets
 * @api private
 */

WebSocket.prototype.send = function (packets) {
  var self = this;

  for (var i = 0; i < packets.length; i++) {
    var packet = packets[i];
    parser.encodePacket(packet, self.supportsBinary, send);
  }

  function send (data) {
    debug('writing "%s"', data);

    // always creates a new object since ws modifies it
    var opts = {};
    if (packet.options) {
      opts.compress = packet.options.compress;
    }

    if (self.perMessageDeflate) {
      var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
      if (len < self.perMessageDeflate.threshold) {
        opts.compress = false;
      }
    }

    self.writable = false;
    self.socket.send(data, opts, onEnd);
  }

  function onEnd (err) {
    if (err) return self.onError('write error', err.stack);
    self.writable = true;
    self.emit('drain');
  }
};

/**
 * Closes the transport.
 *
 * @api private
 */

WebSocket.prototype.doClose = function (fn) {
  debug('closing');
  this.socket.close();
  fn && fn();
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(228);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty;

/**
 * An auto incrementing id which we can use to create "unique" Ultron instances
 * so we can track the event emitters that are added through the Ultron
 * interface.
 *
 * @type {Number}
 * @private
 */
var id = 0;

/**
 * Ultron is high-intelligence robot. It gathers intelligence so it can start improving
 * upon his rudimentary design. It will learn from your EventEmitting patterns
 * and exterminate them.
 *
 * @constructor
 * @param {EventEmitter} ee EventEmitter instance we need to wrap.
 * @api public
 */
function Ultron(ee) {
  if (!(this instanceof Ultron)) return new Ultron(ee);

  this.id = id++;
  this.ee = ee;
}

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.on = function on(event, fn, context) {
  fn.__ultron = this.id;
  this.ee.on(event, fn, context);

  return this;
};
/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.once = function once(event, fn, context) {
  fn.__ultron = this.id;
  this.ee.once(event, fn, context);

  return this;
};

/**
 * Remove the listeners we assigned for the given event.
 *
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.remove = function remove() {
  var args = arguments
    , event;

  //
  // When no event names are provided we assume that we need to clear all the
  // events that were assigned through us.
  //
  if (args.length === 1 && 'string' === typeof args[0]) {
    args = args[0].split(/[, ]+/);
  } else if (!args.length) {
    args = [];

    for (event in this.ee._events) {
      if (has.call(this.ee._events, event)) args.push(event);
    }
  }

  for (var i = 0; i < args.length; i++) {
    var listeners = this.ee.listeners(args[i]);

    for (var j = 0; j < listeners.length; j++) {
      event = listeners[j];

      //
      // Once listeners have a `listener` property that stores the real listener
      // in the EventEmitter that ships with Node.js.
      //
      if (event.listener) {
        if (event.listener.__ultron !== this.id) continue;
        delete event.listener.__ultron;
      } else {
        if (event.__ultron !== this.id) continue;
        delete event.__ultron;
      }

      this.ee.removeListener(args[i], event);
    }
  }

  return this;
};

/**
 * Destroy the Ultron instance, remove all listeners and release all references.
 *
 * @returns {Boolean}
 * @api public
 */
Ultron.prototype.destroy = function destroy() {
  if (!this.ee) return false;

  this.remove();
  this.ee = null;

  return true;
};

//
// Expose the module.
//
module.exports = Ultron;


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var WS = module.exports = __webpack_require__(464);

WS.Server = __webpack_require__(568);
WS.Sender = __webpack_require__(463);
WS.Receiver = __webpack_require__(462);

/**
 * Create a new WebSocket server.
 *
 * @param {Object} options Server options
 * @param {Function} fn Optional connection listener.
 * @returns {WS.Server}
 * @api public
 */
WS.createServer = function createServer(options, fn) {
  var server = new WS.Server(options);

  if (typeof fn === 'function') {
    server.on('connection', fn);
  }

  return server;
};

/**
 * Create a new WebSocket connection.
 *
 * @param {String} address The URL/address we need to connect to.
 * @param {Function} fn Open listener.
 * @returns {WS}
 * @api public
 */
WS.connect = WS.createConnection = function connect(address, fn) {
  var client = new WS(address);

  if (typeof fn === 'function') {
    client.on('open', fn);
  }

  return client;
};


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var util = __webpack_require__(37);

function BufferPool(initialSize, growStrategy, shrinkStrategy) {
  if (this instanceof BufferPool === false) {
    throw new TypeError("Classes can't be function-called");
  }

  if (typeof initialSize === 'function') {
    shrinkStrategy = growStrategy;
    growStrategy = initialSize;
    initialSize = 0;
  }
  else if (typeof initialSize === 'undefined') {
    initialSize = 0;
  }
  this._growStrategy = (growStrategy || function(db, size) {
    return db.used + size;
  }).bind(null, this);
  this._shrinkStrategy = (shrinkStrategy || function(db) {
    return initialSize;
  }).bind(null, this);
  this._buffer = initialSize ? new Buffer(initialSize) : null;
  this._offset = 0;
  this._used = 0;
  this._changeFactor = 0;
  this.__defineGetter__('size', function(){
    return this._buffer == null ? 0 : this._buffer.length;
  });
  this.__defineGetter__('used', function(){
    return this._used;
  });
}

BufferPool.prototype.get = function(length) {
  if (this._buffer == null || this._offset + length > this._buffer.length) {
    var newBuf = new Buffer(this._growStrategy(length));
    this._buffer = newBuf;
    this._offset = 0;
  }
  this._used += length;
  var buf = this._buffer.slice(this._offset, this._offset + length);
  this._offset += length;
  return buf;
}

BufferPool.prototype.reset = function(forceNewBuffer) {
  var len = this._shrinkStrategy();
  if (len < this.size) this._changeFactor -= 1;
  if (forceNewBuffer || this._changeFactor < -2) {
    this._changeFactor = 0;
    this._buffer = len ? new Buffer(len) : null;
  }
  this._offset = 0;
  this._used = 0;
}

module.exports = BufferPool;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 563 */
/***/ (function(module, exports) {

/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

exports.BufferUtil = {
  merge: function(mergedBuffer, buffers) {
    var offset = 0;
    for (var i = 0, l = buffers.length; i < l; ++i) {
      var buf = buffers[i];
      buf.copy(mergedBuffer, offset);
      offset += buf.length;
    }
  },
  mask: function(source, mask, output, offset, length) {
    var maskNum = mask.readUInt32LE(0, true);
    var i = 0;
    for (; i < length - 3; i += 4) {
      var num = maskNum ^ source.readUInt32LE(i, true);
      if (num < 0) num = 4294967296 + num;
      output.writeUInt32LE(num, offset + i, true);
    }
    switch (length % 4) {
      case 3: output[offset + i + 2] = source[i + 2] ^ mask[2];
      case 2: output[offset + i + 1] = source[i + 1] ^ mask[1];
      case 1: output[offset + i] = source[i] ^ mask[0];
      case 0:;
    }
  },
  unmask: function(data, mask) {
    var maskNum = mask.readUInt32LE(0, true);
    var length = data.length;
    var i = 0;
    for (; i < length - 3; i += 4) {
      var num = maskNum ^ data.readUInt32LE(i, true);
      if (num < 0) num = 4294967296 + num;
      data.writeUInt32LE(num, i, true);
    }
    switch (length % 4) {
      case 3: data[i + 2] = data[i + 2] ^ mask[2];
      case 2: data[i + 1] = data[i + 1] ^ mask[1];
      case 1: data[i] = data[i] ^ mask[0];
      case 0:;
    }
  }
}


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var util = __webpack_require__(37);

/**
 * State constants
 */

var EMPTY = 0
  , BODY = 1;
var BINARYLENGTH = 2
  , BINARYBODY = 3;

/**
 * Hixie Receiver implementation
 */

function Receiver () {
  if (this instanceof Receiver === false) {
    throw new TypeError("Classes can't be function-called");
  }

  this.state = EMPTY;
  this.buffers = [];
  this.messageEnd = -1;
  this.spanLength = 0;
  this.dead = false;

  this.onerror = function() {};
  this.ontext = function() {};
  this.onbinary = function() {};
  this.onclose = function() {};
  this.onping = function() {};
  this.onpong = function() {};
}

module.exports = Receiver;

/**
 * Add new data to the parser.
 *
 * @api public
 */

Receiver.prototype.add = function(data) {
  if (this.dead) return;
  var self = this;
  function doAdd() {
    if (self.state === EMPTY) {
      if (data.length == 2 && data[0] == 0xFF && data[1] == 0x00) {
        self.reset();
        self.onclose();
        return;
      }
      if (data[0] === 0x80) {
        self.messageEnd = 0;
        self.state = BINARYLENGTH;
        data = data.slice(1);
      } else {

      if (data[0] !== 0x00) {
        self.error('payload must start with 0x00 byte', true);
        return;
      }
      data = data.slice(1);
      self.state = BODY;

      }
    }
    if (self.state === BINARYLENGTH) {
      var i = 0;
      while ((i < data.length) && (data[i] & 0x80)) {
        self.messageEnd = 128 * self.messageEnd + (data[i] & 0x7f);
        ++i;
      }
      if (i < data.length) {
        self.messageEnd = 128 * self.messageEnd + (data[i] & 0x7f);
        self.state = BINARYBODY;
        ++i;
      }
      if (i > 0)
        data = data.slice(i);
    }
    if (self.state === BINARYBODY) {
      var dataleft = self.messageEnd - self.spanLength;
      if (data.length >= dataleft) {
        // consume the whole buffer to finish the frame
        self.buffers.push(data);
        self.spanLength += dataleft;
        self.messageEnd = dataleft;
        return self.parse();
      }
      // frame's not done even if we consume it all
      self.buffers.push(data);
      self.spanLength += data.length;
      return;
    }
    self.buffers.push(data);
    if ((self.messageEnd = bufferIndex(data, 0xFF)) != -1) {
      self.spanLength += self.messageEnd;
      return self.parse();
    }
    else self.spanLength += data.length;
  }
  while(data) data = doAdd();
};

/**
 * Releases all resources used by the receiver.
 *
 * @api public
 */

Receiver.prototype.cleanup = function() {
  this.dead = true;
  this.state = EMPTY;
  this.buffers = [];
};

/**
 * Process buffered data.
 *
 * @api public
 */

Receiver.prototype.parse = function() {
  var output = new Buffer(this.spanLength);
  var outputIndex = 0;
  for (var bi = 0, bl = this.buffers.length; bi < bl - 1; ++bi) {
    var buffer = this.buffers[bi];
    buffer.copy(output, outputIndex);
    outputIndex += buffer.length;
  }
  var lastBuffer = this.buffers[this.buffers.length - 1];
  if (this.messageEnd > 0) lastBuffer.copy(output, outputIndex, 0, this.messageEnd);
  if (this.state !== BODY) --this.messageEnd;
  var tail = null;
  if (this.messageEnd < lastBuffer.length - 1) {
    tail = lastBuffer.slice(this.messageEnd + 1);
  }
  this.reset();
  this.ontext(output.toString('utf8'));
  return tail;
};

/**
 * Handles an error
 *
 * @api private
 */

Receiver.prototype.error = function (reason, terminate) {
  if (this.dead) return;
  this.reset();
  if(typeof reason == 'string'){
    this.onerror(new Error(reason), terminate);
  }
  else if(reason.constructor == Error){
    this.onerror(reason, terminate);
  }
  else{
    this.onerror(new Error("An error occured"),terminate);
  }
  return this;
};

/**
 * Reset parser state
 *
 * @api private
 */

Receiver.prototype.reset = function (reason) {
  if (this.dead) return;
  this.state = EMPTY;
  this.buffers = [];
  this.messageEnd = -1;
  this.spanLength = 0;
};

/**
 * Internal api
 */

function bufferIndex(buffer, byte) {
  for (var i = 0, l = buffer.length; i < l; ++i) {
    if (buffer[i] === byte) return i;
  }
  return -1;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var events = __webpack_require__(41)
  , util = __webpack_require__(37)
  , EventEmitter = events.EventEmitter;

/**
 * Hixie Sender implementation
 */

function Sender(socket) {
  if (this instanceof Sender === false) {
    throw new TypeError("Classes can't be function-called");
  }

  events.EventEmitter.call(this);

  this.socket = socket;
  this.continuationFrame = false;
  this.isClosed = false;
}

module.exports = Sender;

/**
 * Inherits from EventEmitter.
 */

util.inherits(Sender, events.EventEmitter);

/**
 * Frames and writes data.
 *
 * @api public
 */

Sender.prototype.send = function(data, options, cb) {
  if (this.isClosed) return;

  var isString = typeof data == 'string'
    , length = isString ? Buffer.byteLength(data) : data.length
    , lengthbytes = (length > 127) ? 2 : 1 // assume less than 2**14 bytes
    , writeStartMarker = this.continuationFrame == false
    , writeEndMarker = !options || !(typeof options.fin != 'undefined' && !options.fin)
    , buffer = new Buffer((writeStartMarker ? ((options && options.binary) ? (1 + lengthbytes) : 1) : 0) + length + ((writeEndMarker && !(options && options.binary)) ? 1 : 0))
    , offset = writeStartMarker ? 1 : 0;

  if (writeStartMarker) {
    if (options && options.binary) {
      buffer.write('\x80', 'binary');
      // assume length less than 2**14 bytes
      if (lengthbytes > 1)
        buffer.write(String.fromCharCode(128+length/128), offset++, 'binary');
      buffer.write(String.fromCharCode(length&0x7f), offset++, 'binary');
    } else
      buffer.write('\x00', 'binary');
  }

  if (isString) buffer.write(data, offset, 'utf8');
  else data.copy(buffer, offset, 0);

  if (writeEndMarker) {
    if (options && options.binary) {
      // sending binary, not writing end marker
    } else
      buffer.write('\xff', offset + length, 'binary');
    this.continuationFrame = false;
  }
  else this.continuationFrame = true;

  try {
    this.socket.write(buffer, 'binary', cb);
  } catch (e) {
    this.error(e.toString());
  }
};

/**
 * Sends a close instruction to the remote party.
 *
 * @api public
 */

Sender.prototype.close = function(code, data, mask, cb) {
  if (this.isClosed) return;
  this.isClosed = true;
  try {
    if (this.continuationFrame) this.socket.write(new Buffer([0xff], 'binary'));
    this.socket.write(new Buffer([0xff, 0x00]), 'binary', cb);
  } catch (e) {
    this.error(e.toString());
  }
};

/**
 * Sends a ping message to the remote party. Not available for hixie.
 *
 * @api public
 */

Sender.prototype.ping = function(data, options) {};

/**
 * Sends a pong message to the remote party. Not available for hixie.
 *
 * @api public
 */

Sender.prototype.pong = function(data, options) {};

/**
 * Handles an error
 *
 * @api private
 */

Sender.prototype.error = function (reason) {
  this.emit('error', reason);
  return this;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 566 */
/***/ (function(module, exports) {

/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

exports.Validation = {
  isValidUTF8: function(buffer) {
    return true;
  }
};


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

try {
  module.exports = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"utf-8-validate\""); e.code = 'MODULE_NOT_FOUND';; throw e; }()));
} catch (e) {
  module.exports = __webpack_require__(566);
}


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

var util = __webpack_require__(37)
  , events = __webpack_require__(41)
  , http = __webpack_require__(123)
  , crypto = __webpack_require__(222)
  , Options = __webpack_require__(467)
  , WebSocket = __webpack_require__(464)
  , Extensions = __webpack_require__(461)
  , PerMessageDeflate = __webpack_require__(225)
  , tls = __webpack_require__(229)
  , url = __webpack_require__(83);

/**
 * WebSocket Server implementation
 */

function WebSocketServer(options, callback) {
  if (this instanceof WebSocketServer === false) {
    return new WebSocketServer(options, callback);
  }

  events.EventEmitter.call(this);

  options = new Options({
    host: '0.0.0.0',
    port: null,
    server: null,
    verifyClient: null,
    handleProtocols: null,
    path: null,
    noServer: false,
    disableHixie: false,
    clientTracking: true,
    perMessageDeflate: true,
    maxPayload: 100 * 1024 * 1024
  }).merge(options);

  if (!options.isDefinedAndNonNull('port') && !options.isDefinedAndNonNull('server') && !options.value.noServer) {
    throw new TypeError('`port` or a `server` must be provided');
  }

  var self = this;

  if (options.isDefinedAndNonNull('port')) {
    this._server = http.createServer(function (req, res) {
      var body = http.STATUS_CODES[426];
      res.writeHead(426, {
        'Content-Length': body.length,
        'Content-Type': 'text/plain'
      });
      res.end(body);
    });
    this._server.allowHalfOpen = false;
    this._server.listen(options.value.port, options.value.host, callback);
    this._closeServer = function() { if (self._server) self._server.close(); };
  }
  else if (options.value.server) {
    this._server = options.value.server;
    if (options.value.path) {
      // take note of the path, to avoid collisions when multiple websocket servers are
      // listening on the same http server
      if (this._server._webSocketPaths && options.value.server._webSocketPaths[options.value.path]) {
        throw new Error('two instances of WebSocketServer cannot listen on the same http server path');
      }
      if (typeof this._server._webSocketPaths !== 'object') {
        this._server._webSocketPaths = {};
      }
      this._server._webSocketPaths[options.value.path] = 1;
    }
  }
  if (this._server) {
    this._onceServerListening = function() { self.emit('listening'); };
    this._server.once('listening', this._onceServerListening);
  }

  if (typeof this._server != 'undefined') {
    this._onServerError = function(error) { self.emit('error', error) };
    this._server.on('error', this._onServerError);
    this._onServerUpgrade = function(req, socket, upgradeHead) {
      //copy upgradeHead to avoid retention of large slab buffers used in node core
      var head = new Buffer(upgradeHead.length);
      upgradeHead.copy(head);

      self.handleUpgrade(req, socket, head, function(client) {
        self.emit('connection'+req.url, client);
        self.emit('connection', client);
      });
    };
    this._server.on('upgrade', this._onServerUpgrade);
  }

  this.options = options.value;
  this.path = options.value.path;
  this.clients = [];
}

/**
 * Inherits from EventEmitter.
 */

util.inherits(WebSocketServer, events.EventEmitter);

/**
 * Immediately shuts down the connection.
 *
 * @api public
 */

WebSocketServer.prototype.close = function(callback) {
  // terminate all associated clients
  var error = null;
  try {
    for (var i = 0, l = this.clients.length; i < l; ++i) {
      this.clients[i].terminate();
    }
  }
  catch (e) {
    error = e;
  }

  // remove path descriptor, if any
  if (this.path && this._server._webSocketPaths) {
    delete this._server._webSocketPaths[this.path];
    if (Object.keys(this._server._webSocketPaths).length == 0) {
      delete this._server._webSocketPaths;
    }
  }

  // close the http server if it was internally created
  try {
    if (typeof this._closeServer !== 'undefined') {
      this._closeServer();
    }
  }
  finally {
    if (this._server) {
      this._server.removeListener('listening', this._onceServerListening);
      this._server.removeListener('error', this._onServerError);
      this._server.removeListener('upgrade', this._onServerUpgrade);
    }
    delete this._server;
  }
  if(callback)
    callback(error);
  else if(error)
    throw error;
}

/**
 * Handle a HTTP Upgrade request.
 *
 * @api public
 */

WebSocketServer.prototype.handleUpgrade = function(req, socket, upgradeHead, cb) {
  // check for wrong path
  if (this.options.path) {
    var u = url.parse(req.url);
    if (u && u.pathname !== this.options.path) return;
  }

  if (typeof req.headers.upgrade === 'undefined' || req.headers.upgrade.toLowerCase() !== 'websocket') {
    abortConnection(socket, 400, 'Bad Request');
    return;
  }

  if (req.headers['sec-websocket-key1']) handleHixieUpgrade.apply(this, arguments);
  else handleHybiUpgrade.apply(this, arguments);
}

module.exports = WebSocketServer;

/**
 * Entirely private apis,
 * which may or may not be bound to a sepcific WebSocket instance.
 */

function handleHybiUpgrade(req, socket, upgradeHead, cb) {
  // handle premature socket errors
  var errorHandler = function() {
    try { socket.destroy(); } catch (e) {}
  }
  socket.on('error', errorHandler);

  // verify key presence
  if (!req.headers['sec-websocket-key']) {
    abortConnection(socket, 400, 'Bad Request');
    return;
  }

  // verify version
  var version = parseInt(req.headers['sec-websocket-version']);
  if ([8, 13].indexOf(version) === -1) {
    abortConnection(socket, 400, 'Bad Request');
    return;
  }

  // verify protocol
  var protocols = req.headers['sec-websocket-protocol'];

  // verify client
  var origin = version < 13 ?
    req.headers['sec-websocket-origin'] :
    req.headers['origin'];

  // handle extensions offer
  var extensionsOffer = Extensions.parse(req.headers['sec-websocket-extensions']);

  // handler to call when the connection sequence completes
  var self = this;
  var completeHybiUpgrade2 = function(protocol) {

    // calc key
    var key = req.headers['sec-websocket-key'];
    var shasum = crypto.createHash('sha1');
    shasum.update(key + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11");
    key = shasum.digest('base64');

    var headers = [
        'HTTP/1.1 101 Switching Protocols'
      , 'Upgrade: websocket'
      , 'Connection: Upgrade'
      , 'Sec-WebSocket-Accept: ' + key
    ];

    if (typeof protocol != 'undefined') {
      headers.push('Sec-WebSocket-Protocol: ' + protocol);
    }

    var extensions = {};
    try {
      extensions = acceptExtensions.call(self, extensionsOffer);
    } catch (err) {
      abortConnection(socket, 400, 'Bad Request');
      return;
    }

    if (Object.keys(extensions).length) {
      var serverExtensions = {};
      Object.keys(extensions).forEach(function(token) {
        serverExtensions[token] = [extensions[token].params]
      });
      headers.push('Sec-WebSocket-Extensions: ' + Extensions.format(serverExtensions));
    }

    // allows external modification/inspection of handshake headers
    self.emit('headers', headers);

    socket.setTimeout(0);
    socket.setNoDelay(true);
    try {
      socket.write(headers.concat('', '').join('\r\n'));
    }
    catch (e) {
      // if the upgrade write fails, shut the connection down hard
      try { socket.destroy(); } catch (e) {}
      return;
    }

    var client = new WebSocket([req, socket, upgradeHead], {
      protocolVersion: version,
      protocol: protocol,
      extensions: extensions,
      maxPayload: self.options.maxPayload
    });

    if (self.options.clientTracking) {
      self.clients.push(client);
      client.on('close', function() {
        var index = self.clients.indexOf(client);
        if (index != -1) {
          self.clients.splice(index, 1);
        }
      });
    }

    // signal upgrade complete
    socket.removeListener('error', errorHandler);
    cb(client);
  }

  // optionally call external protocol selection handler before
  // calling completeHybiUpgrade2
  var completeHybiUpgrade1 = function() {
    // choose from the sub-protocols
    if (typeof self.options.handleProtocols == 'function') {
        var protList = (protocols || "").split(/, */);
        var callbackCalled = false;
        var res = self.options.handleProtocols(protList, function(result, protocol) {
          callbackCalled = true;
          if (!result) abortConnection(socket, 401, 'Unauthorized');
          else completeHybiUpgrade2(protocol);
        });
        if (!callbackCalled) {
            // the handleProtocols handler never called our callback
            abortConnection(socket, 501, 'Could not process protocols');
        }
        return;
    } else {
        if (typeof protocols !== 'undefined') {
            completeHybiUpgrade2(protocols.split(/, */)[0]);
        }
        else {
            completeHybiUpgrade2();
        }
    }
  }

  // optionally call external client verification handler
  if (typeof this.options.verifyClient == 'function') {
    var info = {
      origin: origin,
      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',
      req: req
    };
    if (this.options.verifyClient.length == 2) {
      this.options.verifyClient(info, function(result, code, name) {
        if (typeof code === 'undefined') code = 401;
        if (typeof name === 'undefined') name = http.STATUS_CODES[code];

        if (!result) abortConnection(socket, code, name);
        else completeHybiUpgrade1();
      });
      return;
    }
    else if (!this.options.verifyClient(info)) {
      abortConnection(socket, 401, 'Unauthorized');
      return;
    }
  }

  completeHybiUpgrade1();
}

function handleHixieUpgrade(req, socket, upgradeHead, cb) {
  // handle premature socket errors
  var errorHandler = function() {
    try { socket.destroy(); } catch (e) {}
  }
  socket.on('error', errorHandler);

  // bail if options prevent hixie
  if (this.options.disableHixie) {
    abortConnection(socket, 401, 'Hixie support disabled');
    return;
  }

  // verify key presence
  if (!req.headers['sec-websocket-key2']) {
    abortConnection(socket, 400, 'Bad Request');
    return;
  }

  var origin = req.headers['origin']
    , self = this;

  // setup handshake completion to run after client has been verified
  var onClientVerified = function() {
    var wshost;
    if (!req.headers['x-forwarded-host'])
        wshost = req.headers.host;
    else
        wshost = req.headers['x-forwarded-host'];
    var location = ((req.headers['x-forwarded-proto'] === 'https' || socket.encrypted) ? 'wss' : 'ws') + '://' + wshost + req.url
      , protocol = req.headers['sec-websocket-protocol'];

    // build the response header and return a Buffer
    var buildResponseHeader = function() {
      var headers = [
          'HTTP/1.1 101 Switching Protocols'
        , 'Upgrade: WebSocket'
        , 'Connection: Upgrade'
        , 'Sec-WebSocket-Location: ' + location
      ];
      if (typeof protocol != 'undefined') headers.push('Sec-WebSocket-Protocol: ' + protocol);
      if (typeof origin != 'undefined') headers.push('Sec-WebSocket-Origin: ' + origin);

      return new Buffer(headers.concat('', '').join('\r\n'));
    };

    // send handshake response before receiving the nonce
    var handshakeResponse = function() {

      socket.setTimeout(0);
      socket.setNoDelay(true);

      var headerBuffer = buildResponseHeader();

      try {
        socket.write(headerBuffer, 'binary', function(err) {
          // remove listener if there was an error
          if (err) socket.removeListener('data', handler);
          return;
        });
      } catch (e) {
        try { socket.destroy(); } catch (e) {}
        return;
      };
    };

    // handshake completion code to run once nonce has been successfully retrieved
    var completeHandshake = function(nonce, rest, headerBuffer) {
      // calculate key
      var k1 = req.headers['sec-websocket-key1']
        , k2 = req.headers['sec-websocket-key2']
        , md5 = crypto.createHash('md5');

      [k1, k2].forEach(function (k) {
        var n = parseInt(k.replace(/[^\d]/g, ''))
          , spaces = k.replace(/[^ ]/g, '').length;
        if (spaces === 0 || n % spaces !== 0){
          abortConnection(socket, 400, 'Bad Request');
          return;
        }
        n /= spaces;
        md5.update(String.fromCharCode(
          n >> 24 & 0xFF,
          n >> 16 & 0xFF,
          n >> 8  & 0xFF,
          n       & 0xFF));
      });
      md5.update(nonce.toString('binary'));

      socket.setTimeout(0);
      socket.setNoDelay(true);

      try {
        var hashBuffer = new Buffer(md5.digest('binary'), 'binary');
        var handshakeBuffer = new Buffer(headerBuffer.length + hashBuffer.length);
        headerBuffer.copy(handshakeBuffer, 0);
        hashBuffer.copy(handshakeBuffer, headerBuffer.length);

        // do a single write, which - upon success - causes a new client websocket to be setup
        socket.write(handshakeBuffer, 'binary', function(err) {
          if (err) return; // do not create client if an error happens
          var client = new WebSocket([req, socket, rest], {
            protocolVersion: 'hixie-76',
            protocol: protocol
          });
          if (self.options.clientTracking) {
            self.clients.push(client);
            client.on('close', function() {
              var index = self.clients.indexOf(client);
              if (index != -1) {
                self.clients.splice(index, 1);
              }
            });
          }

          // signal upgrade complete
          socket.removeListener('error', errorHandler);
          cb(client);
        });
      }
      catch (e) {
        try { socket.destroy(); } catch (e) {}
        return;
      }
    }

    // retrieve nonce
    var nonceLength = 8;
    if (upgradeHead && upgradeHead.length >= nonceLength) {
      var nonce = upgradeHead.slice(0, nonceLength);
      var rest = upgradeHead.length > nonceLength ? upgradeHead.slice(nonceLength) : null;
      completeHandshake.call(self, nonce, rest, buildResponseHeader());
    }
    else {
      // nonce not present in upgradeHead
      var nonce = new Buffer(nonceLength);
      upgradeHead.copy(nonce, 0);
      var received = upgradeHead.length;
      var rest = null;
      var handler = function (data) {
        var toRead = Math.min(data.length, nonceLength - received);
        if (toRead === 0) return;
        data.copy(nonce, received, 0, toRead);
        received += toRead;
        if (received == nonceLength) {
          socket.removeListener('data', handler);
          if (toRead < data.length) rest = data.slice(toRead);

          // complete the handshake but send empty buffer for headers since they have already been sent
          completeHandshake.call(self, nonce, rest, new Buffer(0));
        }
      }

      // handle additional data as we receive it
      socket.on('data', handler);

      // send header response before we have the nonce to fix haproxy buffering
      handshakeResponse();
    }
  }

  // verify client
  if (typeof this.options.verifyClient == 'function') {
    var info = {
      origin: origin,
      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',
      req: req
    };
    if (this.options.verifyClient.length == 2) {
      var self = this;
      this.options.verifyClient(info, function(result, code, name) {
        if (typeof code === 'undefined') code = 401;
        if (typeof name === 'undefined') name = http.STATUS_CODES[code];

        if (!result) abortConnection(socket, code, name);
        else onClientVerified.apply(self);
      });
      return;
    }
    else if (!this.options.verifyClient(info)) {
      abortConnection(socket, 401, 'Unauthorized');
      return;
    }
  }

  // no client verification required
  onClientVerified();
}

function acceptExtensions(offer) {
  var extensions = {};
  var options = this.options.perMessageDeflate;
  var maxPayload = this.options.maxPayload;
  if (options && offer[PerMessageDeflate.extensionName]) {
    var perMessageDeflate = new PerMessageDeflate(options !== true ? options : {}, true, maxPayload);
    perMessageDeflate.accept(offer[PerMessageDeflate.extensionName]);
    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
  }
  return extensions;
}

function abortConnection(socket, code, name) {
  try {
    var response = [
      'HTTP/1.1 ' + code + ' ' + name,
      'Content-type: text/html'
    ];
    socket.write(response.concat('', '').join('\r\n'));
  }
  catch (e) { /* ignore errors - we've aborted this connection */ }
  finally {
    // ensure that an early aborted connection is shut down completely
    try { socket.destroy(); } catch (e) {}
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 569 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 570 */
/***/ (function(module, exports) {


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

var hash = __webpack_require__(78);
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

var hmac = exports;

var hash = __webpack_require__(78);
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

var hash = __webpack_require__(78);
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

var hash = __webpack_require__(78);
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

var utils = exports;
var inherits = __webpack_require__(11);

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(78);
var utils = __webpack_require__(466);
var assert = __webpack_require__(79);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

var http = __webpack_require__(123);

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
}


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = "function" === "function" && __webpack_require__(114);

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return JSON3;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(234)(module), __webpack_require__(10)))

/***/ }),
/* 579 */
/***/ (function(module, exports) {

module.exports = {
	"application/1d-interleaved-parityfec": {
		"source": "iana"
	},
	"application/3gpdash-qoe-report+xml": {
		"source": "iana"
	},
	"application/3gpp-ims+xml": {
		"source": "iana"
	},
	"application/a2l": {
		"source": "iana"
	},
	"application/activemessage": {
		"source": "iana"
	},
	"application/alto-costmap+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-costmapfilter+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-directory+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-endpointcost+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-endpointcostparams+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-endpointprop+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-endpointpropparams+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-error+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-networkmap+json": {
		"source": "iana",
		"compressible": true
	},
	"application/alto-networkmapfilter+json": {
		"source": "iana",
		"compressible": true
	},
	"application/aml": {
		"source": "iana"
	},
	"application/andrew-inset": {
		"source": "iana",
		"extensions": [
			"ez"
		]
	},
	"application/applefile": {
		"source": "iana"
	},
	"application/applixware": {
		"source": "apache",
		"extensions": [
			"aw"
		]
	},
	"application/atf": {
		"source": "iana"
	},
	"application/atfx": {
		"source": "iana"
	},
	"application/atom+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"atom"
		]
	},
	"application/atomcat+xml": {
		"source": "iana",
		"extensions": [
			"atomcat"
		]
	},
	"application/atomdeleted+xml": {
		"source": "iana"
	},
	"application/atomicmail": {
		"source": "iana"
	},
	"application/atomsvc+xml": {
		"source": "iana",
		"extensions": [
			"atomsvc"
		]
	},
	"application/atxml": {
		"source": "iana"
	},
	"application/auth-policy+xml": {
		"source": "iana"
	},
	"application/bacnet-xdd+zip": {
		"source": "iana"
	},
	"application/batch-smtp": {
		"source": "iana"
	},
	"application/bdoc": {
		"compressible": false,
		"extensions": [
			"bdoc"
		]
	},
	"application/beep+xml": {
		"source": "iana"
	},
	"application/calendar+json": {
		"source": "iana",
		"compressible": true
	},
	"application/calendar+xml": {
		"source": "iana"
	},
	"application/call-completion": {
		"source": "iana"
	},
	"application/cals-1840": {
		"source": "iana"
	},
	"application/cbor": {
		"source": "iana"
	},
	"application/ccmp+xml": {
		"source": "iana"
	},
	"application/ccxml+xml": {
		"source": "iana",
		"extensions": [
			"ccxml"
		]
	},
	"application/cdfx+xml": {
		"source": "iana"
	},
	"application/cdmi-capability": {
		"source": "iana",
		"extensions": [
			"cdmia"
		]
	},
	"application/cdmi-container": {
		"source": "iana",
		"extensions": [
			"cdmic"
		]
	},
	"application/cdmi-domain": {
		"source": "iana",
		"extensions": [
			"cdmid"
		]
	},
	"application/cdmi-object": {
		"source": "iana",
		"extensions": [
			"cdmio"
		]
	},
	"application/cdmi-queue": {
		"source": "iana",
		"extensions": [
			"cdmiq"
		]
	},
	"application/cdni": {
		"source": "iana"
	},
	"application/cea": {
		"source": "iana"
	},
	"application/cea-2018+xml": {
		"source": "iana"
	},
	"application/cellml+xml": {
		"source": "iana"
	},
	"application/cfw": {
		"source": "iana"
	},
	"application/clue_info+xml": {
		"source": "iana"
	},
	"application/cms": {
		"source": "iana"
	},
	"application/cnrp+xml": {
		"source": "iana"
	},
	"application/coap-group+json": {
		"source": "iana",
		"compressible": true
	},
	"application/coap-payload": {
		"source": "iana"
	},
	"application/commonground": {
		"source": "iana"
	},
	"application/conference-info+xml": {
		"source": "iana"
	},
	"application/cose": {
		"source": "iana"
	},
	"application/cose-key": {
		"source": "iana"
	},
	"application/cose-key-set": {
		"source": "iana"
	},
	"application/cpl+xml": {
		"source": "iana"
	},
	"application/csrattrs": {
		"source": "iana"
	},
	"application/csta+xml": {
		"source": "iana"
	},
	"application/cstadata+xml": {
		"source": "iana"
	},
	"application/csvm+json": {
		"source": "iana",
		"compressible": true
	},
	"application/cu-seeme": {
		"source": "apache",
		"extensions": [
			"cu"
		]
	},
	"application/cybercash": {
		"source": "iana"
	},
	"application/dart": {
		"compressible": true
	},
	"application/dash+xml": {
		"source": "iana",
		"extensions": [
			"mpd"
		]
	},
	"application/dashdelta": {
		"source": "iana"
	},
	"application/davmount+xml": {
		"source": "iana",
		"extensions": [
			"davmount"
		]
	},
	"application/dca-rft": {
		"source": "iana"
	},
	"application/dcd": {
		"source": "iana"
	},
	"application/dec-dx": {
		"source": "iana"
	},
	"application/dialog-info+xml": {
		"source": "iana"
	},
	"application/dicom": {
		"source": "iana"
	},
	"application/dicom+json": {
		"source": "iana",
		"compressible": true
	},
	"application/dicom+xml": {
		"source": "iana"
	},
	"application/dii": {
		"source": "iana"
	},
	"application/dit": {
		"source": "iana"
	},
	"application/dns": {
		"source": "iana"
	},
	"application/docbook+xml": {
		"source": "apache",
		"extensions": [
			"dbk"
		]
	},
	"application/dskpp+xml": {
		"source": "iana"
	},
	"application/dssc+der": {
		"source": "iana",
		"extensions": [
			"dssc"
		]
	},
	"application/dssc+xml": {
		"source": "iana",
		"extensions": [
			"xdssc"
		]
	},
	"application/dvcs": {
		"source": "iana"
	},
	"application/ecmascript": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"ecma"
		]
	},
	"application/edi-consent": {
		"source": "iana"
	},
	"application/edi-x12": {
		"source": "iana",
		"compressible": false
	},
	"application/edifact": {
		"source": "iana",
		"compressible": false
	},
	"application/efi": {
		"source": "iana"
	},
	"application/emergencycalldata.comment+xml": {
		"source": "iana"
	},
	"application/emergencycalldata.deviceinfo+xml": {
		"source": "iana"
	},
	"application/emergencycalldata.providerinfo+xml": {
		"source": "iana"
	},
	"application/emergencycalldata.serviceinfo+xml": {
		"source": "iana"
	},
	"application/emergencycalldata.subscriberinfo+xml": {
		"source": "iana"
	},
	"application/emma+xml": {
		"source": "iana",
		"extensions": [
			"emma"
		]
	},
	"application/emotionml+xml": {
		"source": "iana"
	},
	"application/encaprtp": {
		"source": "iana"
	},
	"application/epp+xml": {
		"source": "iana"
	},
	"application/epub+zip": {
		"source": "iana",
		"extensions": [
			"epub"
		]
	},
	"application/eshop": {
		"source": "iana"
	},
	"application/exi": {
		"source": "iana",
		"extensions": [
			"exi"
		]
	},
	"application/fastinfoset": {
		"source": "iana"
	},
	"application/fastsoap": {
		"source": "iana"
	},
	"application/fdt+xml": {
		"source": "iana"
	},
	"application/fits": {
		"source": "iana"
	},
	"application/font-sfnt": {
		"source": "iana"
	},
	"application/font-tdpfr": {
		"source": "iana",
		"extensions": [
			"pfr"
		]
	},
	"application/font-woff": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"woff"
		]
	},
	"application/font-woff2": {
		"compressible": false,
		"extensions": [
			"woff2"
		]
	},
	"application/framework-attributes+xml": {
		"source": "iana"
	},
	"application/geo+json": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"geojson"
		]
	},
	"application/gml+xml": {
		"source": "iana",
		"extensions": [
			"gml"
		]
	},
	"application/gpx+xml": {
		"source": "apache",
		"extensions": [
			"gpx"
		]
	},
	"application/gxf": {
		"source": "apache",
		"extensions": [
			"gxf"
		]
	},
	"application/gzip": {
		"source": "iana",
		"compressible": false
	},
	"application/h224": {
		"source": "iana"
	},
	"application/held+xml": {
		"source": "iana"
	},
	"application/http": {
		"source": "iana"
	},
	"application/hyperstudio": {
		"source": "iana",
		"extensions": [
			"stk"
		]
	},
	"application/ibe-key-request+xml": {
		"source": "iana"
	},
	"application/ibe-pkg-reply+xml": {
		"source": "iana"
	},
	"application/ibe-pp-data": {
		"source": "iana"
	},
	"application/iges": {
		"source": "iana"
	},
	"application/im-iscomposing+xml": {
		"source": "iana"
	},
	"application/index": {
		"source": "iana"
	},
	"application/index.cmd": {
		"source": "iana"
	},
	"application/index.obj": {
		"source": "iana"
	},
	"application/index.response": {
		"source": "iana"
	},
	"application/index.vnd": {
		"source": "iana"
	},
	"application/inkml+xml": {
		"source": "iana",
		"extensions": [
			"ink",
			"inkml"
		]
	},
	"application/iotp": {
		"source": "iana"
	},
	"application/ipfix": {
		"source": "iana",
		"extensions": [
			"ipfix"
		]
	},
	"application/ipp": {
		"source": "iana"
	},
	"application/isup": {
		"source": "iana"
	},
	"application/its+xml": {
		"source": "iana"
	},
	"application/java-archive": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"jar",
			"war",
			"ear"
		]
	},
	"application/java-serialized-object": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"ser"
		]
	},
	"application/java-vm": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"class"
		]
	},
	"application/javascript": {
		"source": "iana",
		"charset": "UTF-8",
		"compressible": true,
		"extensions": [
			"js"
		]
	},
	"application/jose": {
		"source": "iana"
	},
	"application/jose+json": {
		"source": "iana",
		"compressible": true
	},
	"application/jrd+json": {
		"source": "iana",
		"compressible": true
	},
	"application/json": {
		"source": "iana",
		"charset": "UTF-8",
		"compressible": true,
		"extensions": [
			"json",
			"map"
		]
	},
	"application/json-patch+json": {
		"source": "iana",
		"compressible": true
	},
	"application/json-seq": {
		"source": "iana"
	},
	"application/json5": {
		"extensions": [
			"json5"
		]
	},
	"application/jsonml+json": {
		"source": "apache",
		"compressible": true,
		"extensions": [
			"jsonml"
		]
	},
	"application/jwk+json": {
		"source": "iana",
		"compressible": true
	},
	"application/jwk-set+json": {
		"source": "iana",
		"compressible": true
	},
	"application/jwt": {
		"source": "iana"
	},
	"application/kpml-request+xml": {
		"source": "iana"
	},
	"application/kpml-response+xml": {
		"source": "iana"
	},
	"application/ld+json": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"jsonld"
		]
	},
	"application/lgr+xml": {
		"source": "iana"
	},
	"application/link-format": {
		"source": "iana"
	},
	"application/load-control+xml": {
		"source": "iana"
	},
	"application/lost+xml": {
		"source": "iana",
		"extensions": [
			"lostxml"
		]
	},
	"application/lostsync+xml": {
		"source": "iana"
	},
	"application/lxf": {
		"source": "iana"
	},
	"application/mac-binhex40": {
		"source": "iana",
		"extensions": [
			"hqx"
		]
	},
	"application/mac-compactpro": {
		"source": "apache",
		"extensions": [
			"cpt"
		]
	},
	"application/macwriteii": {
		"source": "iana"
	},
	"application/mads+xml": {
		"source": "iana",
		"extensions": [
			"mads"
		]
	},
	"application/manifest+json": {
		"charset": "UTF-8",
		"compressible": true,
		"extensions": [
			"webmanifest"
		]
	},
	"application/marc": {
		"source": "iana",
		"extensions": [
			"mrc"
		]
	},
	"application/marcxml+xml": {
		"source": "iana",
		"extensions": [
			"mrcx"
		]
	},
	"application/mathematica": {
		"source": "iana",
		"extensions": [
			"ma",
			"nb",
			"mb"
		]
	},
	"application/mathml+xml": {
		"source": "iana",
		"extensions": [
			"mathml"
		]
	},
	"application/mathml-content+xml": {
		"source": "iana"
	},
	"application/mathml-presentation+xml": {
		"source": "iana"
	},
	"application/mbms-associated-procedure-description+xml": {
		"source": "iana"
	},
	"application/mbms-deregister+xml": {
		"source": "iana"
	},
	"application/mbms-envelope+xml": {
		"source": "iana"
	},
	"application/mbms-msk+xml": {
		"source": "iana"
	},
	"application/mbms-msk-response+xml": {
		"source": "iana"
	},
	"application/mbms-protection-description+xml": {
		"source": "iana"
	},
	"application/mbms-reception-report+xml": {
		"source": "iana"
	},
	"application/mbms-register+xml": {
		"source": "iana"
	},
	"application/mbms-register-response+xml": {
		"source": "iana"
	},
	"application/mbms-schedule+xml": {
		"source": "iana"
	},
	"application/mbms-user-service-description+xml": {
		"source": "iana"
	},
	"application/mbox": {
		"source": "iana",
		"extensions": [
			"mbox"
		]
	},
	"application/media-policy-dataset+xml": {
		"source": "iana"
	},
	"application/media_control+xml": {
		"source": "iana"
	},
	"application/mediaservercontrol+xml": {
		"source": "iana",
		"extensions": [
			"mscml"
		]
	},
	"application/merge-patch+json": {
		"source": "iana",
		"compressible": true
	},
	"application/metalink+xml": {
		"source": "apache",
		"extensions": [
			"metalink"
		]
	},
	"application/metalink4+xml": {
		"source": "iana",
		"extensions": [
			"meta4"
		]
	},
	"application/mets+xml": {
		"source": "iana",
		"extensions": [
			"mets"
		]
	},
	"application/mf4": {
		"source": "iana"
	},
	"application/mikey": {
		"source": "iana"
	},
	"application/mods+xml": {
		"source": "iana",
		"extensions": [
			"mods"
		]
	},
	"application/moss-keys": {
		"source": "iana"
	},
	"application/moss-signature": {
		"source": "iana"
	},
	"application/mosskey-data": {
		"source": "iana"
	},
	"application/mosskey-request": {
		"source": "iana"
	},
	"application/mp21": {
		"source": "iana",
		"extensions": [
			"m21",
			"mp21"
		]
	},
	"application/mp4": {
		"source": "iana",
		"extensions": [
			"mp4s",
			"m4p"
		]
	},
	"application/mpeg4-generic": {
		"source": "iana"
	},
	"application/mpeg4-iod": {
		"source": "iana"
	},
	"application/mpeg4-iod-xmt": {
		"source": "iana"
	},
	"application/mrb-consumer+xml": {
		"source": "iana"
	},
	"application/mrb-publish+xml": {
		"source": "iana"
	},
	"application/msc-ivr+xml": {
		"source": "iana"
	},
	"application/msc-mixer+xml": {
		"source": "iana"
	},
	"application/msword": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"doc",
			"dot"
		]
	},
	"application/mud+json": {
		"source": "iana",
		"compressible": true
	},
	"application/mxf": {
		"source": "iana",
		"extensions": [
			"mxf"
		]
	},
	"application/nasdata": {
		"source": "iana"
	},
	"application/news-checkgroups": {
		"source": "iana"
	},
	"application/news-groupinfo": {
		"source": "iana"
	},
	"application/news-transmission": {
		"source": "iana"
	},
	"application/nlsml+xml": {
		"source": "iana"
	},
	"application/nss": {
		"source": "iana"
	},
	"application/ocsp-request": {
		"source": "iana"
	},
	"application/ocsp-response": {
		"source": "iana"
	},
	"application/octet-stream": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"bin",
			"dms",
			"lrf",
			"mar",
			"so",
			"dist",
			"distz",
			"pkg",
			"bpk",
			"dump",
			"elc",
			"deploy",
			"exe",
			"dll",
			"deb",
			"dmg",
			"iso",
			"img",
			"msi",
			"msp",
			"msm",
			"buffer"
		]
	},
	"application/oda": {
		"source": "iana",
		"extensions": [
			"oda"
		]
	},
	"application/odx": {
		"source": "iana"
	},
	"application/oebps-package+xml": {
		"source": "iana",
		"extensions": [
			"opf"
		]
	},
	"application/ogg": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"ogx"
		]
	},
	"application/omdoc+xml": {
		"source": "apache",
		"extensions": [
			"omdoc"
		]
	},
	"application/onenote": {
		"source": "apache",
		"extensions": [
			"onetoc",
			"onetoc2",
			"onetmp",
			"onepkg"
		]
	},
	"application/oxps": {
		"source": "iana",
		"extensions": [
			"oxps"
		]
	},
	"application/p2p-overlay+xml": {
		"source": "iana"
	},
	"application/parityfec": {
		"source": "iana"
	},
	"application/patch-ops-error+xml": {
		"source": "iana",
		"extensions": [
			"xer"
		]
	},
	"application/pdf": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"pdf"
		]
	},
	"application/pdx": {
		"source": "iana"
	},
	"application/pgp-encrypted": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"pgp"
		]
	},
	"application/pgp-keys": {
		"source": "iana"
	},
	"application/pgp-signature": {
		"source": "iana",
		"extensions": [
			"asc",
			"sig"
		]
	},
	"application/pics-rules": {
		"source": "apache",
		"extensions": [
			"prf"
		]
	},
	"application/pidf+xml": {
		"source": "iana"
	},
	"application/pidf-diff+xml": {
		"source": "iana"
	},
	"application/pkcs10": {
		"source": "iana",
		"extensions": [
			"p10"
		]
	},
	"application/pkcs12": {
		"source": "iana"
	},
	"application/pkcs7-mime": {
		"source": "iana",
		"extensions": [
			"p7m",
			"p7c"
		]
	},
	"application/pkcs7-signature": {
		"source": "iana",
		"extensions": [
			"p7s"
		]
	},
	"application/pkcs8": {
		"source": "iana",
		"extensions": [
			"p8"
		]
	},
	"application/pkix-attr-cert": {
		"source": "iana",
		"extensions": [
			"ac"
		]
	},
	"application/pkix-cert": {
		"source": "iana",
		"extensions": [
			"cer"
		]
	},
	"application/pkix-crl": {
		"source": "iana",
		"extensions": [
			"crl"
		]
	},
	"application/pkix-pkipath": {
		"source": "iana",
		"extensions": [
			"pkipath"
		]
	},
	"application/pkixcmp": {
		"source": "iana",
		"extensions": [
			"pki"
		]
	},
	"application/pls+xml": {
		"source": "iana",
		"extensions": [
			"pls"
		]
	},
	"application/poc-settings+xml": {
		"source": "iana"
	},
	"application/postscript": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"ai",
			"eps",
			"ps"
		]
	},
	"application/ppsp-tracker+json": {
		"source": "iana",
		"compressible": true
	},
	"application/problem+json": {
		"source": "iana",
		"compressible": true
	},
	"application/problem+xml": {
		"source": "iana"
	},
	"application/provenance+xml": {
		"source": "iana"
	},
	"application/prs.alvestrand.titrax-sheet": {
		"source": "iana"
	},
	"application/prs.cww": {
		"source": "iana",
		"extensions": [
			"cww"
		]
	},
	"application/prs.hpub+zip": {
		"source": "iana"
	},
	"application/prs.nprend": {
		"source": "iana"
	},
	"application/prs.plucker": {
		"source": "iana"
	},
	"application/prs.rdf-xml-crypt": {
		"source": "iana"
	},
	"application/prs.xsf+xml": {
		"source": "iana"
	},
	"application/pskc+xml": {
		"source": "iana",
		"extensions": [
			"pskcxml"
		]
	},
	"application/qsig": {
		"source": "iana"
	},
	"application/raptorfec": {
		"source": "iana"
	},
	"application/rdap+json": {
		"source": "iana",
		"compressible": true
	},
	"application/rdf+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"rdf"
		]
	},
	"application/reginfo+xml": {
		"source": "iana",
		"extensions": [
			"rif"
		]
	},
	"application/relax-ng-compact-syntax": {
		"source": "iana",
		"extensions": [
			"rnc"
		]
	},
	"application/remote-printing": {
		"source": "iana"
	},
	"application/reputon+json": {
		"source": "iana",
		"compressible": true
	},
	"application/resource-lists+xml": {
		"source": "iana",
		"extensions": [
			"rl"
		]
	},
	"application/resource-lists-diff+xml": {
		"source": "iana",
		"extensions": [
			"rld"
		]
	},
	"application/rfc+xml": {
		"source": "iana"
	},
	"application/riscos": {
		"source": "iana"
	},
	"application/rlmi+xml": {
		"source": "iana"
	},
	"application/rls-services+xml": {
		"source": "iana",
		"extensions": [
			"rs"
		]
	},
	"application/rpki-ghostbusters": {
		"source": "iana",
		"extensions": [
			"gbr"
		]
	},
	"application/rpki-manifest": {
		"source": "iana",
		"extensions": [
			"mft"
		]
	},
	"application/rpki-roa": {
		"source": "iana",
		"extensions": [
			"roa"
		]
	},
	"application/rpki-updown": {
		"source": "iana"
	},
	"application/rsd+xml": {
		"source": "apache",
		"extensions": [
			"rsd"
		]
	},
	"application/rss+xml": {
		"source": "apache",
		"compressible": true,
		"extensions": [
			"rss"
		]
	},
	"application/rtf": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"rtf"
		]
	},
	"application/rtploopback": {
		"source": "iana"
	},
	"application/rtx": {
		"source": "iana"
	},
	"application/samlassertion+xml": {
		"source": "iana"
	},
	"application/samlmetadata+xml": {
		"source": "iana"
	},
	"application/sbml+xml": {
		"source": "iana",
		"extensions": [
			"sbml"
		]
	},
	"application/scaip+xml": {
		"source": "iana"
	},
	"application/scim+json": {
		"source": "iana",
		"compressible": true
	},
	"application/scvp-cv-request": {
		"source": "iana",
		"extensions": [
			"scq"
		]
	},
	"application/scvp-cv-response": {
		"source": "iana",
		"extensions": [
			"scs"
		]
	},
	"application/scvp-vp-request": {
		"source": "iana",
		"extensions": [
			"spq"
		]
	},
	"application/scvp-vp-response": {
		"source": "iana",
		"extensions": [
			"spp"
		]
	},
	"application/sdp": {
		"source": "iana",
		"extensions": [
			"sdp"
		]
	},
	"application/sep+xml": {
		"source": "iana"
	},
	"application/sep-exi": {
		"source": "iana"
	},
	"application/session-info": {
		"source": "iana"
	},
	"application/set-payment": {
		"source": "iana"
	},
	"application/set-payment-initiation": {
		"source": "iana",
		"extensions": [
			"setpay"
		]
	},
	"application/set-registration": {
		"source": "iana"
	},
	"application/set-registration-initiation": {
		"source": "iana",
		"extensions": [
			"setreg"
		]
	},
	"application/sgml": {
		"source": "iana"
	},
	"application/sgml-open-catalog": {
		"source": "iana"
	},
	"application/shf+xml": {
		"source": "iana",
		"extensions": [
			"shf"
		]
	},
	"application/sieve": {
		"source": "iana"
	},
	"application/simple-filter+xml": {
		"source": "iana"
	},
	"application/simple-message-summary": {
		"source": "iana"
	},
	"application/simplesymbolcontainer": {
		"source": "iana"
	},
	"application/slate": {
		"source": "iana"
	},
	"application/smil": {
		"source": "iana"
	},
	"application/smil+xml": {
		"source": "iana",
		"extensions": [
			"smi",
			"smil"
		]
	},
	"application/smpte336m": {
		"source": "iana"
	},
	"application/soap+fastinfoset": {
		"source": "iana"
	},
	"application/soap+xml": {
		"source": "iana",
		"compressible": true
	},
	"application/sparql-query": {
		"source": "iana",
		"extensions": [
			"rq"
		]
	},
	"application/sparql-results+xml": {
		"source": "iana",
		"extensions": [
			"srx"
		]
	},
	"application/spirits-event+xml": {
		"source": "iana"
	},
	"application/sql": {
		"source": "iana"
	},
	"application/srgs": {
		"source": "iana",
		"extensions": [
			"gram"
		]
	},
	"application/srgs+xml": {
		"source": "iana",
		"extensions": [
			"grxml"
		]
	},
	"application/sru+xml": {
		"source": "iana",
		"extensions": [
			"sru"
		]
	},
	"application/ssdl+xml": {
		"source": "apache",
		"extensions": [
			"ssdl"
		]
	},
	"application/ssml+xml": {
		"source": "iana",
		"extensions": [
			"ssml"
		]
	},
	"application/tamp-apex-update": {
		"source": "iana"
	},
	"application/tamp-apex-update-confirm": {
		"source": "iana"
	},
	"application/tamp-community-update": {
		"source": "iana"
	},
	"application/tamp-community-update-confirm": {
		"source": "iana"
	},
	"application/tamp-error": {
		"source": "iana"
	},
	"application/tamp-sequence-adjust": {
		"source": "iana"
	},
	"application/tamp-sequence-adjust-confirm": {
		"source": "iana"
	},
	"application/tamp-status-query": {
		"source": "iana"
	},
	"application/tamp-status-response": {
		"source": "iana"
	},
	"application/tamp-update": {
		"source": "iana"
	},
	"application/tamp-update-confirm": {
		"source": "iana"
	},
	"application/tar": {
		"compressible": true
	},
	"application/tei+xml": {
		"source": "iana",
		"extensions": [
			"tei",
			"teicorpus"
		]
	},
	"application/thraud+xml": {
		"source": "iana",
		"extensions": [
			"tfi"
		]
	},
	"application/timestamp-query": {
		"source": "iana"
	},
	"application/timestamp-reply": {
		"source": "iana"
	},
	"application/timestamped-data": {
		"source": "iana",
		"extensions": [
			"tsd"
		]
	},
	"application/trig": {
		"source": "iana"
	},
	"application/ttml+xml": {
		"source": "iana"
	},
	"application/tve-trigger": {
		"source": "iana"
	},
	"application/ulpfec": {
		"source": "iana"
	},
	"application/urc-grpsheet+xml": {
		"source": "iana"
	},
	"application/urc-ressheet+xml": {
		"source": "iana"
	},
	"application/urc-targetdesc+xml": {
		"source": "iana"
	},
	"application/urc-uisocketdesc+xml": {
		"source": "iana"
	},
	"application/vcard+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vcard+xml": {
		"source": "iana"
	},
	"application/vemmi": {
		"source": "iana"
	},
	"application/vividence.scriptfile": {
		"source": "apache"
	},
	"application/vnd.3gpp-prose+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp-prose-pc3ch+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.access-transfer-events+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.bsf+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.mid-call+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.pic-bw-large": {
		"source": "iana",
		"extensions": [
			"plb"
		]
	},
	"application/vnd.3gpp.pic-bw-small": {
		"source": "iana",
		"extensions": [
			"psb"
		]
	},
	"application/vnd.3gpp.pic-bw-var": {
		"source": "iana",
		"extensions": [
			"pvb"
		]
	},
	"application/vnd.3gpp.sms": {
		"source": "iana"
	},
	"application/vnd.3gpp.sms+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.srvcc-ext+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.srvcc-info+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.state-and-event-info+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp.ussd+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp2.bcmcsinfo+xml": {
		"source": "iana"
	},
	"application/vnd.3gpp2.sms": {
		"source": "iana"
	},
	"application/vnd.3gpp2.tcap": {
		"source": "iana",
		"extensions": [
			"tcap"
		]
	},
	"application/vnd.3lightssoftware.imagescal": {
		"source": "iana"
	},
	"application/vnd.3m.post-it-notes": {
		"source": "iana",
		"extensions": [
			"pwn"
		]
	},
	"application/vnd.accpac.simply.aso": {
		"source": "iana",
		"extensions": [
			"aso"
		]
	},
	"application/vnd.accpac.simply.imp": {
		"source": "iana",
		"extensions": [
			"imp"
		]
	},
	"application/vnd.acucobol": {
		"source": "iana",
		"extensions": [
			"acu"
		]
	},
	"application/vnd.acucorp": {
		"source": "iana",
		"extensions": [
			"atc",
			"acutc"
		]
	},
	"application/vnd.adobe.air-application-installer-package+zip": {
		"source": "apache",
		"extensions": [
			"air"
		]
	},
	"application/vnd.adobe.flash.movie": {
		"source": "iana"
	},
	"application/vnd.adobe.formscentral.fcdt": {
		"source": "iana",
		"extensions": [
			"fcdt"
		]
	},
	"application/vnd.adobe.fxp": {
		"source": "iana",
		"extensions": [
			"fxp",
			"fxpl"
		]
	},
	"application/vnd.adobe.partial-upload": {
		"source": "iana"
	},
	"application/vnd.adobe.xdp+xml": {
		"source": "iana",
		"extensions": [
			"xdp"
		]
	},
	"application/vnd.adobe.xfdf": {
		"source": "iana",
		"extensions": [
			"xfdf"
		]
	},
	"application/vnd.aether.imp": {
		"source": "iana"
	},
	"application/vnd.ah-barcode": {
		"source": "iana"
	},
	"application/vnd.ahead.space": {
		"source": "iana",
		"extensions": [
			"ahead"
		]
	},
	"application/vnd.airzip.filesecure.azf": {
		"source": "iana",
		"extensions": [
			"azf"
		]
	},
	"application/vnd.airzip.filesecure.azs": {
		"source": "iana",
		"extensions": [
			"azs"
		]
	},
	"application/vnd.amazon.ebook": {
		"source": "apache",
		"extensions": [
			"azw"
		]
	},
	"application/vnd.amazon.mobi8-ebook": {
		"source": "iana"
	},
	"application/vnd.americandynamics.acc": {
		"source": "iana",
		"extensions": [
			"acc"
		]
	},
	"application/vnd.amiga.ami": {
		"source": "iana",
		"extensions": [
			"ami"
		]
	},
	"application/vnd.amundsen.maze+xml": {
		"source": "iana"
	},
	"application/vnd.android.package-archive": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"apk"
		]
	},
	"application/vnd.anki": {
		"source": "iana"
	},
	"application/vnd.anser-web-certificate-issue-initiation": {
		"source": "iana",
		"extensions": [
			"cii"
		]
	},
	"application/vnd.anser-web-funds-transfer-initiation": {
		"source": "apache",
		"extensions": [
			"fti"
		]
	},
	"application/vnd.antix.game-component": {
		"source": "iana",
		"extensions": [
			"atx"
		]
	},
	"application/vnd.apache.thrift.binary": {
		"source": "iana"
	},
	"application/vnd.apache.thrift.compact": {
		"source": "iana"
	},
	"application/vnd.apache.thrift.json": {
		"source": "iana"
	},
	"application/vnd.api+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.apple.installer+xml": {
		"source": "iana",
		"extensions": [
			"mpkg"
		]
	},
	"application/vnd.apple.mpegurl": {
		"source": "iana",
		"extensions": [
			"m3u8"
		]
	},
	"application/vnd.apple.pkpass": {
		"compressible": false,
		"extensions": [
			"pkpass"
		]
	},
	"application/vnd.arastra.swi": {
		"source": "iana"
	},
	"application/vnd.aristanetworks.swi": {
		"source": "iana",
		"extensions": [
			"swi"
		]
	},
	"application/vnd.artsquare": {
		"source": "iana"
	},
	"application/vnd.astraea-software.iota": {
		"source": "iana",
		"extensions": [
			"iota"
		]
	},
	"application/vnd.audiograph": {
		"source": "iana",
		"extensions": [
			"aep"
		]
	},
	"application/vnd.autopackage": {
		"source": "iana"
	},
	"application/vnd.avistar+xml": {
		"source": "iana"
	},
	"application/vnd.balsamiq.bmml+xml": {
		"source": "iana"
	},
	"application/vnd.balsamiq.bmpr": {
		"source": "iana"
	},
	"application/vnd.bekitzur-stech+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.biopax.rdf+xml": {
		"source": "iana"
	},
	"application/vnd.blueice.multipass": {
		"source": "iana",
		"extensions": [
			"mpm"
		]
	},
	"application/vnd.bluetooth.ep.oob": {
		"source": "iana"
	},
	"application/vnd.bluetooth.le.oob": {
		"source": "iana"
	},
	"application/vnd.bmi": {
		"source": "iana",
		"extensions": [
			"bmi"
		]
	},
	"application/vnd.businessobjects": {
		"source": "iana",
		"extensions": [
			"rep"
		]
	},
	"application/vnd.cab-jscript": {
		"source": "iana"
	},
	"application/vnd.canon-cpdl": {
		"source": "iana"
	},
	"application/vnd.canon-lips": {
		"source": "iana"
	},
	"application/vnd.cendio.thinlinc.clientconf": {
		"source": "iana"
	},
	"application/vnd.century-systems.tcp_stream": {
		"source": "iana"
	},
	"application/vnd.chemdraw+xml": {
		"source": "iana",
		"extensions": [
			"cdxml"
		]
	},
	"application/vnd.chess-pgn": {
		"source": "iana"
	},
	"application/vnd.chipnuts.karaoke-mmd": {
		"source": "iana",
		"extensions": [
			"mmd"
		]
	},
	"application/vnd.cinderella": {
		"source": "iana",
		"extensions": [
			"cdy"
		]
	},
	"application/vnd.cirpack.isdn-ext": {
		"source": "iana"
	},
	"application/vnd.citationstyles.style+xml": {
		"source": "iana"
	},
	"application/vnd.claymore": {
		"source": "iana",
		"extensions": [
			"cla"
		]
	},
	"application/vnd.cloanto.rp9": {
		"source": "iana",
		"extensions": [
			"rp9"
		]
	},
	"application/vnd.clonk.c4group": {
		"source": "iana",
		"extensions": [
			"c4g",
			"c4d",
			"c4f",
			"c4p",
			"c4u"
		]
	},
	"application/vnd.cluetrust.cartomobile-config": {
		"source": "iana",
		"extensions": [
			"c11amc"
		]
	},
	"application/vnd.cluetrust.cartomobile-config-pkg": {
		"source": "iana",
		"extensions": [
			"c11amz"
		]
	},
	"application/vnd.coffeescript": {
		"source": "iana"
	},
	"application/vnd.collection+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.collection.doc+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.collection.next+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.comicbook+zip": {
		"source": "iana"
	},
	"application/vnd.commerce-battelle": {
		"source": "iana"
	},
	"application/vnd.commonspace": {
		"source": "iana",
		"extensions": [
			"csp"
		]
	},
	"application/vnd.contact.cmsg": {
		"source": "iana",
		"extensions": [
			"cdbcmsg"
		]
	},
	"application/vnd.coreos.ignition+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.cosmocaller": {
		"source": "iana",
		"extensions": [
			"cmc"
		]
	},
	"application/vnd.crick.clicker": {
		"source": "iana",
		"extensions": [
			"clkx"
		]
	},
	"application/vnd.crick.clicker.keyboard": {
		"source": "iana",
		"extensions": [
			"clkk"
		]
	},
	"application/vnd.crick.clicker.palette": {
		"source": "iana",
		"extensions": [
			"clkp"
		]
	},
	"application/vnd.crick.clicker.template": {
		"source": "iana",
		"extensions": [
			"clkt"
		]
	},
	"application/vnd.crick.clicker.wordbank": {
		"source": "iana",
		"extensions": [
			"clkw"
		]
	},
	"application/vnd.criticaltools.wbs+xml": {
		"source": "iana",
		"extensions": [
			"wbs"
		]
	},
	"application/vnd.ctc-posml": {
		"source": "iana",
		"extensions": [
			"pml"
		]
	},
	"application/vnd.ctct.ws+xml": {
		"source": "iana"
	},
	"application/vnd.cups-pdf": {
		"source": "iana"
	},
	"application/vnd.cups-postscript": {
		"source": "iana"
	},
	"application/vnd.cups-ppd": {
		"source": "iana",
		"extensions": [
			"ppd"
		]
	},
	"application/vnd.cups-raster": {
		"source": "iana"
	},
	"application/vnd.cups-raw": {
		"source": "iana"
	},
	"application/vnd.curl": {
		"source": "iana"
	},
	"application/vnd.curl.car": {
		"source": "apache",
		"extensions": [
			"car"
		]
	},
	"application/vnd.curl.pcurl": {
		"source": "apache",
		"extensions": [
			"pcurl"
		]
	},
	"application/vnd.cyan.dean.root+xml": {
		"source": "iana"
	},
	"application/vnd.cybank": {
		"source": "iana"
	},
	"application/vnd.d2l.coursepackage1p0+zip": {
		"source": "iana"
	},
	"application/vnd.dart": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"dart"
		]
	},
	"application/vnd.data-vision.rdz": {
		"source": "iana",
		"extensions": [
			"rdz"
		]
	},
	"application/vnd.dataresource+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.debian.binary-package": {
		"source": "iana"
	},
	"application/vnd.dece.data": {
		"source": "iana",
		"extensions": [
			"uvf",
			"uvvf",
			"uvd",
			"uvvd"
		]
	},
	"application/vnd.dece.ttml+xml": {
		"source": "iana",
		"extensions": [
			"uvt",
			"uvvt"
		]
	},
	"application/vnd.dece.unspecified": {
		"source": "iana",
		"extensions": [
			"uvx",
			"uvvx"
		]
	},
	"application/vnd.dece.zip": {
		"source": "iana",
		"extensions": [
			"uvz",
			"uvvz"
		]
	},
	"application/vnd.denovo.fcselayout-link": {
		"source": "iana",
		"extensions": [
			"fe_launch"
		]
	},
	"application/vnd.desmume-movie": {
		"source": "iana"
	},
	"application/vnd.desmume.movie": {
		"source": "apache"
	},
	"application/vnd.dir-bi.plate-dl-nosuffix": {
		"source": "iana"
	},
	"application/vnd.dm.delegation+xml": {
		"source": "iana"
	},
	"application/vnd.dna": {
		"source": "iana",
		"extensions": [
			"dna"
		]
	},
	"application/vnd.document+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.dolby.mlp": {
		"source": "apache",
		"extensions": [
			"mlp"
		]
	},
	"application/vnd.dolby.mobile.1": {
		"source": "iana"
	},
	"application/vnd.dolby.mobile.2": {
		"source": "iana"
	},
	"application/vnd.doremir.scorecloud-binary-document": {
		"source": "iana"
	},
	"application/vnd.dpgraph": {
		"source": "iana",
		"extensions": [
			"dpg"
		]
	},
	"application/vnd.dreamfactory": {
		"source": "iana",
		"extensions": [
			"dfac"
		]
	},
	"application/vnd.drive+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.ds-keypoint": {
		"source": "apache",
		"extensions": [
			"kpxx"
		]
	},
	"application/vnd.dtg.local": {
		"source": "iana"
	},
	"application/vnd.dtg.local.flash": {
		"source": "iana"
	},
	"application/vnd.dtg.local.html": {
		"source": "iana"
	},
	"application/vnd.dvb.ait": {
		"source": "iana",
		"extensions": [
			"ait"
		]
	},
	"application/vnd.dvb.dvbj": {
		"source": "iana"
	},
	"application/vnd.dvb.esgcontainer": {
		"source": "iana"
	},
	"application/vnd.dvb.ipdcdftnotifaccess": {
		"source": "iana"
	},
	"application/vnd.dvb.ipdcesgaccess": {
		"source": "iana"
	},
	"application/vnd.dvb.ipdcesgaccess2": {
		"source": "iana"
	},
	"application/vnd.dvb.ipdcesgpdd": {
		"source": "iana"
	},
	"application/vnd.dvb.ipdcroaming": {
		"source": "iana"
	},
	"application/vnd.dvb.iptv.alfec-base": {
		"source": "iana"
	},
	"application/vnd.dvb.iptv.alfec-enhancement": {
		"source": "iana"
	},
	"application/vnd.dvb.notif-aggregate-root+xml": {
		"source": "iana"
	},
	"application/vnd.dvb.notif-container+xml": {
		"source": "iana"
	},
	"application/vnd.dvb.notif-generic+xml": {
		"source": "iana"
	},
	"application/vnd.dvb.notif-ia-msglist+xml": {
		"source": "iana"
	},
	"application/vnd.dvb.notif-ia-registration-request+xml": {
		"source": "iana"
	},
	"application/vnd.dvb.notif-ia-registration-response+xml": {
		"source": "iana"
	},
	"application/vnd.dvb.notif-init+xml": {
		"source": "iana"
	},
	"application/vnd.dvb.pfr": {
		"source": "iana"
	},
	"application/vnd.dvb.service": {
		"source": "iana",
		"extensions": [
			"svc"
		]
	},
	"application/vnd.dxr": {
		"source": "iana"
	},
	"application/vnd.dynageo": {
		"source": "iana",
		"extensions": [
			"geo"
		]
	},
	"application/vnd.dzr": {
		"source": "iana"
	},
	"application/vnd.easykaraoke.cdgdownload": {
		"source": "iana"
	},
	"application/vnd.ecdis-update": {
		"source": "iana"
	},
	"application/vnd.ecowin.chart": {
		"source": "iana",
		"extensions": [
			"mag"
		]
	},
	"application/vnd.ecowin.filerequest": {
		"source": "iana"
	},
	"application/vnd.ecowin.fileupdate": {
		"source": "iana"
	},
	"application/vnd.ecowin.series": {
		"source": "iana"
	},
	"application/vnd.ecowin.seriesrequest": {
		"source": "iana"
	},
	"application/vnd.ecowin.seriesupdate": {
		"source": "iana"
	},
	"application/vnd.emclient.accessrequest+xml": {
		"source": "iana"
	},
	"application/vnd.enliven": {
		"source": "iana",
		"extensions": [
			"nml"
		]
	},
	"application/vnd.enphase.envoy": {
		"source": "iana"
	},
	"application/vnd.eprints.data+xml": {
		"source": "iana"
	},
	"application/vnd.epson.esf": {
		"source": "iana",
		"extensions": [
			"esf"
		]
	},
	"application/vnd.epson.msf": {
		"source": "iana",
		"extensions": [
			"msf"
		]
	},
	"application/vnd.epson.quickanime": {
		"source": "iana",
		"extensions": [
			"qam"
		]
	},
	"application/vnd.epson.salt": {
		"source": "iana",
		"extensions": [
			"slt"
		]
	},
	"application/vnd.epson.ssf": {
		"source": "iana",
		"extensions": [
			"ssf"
		]
	},
	"application/vnd.ericsson.quickcall": {
		"source": "iana"
	},
	"application/vnd.espass-espass+zip": {
		"source": "iana"
	},
	"application/vnd.eszigno3+xml": {
		"source": "iana",
		"extensions": [
			"es3",
			"et3"
		]
	},
	"application/vnd.etsi.aoc+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.asic-e+zip": {
		"source": "iana"
	},
	"application/vnd.etsi.asic-s+zip": {
		"source": "iana"
	},
	"application/vnd.etsi.cug+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvcommand+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvdiscovery+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvprofile+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvsad-bc+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvsad-cod+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvsad-npvr+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvservice+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvsync+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.iptvueprofile+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.mcid+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.mheg5": {
		"source": "iana"
	},
	"application/vnd.etsi.overload-control-policy-dataset+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.pstn+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.sci+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.simservs+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.timestamp-token": {
		"source": "iana"
	},
	"application/vnd.etsi.tsl+xml": {
		"source": "iana"
	},
	"application/vnd.etsi.tsl.der": {
		"source": "iana"
	},
	"application/vnd.eudora.data": {
		"source": "iana"
	},
	"application/vnd.ezpix-album": {
		"source": "iana",
		"extensions": [
			"ez2"
		]
	},
	"application/vnd.ezpix-package": {
		"source": "iana",
		"extensions": [
			"ez3"
		]
	},
	"application/vnd.f-secure.mobile": {
		"source": "iana"
	},
	"application/vnd.fastcopy-disk-image": {
		"source": "iana"
	},
	"application/vnd.fdf": {
		"source": "iana",
		"extensions": [
			"fdf"
		]
	},
	"application/vnd.fdsn.mseed": {
		"source": "iana",
		"extensions": [
			"mseed"
		]
	},
	"application/vnd.fdsn.seed": {
		"source": "iana",
		"extensions": [
			"seed",
			"dataless"
		]
	},
	"application/vnd.ffsns": {
		"source": "iana"
	},
	"application/vnd.filmit.zfc": {
		"source": "iana"
	},
	"application/vnd.fints": {
		"source": "iana"
	},
	"application/vnd.firemonkeys.cloudcell": {
		"source": "iana"
	},
	"application/vnd.flographit": {
		"source": "iana",
		"extensions": [
			"gph"
		]
	},
	"application/vnd.fluxtime.clip": {
		"source": "iana",
		"extensions": [
			"ftc"
		]
	},
	"application/vnd.font-fontforge-sfd": {
		"source": "iana"
	},
	"application/vnd.framemaker": {
		"source": "iana",
		"extensions": [
			"fm",
			"frame",
			"maker",
			"book"
		]
	},
	"application/vnd.frogans.fnc": {
		"source": "iana",
		"extensions": [
			"fnc"
		]
	},
	"application/vnd.frogans.ltf": {
		"source": "iana",
		"extensions": [
			"ltf"
		]
	},
	"application/vnd.fsc.weblaunch": {
		"source": "iana",
		"extensions": [
			"fsc"
		]
	},
	"application/vnd.fujitsu.oasys": {
		"source": "iana",
		"extensions": [
			"oas"
		]
	},
	"application/vnd.fujitsu.oasys2": {
		"source": "iana",
		"extensions": [
			"oa2"
		]
	},
	"application/vnd.fujitsu.oasys3": {
		"source": "iana",
		"extensions": [
			"oa3"
		]
	},
	"application/vnd.fujitsu.oasysgp": {
		"source": "iana",
		"extensions": [
			"fg5"
		]
	},
	"application/vnd.fujitsu.oasysprs": {
		"source": "iana",
		"extensions": [
			"bh2"
		]
	},
	"application/vnd.fujixerox.art-ex": {
		"source": "iana"
	},
	"application/vnd.fujixerox.art4": {
		"source": "iana"
	},
	"application/vnd.fujixerox.ddd": {
		"source": "iana",
		"extensions": [
			"ddd"
		]
	},
	"application/vnd.fujixerox.docuworks": {
		"source": "iana",
		"extensions": [
			"xdw"
		]
	},
	"application/vnd.fujixerox.docuworks.binder": {
		"source": "iana",
		"extensions": [
			"xbd"
		]
	},
	"application/vnd.fujixerox.docuworks.container": {
		"source": "iana"
	},
	"application/vnd.fujixerox.hbpl": {
		"source": "iana"
	},
	"application/vnd.fut-misnet": {
		"source": "iana"
	},
	"application/vnd.fuzzysheet": {
		"source": "iana",
		"extensions": [
			"fzs"
		]
	},
	"application/vnd.genomatix.tuxedo": {
		"source": "iana",
		"extensions": [
			"txd"
		]
	},
	"application/vnd.geo+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.geocube+xml": {
		"source": "iana"
	},
	"application/vnd.geogebra.file": {
		"source": "iana",
		"extensions": [
			"ggb"
		]
	},
	"application/vnd.geogebra.tool": {
		"source": "iana",
		"extensions": [
			"ggt"
		]
	},
	"application/vnd.geometry-explorer": {
		"source": "iana",
		"extensions": [
			"gex",
			"gre"
		]
	},
	"application/vnd.geonext": {
		"source": "iana",
		"extensions": [
			"gxt"
		]
	},
	"application/vnd.geoplan": {
		"source": "iana",
		"extensions": [
			"g2w"
		]
	},
	"application/vnd.geospace": {
		"source": "iana",
		"extensions": [
			"g3w"
		]
	},
	"application/vnd.gerber": {
		"source": "iana"
	},
	"application/vnd.globalplatform.card-content-mgt": {
		"source": "iana"
	},
	"application/vnd.globalplatform.card-content-mgt-response": {
		"source": "iana"
	},
	"application/vnd.gmx": {
		"source": "iana",
		"extensions": [
			"gmx"
		]
	},
	"application/vnd.google-apps.document": {
		"compressible": false,
		"extensions": [
			"gdoc"
		]
	},
	"application/vnd.google-apps.presentation": {
		"compressible": false,
		"extensions": [
			"gslides"
		]
	},
	"application/vnd.google-apps.spreadsheet": {
		"compressible": false,
		"extensions": [
			"gsheet"
		]
	},
	"application/vnd.google-earth.kml+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"kml"
		]
	},
	"application/vnd.google-earth.kmz": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"kmz"
		]
	},
	"application/vnd.gov.sk.e-form+xml": {
		"source": "iana"
	},
	"application/vnd.gov.sk.e-form+zip": {
		"source": "iana"
	},
	"application/vnd.gov.sk.xmldatacontainer+xml": {
		"source": "iana"
	},
	"application/vnd.grafeq": {
		"source": "iana",
		"extensions": [
			"gqf",
			"gqs"
		]
	},
	"application/vnd.gridmp": {
		"source": "iana"
	},
	"application/vnd.groove-account": {
		"source": "iana",
		"extensions": [
			"gac"
		]
	},
	"application/vnd.groove-help": {
		"source": "iana",
		"extensions": [
			"ghf"
		]
	},
	"application/vnd.groove-identity-message": {
		"source": "iana",
		"extensions": [
			"gim"
		]
	},
	"application/vnd.groove-injector": {
		"source": "iana",
		"extensions": [
			"grv"
		]
	},
	"application/vnd.groove-tool-message": {
		"source": "iana",
		"extensions": [
			"gtm"
		]
	},
	"application/vnd.groove-tool-template": {
		"source": "iana",
		"extensions": [
			"tpl"
		]
	},
	"application/vnd.groove-vcard": {
		"source": "iana",
		"extensions": [
			"vcg"
		]
	},
	"application/vnd.hal+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.hal+xml": {
		"source": "iana",
		"extensions": [
			"hal"
		]
	},
	"application/vnd.handheld-entertainment+xml": {
		"source": "iana",
		"extensions": [
			"zmm"
		]
	},
	"application/vnd.hbci": {
		"source": "iana",
		"extensions": [
			"hbci"
		]
	},
	"application/vnd.hc+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.hcl-bireports": {
		"source": "iana"
	},
	"application/vnd.hdt": {
		"source": "iana"
	},
	"application/vnd.heroku+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.hhe.lesson-player": {
		"source": "iana",
		"extensions": [
			"les"
		]
	},
	"application/vnd.hp-hpgl": {
		"source": "iana",
		"extensions": [
			"hpgl"
		]
	},
	"application/vnd.hp-hpid": {
		"source": "iana",
		"extensions": [
			"hpid"
		]
	},
	"application/vnd.hp-hps": {
		"source": "iana",
		"extensions": [
			"hps"
		]
	},
	"application/vnd.hp-jlyt": {
		"source": "iana",
		"extensions": [
			"jlt"
		]
	},
	"application/vnd.hp-pcl": {
		"source": "iana",
		"extensions": [
			"pcl"
		]
	},
	"application/vnd.hp-pclxl": {
		"source": "iana",
		"extensions": [
			"pclxl"
		]
	},
	"application/vnd.httphone": {
		"source": "iana"
	},
	"application/vnd.hydrostatix.sof-data": {
		"source": "iana",
		"extensions": [
			"sfd-hdstx"
		]
	},
	"application/vnd.hyperdrive+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.hzn-3d-crossword": {
		"source": "iana"
	},
	"application/vnd.ibm.afplinedata": {
		"source": "iana"
	},
	"application/vnd.ibm.electronic-media": {
		"source": "iana"
	},
	"application/vnd.ibm.minipay": {
		"source": "iana",
		"extensions": [
			"mpy"
		]
	},
	"application/vnd.ibm.modcap": {
		"source": "iana",
		"extensions": [
			"afp",
			"listafp",
			"list3820"
		]
	},
	"application/vnd.ibm.rights-management": {
		"source": "iana",
		"extensions": [
			"irm"
		]
	},
	"application/vnd.ibm.secure-container": {
		"source": "iana",
		"extensions": [
			"sc"
		]
	},
	"application/vnd.iccprofile": {
		"source": "iana",
		"extensions": [
			"icc",
			"icm"
		]
	},
	"application/vnd.ieee.1905": {
		"source": "iana"
	},
	"application/vnd.igloader": {
		"source": "iana",
		"extensions": [
			"igl"
		]
	},
	"application/vnd.immervision-ivp": {
		"source": "iana",
		"extensions": [
			"ivp"
		]
	},
	"application/vnd.immervision-ivu": {
		"source": "iana",
		"extensions": [
			"ivu"
		]
	},
	"application/vnd.ims.imsccv1p1": {
		"source": "iana"
	},
	"application/vnd.ims.imsccv1p2": {
		"source": "iana"
	},
	"application/vnd.ims.imsccv1p3": {
		"source": "iana"
	},
	"application/vnd.ims.lis.v2.result+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.ims.lti.v2.toolproxy+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.ims.lti.v2.toolproxy.id+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.ims.lti.v2.toolsettings+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.ims.lti.v2.toolsettings.simple+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.informedcontrol.rms+xml": {
		"source": "iana"
	},
	"application/vnd.informix-visionary": {
		"source": "iana"
	},
	"application/vnd.infotech.project": {
		"source": "iana"
	},
	"application/vnd.infotech.project+xml": {
		"source": "iana"
	},
	"application/vnd.innopath.wamp.notification": {
		"source": "iana"
	},
	"application/vnd.insors.igm": {
		"source": "iana",
		"extensions": [
			"igm"
		]
	},
	"application/vnd.intercon.formnet": {
		"source": "iana",
		"extensions": [
			"xpw",
			"xpx"
		]
	},
	"application/vnd.intergeo": {
		"source": "iana",
		"extensions": [
			"i2g"
		]
	},
	"application/vnd.intertrust.digibox": {
		"source": "iana"
	},
	"application/vnd.intertrust.nncp": {
		"source": "iana"
	},
	"application/vnd.intu.qbo": {
		"source": "iana",
		"extensions": [
			"qbo"
		]
	},
	"application/vnd.intu.qfx": {
		"source": "iana",
		"extensions": [
			"qfx"
		]
	},
	"application/vnd.iptc.g2.catalogitem+xml": {
		"source": "iana"
	},
	"application/vnd.iptc.g2.conceptitem+xml": {
		"source": "iana"
	},
	"application/vnd.iptc.g2.knowledgeitem+xml": {
		"source": "iana"
	},
	"application/vnd.iptc.g2.newsitem+xml": {
		"source": "iana"
	},
	"application/vnd.iptc.g2.newsmessage+xml": {
		"source": "iana"
	},
	"application/vnd.iptc.g2.packageitem+xml": {
		"source": "iana"
	},
	"application/vnd.iptc.g2.planningitem+xml": {
		"source": "iana"
	},
	"application/vnd.ipunplugged.rcprofile": {
		"source": "iana",
		"extensions": [
			"rcprofile"
		]
	},
	"application/vnd.irepository.package+xml": {
		"source": "iana",
		"extensions": [
			"irp"
		]
	},
	"application/vnd.is-xpr": {
		"source": "iana",
		"extensions": [
			"xpr"
		]
	},
	"application/vnd.isac.fcs": {
		"source": "iana",
		"extensions": [
			"fcs"
		]
	},
	"application/vnd.jam": {
		"source": "iana",
		"extensions": [
			"jam"
		]
	},
	"application/vnd.japannet-directory-service": {
		"source": "iana"
	},
	"application/vnd.japannet-jpnstore-wakeup": {
		"source": "iana"
	},
	"application/vnd.japannet-payment-wakeup": {
		"source": "iana"
	},
	"application/vnd.japannet-registration": {
		"source": "iana"
	},
	"application/vnd.japannet-registration-wakeup": {
		"source": "iana"
	},
	"application/vnd.japannet-setstore-wakeup": {
		"source": "iana"
	},
	"application/vnd.japannet-verification": {
		"source": "iana"
	},
	"application/vnd.japannet-verification-wakeup": {
		"source": "iana"
	},
	"application/vnd.jcp.javame.midlet-rms": {
		"source": "iana",
		"extensions": [
			"rms"
		]
	},
	"application/vnd.jisp": {
		"source": "iana",
		"extensions": [
			"jisp"
		]
	},
	"application/vnd.joost.joda-archive": {
		"source": "iana",
		"extensions": [
			"joda"
		]
	},
	"application/vnd.jsk.isdn-ngn": {
		"source": "iana"
	},
	"application/vnd.kahootz": {
		"source": "iana",
		"extensions": [
			"ktz",
			"ktr"
		]
	},
	"application/vnd.kde.karbon": {
		"source": "iana",
		"extensions": [
			"karbon"
		]
	},
	"application/vnd.kde.kchart": {
		"source": "iana",
		"extensions": [
			"chrt"
		]
	},
	"application/vnd.kde.kformula": {
		"source": "iana",
		"extensions": [
			"kfo"
		]
	},
	"application/vnd.kde.kivio": {
		"source": "iana",
		"extensions": [
			"flw"
		]
	},
	"application/vnd.kde.kontour": {
		"source": "iana",
		"extensions": [
			"kon"
		]
	},
	"application/vnd.kde.kpresenter": {
		"source": "iana",
		"extensions": [
			"kpr",
			"kpt"
		]
	},
	"application/vnd.kde.kspread": {
		"source": "iana",
		"extensions": [
			"ksp"
		]
	},
	"application/vnd.kde.kword": {
		"source": "iana",
		"extensions": [
			"kwd",
			"kwt"
		]
	},
	"application/vnd.kenameaapp": {
		"source": "iana",
		"extensions": [
			"htke"
		]
	},
	"application/vnd.kidspiration": {
		"source": "iana",
		"extensions": [
			"kia"
		]
	},
	"application/vnd.kinar": {
		"source": "iana",
		"extensions": [
			"kne",
			"knp"
		]
	},
	"application/vnd.koan": {
		"source": "iana",
		"extensions": [
			"skp",
			"skd",
			"skt",
			"skm"
		]
	},
	"application/vnd.kodak-descriptor": {
		"source": "iana",
		"extensions": [
			"sse"
		]
	},
	"application/vnd.las.las+xml": {
		"source": "iana",
		"extensions": [
			"lasxml"
		]
	},
	"application/vnd.liberty-request+xml": {
		"source": "iana"
	},
	"application/vnd.llamagraphics.life-balance.desktop": {
		"source": "iana",
		"extensions": [
			"lbd"
		]
	},
	"application/vnd.llamagraphics.life-balance.exchange+xml": {
		"source": "iana",
		"extensions": [
			"lbe"
		]
	},
	"application/vnd.lotus-1-2-3": {
		"source": "iana",
		"extensions": [
			"123"
		]
	},
	"application/vnd.lotus-approach": {
		"source": "iana",
		"extensions": [
			"apr"
		]
	},
	"application/vnd.lotus-freelance": {
		"source": "iana",
		"extensions": [
			"pre"
		]
	},
	"application/vnd.lotus-notes": {
		"source": "iana",
		"extensions": [
			"nsf"
		]
	},
	"application/vnd.lotus-organizer": {
		"source": "iana",
		"extensions": [
			"org"
		]
	},
	"application/vnd.lotus-screencam": {
		"source": "iana",
		"extensions": [
			"scm"
		]
	},
	"application/vnd.lotus-wordpro": {
		"source": "iana",
		"extensions": [
			"lwp"
		]
	},
	"application/vnd.macports.portpkg": {
		"source": "iana",
		"extensions": [
			"portpkg"
		]
	},
	"application/vnd.mapbox-vector-tile": {
		"source": "iana"
	},
	"application/vnd.marlin.drm.actiontoken+xml": {
		"source": "iana"
	},
	"application/vnd.marlin.drm.conftoken+xml": {
		"source": "iana"
	},
	"application/vnd.marlin.drm.license+xml": {
		"source": "iana"
	},
	"application/vnd.marlin.drm.mdcf": {
		"source": "iana"
	},
	"application/vnd.mason+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.maxmind.maxmind-db": {
		"source": "iana"
	},
	"application/vnd.mcd": {
		"source": "iana",
		"extensions": [
			"mcd"
		]
	},
	"application/vnd.medcalcdata": {
		"source": "iana",
		"extensions": [
			"mc1"
		]
	},
	"application/vnd.mediastation.cdkey": {
		"source": "iana",
		"extensions": [
			"cdkey"
		]
	},
	"application/vnd.meridian-slingshot": {
		"source": "iana"
	},
	"application/vnd.mfer": {
		"source": "iana",
		"extensions": [
			"mwf"
		]
	},
	"application/vnd.mfmp": {
		"source": "iana",
		"extensions": [
			"mfm"
		]
	},
	"application/vnd.micro+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.micrografx.flo": {
		"source": "iana",
		"extensions": [
			"flo"
		]
	},
	"application/vnd.micrografx.igx": {
		"source": "iana",
		"extensions": [
			"igx"
		]
	},
	"application/vnd.microsoft.portable-executable": {
		"source": "iana"
	},
	"application/vnd.miele+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.mif": {
		"source": "iana",
		"extensions": [
			"mif"
		]
	},
	"application/vnd.minisoft-hp3000-save": {
		"source": "iana"
	},
	"application/vnd.mitsubishi.misty-guard.trustweb": {
		"source": "iana"
	},
	"application/vnd.mobius.daf": {
		"source": "iana",
		"extensions": [
			"daf"
		]
	},
	"application/vnd.mobius.dis": {
		"source": "iana",
		"extensions": [
			"dis"
		]
	},
	"application/vnd.mobius.mbk": {
		"source": "iana",
		"extensions": [
			"mbk"
		]
	},
	"application/vnd.mobius.mqy": {
		"source": "iana",
		"extensions": [
			"mqy"
		]
	},
	"application/vnd.mobius.msl": {
		"source": "iana",
		"extensions": [
			"msl"
		]
	},
	"application/vnd.mobius.plc": {
		"source": "iana",
		"extensions": [
			"plc"
		]
	},
	"application/vnd.mobius.txf": {
		"source": "iana",
		"extensions": [
			"txf"
		]
	},
	"application/vnd.mophun.application": {
		"source": "iana",
		"extensions": [
			"mpn"
		]
	},
	"application/vnd.mophun.certificate": {
		"source": "iana",
		"extensions": [
			"mpc"
		]
	},
	"application/vnd.motorola.flexsuite": {
		"source": "iana"
	},
	"application/vnd.motorola.flexsuite.adsi": {
		"source": "iana"
	},
	"application/vnd.motorola.flexsuite.fis": {
		"source": "iana"
	},
	"application/vnd.motorola.flexsuite.gotap": {
		"source": "iana"
	},
	"application/vnd.motorola.flexsuite.kmr": {
		"source": "iana"
	},
	"application/vnd.motorola.flexsuite.ttc": {
		"source": "iana"
	},
	"application/vnd.motorola.flexsuite.wem": {
		"source": "iana"
	},
	"application/vnd.motorola.iprm": {
		"source": "iana"
	},
	"application/vnd.mozilla.xul+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"xul"
		]
	},
	"application/vnd.ms-3mfdocument": {
		"source": "iana"
	},
	"application/vnd.ms-artgalry": {
		"source": "iana",
		"extensions": [
			"cil"
		]
	},
	"application/vnd.ms-asf": {
		"source": "iana"
	},
	"application/vnd.ms-cab-compressed": {
		"source": "iana",
		"extensions": [
			"cab"
		]
	},
	"application/vnd.ms-color.iccprofile": {
		"source": "apache"
	},
	"application/vnd.ms-excel": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"xls",
			"xlm",
			"xla",
			"xlc",
			"xlt",
			"xlw"
		]
	},
	"application/vnd.ms-excel.addin.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"xlam"
		]
	},
	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"xlsb"
		]
	},
	"application/vnd.ms-excel.sheet.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"xlsm"
		]
	},
	"application/vnd.ms-excel.template.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"xltm"
		]
	},
	"application/vnd.ms-fontobject": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"eot"
		]
	},
	"application/vnd.ms-htmlhelp": {
		"source": "iana",
		"extensions": [
			"chm"
		]
	},
	"application/vnd.ms-ims": {
		"source": "iana",
		"extensions": [
			"ims"
		]
	},
	"application/vnd.ms-lrm": {
		"source": "iana",
		"extensions": [
			"lrm"
		]
	},
	"application/vnd.ms-office.activex+xml": {
		"source": "iana"
	},
	"application/vnd.ms-officetheme": {
		"source": "iana",
		"extensions": [
			"thmx"
		]
	},
	"application/vnd.ms-opentype": {
		"source": "apache",
		"compressible": true
	},
	"application/vnd.ms-package.obfuscated-opentype": {
		"source": "apache"
	},
	"application/vnd.ms-pki.seccat": {
		"source": "apache",
		"extensions": [
			"cat"
		]
	},
	"application/vnd.ms-pki.stl": {
		"source": "apache",
		"extensions": [
			"stl"
		]
	},
	"application/vnd.ms-playready.initiator+xml": {
		"source": "iana"
	},
	"application/vnd.ms-powerpoint": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"ppt",
			"pps",
			"pot"
		]
	},
	"application/vnd.ms-powerpoint.addin.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"ppam"
		]
	},
	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"pptm"
		]
	},
	"application/vnd.ms-powerpoint.slide.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"sldm"
		]
	},
	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"ppsm"
		]
	},
	"application/vnd.ms-powerpoint.template.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"potm"
		]
	},
	"application/vnd.ms-printdevicecapabilities+xml": {
		"source": "iana"
	},
	"application/vnd.ms-printing.printticket+xml": {
		"source": "apache"
	},
	"application/vnd.ms-printschematicket+xml": {
		"source": "iana"
	},
	"application/vnd.ms-project": {
		"source": "iana",
		"extensions": [
			"mpp",
			"mpt"
		]
	},
	"application/vnd.ms-tnef": {
		"source": "iana"
	},
	"application/vnd.ms-windows.devicepairing": {
		"source": "iana"
	},
	"application/vnd.ms-windows.nwprinting.oob": {
		"source": "iana"
	},
	"application/vnd.ms-windows.printerpairing": {
		"source": "iana"
	},
	"application/vnd.ms-windows.wsd.oob": {
		"source": "iana"
	},
	"application/vnd.ms-wmdrm.lic-chlg-req": {
		"source": "iana"
	},
	"application/vnd.ms-wmdrm.lic-resp": {
		"source": "iana"
	},
	"application/vnd.ms-wmdrm.meter-chlg-req": {
		"source": "iana"
	},
	"application/vnd.ms-wmdrm.meter-resp": {
		"source": "iana"
	},
	"application/vnd.ms-word.document.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"docm"
		]
	},
	"application/vnd.ms-word.template.macroenabled.12": {
		"source": "iana",
		"extensions": [
			"dotm"
		]
	},
	"application/vnd.ms-works": {
		"source": "iana",
		"extensions": [
			"wps",
			"wks",
			"wcm",
			"wdb"
		]
	},
	"application/vnd.ms-wpl": {
		"source": "iana",
		"extensions": [
			"wpl"
		]
	},
	"application/vnd.ms-xpsdocument": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"xps"
		]
	},
	"application/vnd.msa-disk-image": {
		"source": "iana"
	},
	"application/vnd.mseq": {
		"source": "iana",
		"extensions": [
			"mseq"
		]
	},
	"application/vnd.msign": {
		"source": "iana"
	},
	"application/vnd.multiad.creator": {
		"source": "iana"
	},
	"application/vnd.multiad.creator.cif": {
		"source": "iana"
	},
	"application/vnd.music-niff": {
		"source": "iana"
	},
	"application/vnd.musician": {
		"source": "iana",
		"extensions": [
			"mus"
		]
	},
	"application/vnd.muvee.style": {
		"source": "iana",
		"extensions": [
			"msty"
		]
	},
	"application/vnd.mynfc": {
		"source": "iana",
		"extensions": [
			"taglet"
		]
	},
	"application/vnd.ncd.control": {
		"source": "iana"
	},
	"application/vnd.ncd.reference": {
		"source": "iana"
	},
	"application/vnd.nearst.inv+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.nervana": {
		"source": "iana"
	},
	"application/vnd.netfpx": {
		"source": "iana"
	},
	"application/vnd.neurolanguage.nlu": {
		"source": "iana",
		"extensions": [
			"nlu"
		]
	},
	"application/vnd.nintendo.nitro.rom": {
		"source": "iana"
	},
	"application/vnd.nintendo.snes.rom": {
		"source": "iana"
	},
	"application/vnd.nitf": {
		"source": "iana",
		"extensions": [
			"ntf",
			"nitf"
		]
	},
	"application/vnd.noblenet-directory": {
		"source": "iana",
		"extensions": [
			"nnd"
		]
	},
	"application/vnd.noblenet-sealer": {
		"source": "iana",
		"extensions": [
			"nns"
		]
	},
	"application/vnd.noblenet-web": {
		"source": "iana",
		"extensions": [
			"nnw"
		]
	},
	"application/vnd.nokia.catalogs": {
		"source": "iana"
	},
	"application/vnd.nokia.conml+wbxml": {
		"source": "iana"
	},
	"application/vnd.nokia.conml+xml": {
		"source": "iana"
	},
	"application/vnd.nokia.iptv.config+xml": {
		"source": "iana"
	},
	"application/vnd.nokia.isds-radio-presets": {
		"source": "iana"
	},
	"application/vnd.nokia.landmark+wbxml": {
		"source": "iana"
	},
	"application/vnd.nokia.landmark+xml": {
		"source": "iana"
	},
	"application/vnd.nokia.landmarkcollection+xml": {
		"source": "iana"
	},
	"application/vnd.nokia.n-gage.ac+xml": {
		"source": "iana"
	},
	"application/vnd.nokia.n-gage.data": {
		"source": "iana",
		"extensions": [
			"ngdat"
		]
	},
	"application/vnd.nokia.n-gage.symbian.install": {
		"source": "iana",
		"extensions": [
			"n-gage"
		]
	},
	"application/vnd.nokia.ncd": {
		"source": "iana"
	},
	"application/vnd.nokia.pcd+wbxml": {
		"source": "iana"
	},
	"application/vnd.nokia.pcd+xml": {
		"source": "iana"
	},
	"application/vnd.nokia.radio-preset": {
		"source": "iana",
		"extensions": [
			"rpst"
		]
	},
	"application/vnd.nokia.radio-presets": {
		"source": "iana",
		"extensions": [
			"rpss"
		]
	},
	"application/vnd.novadigm.edm": {
		"source": "iana",
		"extensions": [
			"edm"
		]
	},
	"application/vnd.novadigm.edx": {
		"source": "iana",
		"extensions": [
			"edx"
		]
	},
	"application/vnd.novadigm.ext": {
		"source": "iana",
		"extensions": [
			"ext"
		]
	},
	"application/vnd.ntt-local.content-share": {
		"source": "iana"
	},
	"application/vnd.ntt-local.file-transfer": {
		"source": "iana"
	},
	"application/vnd.ntt-local.ogw_remote-access": {
		"source": "iana"
	},
	"application/vnd.ntt-local.sip-ta_remote": {
		"source": "iana"
	},
	"application/vnd.ntt-local.sip-ta_tcp_stream": {
		"source": "iana"
	},
	"application/vnd.oasis.opendocument.chart": {
		"source": "iana",
		"extensions": [
			"odc"
		]
	},
	"application/vnd.oasis.opendocument.chart-template": {
		"source": "iana",
		"extensions": [
			"otc"
		]
	},
	"application/vnd.oasis.opendocument.database": {
		"source": "iana",
		"extensions": [
			"odb"
		]
	},
	"application/vnd.oasis.opendocument.formula": {
		"source": "iana",
		"extensions": [
			"odf"
		]
	},
	"application/vnd.oasis.opendocument.formula-template": {
		"source": "iana",
		"extensions": [
			"odft"
		]
	},
	"application/vnd.oasis.opendocument.graphics": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"odg"
		]
	},
	"application/vnd.oasis.opendocument.graphics-template": {
		"source": "iana",
		"extensions": [
			"otg"
		]
	},
	"application/vnd.oasis.opendocument.image": {
		"source": "iana",
		"extensions": [
			"odi"
		]
	},
	"application/vnd.oasis.opendocument.image-template": {
		"source": "iana",
		"extensions": [
			"oti"
		]
	},
	"application/vnd.oasis.opendocument.presentation": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"odp"
		]
	},
	"application/vnd.oasis.opendocument.presentation-template": {
		"source": "iana",
		"extensions": [
			"otp"
		]
	},
	"application/vnd.oasis.opendocument.spreadsheet": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"ods"
		]
	},
	"application/vnd.oasis.opendocument.spreadsheet-template": {
		"source": "iana",
		"extensions": [
			"ots"
		]
	},
	"application/vnd.oasis.opendocument.text": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"odt"
		]
	},
	"application/vnd.oasis.opendocument.text-master": {
		"source": "iana",
		"extensions": [
			"odm"
		]
	},
	"application/vnd.oasis.opendocument.text-template": {
		"source": "iana",
		"extensions": [
			"ott"
		]
	},
	"application/vnd.oasis.opendocument.text-web": {
		"source": "iana",
		"extensions": [
			"oth"
		]
	},
	"application/vnd.obn": {
		"source": "iana"
	},
	"application/vnd.oftn.l10n+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.oipf.contentaccessdownload+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.contentaccessstreaming+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.cspg-hexbinary": {
		"source": "iana"
	},
	"application/vnd.oipf.dae.svg+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.dae.xhtml+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.mippvcontrolmessage+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.pae.gem": {
		"source": "iana"
	},
	"application/vnd.oipf.spdiscovery+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.spdlist+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.ueprofile+xml": {
		"source": "iana"
	},
	"application/vnd.oipf.userprofile+xml": {
		"source": "iana"
	},
	"application/vnd.olpc-sugar": {
		"source": "iana",
		"extensions": [
			"xo"
		]
	},
	"application/vnd.oma-scws-config": {
		"source": "iana"
	},
	"application/vnd.oma-scws-http-request": {
		"source": "iana"
	},
	"application/vnd.oma-scws-http-response": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.drm-trigger+xml": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.imd+xml": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.ltkm": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.notification+xml": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.provisioningtrigger": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.sgboot": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.sgdd+xml": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.sgdu": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.simple-symbol-container": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.smartcard-trigger+xml": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.sprov+xml": {
		"source": "iana"
	},
	"application/vnd.oma.bcast.stkm": {
		"source": "iana"
	},
	"application/vnd.oma.cab-address-book+xml": {
		"source": "iana"
	},
	"application/vnd.oma.cab-feature-handler+xml": {
		"source": "iana"
	},
	"application/vnd.oma.cab-pcc+xml": {
		"source": "iana"
	},
	"application/vnd.oma.cab-subs-invite+xml": {
		"source": "iana"
	},
	"application/vnd.oma.cab-user-prefs+xml": {
		"source": "iana"
	},
	"application/vnd.oma.dcd": {
		"source": "iana"
	},
	"application/vnd.oma.dcdc": {
		"source": "iana"
	},
	"application/vnd.oma.dd2+xml": {
		"source": "iana",
		"extensions": [
			"dd2"
		]
	},
	"application/vnd.oma.drm.risd+xml": {
		"source": "iana"
	},
	"application/vnd.oma.group-usage-list+xml": {
		"source": "iana"
	},
	"application/vnd.oma.lwm2m+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.oma.lwm2m+tlv": {
		"source": "iana"
	},
	"application/vnd.oma.pal+xml": {
		"source": "iana"
	},
	"application/vnd.oma.poc.detailed-progress-report+xml": {
		"source": "iana"
	},
	"application/vnd.oma.poc.final-report+xml": {
		"source": "iana"
	},
	"application/vnd.oma.poc.groups+xml": {
		"source": "iana"
	},
	"application/vnd.oma.poc.invocation-descriptor+xml": {
		"source": "iana"
	},
	"application/vnd.oma.poc.optimized-progress-report+xml": {
		"source": "iana"
	},
	"application/vnd.oma.push": {
		"source": "iana"
	},
	"application/vnd.oma.scidm.messages+xml": {
		"source": "iana"
	},
	"application/vnd.oma.xcap-directory+xml": {
		"source": "iana"
	},
	"application/vnd.omads-email+xml": {
		"source": "iana"
	},
	"application/vnd.omads-file+xml": {
		"source": "iana"
	},
	"application/vnd.omads-folder+xml": {
		"source": "iana"
	},
	"application/vnd.omaloc-supl-init": {
		"source": "iana"
	},
	"application/vnd.onepager": {
		"source": "iana"
	},
	"application/vnd.openblox.game+xml": {
		"source": "iana"
	},
	"application/vnd.openblox.game-binary": {
		"source": "iana"
	},
	"application/vnd.openeye.oeb": {
		"source": "iana"
	},
	"application/vnd.openofficeorg.extension": {
		"source": "apache",
		"extensions": [
			"oxt"
		]
	},
	"application/vnd.openstreetmap.data+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.drawing+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml-template": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"pptx"
		]
	},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.slide": {
		"source": "iana",
		"extensions": [
			"sldx"
		]
	},
	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
		"source": "iana",
		"extensions": [
			"ppsx"
		]
	},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.template": {
		"source": "apache",
		"extensions": [
			"potx"
		]
	},
	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"xlsx"
		]
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
		"source": "apache",
		"extensions": [
			"xltx"
		]
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.theme+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.vmldrawing": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"docx"
		]
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
		"source": "apache",
		"extensions": [
			"dotx"
		]
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-package.core-properties+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
		"source": "iana"
	},
	"application/vnd.openxmlformats-package.relationships+xml": {
		"source": "iana"
	},
	"application/vnd.oracle.resource+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.orange.indata": {
		"source": "iana"
	},
	"application/vnd.osa.netdeploy": {
		"source": "iana"
	},
	"application/vnd.osgeo.mapguide.package": {
		"source": "iana",
		"extensions": [
			"mgp"
		]
	},
	"application/vnd.osgi.bundle": {
		"source": "iana"
	},
	"application/vnd.osgi.dp": {
		"source": "iana",
		"extensions": [
			"dp"
		]
	},
	"application/vnd.osgi.subsystem": {
		"source": "iana",
		"extensions": [
			"esa"
		]
	},
	"application/vnd.otps.ct-kip+xml": {
		"source": "iana"
	},
	"application/vnd.oxli.countgraph": {
		"source": "iana"
	},
	"application/vnd.pagerduty+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.palm": {
		"source": "iana",
		"extensions": [
			"pdb",
			"pqa",
			"oprc"
		]
	},
	"application/vnd.panoply": {
		"source": "iana"
	},
	"application/vnd.paos+xml": {
		"source": "iana"
	},
	"application/vnd.paos.xml": {
		"source": "apache"
	},
	"application/vnd.pawaafile": {
		"source": "iana",
		"extensions": [
			"paw"
		]
	},
	"application/vnd.pcos": {
		"source": "iana"
	},
	"application/vnd.pg.format": {
		"source": "iana",
		"extensions": [
			"str"
		]
	},
	"application/vnd.pg.osasli": {
		"source": "iana",
		"extensions": [
			"ei6"
		]
	},
	"application/vnd.piaccess.application-licence": {
		"source": "iana"
	},
	"application/vnd.picsel": {
		"source": "iana",
		"extensions": [
			"efif"
		]
	},
	"application/vnd.pmi.widget": {
		"source": "iana",
		"extensions": [
			"wg"
		]
	},
	"application/vnd.poc.group-advertisement+xml": {
		"source": "iana"
	},
	"application/vnd.pocketlearn": {
		"source": "iana",
		"extensions": [
			"plf"
		]
	},
	"application/vnd.powerbuilder6": {
		"source": "iana",
		"extensions": [
			"pbd"
		]
	},
	"application/vnd.powerbuilder6-s": {
		"source": "iana"
	},
	"application/vnd.powerbuilder7": {
		"source": "iana"
	},
	"application/vnd.powerbuilder7-s": {
		"source": "iana"
	},
	"application/vnd.powerbuilder75": {
		"source": "iana"
	},
	"application/vnd.powerbuilder75-s": {
		"source": "iana"
	},
	"application/vnd.preminet": {
		"source": "iana"
	},
	"application/vnd.previewsystems.box": {
		"source": "iana",
		"extensions": [
			"box"
		]
	},
	"application/vnd.proteus.magazine": {
		"source": "iana",
		"extensions": [
			"mgz"
		]
	},
	"application/vnd.publishare-delta-tree": {
		"source": "iana",
		"extensions": [
			"qps"
		]
	},
	"application/vnd.pvi.ptid1": {
		"source": "iana",
		"extensions": [
			"ptid"
		]
	},
	"application/vnd.pwg-multiplexed": {
		"source": "iana"
	},
	"application/vnd.pwg-xhtml-print+xml": {
		"source": "iana"
	},
	"application/vnd.qualcomm.brew-app-res": {
		"source": "iana"
	},
	"application/vnd.quarantainenet": {
		"source": "iana"
	},
	"application/vnd.quark.quarkxpress": {
		"source": "iana",
		"extensions": [
			"qxd",
			"qxt",
			"qwd",
			"qwt",
			"qxl",
			"qxb"
		]
	},
	"application/vnd.quobject-quoxdocument": {
		"source": "iana"
	},
	"application/vnd.radisys.moml+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-audit+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-audit-conf+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-audit-conn+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-audit-dialog+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-audit-stream+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-conf+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-dialog+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-dialog-base+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-dialog-fax-detect+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-dialog-group+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-dialog-speech+xml": {
		"source": "iana"
	},
	"application/vnd.radisys.msml-dialog-transform+xml": {
		"source": "iana"
	},
	"application/vnd.rainstor.data": {
		"source": "iana"
	},
	"application/vnd.rapid": {
		"source": "iana"
	},
	"application/vnd.rar": {
		"source": "iana"
	},
	"application/vnd.realvnc.bed": {
		"source": "iana",
		"extensions": [
			"bed"
		]
	},
	"application/vnd.recordare.musicxml": {
		"source": "iana",
		"extensions": [
			"mxl"
		]
	},
	"application/vnd.recordare.musicxml+xml": {
		"source": "iana",
		"extensions": [
			"musicxml"
		]
	},
	"application/vnd.renlearn.rlprint": {
		"source": "iana"
	},
	"application/vnd.rig.cryptonote": {
		"source": "iana",
		"extensions": [
			"cryptonote"
		]
	},
	"application/vnd.rim.cod": {
		"source": "apache",
		"extensions": [
			"cod"
		]
	},
	"application/vnd.rn-realmedia": {
		"source": "apache",
		"extensions": [
			"rm"
		]
	},
	"application/vnd.rn-realmedia-vbr": {
		"source": "apache",
		"extensions": [
			"rmvb"
		]
	},
	"application/vnd.route66.link66+xml": {
		"source": "iana",
		"extensions": [
			"link66"
		]
	},
	"application/vnd.rs-274x": {
		"source": "iana"
	},
	"application/vnd.ruckus.download": {
		"source": "iana"
	},
	"application/vnd.s3sms": {
		"source": "iana"
	},
	"application/vnd.sailingtracker.track": {
		"source": "iana",
		"extensions": [
			"st"
		]
	},
	"application/vnd.sbm.cid": {
		"source": "iana"
	},
	"application/vnd.sbm.mid2": {
		"source": "iana"
	},
	"application/vnd.scribus": {
		"source": "iana"
	},
	"application/vnd.sealed.3df": {
		"source": "iana"
	},
	"application/vnd.sealed.csf": {
		"source": "iana"
	},
	"application/vnd.sealed.doc": {
		"source": "iana"
	},
	"application/vnd.sealed.eml": {
		"source": "iana"
	},
	"application/vnd.sealed.mht": {
		"source": "iana"
	},
	"application/vnd.sealed.net": {
		"source": "iana"
	},
	"application/vnd.sealed.ppt": {
		"source": "iana"
	},
	"application/vnd.sealed.tiff": {
		"source": "iana"
	},
	"application/vnd.sealed.xls": {
		"source": "iana"
	},
	"application/vnd.sealedmedia.softseal.html": {
		"source": "iana"
	},
	"application/vnd.sealedmedia.softseal.pdf": {
		"source": "iana"
	},
	"application/vnd.seemail": {
		"source": "iana",
		"extensions": [
			"see"
		]
	},
	"application/vnd.sema": {
		"source": "iana",
		"extensions": [
			"sema"
		]
	},
	"application/vnd.semd": {
		"source": "iana",
		"extensions": [
			"semd"
		]
	},
	"application/vnd.semf": {
		"source": "iana",
		"extensions": [
			"semf"
		]
	},
	"application/vnd.shana.informed.formdata": {
		"source": "iana",
		"extensions": [
			"ifm"
		]
	},
	"application/vnd.shana.informed.formtemplate": {
		"source": "iana",
		"extensions": [
			"itp"
		]
	},
	"application/vnd.shana.informed.interchange": {
		"source": "iana",
		"extensions": [
			"iif"
		]
	},
	"application/vnd.shana.informed.package": {
		"source": "iana",
		"extensions": [
			"ipk"
		]
	},
	"application/vnd.simtech-mindmapper": {
		"source": "iana",
		"extensions": [
			"twd",
			"twds"
		]
	},
	"application/vnd.siren+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.smaf": {
		"source": "iana",
		"extensions": [
			"mmf"
		]
	},
	"application/vnd.smart.notebook": {
		"source": "iana"
	},
	"application/vnd.smart.teacher": {
		"source": "iana",
		"extensions": [
			"teacher"
		]
	},
	"application/vnd.software602.filler.form+xml": {
		"source": "iana"
	},
	"application/vnd.software602.filler.form-xml-zip": {
		"source": "iana"
	},
	"application/vnd.solent.sdkm+xml": {
		"source": "iana",
		"extensions": [
			"sdkm",
			"sdkd"
		]
	},
	"application/vnd.spotfire.dxp": {
		"source": "iana",
		"extensions": [
			"dxp"
		]
	},
	"application/vnd.spotfire.sfs": {
		"source": "iana",
		"extensions": [
			"sfs"
		]
	},
	"application/vnd.sss-cod": {
		"source": "iana"
	},
	"application/vnd.sss-dtf": {
		"source": "iana"
	},
	"application/vnd.sss-ntf": {
		"source": "iana"
	},
	"application/vnd.stardivision.calc": {
		"source": "apache",
		"extensions": [
			"sdc"
		]
	},
	"application/vnd.stardivision.draw": {
		"source": "apache",
		"extensions": [
			"sda"
		]
	},
	"application/vnd.stardivision.impress": {
		"source": "apache",
		"extensions": [
			"sdd"
		]
	},
	"application/vnd.stardivision.math": {
		"source": "apache",
		"extensions": [
			"smf"
		]
	},
	"application/vnd.stardivision.writer": {
		"source": "apache",
		"extensions": [
			"sdw",
			"vor"
		]
	},
	"application/vnd.stardivision.writer-global": {
		"source": "apache",
		"extensions": [
			"sgl"
		]
	},
	"application/vnd.stepmania.package": {
		"source": "iana",
		"extensions": [
			"smzip"
		]
	},
	"application/vnd.stepmania.stepchart": {
		"source": "iana",
		"extensions": [
			"sm"
		]
	},
	"application/vnd.street-stream": {
		"source": "iana"
	},
	"application/vnd.sun.wadl+xml": {
		"source": "iana"
	},
	"application/vnd.sun.xml.calc": {
		"source": "apache",
		"extensions": [
			"sxc"
		]
	},
	"application/vnd.sun.xml.calc.template": {
		"source": "apache",
		"extensions": [
			"stc"
		]
	},
	"application/vnd.sun.xml.draw": {
		"source": "apache",
		"extensions": [
			"sxd"
		]
	},
	"application/vnd.sun.xml.draw.template": {
		"source": "apache",
		"extensions": [
			"std"
		]
	},
	"application/vnd.sun.xml.impress": {
		"source": "apache",
		"extensions": [
			"sxi"
		]
	},
	"application/vnd.sun.xml.impress.template": {
		"source": "apache",
		"extensions": [
			"sti"
		]
	},
	"application/vnd.sun.xml.math": {
		"source": "apache",
		"extensions": [
			"sxm"
		]
	},
	"application/vnd.sun.xml.writer": {
		"source": "apache",
		"extensions": [
			"sxw"
		]
	},
	"application/vnd.sun.xml.writer.global": {
		"source": "apache",
		"extensions": [
			"sxg"
		]
	},
	"application/vnd.sun.xml.writer.template": {
		"source": "apache",
		"extensions": [
			"stw"
		]
	},
	"application/vnd.sus-calendar": {
		"source": "iana",
		"extensions": [
			"sus",
			"susp"
		]
	},
	"application/vnd.svd": {
		"source": "iana",
		"extensions": [
			"svd"
		]
	},
	"application/vnd.swiftview-ics": {
		"source": "iana"
	},
	"application/vnd.symbian.install": {
		"source": "apache",
		"extensions": [
			"sis",
			"sisx"
		]
	},
	"application/vnd.syncml+xml": {
		"source": "iana",
		"extensions": [
			"xsm"
		]
	},
	"application/vnd.syncml.dm+wbxml": {
		"source": "iana",
		"extensions": [
			"bdm"
		]
	},
	"application/vnd.syncml.dm+xml": {
		"source": "iana",
		"extensions": [
			"xdm"
		]
	},
	"application/vnd.syncml.dm.notification": {
		"source": "iana"
	},
	"application/vnd.syncml.dmddf+wbxml": {
		"source": "iana"
	},
	"application/vnd.syncml.dmddf+xml": {
		"source": "iana"
	},
	"application/vnd.syncml.dmtnds+wbxml": {
		"source": "iana"
	},
	"application/vnd.syncml.dmtnds+xml": {
		"source": "iana"
	},
	"application/vnd.syncml.ds.notification": {
		"source": "iana"
	},
	"application/vnd.tableschema+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.tao.intent-module-archive": {
		"source": "iana",
		"extensions": [
			"tao"
		]
	},
	"application/vnd.tcpdump.pcap": {
		"source": "iana",
		"extensions": [
			"pcap",
			"cap",
			"dmp"
		]
	},
	"application/vnd.tmd.mediaflex.api+xml": {
		"source": "iana"
	},
	"application/vnd.tml": {
		"source": "iana"
	},
	"application/vnd.tmobile-livetv": {
		"source": "iana",
		"extensions": [
			"tmo"
		]
	},
	"application/vnd.tri.onesource": {
		"source": "iana"
	},
	"application/vnd.trid.tpt": {
		"source": "iana",
		"extensions": [
			"tpt"
		]
	},
	"application/vnd.triscape.mxs": {
		"source": "iana",
		"extensions": [
			"mxs"
		]
	},
	"application/vnd.trueapp": {
		"source": "iana",
		"extensions": [
			"tra"
		]
	},
	"application/vnd.truedoc": {
		"source": "iana"
	},
	"application/vnd.ubisoft.webplayer": {
		"source": "iana"
	},
	"application/vnd.ufdl": {
		"source": "iana",
		"extensions": [
			"ufd",
			"ufdl"
		]
	},
	"application/vnd.uiq.theme": {
		"source": "iana",
		"extensions": [
			"utz"
		]
	},
	"application/vnd.umajin": {
		"source": "iana",
		"extensions": [
			"umj"
		]
	},
	"application/vnd.unity": {
		"source": "iana",
		"extensions": [
			"unityweb"
		]
	},
	"application/vnd.uoml+xml": {
		"source": "iana",
		"extensions": [
			"uoml"
		]
	},
	"application/vnd.uplanet.alert": {
		"source": "iana"
	},
	"application/vnd.uplanet.alert-wbxml": {
		"source": "iana"
	},
	"application/vnd.uplanet.bearer-choice": {
		"source": "iana"
	},
	"application/vnd.uplanet.bearer-choice-wbxml": {
		"source": "iana"
	},
	"application/vnd.uplanet.cacheop": {
		"source": "iana"
	},
	"application/vnd.uplanet.cacheop-wbxml": {
		"source": "iana"
	},
	"application/vnd.uplanet.channel": {
		"source": "iana"
	},
	"application/vnd.uplanet.channel-wbxml": {
		"source": "iana"
	},
	"application/vnd.uplanet.list": {
		"source": "iana"
	},
	"application/vnd.uplanet.list-wbxml": {
		"source": "iana"
	},
	"application/vnd.uplanet.listcmd": {
		"source": "iana"
	},
	"application/vnd.uplanet.listcmd-wbxml": {
		"source": "iana"
	},
	"application/vnd.uplanet.signal": {
		"source": "iana"
	},
	"application/vnd.uri-map": {
		"source": "iana"
	},
	"application/vnd.valve.source.material": {
		"source": "iana"
	},
	"application/vnd.vcx": {
		"source": "iana",
		"extensions": [
			"vcx"
		]
	},
	"application/vnd.vd-study": {
		"source": "iana"
	},
	"application/vnd.vectorworks": {
		"source": "iana"
	},
	"application/vnd.vel+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.verimatrix.vcas": {
		"source": "iana"
	},
	"application/vnd.vidsoft.vidconference": {
		"source": "iana"
	},
	"application/vnd.visio": {
		"source": "iana",
		"extensions": [
			"vsd",
			"vst",
			"vss",
			"vsw"
		]
	},
	"application/vnd.visionary": {
		"source": "iana",
		"extensions": [
			"vis"
		]
	},
	"application/vnd.vividence.scriptfile": {
		"source": "iana"
	},
	"application/vnd.vsf": {
		"source": "iana",
		"extensions": [
			"vsf"
		]
	},
	"application/vnd.wap.sic": {
		"source": "iana"
	},
	"application/vnd.wap.slc": {
		"source": "iana"
	},
	"application/vnd.wap.wbxml": {
		"source": "iana",
		"extensions": [
			"wbxml"
		]
	},
	"application/vnd.wap.wmlc": {
		"source": "iana",
		"extensions": [
			"wmlc"
		]
	},
	"application/vnd.wap.wmlscriptc": {
		"source": "iana",
		"extensions": [
			"wmlsc"
		]
	},
	"application/vnd.webturbo": {
		"source": "iana",
		"extensions": [
			"wtb"
		]
	},
	"application/vnd.wfa.p2p": {
		"source": "iana"
	},
	"application/vnd.wfa.wsc": {
		"source": "iana"
	},
	"application/vnd.windows.devicepairing": {
		"source": "iana"
	},
	"application/vnd.wmc": {
		"source": "iana"
	},
	"application/vnd.wmf.bootstrap": {
		"source": "iana"
	},
	"application/vnd.wolfram.mathematica": {
		"source": "iana"
	},
	"application/vnd.wolfram.mathematica.package": {
		"source": "iana"
	},
	"application/vnd.wolfram.player": {
		"source": "iana",
		"extensions": [
			"nbp"
		]
	},
	"application/vnd.wordperfect": {
		"source": "iana",
		"extensions": [
			"wpd"
		]
	},
	"application/vnd.wqd": {
		"source": "iana",
		"extensions": [
			"wqd"
		]
	},
	"application/vnd.wrq-hp3000-labelled": {
		"source": "iana"
	},
	"application/vnd.wt.stf": {
		"source": "iana",
		"extensions": [
			"stf"
		]
	},
	"application/vnd.wv.csp+wbxml": {
		"source": "iana"
	},
	"application/vnd.wv.csp+xml": {
		"source": "iana"
	},
	"application/vnd.wv.ssp+xml": {
		"source": "iana"
	},
	"application/vnd.xacml+json": {
		"source": "iana",
		"compressible": true
	},
	"application/vnd.xara": {
		"source": "iana",
		"extensions": [
			"xar"
		]
	},
	"application/vnd.xfdl": {
		"source": "iana",
		"extensions": [
			"xfdl"
		]
	},
	"application/vnd.xfdl.webform": {
		"source": "iana"
	},
	"application/vnd.xmi+xml": {
		"source": "iana"
	},
	"application/vnd.xmpie.cpkg": {
		"source": "iana"
	},
	"application/vnd.xmpie.dpkg": {
		"source": "iana"
	},
	"application/vnd.xmpie.plan": {
		"source": "iana"
	},
	"application/vnd.xmpie.ppkg": {
		"source": "iana"
	},
	"application/vnd.xmpie.xlim": {
		"source": "iana"
	},
	"application/vnd.yamaha.hv-dic": {
		"source": "iana",
		"extensions": [
			"hvd"
		]
	},
	"application/vnd.yamaha.hv-script": {
		"source": "iana",
		"extensions": [
			"hvs"
		]
	},
	"application/vnd.yamaha.hv-voice": {
		"source": "iana",
		"extensions": [
			"hvp"
		]
	},
	"application/vnd.yamaha.openscoreformat": {
		"source": "iana",
		"extensions": [
			"osf"
		]
	},
	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
		"source": "iana",
		"extensions": [
			"osfpvg"
		]
	},
	"application/vnd.yamaha.remote-setup": {
		"source": "iana"
	},
	"application/vnd.yamaha.smaf-audio": {
		"source": "iana",
		"extensions": [
			"saf"
		]
	},
	"application/vnd.yamaha.smaf-phrase": {
		"source": "iana",
		"extensions": [
			"spf"
		]
	},
	"application/vnd.yamaha.through-ngn": {
		"source": "iana"
	},
	"application/vnd.yamaha.tunnel-udpencap": {
		"source": "iana"
	},
	"application/vnd.yaoweme": {
		"source": "iana"
	},
	"application/vnd.yellowriver-custom-menu": {
		"source": "iana",
		"extensions": [
			"cmp"
		]
	},
	"application/vnd.zul": {
		"source": "iana",
		"extensions": [
			"zir",
			"zirz"
		]
	},
	"application/vnd.zzazz.deck+xml": {
		"source": "iana",
		"extensions": [
			"zaz"
		]
	},
	"application/voicexml+xml": {
		"source": "iana",
		"extensions": [
			"vxml"
		]
	},
	"application/vq-rtcpxr": {
		"source": "iana"
	},
	"application/watcherinfo+xml": {
		"source": "iana"
	},
	"application/whoispp-query": {
		"source": "iana"
	},
	"application/whoispp-response": {
		"source": "iana"
	},
	"application/widget": {
		"source": "iana",
		"extensions": [
			"wgt"
		]
	},
	"application/winhlp": {
		"source": "apache",
		"extensions": [
			"hlp"
		]
	},
	"application/wita": {
		"source": "iana"
	},
	"application/wordperfect5.1": {
		"source": "iana"
	},
	"application/wsdl+xml": {
		"source": "iana",
		"extensions": [
			"wsdl"
		]
	},
	"application/wspolicy+xml": {
		"source": "iana",
		"extensions": [
			"wspolicy"
		]
	},
	"application/x-7z-compressed": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"7z"
		]
	},
	"application/x-abiword": {
		"source": "apache",
		"extensions": [
			"abw"
		]
	},
	"application/x-ace-compressed": {
		"source": "apache",
		"extensions": [
			"ace"
		]
	},
	"application/x-amf": {
		"source": "apache"
	},
	"application/x-apple-diskimage": {
		"source": "apache",
		"extensions": [
			"dmg"
		]
	},
	"application/x-authorware-bin": {
		"source": "apache",
		"extensions": [
			"aab",
			"x32",
			"u32",
			"vox"
		]
	},
	"application/x-authorware-map": {
		"source": "apache",
		"extensions": [
			"aam"
		]
	},
	"application/x-authorware-seg": {
		"source": "apache",
		"extensions": [
			"aas"
		]
	},
	"application/x-bcpio": {
		"source": "apache",
		"extensions": [
			"bcpio"
		]
	},
	"application/x-bdoc": {
		"compressible": false,
		"extensions": [
			"bdoc"
		]
	},
	"application/x-bittorrent": {
		"source": "apache",
		"extensions": [
			"torrent"
		]
	},
	"application/x-blorb": {
		"source": "apache",
		"extensions": [
			"blb",
			"blorb"
		]
	},
	"application/x-bzip": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"bz"
		]
	},
	"application/x-bzip2": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"bz2",
			"boz"
		]
	},
	"application/x-cbr": {
		"source": "apache",
		"extensions": [
			"cbr",
			"cba",
			"cbt",
			"cbz",
			"cb7"
		]
	},
	"application/x-cdlink": {
		"source": "apache",
		"extensions": [
			"vcd"
		]
	},
	"application/x-cfs-compressed": {
		"source": "apache",
		"extensions": [
			"cfs"
		]
	},
	"application/x-chat": {
		"source": "apache",
		"extensions": [
			"chat"
		]
	},
	"application/x-chess-pgn": {
		"source": "apache",
		"extensions": [
			"pgn"
		]
	},
	"application/x-chrome-extension": {
		"extensions": [
			"crx"
		]
	},
	"application/x-cocoa": {
		"source": "nginx",
		"extensions": [
			"cco"
		]
	},
	"application/x-compress": {
		"source": "apache"
	},
	"application/x-conference": {
		"source": "apache",
		"extensions": [
			"nsc"
		]
	},
	"application/x-cpio": {
		"source": "apache",
		"extensions": [
			"cpio"
		]
	},
	"application/x-csh": {
		"source": "apache",
		"extensions": [
			"csh"
		]
	},
	"application/x-deb": {
		"compressible": false
	},
	"application/x-debian-package": {
		"source": "apache",
		"extensions": [
			"deb",
			"udeb"
		]
	},
	"application/x-dgc-compressed": {
		"source": "apache",
		"extensions": [
			"dgc"
		]
	},
	"application/x-director": {
		"source": "apache",
		"extensions": [
			"dir",
			"dcr",
			"dxr",
			"cst",
			"cct",
			"cxt",
			"w3d",
			"fgd",
			"swa"
		]
	},
	"application/x-doom": {
		"source": "apache",
		"extensions": [
			"wad"
		]
	},
	"application/x-dtbncx+xml": {
		"source": "apache",
		"extensions": [
			"ncx"
		]
	},
	"application/x-dtbook+xml": {
		"source": "apache",
		"extensions": [
			"dtb"
		]
	},
	"application/x-dtbresource+xml": {
		"source": "apache",
		"extensions": [
			"res"
		]
	},
	"application/x-dvi": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"dvi"
		]
	},
	"application/x-envoy": {
		"source": "apache",
		"extensions": [
			"evy"
		]
	},
	"application/x-eva": {
		"source": "apache",
		"extensions": [
			"eva"
		]
	},
	"application/x-font-bdf": {
		"source": "apache",
		"extensions": [
			"bdf"
		]
	},
	"application/x-font-dos": {
		"source": "apache"
	},
	"application/x-font-framemaker": {
		"source": "apache"
	},
	"application/x-font-ghostscript": {
		"source": "apache",
		"extensions": [
			"gsf"
		]
	},
	"application/x-font-libgrx": {
		"source": "apache"
	},
	"application/x-font-linux-psf": {
		"source": "apache",
		"extensions": [
			"psf"
		]
	},
	"application/x-font-otf": {
		"source": "apache",
		"compressible": true,
		"extensions": [
			"otf"
		]
	},
	"application/x-font-pcf": {
		"source": "apache",
		"extensions": [
			"pcf"
		]
	},
	"application/x-font-snf": {
		"source": "apache",
		"extensions": [
			"snf"
		]
	},
	"application/x-font-speedo": {
		"source": "apache"
	},
	"application/x-font-sunos-news": {
		"source": "apache"
	},
	"application/x-font-ttf": {
		"source": "apache",
		"compressible": true,
		"extensions": [
			"ttf",
			"ttc"
		]
	},
	"application/x-font-type1": {
		"source": "apache",
		"extensions": [
			"pfa",
			"pfb",
			"pfm",
			"afm"
		]
	},
	"application/x-font-vfont": {
		"source": "apache"
	},
	"application/x-freearc": {
		"source": "apache",
		"extensions": [
			"arc"
		]
	},
	"application/x-futuresplash": {
		"source": "apache",
		"extensions": [
			"spl"
		]
	},
	"application/x-gca-compressed": {
		"source": "apache",
		"extensions": [
			"gca"
		]
	},
	"application/x-glulx": {
		"source": "apache",
		"extensions": [
			"ulx"
		]
	},
	"application/x-gnumeric": {
		"source": "apache",
		"extensions": [
			"gnumeric"
		]
	},
	"application/x-gramps-xml": {
		"source": "apache",
		"extensions": [
			"gramps"
		]
	},
	"application/x-gtar": {
		"source": "apache",
		"extensions": [
			"gtar"
		]
	},
	"application/x-gzip": {
		"source": "apache"
	},
	"application/x-hdf": {
		"source": "apache",
		"extensions": [
			"hdf"
		]
	},
	"application/x-httpd-php": {
		"compressible": true,
		"extensions": [
			"php"
		]
	},
	"application/x-install-instructions": {
		"source": "apache",
		"extensions": [
			"install"
		]
	},
	"application/x-iso9660-image": {
		"source": "apache",
		"extensions": [
			"iso"
		]
	},
	"application/x-java-archive-diff": {
		"source": "nginx",
		"extensions": [
			"jardiff"
		]
	},
	"application/x-java-jnlp-file": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"jnlp"
		]
	},
	"application/x-javascript": {
		"compressible": true
	},
	"application/x-latex": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"latex"
		]
	},
	"application/x-lua-bytecode": {
		"extensions": [
			"luac"
		]
	},
	"application/x-lzh-compressed": {
		"source": "apache",
		"extensions": [
			"lzh",
			"lha"
		]
	},
	"application/x-makeself": {
		"source": "nginx",
		"extensions": [
			"run"
		]
	},
	"application/x-mie": {
		"source": "apache",
		"extensions": [
			"mie"
		]
	},
	"application/x-mobipocket-ebook": {
		"source": "apache",
		"extensions": [
			"prc",
			"mobi"
		]
	},
	"application/x-mpegurl": {
		"compressible": false
	},
	"application/x-ms-application": {
		"source": "apache",
		"extensions": [
			"application"
		]
	},
	"application/x-ms-shortcut": {
		"source": "apache",
		"extensions": [
			"lnk"
		]
	},
	"application/x-ms-wmd": {
		"source": "apache",
		"extensions": [
			"wmd"
		]
	},
	"application/x-ms-wmz": {
		"source": "apache",
		"extensions": [
			"wmz"
		]
	},
	"application/x-ms-xbap": {
		"source": "apache",
		"extensions": [
			"xbap"
		]
	},
	"application/x-msaccess": {
		"source": "apache",
		"extensions": [
			"mdb"
		]
	},
	"application/x-msbinder": {
		"source": "apache",
		"extensions": [
			"obd"
		]
	},
	"application/x-mscardfile": {
		"source": "apache",
		"extensions": [
			"crd"
		]
	},
	"application/x-msclip": {
		"source": "apache",
		"extensions": [
			"clp"
		]
	},
	"application/x-msdos-program": {
		"extensions": [
			"exe"
		]
	},
	"application/x-msdownload": {
		"source": "apache",
		"extensions": [
			"exe",
			"dll",
			"com",
			"bat",
			"msi"
		]
	},
	"application/x-msmediaview": {
		"source": "apache",
		"extensions": [
			"mvb",
			"m13",
			"m14"
		]
	},
	"application/x-msmetafile": {
		"source": "apache",
		"extensions": [
			"wmf",
			"wmz",
			"emf",
			"emz"
		]
	},
	"application/x-msmoney": {
		"source": "apache",
		"extensions": [
			"mny"
		]
	},
	"application/x-mspublisher": {
		"source": "apache",
		"extensions": [
			"pub"
		]
	},
	"application/x-msschedule": {
		"source": "apache",
		"extensions": [
			"scd"
		]
	},
	"application/x-msterminal": {
		"source": "apache",
		"extensions": [
			"trm"
		]
	},
	"application/x-mswrite": {
		"source": "apache",
		"extensions": [
			"wri"
		]
	},
	"application/x-netcdf": {
		"source": "apache",
		"extensions": [
			"nc",
			"cdf"
		]
	},
	"application/x-ns-proxy-autoconfig": {
		"compressible": true,
		"extensions": [
			"pac"
		]
	},
	"application/x-nzb": {
		"source": "apache",
		"extensions": [
			"nzb"
		]
	},
	"application/x-perl": {
		"source": "nginx",
		"extensions": [
			"pl",
			"pm"
		]
	},
	"application/x-pilot": {
		"source": "nginx",
		"extensions": [
			"prc",
			"pdb"
		]
	},
	"application/x-pkcs12": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"p12",
			"pfx"
		]
	},
	"application/x-pkcs7-certificates": {
		"source": "apache",
		"extensions": [
			"p7b",
			"spc"
		]
	},
	"application/x-pkcs7-certreqresp": {
		"source": "apache",
		"extensions": [
			"p7r"
		]
	},
	"application/x-rar-compressed": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"rar"
		]
	},
	"application/x-redhat-package-manager": {
		"source": "nginx",
		"extensions": [
			"rpm"
		]
	},
	"application/x-research-info-systems": {
		"source": "apache",
		"extensions": [
			"ris"
		]
	},
	"application/x-sea": {
		"source": "nginx",
		"extensions": [
			"sea"
		]
	},
	"application/x-sh": {
		"source": "apache",
		"compressible": true,
		"extensions": [
			"sh"
		]
	},
	"application/x-shar": {
		"source": "apache",
		"extensions": [
			"shar"
		]
	},
	"application/x-shockwave-flash": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"swf"
		]
	},
	"application/x-silverlight-app": {
		"source": "apache",
		"extensions": [
			"xap"
		]
	},
	"application/x-sql": {
		"source": "apache",
		"extensions": [
			"sql"
		]
	},
	"application/x-stuffit": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"sit"
		]
	},
	"application/x-stuffitx": {
		"source": "apache",
		"extensions": [
			"sitx"
		]
	},
	"application/x-subrip": {
		"source": "apache",
		"extensions": [
			"srt"
		]
	},
	"application/x-sv4cpio": {
		"source": "apache",
		"extensions": [
			"sv4cpio"
		]
	},
	"application/x-sv4crc": {
		"source": "apache",
		"extensions": [
			"sv4crc"
		]
	},
	"application/x-t3vm-image": {
		"source": "apache",
		"extensions": [
			"t3"
		]
	},
	"application/x-tads": {
		"source": "apache",
		"extensions": [
			"gam"
		]
	},
	"application/x-tar": {
		"source": "apache",
		"compressible": true,
		"extensions": [
			"tar"
		]
	},
	"application/x-tcl": {
		"source": "apache",
		"extensions": [
			"tcl",
			"tk"
		]
	},
	"application/x-tex": {
		"source": "apache",
		"extensions": [
			"tex"
		]
	},
	"application/x-tex-tfm": {
		"source": "apache",
		"extensions": [
			"tfm"
		]
	},
	"application/x-texinfo": {
		"source": "apache",
		"extensions": [
			"texinfo",
			"texi"
		]
	},
	"application/x-tgif": {
		"source": "apache",
		"extensions": [
			"obj"
		]
	},
	"application/x-ustar": {
		"source": "apache",
		"extensions": [
			"ustar"
		]
	},
	"application/x-wais-source": {
		"source": "apache",
		"extensions": [
			"src"
		]
	},
	"application/x-web-app-manifest+json": {
		"compressible": true,
		"extensions": [
			"webapp"
		]
	},
	"application/x-www-form-urlencoded": {
		"source": "iana",
		"compressible": true
	},
	"application/x-x509-ca-cert": {
		"source": "apache",
		"extensions": [
			"der",
			"crt",
			"pem"
		]
	},
	"application/x-xfig": {
		"source": "apache",
		"extensions": [
			"fig"
		]
	},
	"application/x-xliff+xml": {
		"source": "apache",
		"extensions": [
			"xlf"
		]
	},
	"application/x-xpinstall": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"xpi"
		]
	},
	"application/x-xz": {
		"source": "apache",
		"extensions": [
			"xz"
		]
	},
	"application/x-zmachine": {
		"source": "apache",
		"extensions": [
			"z1",
			"z2",
			"z3",
			"z4",
			"z5",
			"z6",
			"z7",
			"z8"
		]
	},
	"application/x400-bp": {
		"source": "iana"
	},
	"application/xacml+xml": {
		"source": "iana"
	},
	"application/xaml+xml": {
		"source": "apache",
		"extensions": [
			"xaml"
		]
	},
	"application/xcap-att+xml": {
		"source": "iana"
	},
	"application/xcap-caps+xml": {
		"source": "iana"
	},
	"application/xcap-diff+xml": {
		"source": "iana",
		"extensions": [
			"xdf"
		]
	},
	"application/xcap-el+xml": {
		"source": "iana"
	},
	"application/xcap-error+xml": {
		"source": "iana"
	},
	"application/xcap-ns+xml": {
		"source": "iana"
	},
	"application/xcon-conference-info+xml": {
		"source": "iana"
	},
	"application/xcon-conference-info-diff+xml": {
		"source": "iana"
	},
	"application/xenc+xml": {
		"source": "iana",
		"extensions": [
			"xenc"
		]
	},
	"application/xhtml+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"xhtml",
			"xht"
		]
	},
	"application/xhtml-voice+xml": {
		"source": "apache"
	},
	"application/xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"xml",
			"xsl",
			"xsd",
			"rng"
		]
	},
	"application/xml-dtd": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"dtd"
		]
	},
	"application/xml-external-parsed-entity": {
		"source": "iana"
	},
	"application/xml-patch+xml": {
		"source": "iana"
	},
	"application/xmpp+xml": {
		"source": "iana"
	},
	"application/xop+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"xop"
		]
	},
	"application/xproc+xml": {
		"source": "apache",
		"extensions": [
			"xpl"
		]
	},
	"application/xslt+xml": {
		"source": "iana",
		"extensions": [
			"xslt"
		]
	},
	"application/xspf+xml": {
		"source": "apache",
		"extensions": [
			"xspf"
		]
	},
	"application/xv+xml": {
		"source": "iana",
		"extensions": [
			"mxml",
			"xhvml",
			"xvml",
			"xvm"
		]
	},
	"application/yang": {
		"source": "iana",
		"extensions": [
			"yang"
		]
	},
	"application/yang-data+json": {
		"source": "iana",
		"compressible": true
	},
	"application/yang-data+xml": {
		"source": "iana"
	},
	"application/yang-patch+json": {
		"source": "iana",
		"compressible": true
	},
	"application/yang-patch+xml": {
		"source": "iana"
	},
	"application/yin+xml": {
		"source": "iana",
		"extensions": [
			"yin"
		]
	},
	"application/zip": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"zip"
		]
	},
	"application/zlib": {
		"source": "iana"
	},
	"audio/1d-interleaved-parityfec": {
		"source": "iana"
	},
	"audio/32kadpcm": {
		"source": "iana"
	},
	"audio/3gpp": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"3gpp"
		]
	},
	"audio/3gpp2": {
		"source": "iana"
	},
	"audio/ac3": {
		"source": "iana"
	},
	"audio/adpcm": {
		"source": "apache",
		"extensions": [
			"adp"
		]
	},
	"audio/amr": {
		"source": "iana"
	},
	"audio/amr-wb": {
		"source": "iana"
	},
	"audio/amr-wb+": {
		"source": "iana"
	},
	"audio/aptx": {
		"source": "iana"
	},
	"audio/asc": {
		"source": "iana"
	},
	"audio/atrac-advanced-lossless": {
		"source": "iana"
	},
	"audio/atrac-x": {
		"source": "iana"
	},
	"audio/atrac3": {
		"source": "iana"
	},
	"audio/basic": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"au",
			"snd"
		]
	},
	"audio/bv16": {
		"source": "iana"
	},
	"audio/bv32": {
		"source": "iana"
	},
	"audio/clearmode": {
		"source": "iana"
	},
	"audio/cn": {
		"source": "iana"
	},
	"audio/dat12": {
		"source": "iana"
	},
	"audio/dls": {
		"source": "iana"
	},
	"audio/dsr-es201108": {
		"source": "iana"
	},
	"audio/dsr-es202050": {
		"source": "iana"
	},
	"audio/dsr-es202211": {
		"source": "iana"
	},
	"audio/dsr-es202212": {
		"source": "iana"
	},
	"audio/dv": {
		"source": "iana"
	},
	"audio/dvi4": {
		"source": "iana"
	},
	"audio/eac3": {
		"source": "iana"
	},
	"audio/encaprtp": {
		"source": "iana"
	},
	"audio/evrc": {
		"source": "iana"
	},
	"audio/evrc-qcp": {
		"source": "iana"
	},
	"audio/evrc0": {
		"source": "iana"
	},
	"audio/evrc1": {
		"source": "iana"
	},
	"audio/evrcb": {
		"source": "iana"
	},
	"audio/evrcb0": {
		"source": "iana"
	},
	"audio/evrcb1": {
		"source": "iana"
	},
	"audio/evrcnw": {
		"source": "iana"
	},
	"audio/evrcnw0": {
		"source": "iana"
	},
	"audio/evrcnw1": {
		"source": "iana"
	},
	"audio/evrcwb": {
		"source": "iana"
	},
	"audio/evrcwb0": {
		"source": "iana"
	},
	"audio/evrcwb1": {
		"source": "iana"
	},
	"audio/evs": {
		"source": "iana"
	},
	"audio/fwdred": {
		"source": "iana"
	},
	"audio/g711-0": {
		"source": "iana"
	},
	"audio/g719": {
		"source": "iana"
	},
	"audio/g722": {
		"source": "iana"
	},
	"audio/g7221": {
		"source": "iana"
	},
	"audio/g723": {
		"source": "iana"
	},
	"audio/g726-16": {
		"source": "iana"
	},
	"audio/g726-24": {
		"source": "iana"
	},
	"audio/g726-32": {
		"source": "iana"
	},
	"audio/g726-40": {
		"source": "iana"
	},
	"audio/g728": {
		"source": "iana"
	},
	"audio/g729": {
		"source": "iana"
	},
	"audio/g7291": {
		"source": "iana"
	},
	"audio/g729d": {
		"source": "iana"
	},
	"audio/g729e": {
		"source": "iana"
	},
	"audio/gsm": {
		"source": "iana"
	},
	"audio/gsm-efr": {
		"source": "iana"
	},
	"audio/gsm-hr-08": {
		"source": "iana"
	},
	"audio/ilbc": {
		"source": "iana"
	},
	"audio/ip-mr_v2.5": {
		"source": "iana"
	},
	"audio/isac": {
		"source": "apache"
	},
	"audio/l16": {
		"source": "iana"
	},
	"audio/l20": {
		"source": "iana"
	},
	"audio/l24": {
		"source": "iana",
		"compressible": false
	},
	"audio/l8": {
		"source": "iana"
	},
	"audio/lpc": {
		"source": "iana"
	},
	"audio/midi": {
		"source": "apache",
		"extensions": [
			"mid",
			"midi",
			"kar",
			"rmi"
		]
	},
	"audio/mobile-xmf": {
		"source": "iana"
	},
	"audio/mp3": {
		"compressible": false,
		"extensions": [
			"mp3"
		]
	},
	"audio/mp4": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"m4a",
			"mp4a"
		]
	},
	"audio/mp4a-latm": {
		"source": "iana"
	},
	"audio/mpa": {
		"source": "iana"
	},
	"audio/mpa-robust": {
		"source": "iana"
	},
	"audio/mpeg": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"mpga",
			"mp2",
			"mp2a",
			"mp3",
			"m2a",
			"m3a"
		]
	},
	"audio/mpeg4-generic": {
		"source": "iana"
	},
	"audio/musepack": {
		"source": "apache"
	},
	"audio/ogg": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"oga",
			"ogg",
			"spx"
		]
	},
	"audio/opus": {
		"source": "iana"
	},
	"audio/parityfec": {
		"source": "iana"
	},
	"audio/pcma": {
		"source": "iana"
	},
	"audio/pcma-wb": {
		"source": "iana"
	},
	"audio/pcmu": {
		"source": "iana"
	},
	"audio/pcmu-wb": {
		"source": "iana"
	},
	"audio/prs.sid": {
		"source": "iana"
	},
	"audio/qcelp": {
		"source": "iana"
	},
	"audio/raptorfec": {
		"source": "iana"
	},
	"audio/red": {
		"source": "iana"
	},
	"audio/rtp-enc-aescm128": {
		"source": "iana"
	},
	"audio/rtp-midi": {
		"source": "iana"
	},
	"audio/rtploopback": {
		"source": "iana"
	},
	"audio/rtx": {
		"source": "iana"
	},
	"audio/s3m": {
		"source": "apache",
		"extensions": [
			"s3m"
		]
	},
	"audio/silk": {
		"source": "apache",
		"extensions": [
			"sil"
		]
	},
	"audio/smv": {
		"source": "iana"
	},
	"audio/smv-qcp": {
		"source": "iana"
	},
	"audio/smv0": {
		"source": "iana"
	},
	"audio/sp-midi": {
		"source": "iana"
	},
	"audio/speex": {
		"source": "iana"
	},
	"audio/t140c": {
		"source": "iana"
	},
	"audio/t38": {
		"source": "iana"
	},
	"audio/telephone-event": {
		"source": "iana"
	},
	"audio/tone": {
		"source": "iana"
	},
	"audio/uemclip": {
		"source": "iana"
	},
	"audio/ulpfec": {
		"source": "iana"
	},
	"audio/vdvi": {
		"source": "iana"
	},
	"audio/vmr-wb": {
		"source": "iana"
	},
	"audio/vnd.3gpp.iufp": {
		"source": "iana"
	},
	"audio/vnd.4sb": {
		"source": "iana"
	},
	"audio/vnd.audiokoz": {
		"source": "iana"
	},
	"audio/vnd.celp": {
		"source": "iana"
	},
	"audio/vnd.cisco.nse": {
		"source": "iana"
	},
	"audio/vnd.cmles.radio-events": {
		"source": "iana"
	},
	"audio/vnd.cns.anp1": {
		"source": "iana"
	},
	"audio/vnd.cns.inf1": {
		"source": "iana"
	},
	"audio/vnd.dece.audio": {
		"source": "iana",
		"extensions": [
			"uva",
			"uvva"
		]
	},
	"audio/vnd.digital-winds": {
		"source": "iana",
		"extensions": [
			"eol"
		]
	},
	"audio/vnd.dlna.adts": {
		"source": "iana"
	},
	"audio/vnd.dolby.heaac.1": {
		"source": "iana"
	},
	"audio/vnd.dolby.heaac.2": {
		"source": "iana"
	},
	"audio/vnd.dolby.mlp": {
		"source": "iana"
	},
	"audio/vnd.dolby.mps": {
		"source": "iana"
	},
	"audio/vnd.dolby.pl2": {
		"source": "iana"
	},
	"audio/vnd.dolby.pl2x": {
		"source": "iana"
	},
	"audio/vnd.dolby.pl2z": {
		"source": "iana"
	},
	"audio/vnd.dolby.pulse.1": {
		"source": "iana"
	},
	"audio/vnd.dra": {
		"source": "iana",
		"extensions": [
			"dra"
		]
	},
	"audio/vnd.dts": {
		"source": "iana",
		"extensions": [
			"dts"
		]
	},
	"audio/vnd.dts.hd": {
		"source": "iana",
		"extensions": [
			"dtshd"
		]
	},
	"audio/vnd.dvb.file": {
		"source": "iana"
	},
	"audio/vnd.everad.plj": {
		"source": "iana"
	},
	"audio/vnd.hns.audio": {
		"source": "iana"
	},
	"audio/vnd.lucent.voice": {
		"source": "iana",
		"extensions": [
			"lvp"
		]
	},
	"audio/vnd.ms-playready.media.pya": {
		"source": "iana",
		"extensions": [
			"pya"
		]
	},
	"audio/vnd.nokia.mobile-xmf": {
		"source": "iana"
	},
	"audio/vnd.nortel.vbk": {
		"source": "iana"
	},
	"audio/vnd.nuera.ecelp4800": {
		"source": "iana",
		"extensions": [
			"ecelp4800"
		]
	},
	"audio/vnd.nuera.ecelp7470": {
		"source": "iana",
		"extensions": [
			"ecelp7470"
		]
	},
	"audio/vnd.nuera.ecelp9600": {
		"source": "iana",
		"extensions": [
			"ecelp9600"
		]
	},
	"audio/vnd.octel.sbc": {
		"source": "iana"
	},
	"audio/vnd.qcelp": {
		"source": "iana"
	},
	"audio/vnd.rhetorex.32kadpcm": {
		"source": "iana"
	},
	"audio/vnd.rip": {
		"source": "iana",
		"extensions": [
			"rip"
		]
	},
	"audio/vnd.rn-realaudio": {
		"compressible": false
	},
	"audio/vnd.sealedmedia.softseal.mpeg": {
		"source": "iana"
	},
	"audio/vnd.vmx.cvsd": {
		"source": "iana"
	},
	"audio/vnd.wave": {
		"compressible": false
	},
	"audio/vorbis": {
		"source": "iana",
		"compressible": false
	},
	"audio/vorbis-config": {
		"source": "iana"
	},
	"audio/wav": {
		"compressible": false,
		"extensions": [
			"wav"
		]
	},
	"audio/wave": {
		"compressible": false,
		"extensions": [
			"wav"
		]
	},
	"audio/webm": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"weba"
		]
	},
	"audio/x-aac": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"aac"
		]
	},
	"audio/x-aiff": {
		"source": "apache",
		"extensions": [
			"aif",
			"aiff",
			"aifc"
		]
	},
	"audio/x-caf": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"caf"
		]
	},
	"audio/x-flac": {
		"source": "apache",
		"extensions": [
			"flac"
		]
	},
	"audio/x-m4a": {
		"source": "nginx",
		"extensions": [
			"m4a"
		]
	},
	"audio/x-matroska": {
		"source": "apache",
		"extensions": [
			"mka"
		]
	},
	"audio/x-mpegurl": {
		"source": "apache",
		"extensions": [
			"m3u"
		]
	},
	"audio/x-ms-wax": {
		"source": "apache",
		"extensions": [
			"wax"
		]
	},
	"audio/x-ms-wma": {
		"source": "apache",
		"extensions": [
			"wma"
		]
	},
	"audio/x-pn-realaudio": {
		"source": "apache",
		"extensions": [
			"ram",
			"ra"
		]
	},
	"audio/x-pn-realaudio-plugin": {
		"source": "apache",
		"extensions": [
			"rmp"
		]
	},
	"audio/x-realaudio": {
		"source": "nginx",
		"extensions": [
			"ra"
		]
	},
	"audio/x-tta": {
		"source": "apache"
	},
	"audio/x-wav": {
		"source": "apache",
		"extensions": [
			"wav"
		]
	},
	"audio/xm": {
		"source": "apache",
		"extensions": [
			"xm"
		]
	},
	"chemical/x-cdx": {
		"source": "apache",
		"extensions": [
			"cdx"
		]
	},
	"chemical/x-cif": {
		"source": "apache",
		"extensions": [
			"cif"
		]
	},
	"chemical/x-cmdf": {
		"source": "apache",
		"extensions": [
			"cmdf"
		]
	},
	"chemical/x-cml": {
		"source": "apache",
		"extensions": [
			"cml"
		]
	},
	"chemical/x-csml": {
		"source": "apache",
		"extensions": [
			"csml"
		]
	},
	"chemical/x-pdb": {
		"source": "apache"
	},
	"chemical/x-xyz": {
		"source": "apache",
		"extensions": [
			"xyz"
		]
	},
	"font/opentype": {
		"compressible": true,
		"extensions": [
			"otf"
		]
	},
	"image/bmp": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"bmp"
		]
	},
	"image/cgm": {
		"source": "iana",
		"extensions": [
			"cgm"
		]
	},
	"image/dicom-rle": {
		"source": "iana"
	},
	"image/emf": {
		"source": "iana"
	},
	"image/fits": {
		"source": "iana"
	},
	"image/g3fax": {
		"source": "iana",
		"extensions": [
			"g3"
		]
	},
	"image/gif": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"gif"
		]
	},
	"image/ief": {
		"source": "iana",
		"extensions": [
			"ief"
		]
	},
	"image/jls": {
		"source": "iana"
	},
	"image/jp2": {
		"source": "iana"
	},
	"image/jpeg": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"jpeg",
			"jpg",
			"jpe"
		]
	},
	"image/jpm": {
		"source": "iana"
	},
	"image/jpx": {
		"source": "iana"
	},
	"image/ktx": {
		"source": "iana",
		"extensions": [
			"ktx"
		]
	},
	"image/naplps": {
		"source": "iana"
	},
	"image/pjpeg": {
		"compressible": false
	},
	"image/png": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"png"
		]
	},
	"image/prs.btif": {
		"source": "iana",
		"extensions": [
			"btif"
		]
	},
	"image/prs.pti": {
		"source": "iana"
	},
	"image/pwg-raster": {
		"source": "iana"
	},
	"image/sgi": {
		"source": "apache",
		"extensions": [
			"sgi"
		]
	},
	"image/svg+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"svg",
			"svgz"
		]
	},
	"image/t38": {
		"source": "iana"
	},
	"image/tiff": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"tiff",
			"tif"
		]
	},
	"image/tiff-fx": {
		"source": "iana"
	},
	"image/vnd.adobe.photoshop": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"psd"
		]
	},
	"image/vnd.airzip.accelerator.azv": {
		"source": "iana"
	},
	"image/vnd.cns.inf2": {
		"source": "iana"
	},
	"image/vnd.dece.graphic": {
		"source": "iana",
		"extensions": [
			"uvi",
			"uvvi",
			"uvg",
			"uvvg"
		]
	},
	"image/vnd.djvu": {
		"source": "iana",
		"extensions": [
			"djvu",
			"djv"
		]
	},
	"image/vnd.dvb.subtitle": {
		"source": "iana",
		"extensions": [
			"sub"
		]
	},
	"image/vnd.dwg": {
		"source": "iana",
		"extensions": [
			"dwg"
		]
	},
	"image/vnd.dxf": {
		"source": "iana",
		"extensions": [
			"dxf"
		]
	},
	"image/vnd.fastbidsheet": {
		"source": "iana",
		"extensions": [
			"fbs"
		]
	},
	"image/vnd.fpx": {
		"source": "iana",
		"extensions": [
			"fpx"
		]
	},
	"image/vnd.fst": {
		"source": "iana",
		"extensions": [
			"fst"
		]
	},
	"image/vnd.fujixerox.edmics-mmr": {
		"source": "iana",
		"extensions": [
			"mmr"
		]
	},
	"image/vnd.fujixerox.edmics-rlc": {
		"source": "iana",
		"extensions": [
			"rlc"
		]
	},
	"image/vnd.globalgraphics.pgb": {
		"source": "iana"
	},
	"image/vnd.microsoft.icon": {
		"source": "iana"
	},
	"image/vnd.mix": {
		"source": "iana"
	},
	"image/vnd.mozilla.apng": {
		"source": "iana"
	},
	"image/vnd.ms-modi": {
		"source": "iana",
		"extensions": [
			"mdi"
		]
	},
	"image/vnd.ms-photo": {
		"source": "apache",
		"extensions": [
			"wdp"
		]
	},
	"image/vnd.net-fpx": {
		"source": "iana",
		"extensions": [
			"npx"
		]
	},
	"image/vnd.radiance": {
		"source": "iana"
	},
	"image/vnd.sealed.png": {
		"source": "iana"
	},
	"image/vnd.sealedmedia.softseal.gif": {
		"source": "iana"
	},
	"image/vnd.sealedmedia.softseal.jpg": {
		"source": "iana"
	},
	"image/vnd.svf": {
		"source": "iana"
	},
	"image/vnd.tencent.tap": {
		"source": "iana"
	},
	"image/vnd.valve.source.texture": {
		"source": "iana"
	},
	"image/vnd.wap.wbmp": {
		"source": "iana",
		"extensions": [
			"wbmp"
		]
	},
	"image/vnd.xiff": {
		"source": "iana",
		"extensions": [
			"xif"
		]
	},
	"image/vnd.zbrush.pcx": {
		"source": "iana"
	},
	"image/webp": {
		"source": "apache",
		"extensions": [
			"webp"
		]
	},
	"image/wmf": {
		"source": "iana"
	},
	"image/x-3ds": {
		"source": "apache",
		"extensions": [
			"3ds"
		]
	},
	"image/x-cmu-raster": {
		"source": "apache",
		"extensions": [
			"ras"
		]
	},
	"image/x-cmx": {
		"source": "apache",
		"extensions": [
			"cmx"
		]
	},
	"image/x-freehand": {
		"source": "apache",
		"extensions": [
			"fh",
			"fhc",
			"fh4",
			"fh5",
			"fh7"
		]
	},
	"image/x-icon": {
		"source": "apache",
		"compressible": true,
		"extensions": [
			"ico"
		]
	},
	"image/x-jng": {
		"source": "nginx",
		"extensions": [
			"jng"
		]
	},
	"image/x-mrsid-image": {
		"source": "apache",
		"extensions": [
			"sid"
		]
	},
	"image/x-ms-bmp": {
		"source": "nginx",
		"compressible": true,
		"extensions": [
			"bmp"
		]
	},
	"image/x-pcx": {
		"source": "apache",
		"extensions": [
			"pcx"
		]
	},
	"image/x-pict": {
		"source": "apache",
		"extensions": [
			"pic",
			"pct"
		]
	},
	"image/x-portable-anymap": {
		"source": "apache",
		"extensions": [
			"pnm"
		]
	},
	"image/x-portable-bitmap": {
		"source": "apache",
		"extensions": [
			"pbm"
		]
	},
	"image/x-portable-graymap": {
		"source": "apache",
		"extensions": [
			"pgm"
		]
	},
	"image/x-portable-pixmap": {
		"source": "apache",
		"extensions": [
			"ppm"
		]
	},
	"image/x-rgb": {
		"source": "apache",
		"extensions": [
			"rgb"
		]
	},
	"image/x-tga": {
		"source": "apache",
		"extensions": [
			"tga"
		]
	},
	"image/x-xbitmap": {
		"source": "apache",
		"extensions": [
			"xbm"
		]
	},
	"image/x-xcf": {
		"compressible": false
	},
	"image/x-xpixmap": {
		"source": "apache",
		"extensions": [
			"xpm"
		]
	},
	"image/x-xwindowdump": {
		"source": "apache",
		"extensions": [
			"xwd"
		]
	},
	"message/cpim": {
		"source": "iana"
	},
	"message/delivery-status": {
		"source": "iana"
	},
	"message/disposition-notification": {
		"source": "iana"
	},
	"message/external-body": {
		"source": "iana"
	},
	"message/feedback-report": {
		"source": "iana"
	},
	"message/global": {
		"source": "iana"
	},
	"message/global-delivery-status": {
		"source": "iana"
	},
	"message/global-disposition-notification": {
		"source": "iana"
	},
	"message/global-headers": {
		"source": "iana"
	},
	"message/http": {
		"source": "iana",
		"compressible": false
	},
	"message/imdn+xml": {
		"source": "iana",
		"compressible": true
	},
	"message/news": {
		"source": "iana"
	},
	"message/partial": {
		"source": "iana",
		"compressible": false
	},
	"message/rfc822": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"eml",
			"mime"
		]
	},
	"message/s-http": {
		"source": "iana"
	},
	"message/sip": {
		"source": "iana"
	},
	"message/sipfrag": {
		"source": "iana"
	},
	"message/tracking-status": {
		"source": "iana"
	},
	"message/vnd.si.simp": {
		"source": "iana"
	},
	"message/vnd.wfa.wsc": {
		"source": "iana"
	},
	"model/gltf+json": {
		"source": "iana",
		"compressible": true
	},
	"model/iges": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"igs",
			"iges"
		]
	},
	"model/mesh": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"msh",
			"mesh",
			"silo"
		]
	},
	"model/vnd.collada+xml": {
		"source": "iana",
		"extensions": [
			"dae"
		]
	},
	"model/vnd.dwf": {
		"source": "iana",
		"extensions": [
			"dwf"
		]
	},
	"model/vnd.flatland.3dml": {
		"source": "iana"
	},
	"model/vnd.gdl": {
		"source": "iana",
		"extensions": [
			"gdl"
		]
	},
	"model/vnd.gs-gdl": {
		"source": "apache"
	},
	"model/vnd.gs.gdl": {
		"source": "iana"
	},
	"model/vnd.gtw": {
		"source": "iana",
		"extensions": [
			"gtw"
		]
	},
	"model/vnd.moml+xml": {
		"source": "iana"
	},
	"model/vnd.mts": {
		"source": "iana",
		"extensions": [
			"mts"
		]
	},
	"model/vnd.opengex": {
		"source": "iana"
	},
	"model/vnd.parasolid.transmit.binary": {
		"source": "iana"
	},
	"model/vnd.parasolid.transmit.text": {
		"source": "iana"
	},
	"model/vnd.rosette.annotated-data-model": {
		"source": "iana"
	},
	"model/vnd.valve.source.compiled-map": {
		"source": "iana"
	},
	"model/vnd.vtu": {
		"source": "iana",
		"extensions": [
			"vtu"
		]
	},
	"model/vrml": {
		"source": "iana",
		"compressible": false,
		"extensions": [
			"wrl",
			"vrml"
		]
	},
	"model/x3d+binary": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"x3db",
			"x3dbz"
		]
	},
	"model/x3d+fastinfoset": {
		"source": "iana"
	},
	"model/x3d+vrml": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"x3dv",
			"x3dvz"
		]
	},
	"model/x3d+xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"x3d",
			"x3dz"
		]
	},
	"model/x3d-vrml": {
		"source": "iana"
	},
	"multipart/alternative": {
		"source": "iana",
		"compressible": false
	},
	"multipart/appledouble": {
		"source": "iana"
	},
	"multipart/byteranges": {
		"source": "iana"
	},
	"multipart/digest": {
		"source": "iana"
	},
	"multipart/encrypted": {
		"source": "iana",
		"compressible": false
	},
	"multipart/form-data": {
		"source": "iana",
		"compressible": false
	},
	"multipart/header-set": {
		"source": "iana"
	},
	"multipart/mixed": {
		"source": "iana",
		"compressible": false
	},
	"multipart/parallel": {
		"source": "iana"
	},
	"multipart/related": {
		"source": "iana",
		"compressible": false
	},
	"multipart/report": {
		"source": "iana"
	},
	"multipart/signed": {
		"source": "iana",
		"compressible": false
	},
	"multipart/voice-message": {
		"source": "iana"
	},
	"multipart/x-mixed-replace": {
		"source": "iana"
	},
	"text/1d-interleaved-parityfec": {
		"source": "iana"
	},
	"text/cache-manifest": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"appcache",
			"manifest"
		]
	},
	"text/calendar": {
		"source": "iana",
		"extensions": [
			"ics",
			"ifb"
		]
	},
	"text/calender": {
		"compressible": true
	},
	"text/cmd": {
		"compressible": true
	},
	"text/coffeescript": {
		"extensions": [
			"coffee",
			"litcoffee"
		]
	},
	"text/css": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"css"
		]
	},
	"text/csv": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"csv"
		]
	},
	"text/csv-schema": {
		"source": "iana"
	},
	"text/directory": {
		"source": "iana"
	},
	"text/dns": {
		"source": "iana"
	},
	"text/ecmascript": {
		"source": "iana"
	},
	"text/encaprtp": {
		"source": "iana"
	},
	"text/enriched": {
		"source": "iana"
	},
	"text/fwdred": {
		"source": "iana"
	},
	"text/grammar-ref-list": {
		"source": "iana"
	},
	"text/hjson": {
		"extensions": [
			"hjson"
		]
	},
	"text/html": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"html",
			"htm",
			"shtml"
		]
	},
	"text/jade": {
		"extensions": [
			"jade"
		]
	},
	"text/javascript": {
		"source": "iana",
		"compressible": true
	},
	"text/jcr-cnd": {
		"source": "iana"
	},
	"text/jsx": {
		"compressible": true,
		"extensions": [
			"jsx"
		]
	},
	"text/less": {
		"extensions": [
			"less"
		]
	},
	"text/markdown": {
		"source": "iana"
	},
	"text/mathml": {
		"source": "nginx",
		"extensions": [
			"mml"
		]
	},
	"text/mizar": {
		"source": "iana"
	},
	"text/n3": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"n3"
		]
	},
	"text/parameters": {
		"source": "iana"
	},
	"text/parityfec": {
		"source": "iana"
	},
	"text/plain": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"txt",
			"text",
			"conf",
			"def",
			"list",
			"log",
			"in",
			"ini"
		]
	},
	"text/provenance-notation": {
		"source": "iana"
	},
	"text/prs.fallenstein.rst": {
		"source": "iana"
	},
	"text/prs.lines.tag": {
		"source": "iana",
		"extensions": [
			"dsc"
		]
	},
	"text/prs.prop.logic": {
		"source": "iana"
	},
	"text/raptorfec": {
		"source": "iana"
	},
	"text/red": {
		"source": "iana"
	},
	"text/rfc822-headers": {
		"source": "iana"
	},
	"text/richtext": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"rtx"
		]
	},
	"text/rtf": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"rtf"
		]
	},
	"text/rtp-enc-aescm128": {
		"source": "iana"
	},
	"text/rtploopback": {
		"source": "iana"
	},
	"text/rtx": {
		"source": "iana"
	},
	"text/sgml": {
		"source": "iana",
		"extensions": [
			"sgml",
			"sgm"
		]
	},
	"text/slim": {
		"extensions": [
			"slim",
			"slm"
		]
	},
	"text/stylus": {
		"extensions": [
			"stylus",
			"styl"
		]
	},
	"text/t140": {
		"source": "iana"
	},
	"text/tab-separated-values": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"tsv"
		]
	},
	"text/troff": {
		"source": "iana",
		"extensions": [
			"t",
			"tr",
			"roff",
			"man",
			"me",
			"ms"
		]
	},
	"text/turtle": {
		"source": "iana",
		"extensions": [
			"ttl"
		]
	},
	"text/ulpfec": {
		"source": "iana"
	},
	"text/uri-list": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"uri",
			"uris",
			"urls"
		]
	},
	"text/vcard": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"vcard"
		]
	},
	"text/vnd.a": {
		"source": "iana"
	},
	"text/vnd.abc": {
		"source": "iana"
	},
	"text/vnd.ascii-art": {
		"source": "iana"
	},
	"text/vnd.curl": {
		"source": "iana",
		"extensions": [
			"curl"
		]
	},
	"text/vnd.curl.dcurl": {
		"source": "apache",
		"extensions": [
			"dcurl"
		]
	},
	"text/vnd.curl.mcurl": {
		"source": "apache",
		"extensions": [
			"mcurl"
		]
	},
	"text/vnd.curl.scurl": {
		"source": "apache",
		"extensions": [
			"scurl"
		]
	},
	"text/vnd.debian.copyright": {
		"source": "iana"
	},
	"text/vnd.dmclientscript": {
		"source": "iana"
	},
	"text/vnd.dvb.subtitle": {
		"source": "iana",
		"extensions": [
			"sub"
		]
	},
	"text/vnd.esmertec.theme-descriptor": {
		"source": "iana"
	},
	"text/vnd.fly": {
		"source": "iana",
		"extensions": [
			"fly"
		]
	},
	"text/vnd.fmi.flexstor": {
		"source": "iana",
		"extensions": [
			"flx"
		]
	},
	"text/vnd.graphviz": {
		"source": "iana",
		"extensions": [
			"gv"
		]
	},
	"text/vnd.in3d.3dml": {
		"source": "iana",
		"extensions": [
			"3dml"
		]
	},
	"text/vnd.in3d.spot": {
		"source": "iana",
		"extensions": [
			"spot"
		]
	},
	"text/vnd.iptc.newsml": {
		"source": "iana"
	},
	"text/vnd.iptc.nitf": {
		"source": "iana"
	},
	"text/vnd.latex-z": {
		"source": "iana"
	},
	"text/vnd.motorola.reflex": {
		"source": "iana"
	},
	"text/vnd.ms-mediapackage": {
		"source": "iana"
	},
	"text/vnd.net2phone.commcenter.command": {
		"source": "iana"
	},
	"text/vnd.radisys.msml-basic-layout": {
		"source": "iana"
	},
	"text/vnd.si.uricatalogue": {
		"source": "iana"
	},
	"text/vnd.sun.j2me.app-descriptor": {
		"source": "iana",
		"extensions": [
			"jad"
		]
	},
	"text/vnd.trolltech.linguist": {
		"source": "iana"
	},
	"text/vnd.wap.si": {
		"source": "iana"
	},
	"text/vnd.wap.sl": {
		"source": "iana"
	},
	"text/vnd.wap.wml": {
		"source": "iana",
		"extensions": [
			"wml"
		]
	},
	"text/vnd.wap.wmlscript": {
		"source": "iana",
		"extensions": [
			"wmls"
		]
	},
	"text/vtt": {
		"charset": "UTF-8",
		"compressible": true,
		"extensions": [
			"vtt"
		]
	},
	"text/x-asm": {
		"source": "apache",
		"extensions": [
			"s",
			"asm"
		]
	},
	"text/x-c": {
		"source": "apache",
		"extensions": [
			"c",
			"cc",
			"cxx",
			"cpp",
			"h",
			"hh",
			"dic"
		]
	},
	"text/x-component": {
		"source": "nginx",
		"extensions": [
			"htc"
		]
	},
	"text/x-fortran": {
		"source": "apache",
		"extensions": [
			"f",
			"for",
			"f77",
			"f90"
		]
	},
	"text/x-gwt-rpc": {
		"compressible": true
	},
	"text/x-handlebars-template": {
		"extensions": [
			"hbs"
		]
	},
	"text/x-java-source": {
		"source": "apache",
		"extensions": [
			"java"
		]
	},
	"text/x-jquery-tmpl": {
		"compressible": true
	},
	"text/x-lua": {
		"extensions": [
			"lua"
		]
	},
	"text/x-markdown": {
		"compressible": true,
		"extensions": [
			"markdown",
			"md",
			"mkd"
		]
	},
	"text/x-nfo": {
		"source": "apache",
		"extensions": [
			"nfo"
		]
	},
	"text/x-opml": {
		"source": "apache",
		"extensions": [
			"opml"
		]
	},
	"text/x-pascal": {
		"source": "apache",
		"extensions": [
			"p",
			"pas"
		]
	},
	"text/x-processing": {
		"compressible": true,
		"extensions": [
			"pde"
		]
	},
	"text/x-sass": {
		"extensions": [
			"sass"
		]
	},
	"text/x-scss": {
		"extensions": [
			"scss"
		]
	},
	"text/x-setext": {
		"source": "apache",
		"extensions": [
			"etx"
		]
	},
	"text/x-sfv": {
		"source": "apache",
		"extensions": [
			"sfv"
		]
	},
	"text/x-suse-ymp": {
		"compressible": true,
		"extensions": [
			"ymp"
		]
	},
	"text/x-uuencode": {
		"source": "apache",
		"extensions": [
			"uu"
		]
	},
	"text/x-vcalendar": {
		"source": "apache",
		"extensions": [
			"vcs"
		]
	},
	"text/x-vcard": {
		"source": "apache",
		"extensions": [
			"vcf"
		]
	},
	"text/xml": {
		"source": "iana",
		"compressible": true,
		"extensions": [
			"xml"
		]
	},
	"text/xml-external-parsed-entity": {
		"source": "iana"
	},
	"text/yaml": {
		"extensions": [
			"yaml",
			"yml"
		]
	},
	"video/1d-interleaved-parityfec": {
		"source": "apache"
	},
	"video/3gpp": {
		"source": "apache",
		"extensions": [
			"3gp",
			"3gpp"
		]
	},
	"video/3gpp-tt": {
		"source": "apache"
	},
	"video/3gpp2": {
		"source": "apache",
		"extensions": [
			"3g2"
		]
	},
	"video/bmpeg": {
		"source": "apache"
	},
	"video/bt656": {
		"source": "apache"
	},
	"video/celb": {
		"source": "apache"
	},
	"video/dv": {
		"source": "apache"
	},
	"video/encaprtp": {
		"source": "apache"
	},
	"video/h261": {
		"source": "apache",
		"extensions": [
			"h261"
		]
	},
	"video/h263": {
		"source": "apache",
		"extensions": [
			"h263"
		]
	},
	"video/h263-1998": {
		"source": "apache"
	},
	"video/h263-2000": {
		"source": "apache"
	},
	"video/h264": {
		"source": "apache",
		"extensions": [
			"h264"
		]
	},
	"video/h264-rcdo": {
		"source": "apache"
	},
	"video/h264-svc": {
		"source": "apache"
	},
	"video/h265": {
		"source": "apache"
	},
	"video/iso.segment": {
		"source": "apache"
	},
	"video/jpeg": {
		"source": "apache",
		"extensions": [
			"jpgv"
		]
	},
	"video/jpeg2000": {
		"source": "apache"
	},
	"video/jpm": {
		"source": "apache",
		"extensions": [
			"jpm",
			"jpgm"
		]
	},
	"video/mj2": {
		"source": "apache",
		"extensions": [
			"mj2",
			"mjp2"
		]
	},
	"video/mp1s": {
		"source": "apache"
	},
	"video/mp2p": {
		"source": "apache"
	},
	"video/mp2t": {
		"source": "apache",
		"extensions": [
			"ts"
		]
	},
	"video/mp4": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"mp4",
			"mp4v",
			"mpg4"
		]
	},
	"video/mp4v-es": {
		"source": "apache"
	},
	"video/mpeg": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"mpeg",
			"mpg",
			"mpe",
			"m1v",
			"m2v"
		]
	},
	"video/mpeg4-generic": {
		"source": "apache"
	},
	"video/mpv": {
		"source": "apache"
	},
	"video/nv": {
		"source": "apache"
	},
	"video/ogg": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"ogv"
		]
	},
	"video/parityfec": {
		"source": "apache"
	},
	"video/pointer": {
		"source": "apache"
	},
	"video/quicktime": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"qt",
			"mov"
		]
	},
	"video/raptorfec": {
		"source": "apache"
	},
	"video/raw": {
		"source": "apache"
	},
	"video/rtp-enc-aescm128": {
		"source": "apache"
	},
	"video/rtploopback": {
		"source": "apache"
	},
	"video/rtx": {
		"source": "apache"
	},
	"video/smpte292m": {
		"source": "apache"
	},
	"video/ulpfec": {
		"source": "apache"
	},
	"video/vc1": {
		"source": "apache"
	},
	"video/vnd.cctv": {
		"source": "apache"
	},
	"video/vnd.dece.hd": {
		"source": "apache",
		"extensions": [
			"uvh",
			"uvvh"
		]
	},
	"video/vnd.dece.mobile": {
		"source": "apache",
		"extensions": [
			"uvm",
			"uvvm"
		]
	},
	"video/vnd.dece.mp4": {
		"source": "apache"
	},
	"video/vnd.dece.pd": {
		"source": "apache",
		"extensions": [
			"uvp",
			"uvvp"
		]
	},
	"video/vnd.dece.sd": {
		"source": "apache",
		"extensions": [
			"uvs",
			"uvvs"
		]
	},
	"video/vnd.dece.video": {
		"source": "apache",
		"extensions": [
			"uvv",
			"uvvv"
		]
	},
	"video/vnd.directv.mpeg": {
		"source": "apache"
	},
	"video/vnd.directv.mpeg-tts": {
		"source": "apache"
	},
	"video/vnd.dlna.mpeg-tts": {
		"source": "apache"
	},
	"video/vnd.dvb.file": {
		"source": "apache",
		"extensions": [
			"dvb"
		]
	},
	"video/vnd.fvt": {
		"source": "apache",
		"extensions": [
			"fvt"
		]
	},
	"video/vnd.hns.video": {
		"source": "apache"
	},
	"video/vnd.iptvforum.1dparityfec-1010": {
		"source": "apache"
	},
	"video/vnd.iptvforum.1dparityfec-2005": {
		"source": "apache"
	},
	"video/vnd.iptvforum.2dparityfec-1010": {
		"source": "apache"
	},
	"video/vnd.iptvforum.2dparityfec-2005": {
		"source": "apache"
	},
	"video/vnd.iptvforum.ttsavc": {
		"source": "apache"
	},
	"video/vnd.iptvforum.ttsmpeg2": {
		"source": "apache"
	},
	"video/vnd.motorola.video": {
		"source": "apache"
	},
	"video/vnd.motorola.videop": {
		"source": "apache"
	},
	"video/vnd.mpegurl": {
		"source": "apache",
		"extensions": [
			"mxu",
			"m4u"
		]
	},
	"video/vnd.ms-playready.media.pyv": {
		"source": "apache",
		"extensions": [
			"pyv"
		]
	},
	"video/vnd.nokia.interleaved-multimedia": {
		"source": "apache"
	},
	"video/vnd.nokia.videovoip": {
		"source": "apache"
	},
	"video/vnd.objectvideo": {
		"source": "apache"
	},
	"video/vnd.radgamettools.bink": {
		"source": "apache"
	},
	"video/vnd.radgamettools.smacker": {
		"source": "apache"
	},
	"video/vnd.sealed.mpeg1": {
		"source": "apache"
	},
	"video/vnd.sealed.mpeg4": {
		"source": "apache"
	},
	"video/vnd.sealed.swf": {
		"source": "apache"
	},
	"video/vnd.sealedmedia.softseal.mov": {
		"source": "apache"
	},
	"video/vnd.uvvu.mp4": {
		"source": "apache",
		"extensions": [
			"uvu",
			"uvvu"
		]
	},
	"video/vnd.vivo": {
		"source": "apache",
		"extensions": [
			"viv"
		]
	},
	"video/vp8": {
		"source": "apache"
	},
	"video/webm": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"webm"
		]
	},
	"video/x-f4v": {
		"source": "apache",
		"extensions": [
			"f4v"
		]
	},
	"video/x-fli": {
		"source": "apache",
		"extensions": [
			"fli"
		]
	},
	"video/x-flv": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"flv"
		]
	},
	"video/x-m4v": {
		"source": "apache",
		"extensions": [
			"m4v"
		]
	},
	"video/x-matroska": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"mkv",
			"mk3d",
			"mks"
		]
	},
	"video/x-mng": {
		"source": "apache",
		"extensions": [
			"mng"
		]
	},
	"video/x-ms-asf": {
		"source": "apache",
		"extensions": [
			"asf",
			"asx"
		]
	},
	"video/x-ms-vob": {
		"source": "apache",
		"extensions": [
			"vob"
		]
	},
	"video/x-ms-wm": {
		"source": "apache",
		"extensions": [
			"wm"
		]
	},
	"video/x-ms-wmv": {
		"source": "apache",
		"compressible": false,
		"extensions": [
			"wmv"
		]
	},
	"video/x-ms-wmx": {
		"source": "apache",
		"extensions": [
			"wmx"
		]
	},
	"video/x-ms-wvx": {
		"source": "apache",
		"extensions": [
			"wvx"
		]
	},
	"video/x-msvideo": {
		"source": "apache",
		"extensions": [
			"avi"
		]
	},
	"video/x-sgi-movie": {
		"source": "apache",
		"extensions": [
			"movie"
		]
	},
	"video/x-smv": {
		"source": "apache",
		"extensions": [
			"smv"
		]
	},
	"x-conference/x-cooltalk": {
		"source": "apache",
		"extensions": [
			"ice"
		]
	},
	"x-shader/x-fragment": {
		"compressible": true
	},
	"x-shader/x-vertex": {
		"compressible": true
	}
};

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = __webpack_require__(579)


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var db = __webpack_require__(580)
var extname = __webpack_require__(472).extname

/**
 * Module variables.
 * @private
 */

var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/
var textTypeRegExp = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = extractTypeRegExp.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && textTypeRegExp.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = extractTypeRegExp.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Cached loaded submodules.
 * @private
 */

var modules = Object.create(null);

/**
 * Module exports.
 * @public
 */

module.exports = Negotiator;
module.exports.Negotiator = Negotiator;

/**
 * Create a Negotiator instance from a request.
 * @param {object} request
 * @public
 */

function Negotiator(request) {
  if (!(this instanceof Negotiator)) {
    return new Negotiator(request);
  }

  this.request = request;
}

Negotiator.prototype.charset = function charset(available) {
  var set = this.charsets(available);
  return set && set[0];
};

Negotiator.prototype.charsets = function charsets(available) {
  var preferredCharsets = loadModule('charset').preferredCharsets;
  return preferredCharsets(this.request.headers['accept-charset'], available);
};

Negotiator.prototype.encoding = function encoding(available) {
  var set = this.encodings(available);
  return set && set[0];
};

Negotiator.prototype.encodings = function encodings(available) {
  var preferredEncodings = loadModule('encoding').preferredEncodings;
  return preferredEncodings(this.request.headers['accept-encoding'], available);
};

Negotiator.prototype.language = function language(available) {
  var set = this.languages(available);
  return set && set[0];
};

Negotiator.prototype.languages = function languages(available) {
  var preferredLanguages = loadModule('language').preferredLanguages;
  return preferredLanguages(this.request.headers['accept-language'], available);
};

Negotiator.prototype.mediaType = function mediaType(available) {
  var set = this.mediaTypes(available);
  return set && set[0];
};

Negotiator.prototype.mediaTypes = function mediaTypes(available) {
  var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;
  return preferredMediaTypes(this.request.headers.accept, available);
};

// Backwards compatibility
Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;

/**
 * Load the given module.
 * @private
 */

function loadModule(moduleName) {
  var module = modules[moduleName];

  if (module !== undefined) {
    return module;
  }

  // This uses a switch for static require analysis
  switch (moduleName) {
    case 'charset':
      module = __webpack_require__(583);
      break;
    case 'encoding':
      module = __webpack_require__(584);
      break;
    case 'language':
      module = __webpack_require__(585);
      break;
    case 'mediaType':
      module = __webpack_require__(586);
      break;
    default:
      throw new Error('Cannot find module \'' + moduleName + '\'');
  }

  // Store to prevent invoking require()
  modules[moduleName] = module;

  return module;
}


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredCharsets;
module.exports.preferredCharsets = preferredCharsets;

/**
 * Module variables.
 * @private
 */

var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Charset header.
 * @private
 */

function parseAcceptCharset(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var charset = parseCharset(accepts[i].trim(), i);

    if (charset) {
      accepts[j++] = charset;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a charset from the Accept-Charset header.
 * @private
 */

function parseCharset(str, i) {
  var match = simpleCharsetRegExp.exec(str);
  if (!match) return null;

  var charset = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';')
    for (var i = 0; i < params.length; i ++) {
      var p = params[i].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    charset: charset,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a charset.
 * @private
 */

function getCharsetPriority(charset, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(charset, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the charset.
 * @private
 */

function specify(charset, spec, index) {
  var s = 0;
  if(spec.charset.toLowerCase() === charset.toLowerCase()){
    s |= 1;
  } else if (spec.charset !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}

/**
 * Get the preferred charsets from an Accept-Charset header.
 * @public
 */

function preferredCharsets(accept, provided) {
  // RFC 2616 sec 14.2: no header = *
  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all charsets
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullCharset);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getCharsetPriority(type, accepts, index);
  });

  // sorted list of accepted charsets
  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full charset string.
 * @private
 */

function getFullCharset(spec) {
  return spec.charset;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredEncodings;
module.exports.preferredEncodings = preferredEncodings;

/**
 * Module variables.
 * @private
 */

var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Encoding header.
 * @private
 */

function parseAcceptEncoding(accept) {
  var accepts = accept.split(',');
  var hasIdentity = false;
  var minQuality = 1;

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var encoding = parseEncoding(accepts[i].trim(), i);

    if (encoding) {
      accepts[j++] = encoding;
      hasIdentity = hasIdentity || specify('identity', encoding);
      minQuality = Math.min(minQuality, encoding.q || 1);
    }
  }

  if (!hasIdentity) {
    /*
     * If identity doesn't explicitly appear in the accept-encoding header,
     * it's added to the list of acceptable encoding with the lowest q
     */
    accepts[j++] = {
      encoding: 'identity',
      q: minQuality,
      i: i
    };
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse an encoding from the Accept-Encoding header.
 * @private
 */

function parseEncoding(str, i) {
  var match = simpleEncodingRegExp.exec(str);
  if (!match) return null;

  var encoding = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var i = 0; i < params.length; i ++) {
      var p = params[i].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    encoding: encoding,
    q: q,
    i: i
  };
}

/**
 * Get the priority of an encoding.
 * @private
 */

function getEncodingPriority(encoding, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(encoding, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the encoding.
 * @private
 */

function specify(encoding, spec, index) {
  var s = 0;
  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
    s |= 1;
  } else if (spec.encoding !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
};

/**
 * Get the preferred encodings from an Accept-Encoding header.
 * @public
 */

function preferredEncodings(accept, provided) {
  var accepts = parseAcceptEncoding(accept || '');

  if (!provided) {
    // sorted list of all encodings
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullEncoding);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getEncodingPriority(type, accepts, index);
  });

  // sorted list of accepted encodings
  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full encoding string.
 * @private
 */

function getFullEncoding(spec) {
  return spec.encoding;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredLanguages;
module.exports.preferredLanguages = preferredLanguages;

/**
 * Module variables.
 * @private
 */

var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Language header.
 * @private
 */

function parseAcceptLanguage(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var langauge = parseLanguage(accepts[i].trim(), i);

    if (langauge) {
      accepts[j++] = langauge;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a language from the Accept-Language header.
 * @private
 */

function parseLanguage(str, i) {
  var match = simpleLanguageRegExp.exec(str);
  if (!match) return null;

  var prefix = match[1],
      suffix = match[2],
      full = prefix;

  if (suffix) full += "-" + suffix;

  var q = 1;
  if (match[3]) {
    var params = match[3].split(';')
    for (var i = 0; i < params.length; i ++) {
      var p = params[i].split('=');
      if (p[0] === 'q') q = parseFloat(p[1]);
    }
  }

  return {
    prefix: prefix,
    suffix: suffix,
    q: q,
    i: i,
    full: full
  };
}

/**
 * Get the priority of a language.
 * @private
 */

function getLanguagePriority(language, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(language, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the language.
 * @private
 */

function specify(language, spec, index) {
  var p = parseLanguage(language)
  if (!p) return null;
  var s = 0;
  if(spec.full.toLowerCase() === p.full.toLowerCase()){
    s |= 4;
  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
    s |= 2;
  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
    s |= 1;
  } else if (spec.full !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
};

/**
 * Get the preferred languages from an Accept-Language header.
 * @public
 */

function preferredLanguages(accept, provided) {
  // RFC 2616 sec 14.4: no header = *
  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all languages
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullLanguage);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getLanguagePriority(type, accepts, index);
  });

  // sorted list of accepted languages
  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full language string.
 * @private
 */

function getFullLanguage(spec) {
  return spec.full;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredMediaTypes;
module.exports.preferredMediaTypes = preferredMediaTypes;

/**
 * Module variables.
 * @private
 */

var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept header.
 * @private
 */

function parseAccept(accept) {
  var accepts = splitMediaTypes(accept);

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var mediaType = parseMediaType(accepts[i].trim(), i);

    if (mediaType) {
      accepts[j++] = mediaType;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a media type from the Accept header.
 * @private
 */

function parseMediaType(str, i) {
  var match = simpleMediaTypeRegExp.exec(str);
  if (!match) return null;

  var params = Object.create(null);
  var q = 1;
  var subtype = match[2];
  var type = match[1];

  if (match[3]) {
    var kvps = splitParameters(match[3]).map(splitKeyValuePair);

    for (var j = 0; j < kvps.length; j++) {
      var pair = kvps[j];
      var key = pair[0].toLowerCase();
      var val = pair[1];

      // get the value, unwrapping quotes
      var value = val && val[0] === '"' && val[val.length - 1] === '"'
        ? val.substr(1, val.length - 2)
        : val;

      if (key === 'q') {
        q = parseFloat(value);
        break;
      }

      // store parameter
      params[key] = value;
    }
  }

  return {
    type: type,
    subtype: subtype,
    params: params,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a media type.
 * @private
 */

function getMediaTypePriority(type, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(type, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the media type.
 * @private
 */

function specify(type, spec, index) {
  var p = parseMediaType(type);
  var s = 0;

  if (!p) {
    return null;
  }

  if(spec.type.toLowerCase() == p.type.toLowerCase()) {
    s |= 4
  } else if(spec.type != '*') {
    return null;
  }

  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
    s |= 2
  } else if(spec.subtype != '*') {
    return null;
  }

  var keys = Object.keys(spec.params);
  if (keys.length > 0) {
    if (keys.every(function (k) {
      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
    })) {
      s |= 1
    } else {
      return null
    }
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s,
  }
}

/**
 * Get the preferred media types from an Accept header.
 * @public
 */

function preferredMediaTypes(accept, provided) {
  // RFC 2616 sec 14.2: no header = */*
  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

  if (!provided) {
    // sorted list of all types
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullType);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getMediaTypePriority(type, accepts, index);
  });

  // sorted list of accepted types
  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full type string.
 * @private
 */

function getFullType(spec) {
  return spec.type + '/' + spec.subtype;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

/**
 * Count the number of quotes in a string.
 * @private
 */

function quoteCount(string) {
  var count = 0;
  var index = 0;

  while ((index = string.indexOf('"', index)) !== -1) {
    count++;
    index++;
  }

  return count;
}

/**
 * Split a key value pair.
 * @private
 */

function splitKeyValuePair(str) {
  var index = str.indexOf('=');
  var key;
  var val;

  if (index === -1) {
    key = str;
  } else {
    key = str.substr(0, index);
    val = str.substr(index + 1);
  }

  return [key, val];
}

/**
 * Split an Accept header into media types.
 * @private
 */

function splitMediaTypes(accept) {
  var accepts = accept.split(',');

  for (var i = 1, j = 0; i < accepts.length; i++) {
    if (quoteCount(accepts[j]) % 2 == 0) {
      accepts[++j] = accepts[i];
    } else {
      accepts[j] += ',' + accepts[i];
    }
  }

  // trim accepts
  accepts.length = j + 1;

  return accepts;
}

/**
 * Split a string of parameters.
 * @private
 */

function splitParameters(str) {
  var parameters = str.split(';');

  for (var i = 1, j = 0; i < parameters.length; i++) {
    if (quoteCount(parameters[j]) % 2 == 0) {
      parameters[++j] = parameters[i];
    } else {
      parameters[j] += ';' + parameters[i];
    }
  }

  // trim parameters
  parameters.length = j + 1;

  for (var i = 0; i < parameters.length; i++) {
    parameters[i] = parameters[i].trim();
  }

  return parameters;
}


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils   = __webpack_require__(230);
var trees   = __webpack_require__(592);
var adler32 = __webpack_require__(468);
var crc32   = __webpack_require__(469);
var msg     = __webpack_require__(470);

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var utils         = __webpack_require__(230);
var adler32       = __webpack_require__(468);
var crc32         = __webpack_require__(469);
var inflate_fast  = __webpack_require__(589);
var inflate_table = __webpack_require__(591);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var utils = __webpack_require__(230);

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var utils = __webpack_require__(230);

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),
/* 594 */
/***/ (function(module, exports) {

module.exports = {
	"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
	"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
	"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
	"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
	"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
	"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
	"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
	"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
	"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
	"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
	"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
	"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = __webpack_require__(217)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = __webpack_require__(226)
var ciphers = __webpack_require__(235)
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 598 */
/***/ (function(module, exports) {

var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(601);
exports.privateDecrypt = __webpack_require__(600);

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};

/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(231);
var mgf = __webpack_require__(474);
var xor = __webpack_require__(476);
var bn = __webpack_require__(30);
var crt = __webpack_require__(236);
var createHash = __webpack_require__(111);
var withPublic = __webpack_require__(475);
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(231);
var randomBytes = __webpack_require__(122);
var createHash = __webpack_require__(111);
var mgf = __webpack_require__(474);
var xor = __webpack_require__(476);
var bn = __webpack_require__(30);
var withPublic = __webpack_require__(475);
var crt = __webpack_require__(236);

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(234)(module), __webpack_require__(10)))

/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(80)


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(1).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(237);
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};

/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(477)


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(249)


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10), __webpack_require__(16)))

/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(612)
exports.sha1 = __webpack_require__(613)
exports.sha224 = __webpack_require__(614)
exports.sha256 = __webpack_require__(480)
exports.sha384 = __webpack_require__(615)
exports.sha512 = __webpack_require__(481)


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(11)
var Hash = __webpack_require__(113)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(11)
var Hash = __webpack_require__(113)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(11)
var Sha256 = __webpack_require__(480)
var Hash = __webpack_require__(113)

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(11)
var SHA512 = __webpack_require__(481)
var Hash = __webpack_require__(113)

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * Module dependencies.
 */

var Emitter = __webpack_require__(41).EventEmitter;
var parser = __webpack_require__(81);

/**
 * Module exports.
 */

module.exports = Adapter;

/**
 * Memory adapter constructor.
 *
 * @param {Namespace} nsp
 * @api public
 */

function Adapter(nsp){
  this.nsp = nsp;
  this.rooms = {};
  this.sids = {};
  this.encoder = new parser.Encoder();
}

/**
 * Inherits from `EventEmitter`.
 */

Adapter.prototype.__proto__ = Emitter.prototype;

/**
 * Adds a socket to a room.
 *
 * @param {String} socket id
 * @param {String} room name
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.add = function(id, room, fn){
  this.sids[id] = this.sids[id] || {};
  this.sids[id][room] = true;
  this.rooms[room] = this.rooms[room] || Room();
  this.rooms[room].add(id);
  if (fn) process.nextTick(fn.bind(null, null));
};

/**
 * Removes a socket from a room.
 *
 * @param {String} socket id
 * @param {String} room name
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.del = function(id, room, fn){
  this.sids[id] = this.sids[id] || {};
  delete this.sids[id][room];
  if (this.rooms.hasOwnProperty(room)) {
    this.rooms[room].del(id);
    if (this.rooms[room].length === 0) delete this.rooms[room];
  }

  if (fn) process.nextTick(fn.bind(null, null));
};

/**
 * Removes a socket from all rooms it's joined.
 *
 * @param {String} socket id
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.delAll = function(id, fn){
  var rooms = this.sids[id];
  if (rooms) {
    for (var room in rooms) {
      if (this.rooms.hasOwnProperty(room)) {
        this.rooms[room].del(id);
        if (this.rooms[room].length === 0) delete this.rooms[room];
      }
    }
  }
  delete this.sids[id];

  if (fn) process.nextTick(fn.bind(null, null));
};

/**
 * Broadcasts a packet.
 *
 * Options:
 *  - `flags` {Object} flags for this packet
 *  - `except` {Array} sids that should be excluded
 *  - `rooms` {Array} list of rooms to broadcast to
 *
 * @param {Object} packet object
 * @api public
 */

Adapter.prototype.broadcast = function(packet, opts){
  var rooms = opts.rooms || [];
  var except = opts.except || [];
  var flags = opts.flags || {};
  var packetOpts = {
    preEncoded: true,
    volatile: flags.volatile,
    compress: flags.compress
  };
  var ids = {};
  var self = this;
  var socket;

  packet.nsp = this.nsp.name;
  this.encoder.encode(packet, function(encodedPackets) {
    if (rooms.length) {
      for (var i = 0; i < rooms.length; i++) {
        var room = self.rooms[rooms[i]];
        if (!room) continue;
        var sockets = room.sockets;
        for (var id in sockets) {
          if (sockets.hasOwnProperty(id)) {
            if (ids[id] || ~except.indexOf(id)) continue;
            socket = self.nsp.connected[id];
            if (socket) {
              socket.packet(encodedPackets, packetOpts);
              ids[id] = true;
            }
          }
        }
      }
    } else {
      for (var id in self.sids) {
        if (self.sids.hasOwnProperty(id)) {
          if (~except.indexOf(id)) continue;
          socket = self.nsp.connected[id];
          if (socket) socket.packet(encodedPackets, packetOpts);
        }
      }
    }
  });
};

/**
 * Gets a list of clients by sid.
 *
 * @param {Array} explicit set of rooms to check.
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.clients = function(rooms, fn){
  if ('function' == typeof rooms){
    fn = rooms;
    rooms = null;
  }

  rooms = rooms || [];

  var ids = {};
  var self = this;
  var sids = [];
  var socket;

  if (rooms.length) {
    for (var i = 0; i < rooms.length; i++) {
      var room = self.rooms[rooms[i]];
      if (!room) continue;
      var sockets = room.sockets;
      for (var id in sockets) {
        if (sockets.hasOwnProperty(id)) {
          if (ids[id]) continue;
          socket = self.nsp.connected[id];
          if (socket) {
            sids.push(id);
            ids[id] = true;
          }
        }
      }
    }
  } else {
    for (var id in self.sids) {
      if (self.sids.hasOwnProperty(id)) {
        socket = self.nsp.connected[id];
        if (socket) sids.push(id);
      }
    }
  }

  if (fn) process.nextTick(fn.bind(null, null, sids));
};

/**
 * Gets the list of rooms a given client has joined.
 *
 * @param {String} socket id
 * @param {Function} callback
 * @api public
 */
Adapter.prototype.clientRooms = function(id, fn){
  var rooms = this.sids[id];
  if (fn) process.nextTick(fn.bind(null, null, rooms ? Object.keys(rooms) : null));
};

/**
* Room constructor.
*
* @api private
*/

function Room(){
  if (!(this instanceof Room)) return new Room();
  this.sockets = {};
  this.length = 0;
}

/**
 * Adds a socket to a room.
 *
 * @param {String} socket id
 * @api private
 */

Room.prototype.add = function(id){
  if (!this.sockets.hasOwnProperty(id)) {
    this.sockets[id] = true;
    this.length++;
  }
};

/**
 * Removes a socket from a room.
 *
 * @param {String} socket id
 * @api private
 */

Room.prototype.del = function(id){
  if (this.sockets.hasOwnProperty(id)) {
    delete this.sockets[id];
    this.length--;
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 617 */
/***/ (function(module, exports) {

throw new Error("Module parse failed: /Users/amikulski/Documents/dev/nES6/multines/node_modules/socket.io-client/dist/socket.io.js.map Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type.\n| {\"version\":3,\"file\":\"socket.io.js\",\"sources\":[\"webpack:///webpack/universalModuleDefinition\",\"webpack:///webpack/bootstrap 12f6396a15c60a1e96b0\",\"webpack:///lib/index.js\",\"webpack:///lib/url.js\",\"webpack:///./~/parseuri/index.js\",\"webpack:///./~/debug/browser.js\",\"webpack:///./~/process/browser.js\",\"webpack:///./~/debug/debug.js\",\"webpack:///./~/ms/index.js\",\"webpack:///./~/socket.io-parser/index.js\",\"webpack:///./~/socket.io-parser/~/debug/browser.js\",\"webpack:///./~/socket.io-parser/~/debug/debug.js\",\"webpack:///./~/socket.io-parser/~/ms/index.js\",\"webpack:///./~/json3/lib/json3.js\",\"webpack:///(webpack)/buildin/module.js\",\"webpack:///./~/socket.io-parser/~/component-emitter/index.js\",\"webpack:///./~/socket.io-parser/binary.js\",\"webpack:///./~/isarray/index.js\",\"webpack:///./~/socket.io-parser/is-buffer.js\",\"webpack:///lib/manager.js\",\"webpack:///./~/engine.io-client/index.js\",\"webpack:///./~/engine.io-client/lib/index.js\",\"webpack:///./~/engine.io-client/lib/socket.js\",\"webpack:///./~/engine.io-client/lib/transports/index.js\",\"webpack:///./~/engine.io-client/lib/xmlhttprequest.js\",\"webpack:///./~/has-cors/index.js\",\"webpack:///./~/engine.io-client/lib/transports/polling-xhr.js\",\"webpack:///./~/engine.io-client/lib/transports/polling.js\",\"webpack:///./~/engine.io-client/lib/transport.js\",\"webpack:///./~/engine.io-parser/lib/browser.js\",\"webpack:///./~/engine.io-parser/lib/keys.js\",\"webpack:///./~/has-binary/index.js\",\"webpack:///./~/arraybuffer.slice/index.js\",\"webpack:///./~/after/index.js\",\"webpack:///./~/wtf-8/wtf-8.js\",\"webpack:///./~/base64-arraybuffer/lib/base64-arraybuffer.js\",\"webpack:///./~/blob/index.js\",\"webpack:///./~/component-emitter/index.js\",\"webpack:///./~/parseqs/index.js\",\"webpack:///./~/component-inherit/index.js\",\"webpack:///./~/yeast/index.js\",\"webpack:///./~/engine.io-client/lib/transports/polling-jsonp.js\",\"webpack:///./~/engine.io-client/lib/transports/websocket.js\",\"webpack:///ws (ignored)\",\"webpack:///./~/indexof/index.js\",\"webpack:///./~/parsejson/index.js\",\"webpack:///lib/socket.js\",\"webpack:///./~/to-array/index.js\",\"webpack:///lib/on.js\",\"webpack:///./~/component-bind/index.js\",\"webpack:///./~/backo2/index.js\"],\"sourcesContent\":[\"(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine([], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"io\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"io\\\"] = factory();\\n})(this, function() {\\nreturn \\n\\n\\n// WEBPACK FOOTER //\\n// webpack/universalModuleDefinition\",\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId])\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\texports: {},\\n \\t\\t\\tid: moduleId,\\n \\t\\t\\tloaded: false\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.loaded = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(0);\\n\\n\\n\\n// WEBPACK FOOTER //\\n// webpack/bootstrap 12f6396a15c60a1e96b0\",\"\\n/**\\n * Module dependencies.\\n */\\n\\nvar url = require('./url');\\nvar parser = require('socket.io-parser');\\nvar Manager = require('./manager');\\nvar debug = require('debug')('socket.io-client');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = exports = lookup;\\n\\n/**\\n * Managers cache.\\n */\\n\\nvar cache = exports.managers = {};\\n\\n/**\\n * Looks up an existing `Manager` for multiplexing.\\n * If the user summons:\\n *\\n *   `io('http://localhost/a');`\\n *   `io('http://localhost/b');`\\n *\\n * We reuse the existing instance based on same scheme/port/host,\\n * and we initialize sockets for each namespace.\\n *\\n * @api public\\n */\\n\\nfunction lookup (uri, opts) {\\n  if (typeof uri === 'object') {\\n    opts = uri;\\n    uri = undefined;\\n  }\\n\\n  opts = opts || {};\\n\\n  var parsed = url(uri);\\n  var source = parsed.source;\\n  var id = parsed.id;\\n  var path = parsed.path;\\n  var sameNamespace = cache[id] && path in cache[id].nsps;\\n  var newConnection = opts.forceNew || opts['force new connection'] ||\\n                      false === opts.multiplex || sameNamespace;\\n\\n  var io;\\n\\n  if (newConnection) {\\n    debug('ignoring socket cache for %s', source);\\n    io = Manager(source, opts);\\n  } else {\\n    if (!cache[id]) {\\n      debug('new io instance for %s', source);\\n      cache[id] = Manager(source, opts);\\n    }\\n    io = cache[id];\\n  }\\n  if (parsed.query && !opts.query) {\\n    opts.query = parsed.query;\\n  } else if (opts && 'object' === typeof opts.query) {\\n    opts.query = encodeQueryString(opts.query);\\n  }\\n  return io.socket(parsed.path, opts);\\n}\\n/**\\n *  Helper method to parse query objects to string.\\n * @param {object} query\\n * @returns {string}\\n */\\nfunction encodeQueryString (obj) {\\n  var str = [];\\n  for (var p in obj) {\\n    if (obj.hasOwnProperty(p)) {\\n      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\\n    }\\n  }\\n  return str.join('&');\\n}\\n/**\\n * Protocol version.\\n *\\n * @api public\\n */\\n\\nexports.protocol = parser.protocol;\\n\\n/**\\n * `connect`.\\n *\\n * @param {String} uri\\n * @api public\\n */\\n\\nexports.connect = lookup;\\n\\n/**\\n * Expose constructors for standalone build.\\n *\\n * @api public\\n */\\n\\nexports.Manager = require('./manager');\\nexports.Socket = require('./socket');\\n\\n\\n\\n// WEBPACK FOOTER //\\n// lib/index.js\",\"\\n/**\\n * Module dependencies.\\n */\\n\\nvar parseuri = require('parseuri');\\nvar debug = require('debug')('socket.io-client:url');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = url;\\n\\n/**\\n * URL parser.\\n *\\n * @param {String} url\\n * @param {Object} An object meant to mimic window.location.\\n *                 Defaults to window.location.\\n * @api public\\n */\\n\\nfunction url (uri, loc) {\\n  var obj = uri;\\n\\n  // default to window.location\\n  loc = loc || global.location;\\n  if (null == uri) uri = loc.protocol + '//' + loc.host;\\n\\n  // relative path support\\n  if ('string' === typeof uri) {\\n    if ('/' === uri.charAt(0)) {\\n      if ('/' === uri.charAt(1)) {\\n        uri = loc.protocol + uri;\\n      } else {\\n        uri = loc.host + uri;\\n      }\\n    }\\n\\n    if (!/^(https?|wss?):\\\\/\\\\//.test(uri)) {\\n      debug('protocol-less url %s', uri);\\n      if ('undefined' !== typeof loc) {\\n        uri = loc.protocol + '//' + uri;\\n      } else {\\n        uri = 'https://' + uri;\\n      }\\n    }\\n\\n    // parse\\n    debug('parse %s', uri);\\n    obj = parseuri(uri);\\n  }\\n\\n  // make sure we treat `localhost:80` and `localhost` equally\\n  if (!obj.port) {\\n    if (/^(http|ws)$/.test(obj.protocol)) {\\n      obj.port = '80';\\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\\n      obj.port = '443';\\n    }\\n  }\\n\\n  obj.path = obj.path || '/';\\n\\n  var ipv6 = obj.host.indexOf(':') !== -1;\\n  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\\n\\n  // define unique id\\n  obj.id = obj.protocol + '://' + host + ':' + obj.port;\\n  // define href\\n  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));\\n\\n  return obj;\\n}\\n\\n\\n\\n// WEBPACK FOOTER //\\n// lib/url.js\",\"/**\\r\\n * Parses an URI\\r\\n *\\r\\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\\r\\n * @api private\\r\\n */\\r\\n\\r\\nvar re = /^(?:(?![^:@]+:[^:@\\\\/]*@)(http|https|ws|wss):\\\\/\\\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\\\/?#]*)(?::(\\\\d*))?)(((\\\\/(?:[^?#](?![^?#\\\\/]*\\\\.[^?#\\\\/.]+(?:[?#]|$)))*\\\\/?)?([^?#\\\\/]*))(?:\\\\?([^#]*))?(?:#(.*))?)/;\\r\\n\\r\\nvar parts = [\\r\\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\\r\\n];\\r\\n\\r\\nmodule.exports = function parseuri(str) {\\r\\n    var src = str,\\r\\n        b = str.indexOf('['),\\r\\n        e = str.indexOf(']');\\r\\n\\r\\n    if (b != -1 && e != -1) {\\r\\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\\r\\n    }\\r\\n\\r\\n    var m = re.exec(str || ''),\\r\\n        uri = {},\\r\\n        i = 14;\\r\\n\\r\\n    while (i--) {\\r\\n        uri[parts[i]] = m[i] || '';\\r\\n    }\\r\\n\\r\\n    if (b != -1 && e != -1) {\\r\\n        uri.source = src;\\r\\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\\r\\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\\r\\n        uri.ipv6uri = true;\\r\\n    }\\r\\n\\r\\n    return uri;\\r\\n};\\r\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/parseuri/index.js\\n// module id = 2\\n// module chunks = 0\",\"\\n/**\\n * This is the web browser implementation of `debug()`.\\n *\\n * Expose `debug()` as the module.\\n */\\n\\nexports = module.exports = require('./debug');\\nexports.log = log;\\nexports.formatArgs = formatArgs;\\nexports.save = save;\\nexports.load = load;\\nexports.useColors = useColors;\\nexports.storage = 'undefined' != typeof chrome\\n               && 'undefined' != typeof chrome.storage\\n                  ? chrome.storage.local\\n                  : localstorage();\\n\\n/**\\n * Colors.\\n */\\n\\nexports.colors = [\\n  'lightseagreen',\\n  'forestgreen',\\n  'goldenrod',\\n  'dodgerblue',\\n  'darkorchid',\\n  'crimson'\\n];\\n\\n/**\\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\n * and the Firebug extension (any Firefox version) are known\\n * to support \\\"%c\\\" CSS customizations.\\n *\\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\\n */\\n\\nfunction useColors() {\\n  // is webkit? http://stackoverflow.com/a/16459606/376773\\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\\n  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||\\n    // is firebug? http://stackoverflow.com/a/398120/376773\\n    (window.console && (console.firebug || (console.exception && console.table))) ||\\n    // is firefox >= v31?\\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n    (navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\\n}\\n\\n/**\\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\n */\\n\\nexports.formatters.j = function(v) {\\n  try {\\n    return JSON.stringify(v);\\n  } catch (err) {\\n    return '[UnexpectedJSONParseError]: ' + err.message;\\n  }\\n};\\n\\n\\n/**\\n * Colorize log arguments if enabled.\\n *\\n * @api public\\n */\\n\\nfunction formatArgs() {\\n  var args = arguments;\\n  var useColors = this.useColors;\\n\\n  args[0] = (useColors ? '%c' : '')\\n    + this.namespace\\n    + (useColors ? ' %c' : ' ')\\n    + args[0]\\n    + (useColors ? '%c ' : ' ')\\n    + '+' + exports.humanize(this.diff);\\n\\n  if (!useColors) return args;\\n\\n  var c = 'color: ' + this.color;\\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\\n\\n  // the final \\\"%c\\\" is somewhat tricky, because there could be other\\n  // arguments passed either before or after the %c, so we need to\\n  // figure out the correct index to insert the CSS into\\n  var index = 0;\\n  var lastC = 0;\\n  args[0].replace(/%[a-z%]/g, function(match) {\\n    if ('%%' === match) return;\\n    index++;\\n    if ('%c' === match) {\\n      // we only are interested in the *last* %c\\n      // (the user may have provided their own)\\n      lastC = index;\\n    }\\n  });\\n\\n  args.splice(lastC, 0, c);\\n  return args;\\n}\\n\\n/**\\n * Invokes `console.log()` when available.\\n * No-op when `console.log` is not a \\\"function\\\".\\n *\\n * @api public\\n */\\n\\nfunction log() {\\n  // this hackery is required for IE8/9, where\\n  // the `console.log` function doesn't have 'apply'\\n  return 'object' === typeof console\\n    && console.log\\n    && Function.prototype.apply.call(console.log, console, arguments);\\n}\\n\\n/**\\n * Save `namespaces`.\\n *\\n * @param {String} namespaces\\n * @api private\\n */\\n\\nfunction save(namespaces) {\\n  try {\\n    if (null == namespaces) {\\n      exports.storage.removeItem('debug');\\n    } else {\\n      exports.storage.debug = namespaces;\\n    }\\n  } catch(e) {}\\n}\\n\\n/**\\n * Load `namespaces`.\\n *\\n * @return {String} returns the previously persisted debug modes\\n * @api private\\n */\\n\\nfunction load() {\\n  var r;\\n  try {\\n    return exports.storage.debug;\\n  } catch(e) {}\\n\\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\\n  if (typeof process !== 'undefined' && 'env' in process) {\\n    return process.env.DEBUG;\\n  }\\n}\\n\\n/**\\n * Enable namespaces listed in `localStorage.debug` initially.\\n */\\n\\nexports.enable(load());\\n\\n/**\\n * Localstorage attempts to return the localstorage.\\n *\\n * This is necessary because safari throws\\n * when a user disables cookies/localstorage\\n * and you attempt to access it.\\n *\\n * @return {LocalStorage}\\n * @api private\\n */\\n\\nfunction localstorage(){\\n  try {\\n    return window.localStorage;\\n  } catch (e) {}\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/debug/browser.js\\n// module id = 3\\n// module chunks = 0\",\"// shim for using process in browser\\nvar process = module.exports = {};\\n\\n// cached from whatever global is present so that test runners that stub it\\n// don't break things.  But we need to wrap it in a try catch in case it is\\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\\n// function because try/catches deoptimize in certain engines.\\n\\nvar cachedSetTimeout;\\nvar cachedClearTimeout;\\n\\nfunction defaultSetTimout() {\\n    throw new Error('setTimeout has not been defined');\\n}\\nfunction defaultClearTimeout () {\\n    throw new Error('clearTimeout has not been defined');\\n}\\n(function () {\\n    try {\\n        if (typeof setTimeout === 'function') {\\n            cachedSetTimeout = setTimeout;\\n        } else {\\n            cachedSetTimeout = defaultSetTimout;\\n        }\\n    } catch (e) {\\n        cachedSetTimeout = defaultSetTimout;\\n    }\\n    try {\\n        if (typeof clearTimeout === 'function') {\\n            cachedClearTimeout = clearTimeout;\\n        } else {\\n            cachedClearTimeout = defaultClearTimeout;\\n        }\\n    } catch (e) {\\n        cachedClearTimeout = defaultClearTimeout;\\n    }\\n} ())\\nfunction runTimeout(fun) {\\n    if (cachedSetTimeout === setTimeout) {\\n        //normal enviroments in sane situations\\n        return setTimeout(fun, 0);\\n    }\\n    // if setTimeout wasn't available but was latter defined\\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n        cachedSetTimeout = setTimeout;\\n        return setTimeout(fun, 0);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedSetTimeout(fun, 0);\\n    } catch(e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\\n            return cachedSetTimeout.call(null, fun, 0);\\n        } catch(e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\\n            return cachedSetTimeout.call(this, fun, 0);\\n        }\\n    }\\n\\n\\n}\\nfunction runClearTimeout(marker) {\\n    if (cachedClearTimeout === clearTimeout) {\\n        //normal enviroments in sane situations\\n        return clearTimeout(marker);\\n    }\\n    // if clearTimeout wasn't available but was latter defined\\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n        cachedClearTimeout = clearTimeout;\\n        return clearTimeout(marker);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedClearTimeout(marker);\\n    } catch (e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\\n            return cachedClearTimeout.call(null, marker);\\n        } catch (e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\\n            return cachedClearTimeout.call(this, marker);\\n        }\\n    }\\n\\n\\n\\n}\\nvar queue = [];\\nvar draining = false;\\nvar currentQueue;\\nvar queueIndex = -1;\\n\\nfunction cleanUpNextTick() {\\n    if (!draining || !currentQueue) {\\n        return;\\n    }\\n    draining = false;\\n    if (currentQueue.length) {\\n        queue = currentQueue.concat(queue);\\n    } else {\\n        queueIndex = -1;\\n    }\\n    if (queue.length) {\\n        drainQueue();\\n    }\\n}\\n\\nfunction drainQueue() {\\n    if (draining) {\\n        return;\\n    }\\n    var timeout = runTimeout(cleanUpNextTick);\\n    draining = true;\\n\\n    var len = queue.length;\\n    while(len) {\\n        currentQueue = queue;\\n        queue = [];\\n        while (++queueIndex < len) {\\n            if (currentQueue) {\\n                currentQueue[queueIndex].run();\\n            }\\n        }\\n        queueIndex = -1;\\n        len = queue.length;\\n    }\\n    currentQueue = null;\\n    draining = false;\\n    runClearTimeout(timeout);\\n}\\n\\nprocess.nextTick = function (fun) {\\n    var args = new Array(arguments.length - 1);\\n    if (arguments.length > 1) {\\n        for (var i = 1; i < arguments.length; i++) {\\n            args[i - 1] = arguments[i];\\n        }\\n    }\\n    queue.push(new Item(fun, args));\\n    if (queue.length === 1 && !draining) {\\n        runTimeout(drainQueue);\\n    }\\n};\\n\\n// v8 likes predictible objects\\nfunction Item(fun, array) {\\n    this.fun = fun;\\n    this.array = array;\\n}\\nItem.prototype.run = function () {\\n    this.fun.apply(null, this.array);\\n};\\nprocess.title = 'browser';\\nprocess.browser = true;\\nprocess.env = {};\\nprocess.argv = [];\\nprocess.version = ''; // empty string to avoid regexp issues\\nprocess.versions = {};\\n\\nfunction noop() {}\\n\\nprocess.on = noop;\\nprocess.addListener = noop;\\nprocess.once = noop;\\nprocess.off = noop;\\nprocess.removeListener = noop;\\nprocess.removeAllListeners = noop;\\nprocess.emit = noop;\\n\\nprocess.binding = function (name) {\\n    throw new Error('process.binding is not supported');\\n};\\n\\nprocess.cwd = function () { return '/' };\\nprocess.chdir = function (dir) {\\n    throw new Error('process.chdir is not supported');\\n};\\nprocess.umask = function() { return 0; };\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/process/browser.js\\n// module id = 4\\n// module chunks = 0\",\"\\n/**\\n * This is the common logic for both the Node.js and web browser\\n * implementations of `debug()`.\\n *\\n * Expose `debug()` as the module.\\n */\\n\\nexports = module.exports = debug.debug = debug;\\nexports.coerce = coerce;\\nexports.disable = disable;\\nexports.enable = enable;\\nexports.enabled = enabled;\\nexports.humanize = require('ms');\\n\\n/**\\n * The currently active debug mode names, and names to skip.\\n */\\n\\nexports.names = [];\\nexports.skips = [];\\n\\n/**\\n * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n *\\n * Valid key names are a single, lowercased letter, i.e. \\\"n\\\".\\n */\\n\\nexports.formatters = {};\\n\\n/**\\n * Previously assigned color.\\n */\\n\\nvar prevColor = 0;\\n\\n/**\\n * Previous log timestamp.\\n */\\n\\nvar prevTime;\\n\\n/**\\n * Select a color.\\n *\\n * @return {Number}\\n * @api private\\n */\\n\\nfunction selectColor() {\\n  return exports.colors[prevColor++ % exports.colors.length];\\n}\\n\\n/**\\n * Create a debugger with the given `namespace`.\\n *\\n * @param {String} namespace\\n * @return {Function}\\n * @api public\\n */\\n\\nfunction debug(namespace) {\\n\\n  // define the `disabled` version\\n  function disabled() {\\n  }\\n  disabled.enabled = false;\\n\\n  // define the `enabled` version\\n  function enabled() {\\n\\n    var self = enabled;\\n\\n    // set `diff` timestamp\\n    var curr = +new Date();\\n    var ms = curr - (prevTime || curr);\\n    self.diff = ms;\\n    self.prev = prevTime;\\n    self.curr = curr;\\n    prevTime = curr;\\n\\n    // add the `color` if not set\\n    if (null == self.useColors) self.useColors = exports.useColors();\\n    if (null == self.color && self.useColors) self.color = selectColor();\\n\\n    var args = new Array(arguments.length);\\n    for (var i = 0; i < args.length; i++) {\\n      args[i] = arguments[i];\\n    }\\n\\n    args[0] = exports.coerce(args[0]);\\n\\n    if ('string' !== typeof args[0]) {\\n      // anything else let's inspect with %o\\n      args = ['%o'].concat(args);\\n    }\\n\\n    // apply any `formatters` transformations\\n    var index = 0;\\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\\n      // if we encounter an escaped % then don't increase the array index\\n      if (match === '%%') return match;\\n      index++;\\n      var formatter = exports.formatters[format];\\n      if ('function' === typeof formatter) {\\n        var val = args[index];\\n        match = formatter.call(self, val);\\n\\n        // now we need to remove `args[index]` since it's inlined in the `format`\\n        args.splice(index, 1);\\n        index--;\\n      }\\n      return match;\\n    });\\n\\n    // apply env-specific formatting\\n    args = exports.formatArgs.apply(self, args);\\n\\n    var logFn = enabled.log || exports.log || console.log.bind(console);\\n    logFn.apply(self, args);\\n  }\\n  enabled.enabled = true;\\n\\n  var fn = exports.enabled(namespace) ? enabled : disabled;\\n\\n  fn.namespace = namespace;\\n\\n  return fn;\\n}\\n\\n/**\\n * Enables a debug mode by namespaces. This can include modes\\n * separated by a colon and wildcards.\\n *\\n * @param {String} namespaces\\n * @api public\\n */\\n\\nfunction enable(namespaces) {\\n  exports.save(namespaces);\\n\\n  var split = (namespaces || '').split(/[\\\\s,]+/);\\n  var len = split.length;\\n\\n  for (var i = 0; i < len; i++) {\\n    if (!split[i]) continue; // ignore empty strings\\n    namespaces = split[i].replace(/[\\\\\\\\^$+?.()|[\\\\]{}]/g, '\\\\\\\\$&').replace(/\\\\*/g, '.*?');\\n    if (namespaces[0] === '-') {\\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n    } else {\\n      exports.names.push(new RegExp('^' + namespaces + '$'));\\n    }\\n  }\\n}\\n\\n/**\\n * Disable debug output.\\n *\\n * @api public\\n */\\n\\nfunction disable() {\\n  exports.enable('');\\n}\\n\\n/**\\n * Returns true if the given mode name is enabled, false otherwise.\\n *\\n * @param {String} name\\n * @return {Boolean}\\n * @api public\\n */\\n\\nfunction enabled(name) {\\n  var i, len;\\n  for (i = 0, len = exports.skips.length; i < len; i++) {\\n    if (exports.skips[i].test(name)) {\\n      return false;\\n    }\\n  }\\n  for (i = 0, len = exports.names.length; i < len; i++) {\\n    if (exports.names[i].test(name)) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\n/**\\n * Coerce `val`.\\n *\\n * @param {Mixed} val\\n * @return {Mixed}\\n * @api private\\n */\\n\\nfunction coerce(val) {\\n  if (val instanceof Error) return val.stack || val.message;\\n  return val;\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/debug/debug.js\\n// module id = 5\\n// module chunks = 0\",\"/**\\n * Helpers.\\n */\\n\\nvar s = 1000\\nvar m = s * 60\\nvar h = m * 60\\nvar d = h * 24\\nvar y = d * 365.25\\n\\n/**\\n * Parse or format the given `val`.\\n *\\n * Options:\\n *\\n *  - `long` verbose formatting [false]\\n *\\n * @param {String|Number} val\\n * @param {Object} options\\n * @throws {Error} throw an error if val is not a non-empty string or a number\\n * @return {String|Number}\\n * @api public\\n */\\n\\nmodule.exports = function (val, options) {\\n  options = options || {}\\n  var type = typeof val\\n  if (type === 'string' && val.length > 0) {\\n    return parse(val)\\n  } else if (type === 'number' && isNaN(val) === false) {\\n    return options.long ?\\n\\t\\t\\tfmtLong(val) :\\n\\t\\t\\tfmtShort(val)\\n  }\\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))\\n}\\n\\n/**\\n * Parse the given `str` and return milliseconds.\\n *\\n * @param {String} str\\n * @return {Number}\\n * @api private\\n */\\n\\nfunction parse(str) {\\n  str = String(str)\\n  if (str.length > 10000) {\\n    return\\n  }\\n  var match = /^((?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)\\n  if (!match) {\\n    return\\n  }\\n  var n = parseFloat(match[1])\\n  var type = (match[2] || 'ms').toLowerCase()\\n  switch (type) {\\n    case 'years':\\n    case 'year':\\n    case 'yrs':\\n    case 'yr':\\n    case 'y':\\n      return n * y\\n    case 'days':\\n    case 'day':\\n    case 'd':\\n      return n * d\\n    case 'hours':\\n    case 'hour':\\n    case 'hrs':\\n    case 'hr':\\n    case 'h':\\n      return n * h\\n    case 'minutes':\\n    case 'minute':\\n    case 'mins':\\n    case 'min':\\n    case 'm':\\n      return n * m\\n    case 'seconds':\\n    case 'second':\\n    case 'secs':\\n    case 'sec':\\n    case 's':\\n      return n * s\\n    case 'milliseconds':\\n    case 'millisecond':\\n    case 'msecs':\\n    case 'msec':\\n    case 'ms':\\n      return n\\n    default:\\n      return undefined\\n  }\\n}\\n\\n/**\\n * Short format for `ms`.\\n *\\n * @param {Number} ms\\n * @return {String}\\n * @api private\\n */\\n\\nfunction fmtShort(ms) {\\n  if (ms >= d) {\\n    return Math.round(ms / d) + 'd'\\n  }\\n  if (ms >= h) {\\n    return Math.round(ms / h) + 'h'\\n  }\\n  if (ms >= m) {\\n    return Math.round(ms / m) + 'm'\\n  }\\n  if (ms >= s) {\\n    return Math.round(ms / s) + 's'\\n  }\\n  return ms + 'ms'\\n}\\n\\n/**\\n * Long format for `ms`.\\n *\\n * @param {Number} ms\\n * @return {String}\\n * @api private\\n */\\n\\nfunction fmtLong(ms) {\\n  return plural(ms, d, 'day') ||\\n    plural(ms, h, 'hour') ||\\n    plural(ms, m, 'minute') ||\\n    plural(ms, s, 'second') ||\\n    ms + ' ms'\\n}\\n\\n/**\\n * Pluralization helper.\\n */\\n\\nfunction plural(ms, n, name) {\\n  if (ms < n) {\\n    return\\n  }\\n  if (ms < n * 1.5) {\\n    return Math.floor(ms / n) + ' ' + name\\n  }\\n  return Math.ceil(ms / n) + ' ' + name + 's'\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/ms/index.js\\n// module id = 6\\n// module chunks = 0\",\"\\n/**\\n * Module dependencies.\\n */\\n\\nvar debug = require('debug')('socket.io-parser');\\nvar json = require('json3');\\nvar Emitter = require('component-emitter');\\nvar binary = require('./binary');\\nvar isBuf = require('./is-buffer');\\n\\n/**\\n * Protocol version.\\n *\\n * @api public\\n */\\n\\nexports.protocol = 4;\\n\\n/**\\n * Packet types.\\n *\\n * @api public\\n */\\n\\nexports.types = [\\n  'CONNECT',\\n  'DISCONNECT',\\n  'EVENT',\\n  'ACK',\\n  'ERROR',\\n  'BINARY_EVENT',\\n  'BINARY_ACK'\\n];\\n\\n/**\\n * Packet type `connect`.\\n *\\n * @api public\\n */\\n\\nexports.CONNECT = 0;\\n\\n/**\\n * Packet type `disconnect`.\\n *\\n * @api public\\n */\\n\\nexports.DISCONNECT = 1;\\n\\n/**\\n * Packet type `event`.\\n *\\n * @api public\\n */\\n\\nexports.EVENT = 2;\\n\\n/**\\n * Packet type `ack`.\\n *\\n * @api public\\n */\\n\\nexports.ACK = 3;\\n\\n/**\\n * Packet type `error`.\\n *\\n * @api public\\n */\\n\\nexports.ERROR = 4;\\n\\n/**\\n * Packet type 'binary event'\\n *\\n * @api public\\n */\\n\\nexports.BINARY_EVENT = 5;\\n\\n/**\\n * Packet type `binary ack`. For acks with binary arguments.\\n *\\n * @api public\\n */\\n\\nexports.BINARY_ACK = 6;\\n\\n/**\\n * Encoder constructor.\\n *\\n * @api public\\n */\\n\\nexports.Encoder = Encoder;\\n\\n/**\\n * Decoder constructor.\\n *\\n * @api public\\n */\\n\\nexports.Decoder = Decoder;\\n\\n/**\\n * A socket.io Encoder instance\\n *\\n * @api public\\n */\\n\\nfunction Encoder() {}\\n\\n/**\\n * Encode a packet as a single string if non-binary, or as a\\n * buffer sequence, depending on packet type.\\n *\\n * @param {Object} obj - packet object\\n * @param {Function} callback - function to handle encodings (likely engine.write)\\n * @return Calls callback with Array of encodings\\n * @api public\\n */\\n\\nEncoder.prototype.encode = function(obj, callback){\\n  debug('encoding packet %j', obj);\\n\\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\\n    encodeAsBinary(obj, callback);\\n  }\\n  else {\\n    var encoding = encodeAsString(obj);\\n    callback([encoding]);\\n  }\\n};\\n\\n/**\\n * Encode packet as string.\\n *\\n * @param {Object} packet\\n * @return {String} encoded\\n * @api private\\n */\\n\\nfunction encodeAsString(obj) {\\n  var str = '';\\n  var nsp = false;\\n\\n  // first is type\\n  str += obj.type;\\n\\n  // attachments if we have them\\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\\n    str += obj.attachments;\\n    str += '-';\\n  }\\n\\n  // if we have a namespace other than `/`\\n  // we append it followed by a comma `,`\\n  if (obj.nsp && '/' != obj.nsp) {\\n    nsp = true;\\n    str += obj.nsp;\\n  }\\n\\n  // immediately followed by the id\\n  if (null != obj.id) {\\n    if (nsp) {\\n      str += ',';\\n      nsp = false;\\n    }\\n    str += obj.id;\\n  }\\n\\n  // json data\\n  if (null != obj.data) {\\n    if (nsp) str += ',';\\n    str += json.stringify(obj.data);\\n  }\\n\\n  debug('encoded %j as %s', obj, str);\\n  return str;\\n}\\n\\n/**\\n * Encode packet as 'buffer sequence' by removing blobs, and\\n * deconstructing packet into object with placeholders and\\n * a list of buffers.\\n *\\n * @param {Object} packet\\n * @return {Buffer} encoded\\n * @api private\\n */\\n\\nfunction encodeAsBinary(obj, callback) {\\n\\n  function writeEncoding(bloblessData) {\\n    var deconstruction = binary.deconstructPacket(bloblessData);\\n    var pack = encodeAsString(deconstruction.packet);\\n    var buffers = deconstruction.buffers;\\n\\n    buffers.unshift(pack); // add packet info to beginning of data list\\n    callback(buffers); // write all the buffers\\n  }\\n\\n  binary.removeBlobs(obj, writeEncoding);\\n}\\n\\n/**\\n * A socket.io Decoder instance\\n *\\n * @return {Object} decoder\\n * @api public\\n */\\n\\nfunction Decoder() {\\n  this.reconstructor = null;\\n}\\n\\n/**\\n * Mix in `Emitter` with Decoder.\\n */\\n\\nEmitter(Decoder.prototype);\\n\\n/**\\n * Decodes an ecoded packet string into packet JSON.\\n *\\n * @param {String} obj - encoded packet\\n * @return {Object} packet\\n * @api public\\n */\\n\\nDecoder.prototype.add = function(obj) {\\n  var packet;\\n  if ('string' == typeof obj) {\\n    packet = decodeString(obj);\\n    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json\\n      this.reconstructor = new BinaryReconstructor(packet);\\n\\n      // no attachments, labeled binary but no binary data to follow\\n      if (this.reconstructor.reconPack.attachments === 0) {\\n        this.emit('decoded', packet);\\n      }\\n    } else { // non-binary full packet\\n      this.emit('decoded', packet);\\n    }\\n  }\\n  else if (isBuf(obj) || obj.base64) { // raw binary data\\n    if (!this.reconstructor) {\\n      throw new Error('got binary data when not reconstructing a packet');\\n    } else {\\n      packet = this.reconstructor.takeBinaryData(obj);\\n      if (packet) { // received final buffer\\n        this.reconstructor = null;\\n        this.emit('decoded', packet);\\n      }\\n    }\\n  }\\n  else {\\n    throw new Error('Unknown type: ' + obj);\\n  }\\n};\\n\\n/**\\n * Decode a packet String (JSON data)\\n *\\n * @param {String} str\\n * @return {Object} packet\\n * @api private\\n */\\n\\nfunction decodeString(str) {\\n  var p = {};\\n  var i = 0;\\n\\n  // look up type\\n  p.type = Number(str.charAt(0));\\n  if (null == exports.types[p.type]) return error();\\n\\n  // look up attachments if type binary\\n  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\\n    var buf = '';\\n    while (str.charAt(++i) != '-') {\\n      buf += str.charAt(i);\\n      if (i == str.length) break;\\n    }\\n    if (buf != Number(buf) || str.charAt(i) != '-') {\\n      throw new Error('Illegal attachments');\\n    }\\n    p.attachments = Number(buf);\\n  }\\n\\n  // look up namespace (if any)\\n  if ('/' == str.charAt(i + 1)) {\\n    p.nsp = '';\\n    while (++i) {\\n      var c = str.charAt(i);\\n      if (',' == c) break;\\n      p.nsp += c;\\n      if (i == str.length) break;\\n    }\\n  } else {\\n    p.nsp = '/';\\n  }\\n\\n  // look up id\\n  var next = str.charAt(i + 1);\\n  if ('' !== next && Number(next) == next) {\\n    p.id = '';\\n    while (++i) {\\n      var c = str.charAt(i);\\n      if (null == c || Number(c) != c) {\\n        --i;\\n        break;\\n      }\\n      p.id += str.charAt(i);\\n      if (i == str.length) break;\\n    }\\n    p.id = Number(p.id);\\n  }\\n\\n  // look up json data\\n  if (str.charAt(++i)) {\\n    p = tryParse(p, str.substr(i));\\n  }\\n\\n  debug('decoded %s as %j', str, p);\\n  return p;\\n}\\n\\nfunction tryParse(p, str) {\\n  try {\\n    p.data = json.parse(str);\\n  } catch(e){\\n    return error();\\n  }\\n  return p; \\n};\\n\\n/**\\n * Deallocates a parser's resources\\n *\\n * @api public\\n */\\n\\nDecoder.prototype.destroy = function() {\\n  if (this.reconstructor) {\\n    this.reconstructor.finishedReconstruction();\\n  }\\n};\\n\\n/**\\n * A manager of a binary event's 'buffer sequence'. Should\\n * be constructed whenever a packet of type BINARY_EVENT is\\n * decoded.\\n *\\n * @param {Object} packet\\n * @return {BinaryReconstructor} initialized reconstructor\\n * @api private\\n */\\n\\nfunction BinaryReconstructor(packet) {\\n  this.reconPack = packet;\\n  this.buffers = [];\\n}\\n\\n/**\\n * Method to be called when binary data received from connection\\n * after a BINARY_EVENT packet.\\n *\\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\\n * @return {null | Object} returns null if more binary data is expected or\\n *   a reconstructed packet object if all buffers have been received.\\n * @api private\\n */\\n\\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\\n  this.buffers.push(binData);\\n  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list\\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\\n    this.finishedReconstruction();\\n    return packet;\\n  }\\n  return null;\\n};\\n\\n/**\\n * Cleans up binary packet reconstruction variables.\\n *\\n * @api private\\n */\\n\\nBinaryReconstructor.prototype.finishedReconstruction = function() {\\n  this.reconPack = null;\\n  this.buffers = [];\\n};\\n\\nfunction error(data){\\n  return {\\n    type: exports.ERROR,\\n    data: 'parser error'\\n  };\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/socket.io-parser/index.js\\n// module id = 7\\n// module chunks = 0\",\"\\n/**\\n * This is the web browser implementation of `debug()`.\\n *\\n * Expose `debug()` as the module.\\n */\\n\\nexports = module.exports = require('./debug');\\nexports.log = log;\\nexports.formatArgs = formatArgs;\\nexports.save = save;\\nexports.load = load;\\nexports.useColors = useColors;\\nexports.storage = 'undefined' != typeof chrome\\n               && 'undefined' != typeof chrome.storage\\n                  ? chrome.storage.local\\n                  : localstorage();\\n\\n/**\\n * Colors.\\n */\\n\\nexports.colors = [\\n  'lightseagreen',\\n  'forestgreen',\\n  'goldenrod',\\n  'dodgerblue',\\n  'darkorchid',\\n  'crimson'\\n];\\n\\n/**\\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\n * and the Firebug extension (any Firefox version) are known\\n * to support \\\"%c\\\" CSS customizations.\\n *\\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\\n */\\n\\nfunction useColors() {\\n  // is webkit? http://stackoverflow.com/a/16459606/376773\\n  return ('WebkitAppearance' in document.documentElement.style) ||\\n    // is firebug? http://stackoverflow.com/a/398120/376773\\n    (window.console && (console.firebug || (console.exception && console.table))) ||\\n    // is firefox >= v31?\\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n    (navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\\n}\\n\\n/**\\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\n */\\n\\nexports.formatters.j = function(v) {\\n  return JSON.stringify(v);\\n};\\n\\n\\n/**\\n * Colorize log arguments if enabled.\\n *\\n * @api public\\n */\\n\\nfunction formatArgs() {\\n  var args = arguments;\\n  var useColors = this.useColors;\\n\\n  args[0] = (useColors ? '%c' : '')\\n    + this.namespace\\n    + (useColors ? ' %c' : ' ')\\n    + args[0]\\n    + (useColors ? '%c ' : ' ')\\n    + '+' + exports.humanize(this.diff);\\n\\n  if (!useColors) return args;\\n\\n  var c = 'color: ' + this.color;\\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\\n\\n  // the final \\\"%c\\\" is somewhat tricky, because there could be other\\n  // arguments passed either before or after the %c, so we need to\\n  // figure out the correct index to insert the CSS into\\n  var index = 0;\\n  var lastC = 0;\\n  args[0].replace(/%[a-z%]/g, function(match) {\\n    if ('%%' === match) return;\\n    index++;\\n    if ('%c' === match) {\\n      // we only are interested in the *last* %c\\n      // (the user may have provided their own)\\n      lastC = index;\\n    }\\n  });\\n\\n  args.splice(lastC, 0, c);\\n  return args;\\n}\\n\\n/**\\n * Invokes `console.log()` when available.\\n * No-op when `console.log` is not a \\\"function\\\".\\n *\\n * @api public\\n */\\n\\nfunction log() {\\n  // this hackery is required for IE8/9, where\\n  // the `console.log` function doesn't have 'apply'\\n  return 'object' === typeof console\\n    && console.log\\n    && Function.prototype.apply.call(console.log, console, arguments);\\n}\\n\\n/**\\n * Save `namespaces`.\\n *\\n * @param {String} namespaces\\n * @api private\\n */\\n\\nfunction save(namespaces) {\\n  try {\\n    if (null == namespaces) {\\n      exports.storage.removeItem('debug');\\n    } else {\\n      exports.storage.debug = namespaces;\\n    }\\n  } catch(e) {}\\n}\\n\\n/**\\n * Load `namespaces`.\\n *\\n * @return {String} returns the previously persisted debug modes\\n * @api private\\n */\\n\\nfunction load() {\\n  var r;\\n  try {\\n    r = exports.storage.debug;\\n  } catch(e) {}\\n  return r;\\n}\\n\\n/**\\n * Enable namespaces listed in `localStorage.debug` initially.\\n */\\n\\nexports.enable(load());\\n\\n/**\\n * Localstorage attempts to return the localstorage.\\n *\\n * This is necessary because safari throws\\n * when a user disables cookies/localstorage\\n * and you attempt to access it.\\n *\\n * @return {LocalStorage}\\n * @api private\\n */\\n\\nfunction localstorage(){\\n  try {\\n    return window.localStorage;\\n  } catch (e) {}\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/socket.io-parser/~/debug/browser.js\\n// module id = 8\\n// module chunks = 0\",\"\\n/**\\n * This is the common logic for both the Node.js and web browser\\n * implementations of `debug()`.\\n *\\n * Expose `debug()` as the module.\\n */\\n\\nexports = module.exports = debug;\\nexports.coerce = coerce;\\nexports.disable = disable;\\nexports.enable = enable;\\nexports.enabled = enabled;\\nexports.humanize = require('ms');\\n\\n/**\\n * The currently active debug mode names, and names to skip.\\n */\\n\\nexports.names = [];\\nexports.skips = [];\\n\\n/**\\n * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n *\\n * Valid key names are a single, lowercased letter, i.e. \\\"n\\\".\\n */\\n\\nexports.formatters = {};\\n\\n/**\\n * Previously assigned color.\\n */\\n\\nvar prevColor = 0;\\n\\n/**\\n * Previous log timestamp.\\n */\\n\\nvar prevTime;\\n\\n/**\\n * Select a color.\\n *\\n * @return {Number}\\n * @api private\\n */\\n\\nfunction selectColor() {\\n  return exports.colors[prevColor++ % exports.colors.length];\\n}\\n\\n/**\\n * Create a debugger with the given `namespace`.\\n *\\n * @param {String} namespace\\n * @return {Function}\\n * @api public\\n */\\n\\nfunction debug(namespace) {\\n\\n  // define the `disabled` version\\n  function disabled() {\\n  }\\n  disabled.enabled = false;\\n\\n  // define the `enabled` version\\n  function enabled() {\\n\\n    var self = enabled;\\n\\n    // set `diff` timestamp\\n    var curr = +new Date();\\n    var ms = curr - (prevTime || curr);\\n    self.diff = ms;\\n    self.prev = prevTime;\\n    self.curr = curr;\\n    prevTime = curr;\\n\\n    // add the `color` if not set\\n    if (null == self.useColors) self.useColors = exports.useColors();\\n    if (null == self.color && self.useColors) self.color = selectColor();\\n\\n    var args = Array.prototype.slice.call(arguments);\\n\\n    args[0] = exports.coerce(args[0]);\\n\\n    if ('string' !== typeof args[0]) {\\n      // anything else let's inspect with %o\\n      args = ['%o'].concat(args);\\n    }\\n\\n    // apply any `formatters` transformations\\n    var index = 0;\\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\\n      // if we encounter an escaped % then don't increase the array index\\n      if (match === '%%') return match;\\n      index++;\\n      var formatter = exports.formatters[format];\\n      if ('function' === typeof formatter) {\\n        var val = args[index];\\n        match = formatter.call(self, val);\\n\\n        // now we need to remove `args[index]` since it's inlined in the `format`\\n        args.splice(index, 1);\\n        index--;\\n      }\\n      return match;\\n    });\\n\\n    if ('function' === typeof exports.formatArgs) {\\n      args = exports.formatArgs.apply(self, args);\\n    }\\n    var logFn = enabled.log || exports.log || console.log.bind(console);\\n    logFn.apply(self, args);\\n  }\\n  enabled.enabled = true;\\n\\n  var fn = exports.enabled(namespace) ? enabled : disabled;\\n\\n  fn.namespace = namespace;\\n\\n  return fn;\\n}\\n\\n/**\\n * Enables a debug mode by namespaces. This can include modes\\n * separated by a colon and wildcards.\\n *\\n * @param {String} namespaces\\n * @api public\\n */\\n\\nfunction enable(namespaces) {\\n  exports.save(namespaces);\\n\\n  var split = (namespaces || '').split(/[\\\\s,]+/);\\n  var len = split.length;\\n\\n  for (var i = 0; i < len; i++) {\\n    if (!split[i]) continue; // ignore empty strings\\n    namespaces = split[i].replace(/\\\\*/g, '.*?');\\n    if (namespaces[0] === '-') {\\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n    } else {\\n      exports.names.push(new RegExp('^' + namespaces + '$'));\\n    }\\n  }\\n}\\n\\n/**\\n * Disable debug output.\\n *\\n * @api public\\n */\\n\\nfunction disable() {\\n  exports.enable('');\\n}\\n\\n/**\\n * Returns true if the given mode name is enabled, false otherwise.\\n *\\n * @param {String} name\\n * @return {Boolean}\\n * @api public\\n */\\n\\nfunction enabled(name) {\\n  var i, len;\\n  for (i = 0, len = exports.skips.length; i < len; i++) {\\n    if (exports.skips[i].test(name)) {\\n      return false;\\n    }\\n  }\\n  for (i = 0, len = exports.names.length; i < len; i++) {\\n    if (exports.names[i].test(name)) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\n/**\\n * Coerce `val`.\\n *\\n * @param {Mixed} val\\n * @return {Mixed}\\n * @api private\\n */\\n\\nfunction coerce(val) {\\n  if (val instanceof Error) return val.stack || val.message;\\n  return val;\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/socket.io-parser/~/debug/debug.js\\n// module id = 9\\n// module chunks = 0\",\"/**\\n * Helpers.\\n */\\n\\nvar s = 1000;\\nvar m = s * 60;\\nvar h = m * 60;\\nvar d = h * 24;\\nvar y = d * 365.25;\\n\\n/**\\n * Parse or format the given `val`.\\n *\\n * Options:\\n *\\n *  - `long` verbose formatting [false]\\n *\\n * @param {String|Number} val\\n * @param {Object} options\\n * @return {String|Number}\\n * @api public\\n */\\n\\nmodule.exports = function(val, options){\\n  options = options || {};\\n  if ('string' == typeof val) return parse(val);\\n  return options.long\\n    ? long(val)\\n    : short(val);\\n};\\n\\n/**\\n * Parse the given `str` and return milliseconds.\\n *\\n * @param {String} str\\n * @return {Number}\\n * @api private\\n */\\n\\nfunction parse(str) {\\n  str = '' + str;\\n  if (str.length > 10000) return;\\n  var match = /^((?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\\n  if (!match) return;\\n  var n = parseFloat(match[1]);\\n  var type = (match[2] || 'ms').toLowerCase();\\n  switch (type) {\\n    case 'years':\\n    case 'year':\\n    case 'yrs':\\n    case 'yr':\\n    case 'y':\\n      return n * y;\\n    case 'days':\\n    case 'day':\\n    case 'd':\\n      return n * d;\\n    case 'hours':\\n    case 'hour':\\n    case 'hrs':\\n    case 'hr':\\n    case 'h':\\n      return n * h;\\n    case 'minutes':\\n    case 'minute':\\n    case 'mins':\\n    case 'min':\\n    case 'm':\\n      return n * m;\\n    case 'seconds':\\n    case 'second':\\n    case 'secs':\\n    case 'sec':\\n    case 's':\\n      return n * s;\\n    case 'milliseconds':\\n    case 'millisecond':\\n    case 'msecs':\\n    case 'msec':\\n    case 'ms':\\n      return n;\\n  }\\n}\\n\\n/**\\n * Short format for `ms`.\\n *\\n * @param {Number} ms\\n * @return {String}\\n * @api private\\n */\\n\\nfunction short(ms) {\\n  if (ms >= d) return Math.round(ms / d) + 'd';\\n  if (ms >= h) return Math.round(ms / h) + 'h';\\n  if (ms >= m) return Math.round(ms / m) + 'm';\\n  if (ms >= s) return Math.round(ms / s) + 's';\\n  return ms + 'ms';\\n}\\n\\n/**\\n * Long format for `ms`.\\n *\\n * @param {Number} ms\\n * @return {String}\\n * @api private\\n */\\n\\nfunction long(ms) {\\n  return plural(ms, d, 'day')\\n    || plural(ms, h, 'hour')\\n    || plural(ms, m, 'minute')\\n    || plural(ms, s, 'second')\\n    || ms + ' ms';\\n}\\n\\n/**\\n * Pluralization helper.\\n */\\n\\nfunction plural(ms, n, name) {\\n  if (ms < n) return;\\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\\n  return Math.ceil(ms / n) + ' ' + name + 's';\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/socket.io-parser/~/ms/index.js\\n// module id = 10\\n// module chunks = 0\",\"/*** IMPORTS FROM imports-loader ***/\\nvar define = false;\\n\\n/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\\n;(function () {\\n  // Detect the `define` function exposed by asynchronous module loaders. The\\n  // strict `define` check is necessary for compatibility with `r.js`.\\n  var isLoader = typeof define === \\\"function\\\" && define.amd;\\n\\n  // A set of types used to distinguish objects from primitives.\\n  var objectTypes = {\\n    \\\"function\\\": true,\\n    \\\"object\\\": true\\n  };\\n\\n  // Detect the `exports` object exposed by CommonJS implementations.\\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\\n\\n  // Use the `global` object exposed by Node (including Browserify via\\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\\n  // and the `window` object in browsers. Rhino exports a `global` function\\n  // instead.\\n  var root = objectTypes[typeof window] && window || this,\\n      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \\\"object\\\" && global;\\n\\n  if (freeGlobal && (freeGlobal[\\\"global\\\"] === freeGlobal || freeGlobal[\\\"window\\\"] === freeGlobal || freeGlobal[\\\"self\\\"] === freeGlobal)) {\\n    root = freeGlobal;\\n  }\\n\\n  // Public: Initializes JSON 3 using the given `context` object, attaching the\\n  // `stringify` and `parse` functions to the specified `exports` object.\\n  function runInContext(context, exports) {\\n    context || (context = root[\\\"Object\\\"]());\\n    exports || (exports = root[\\\"Object\\\"]());\\n\\n    // Native constructor aliases.\\n    var Number = context[\\\"Number\\\"] || root[\\\"Number\\\"],\\n        String = context[\\\"String\\\"] || root[\\\"String\\\"],\\n        Object = context[\\\"Object\\\"] || root[\\\"Object\\\"],\\n        Date = context[\\\"Date\\\"] || root[\\\"Date\\\"],\\n        SyntaxError = context[\\\"SyntaxError\\\"] || root[\\\"SyntaxError\\\"],\\n        TypeError = context[\\\"TypeError\\\"] || root[\\\"TypeError\\\"],\\n        Math = context[\\\"Math\\\"] || root[\\\"Math\\\"],\\n        nativeJSON = context[\\\"JSON\\\"] || root[\\\"JSON\\\"];\\n\\n    // Delegate to the native `stringify` and `parse` implementations.\\n    if (typeof nativeJSON == \\\"object\\\" && nativeJSON) {\\n      exports.stringify = nativeJSON.stringify;\\n      exports.parse = nativeJSON.parse;\\n    }\\n\\n    // Convenience aliases.\\n    var objectProto = Object.prototype,\\n        getClass = objectProto.toString,\\n        isProperty, forEach, undef;\\n\\n    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\\n    var isExtended = new Date(-3509827334573292);\\n    try {\\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\\n      // results for certain dates in Opera >= 10.53.\\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\\n        // Safari < 2.0.2 stores the internal millisecond time value correctly,\\n        // but clips the values returned by the date methods to the range of\\n        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\\n        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\\n    } catch (exception) {}\\n\\n    // Internal: Determines whether the native `JSON.stringify` and `parse`\\n    // implementations are spec-compliant. Based on work by Ken Snyder.\\n    function has(name) {\\n      if (has[name] !== undef) {\\n        // Return cached feature test result.\\n        return has[name];\\n      }\\n      var isSupported;\\n      if (name == \\\"bug-string-char-index\\\") {\\n        // IE <= 7 doesn't support accessing string characters using square\\n        // bracket notation. IE 8 only supports this for primitives.\\n        isSupported = \\\"a\\\"[0] != \\\"a\\\";\\n      } else if (name == \\\"json\\\") {\\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\\n        // supported.\\n        isSupported = has(\\\"json-stringify\\\") && has(\\\"json-parse\\\");\\n      } else {\\n        var value, serialized = '{\\\"a\\\":[1,true,false,null,\\\"\\\\\\\\u0000\\\\\\\\b\\\\\\\\n\\\\\\\\f\\\\\\\\r\\\\\\\\t\\\"]}';\\n        // Test `JSON.stringify`.\\n        if (name == \\\"json-stringify\\\") {\\n          var stringify = exports.stringify, stringifySupported = typeof stringify == \\\"function\\\" && isExtended;\\n          if (stringifySupported) {\\n            // A test function object with a custom `toJSON` method.\\n            (value = function () {\\n              return 1;\\n            }).toJSON = value;\\n            try {\\n              stringifySupported =\\n                // Firefox 3.1b1 and b2 serialize string, number, and boolean\\n                // primitives as object literals.\\n                stringify(0) === \\\"0\\\" &&\\n                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\\n                // literals.\\n                stringify(new Number()) === \\\"0\\\" &&\\n                stringify(new String()) == '\\\"\\\"' &&\\n                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\\n                // does not define a canonical JSON representation (this applies to\\n                // objects with `toJSON` properties as well, *unless* they are nested\\n                // within an object or array).\\n                stringify(getClass) === undef &&\\n                // IE 8 serializes `undefined` as `\\\"undefined\\\"`. Safari <= 5.1.7 and\\n                // FF 3.1b3 pass this test.\\n                stringify(undef) === undef &&\\n                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\\n                // respectively, if the value is omitted entirely.\\n                stringify() === undef &&\\n                // FF 3.1b1, 2 throw an error if the given value is not a number,\\n                // string, array, object, Boolean, or `null` literal. This applies to\\n                // objects with custom `toJSON` methods as well, unless they are nested\\n                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\\n                // methods entirely.\\n                stringify(value) === \\\"1\\\" &&\\n                stringify([value]) == \\\"[1]\\\" &&\\n                // Prototype <= 1.6.1 serializes `[undefined]` as `\\\"[]\\\"` instead of\\n                // `\\\"[null]\\\"`.\\n                stringify([undef]) == \\\"[null]\\\" &&\\n                // YUI 3.0.0b1 fails to serialize `null` literals.\\n                stringify(null) == \\\"null\\\" &&\\n                // FF 3.1b1, 2 halts serialization if an array contains a function:\\n                // `[1, true, getClass, 1]` serializes as \\\"[1,true,],\\\". FF 3.1b3\\n                // elides non-JSON values from objects and arrays, unless they\\n                // define custom `toJSON` methods.\\n                stringify([undef, getClass, null]) == \\\"[null,null,null]\\\" &&\\n                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\\n                // where character escape codes are expected (e.g., `\\\\b` => `\\\\u0008`).\\n                stringify({ \\\"a\\\": [value, true, false, null, \\\"\\\\x00\\\\b\\\\n\\\\f\\\\r\\\\t\\\"] }) == serialized &&\\n                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\\n                stringify(null, value) === \\\"1\\\" &&\\n                stringify([1, 2], null, 1) == \\\"[\\\\n 1,\\\\n 2\\\\n]\\\" &&\\n                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\\n                // serialize extended years.\\n                stringify(new Date(-8.64e15)) == '\\\"-271821-04-20T00:00:00.000Z\\\"' &&\\n                // The milliseconds are optional in ES 5, but required in 5.1.\\n                stringify(new Date(8.64e15)) == '\\\"+275760-09-13T00:00:00.000Z\\\"' &&\\n                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\\n                // four-digit years instead of six-digit years. Credits: @Yaffle.\\n                stringify(new Date(-621987552e5)) == '\\\"-000001-01-01T00:00:00.000Z\\\"' &&\\n                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\\n                // values less than 1000. Credits: @Yaffle.\\n                stringify(new Date(-1)) == '\\\"1969-12-31T23:59:59.999Z\\\"';\\n            } catch (exception) {\\n              stringifySupported = false;\\n            }\\n          }\\n          isSupported = stringifySupported;\\n        }\\n        // Test `JSON.parse`.\\n        if (name == \\\"json-parse\\\") {\\n          var parse = exports.parse;\\n          if (typeof parse == \\\"function\\\") {\\n            try {\\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\\n              // Conforming implementations should also coerce the initial argument to\\n              // a string prior to parsing.\\n              if (parse(\\\"0\\\") === 0 && !parse(false)) {\\n                // Simple parsing test.\\n                value = parse(serialized);\\n                var parseSupported = value[\\\"a\\\"].length == 5 && value[\\\"a\\\"][0] === 1;\\n                if (parseSupported) {\\n                  try {\\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\\n                    parseSupported = !parse('\\\"\\\\t\\\"');\\n                  } catch (exception) {}\\n                  if (parseSupported) {\\n                    try {\\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\\n                      // certain octal literals.\\n                      parseSupported = parse(\\\"01\\\") !== 1;\\n                    } catch (exception) {}\\n                  }\\n                  if (parseSupported) {\\n                    try {\\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\\n                      // points. These environments, along with FF 3.1b1 and 2,\\n                      // also allow trailing commas in JSON objects and arrays.\\n                      parseSupported = parse(\\\"1.\\\") !== 1;\\n                    } catch (exception) {}\\n                  }\\n                }\\n              }\\n            } catch (exception) {\\n              parseSupported = false;\\n            }\\n          }\\n          isSupported = parseSupported;\\n        }\\n      }\\n      return has[name] = !!isSupported;\\n    }\\n\\n    if (!has(\\\"json\\\")) {\\n      // Common `[[Class]]` name aliases.\\n      var functionClass = \\\"[object Function]\\\",\\n          dateClass = \\\"[object Date]\\\",\\n          numberClass = \\\"[object Number]\\\",\\n          stringClass = \\\"[object String]\\\",\\n          arrayClass = \\\"[object Array]\\\",\\n          booleanClass = \\\"[object Boolean]\\\";\\n\\n      // Detect incomplete support for accessing string characters by index.\\n      var charIndexBuggy = has(\\\"bug-string-char-index\\\");\\n\\n      // Define additional utility methods if the `Date` methods are buggy.\\n      if (!isExtended) {\\n        var floor = Math.floor;\\n        // A mapping between the months of the year and the number of days between\\n        // January 1st and the first of the respective month.\\n        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\\n        // Internal: Calculates the number of days between the Unix epoch and the\\n        // first day of the given month.\\n        var getDay = function (year, month) {\\n          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\\n        };\\n      }\\n\\n      // Internal: Determines if a property is a direct property of the given\\n      // object. Delegates to the native `Object#hasOwnProperty` method.\\n      if (!(isProperty = objectProto.hasOwnProperty)) {\\n        isProperty = function (property) {\\n          var members = {}, constructor;\\n          if ((members.__proto__ = null, members.__proto__ = {\\n            // The *proto* property cannot be set multiple times in recent\\n            // versions of Firefox and SeaMonkey.\\n            \\\"toString\\\": 1\\n          }, members).toString != getClass) {\\n            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\\n            // supports the mutable *proto* property.\\n            isProperty = function (property) {\\n              // Capture and break the object's prototype chain (see section 8.6.2\\n              // of the ES 5.1 spec). The parenthesized expression prevents an\\n              // unsafe transformation by the Closure Compiler.\\n              var original = this.__proto__, result = property in (this.__proto__ = null, this);\\n              // Restore the original prototype chain.\\n              this.__proto__ = original;\\n              return result;\\n            };\\n          } else {\\n            // Capture a reference to the top-level `Object` constructor.\\n            constructor = members.constructor;\\n            // Use the `constructor` property to simulate `Object#hasOwnProperty` in\\n            // other environments.\\n            isProperty = function (property) {\\n              var parent = (this.constructor || constructor).prototype;\\n              return property in this && !(property in parent && this[property] === parent[property]);\\n            };\\n          }\\n          members = null;\\n          return isProperty.call(this, property);\\n        };\\n      }\\n\\n      // Internal: Normalizes the `for...in` iteration algorithm across\\n      // environments. Each enumerated key is yielded to a `callback` function.\\n      forEach = function (object, callback) {\\n        var size = 0, Properties, members, property;\\n\\n        // Tests for bugs in the current environment's `for...in` algorithm. The\\n        // `valueOf` property inherits the non-enumerable flag from\\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\\n        (Properties = function () {\\n          this.valueOf = 0;\\n        }).prototype.valueOf = 0;\\n\\n        // Iterate over a new instance of the `Properties` class.\\n        members = new Properties();\\n        for (property in members) {\\n          // Ignore all properties inherited from `Object.prototype`.\\n          if (isProperty.call(members, property)) {\\n            size++;\\n          }\\n        }\\n        Properties = members = null;\\n\\n        // Normalize the iteration algorithm.\\n        if (!size) {\\n          // A list of non-enumerable properties inherited from `Object.prototype`.\\n          members = [\\\"valueOf\\\", \\\"toString\\\", \\\"toLocaleString\\\", \\\"propertyIsEnumerable\\\", \\\"isPrototypeOf\\\", \\\"hasOwnProperty\\\", \\\"constructor\\\"];\\n          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\\n          // properties.\\n          forEach = function (object, callback) {\\n            var isFunction = getClass.call(object) == functionClass, property, length;\\n            var hasProperty = !isFunction && typeof object.constructor != \\\"function\\\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\\n            for (property in object) {\\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\\n              // certain conditions; IE does not.\\n              if (!(isFunction && property == \\\"prototype\\\") && hasProperty.call(object, property)) {\\n                callback(property);\\n              }\\n            }\\n            // Manually invoke the callback for each non-enumerable property.\\n            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\\n          };\\n        } else if (size == 2) {\\n          // Safari <= 2.0.4 enumerates shadowed properties twice.\\n          forEach = function (object, callback) {\\n            // Create a set of iterated properties.\\n            var members = {}, isFunction = getClass.call(object) == functionClass, property;\\n            for (property in object) {\\n              // Store each property name to prevent double enumeration. The\\n              // `prototype` property of functions is not enumerated due to cross-\\n              // environment inconsistencies.\\n              if (!(isFunction && property == \\\"prototype\\\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\\n                callback(property);\\n              }\\n            }\\n          };\\n        } else {\\n          // No bugs detected; use the standard `for...in` algorithm.\\n          forEach = function (object, callback) {\\n            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\\n            for (property in object) {\\n              if (!(isFunction && property == \\\"prototype\\\") && isProperty.call(object, property) && !(isConstructor = property === \\\"constructor\\\")) {\\n                callback(property);\\n              }\\n            }\\n            // Manually invoke the callback for the `constructor` property due to\\n            // cross-environment inconsistencies.\\n            if (isConstructor || isProperty.call(object, (property = \\\"constructor\\\"))) {\\n              callback(property);\\n            }\\n          };\\n        }\\n        return forEach(object, callback);\\n      };\\n\\n      // Public: Serializes a JavaScript `value` as a JSON string. The optional\\n      // `filter` argument may specify either a function that alters how object and\\n      // array members are serialized, or an array of strings and numbers that\\n      // indicates which properties should be serialized. The optional `width`\\n      // argument may be either a string or number that specifies the indentation\\n      // level of the output.\\n      if (!has(\\\"json-stringify\\\")) {\\n        // Internal: A map of control characters and their escaped equivalents.\\n        var Escapes = {\\n          92: \\\"\\\\\\\\\\\\\\\\\\\",\\n          34: '\\\\\\\\\\\"',\\n          8: \\\"\\\\\\\\b\\\",\\n          12: \\\"\\\\\\\\f\\\",\\n          10: \\\"\\\\\\\\n\\\",\\n          13: \\\"\\\\\\\\r\\\",\\n          9: \\\"\\\\\\\\t\\\"\\n        };\\n\\n        // Internal: Converts `value` into a zero-padded string such that its\\n        // length is at least equal to `width`. The `width` must be <= 6.\\n        var leadingZeroes = \\\"000000\\\";\\n        var toPaddedString = function (width, value) {\\n          // The `|| 0` expression is necessary to work around a bug in\\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \\\"0\\\"`.\\n          return (leadingZeroes + (value || 0)).slice(-width);\\n        };\\n\\n        // Internal: Double-quotes a string `value`, replacing all ASCII control\\n        // characters (characters with code unit values between 0 and 31) with\\n        // their escaped equivalents. This is an implementation of the\\n        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\\n        var unicodePrefix = \\\"\\\\\\\\u00\\\";\\n        var quote = function (value) {\\n          var result = '\\\"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;\\n          var symbols = useCharIndex && (charIndexBuggy ? value.split(\\\"\\\") : value);\\n          for (; index < length; index++) {\\n            var charCode = value.charCodeAt(index);\\n            // If the character is a control character, append its Unicode or\\n            // shorthand escape sequence; otherwise, append the character as-is.\\n            switch (charCode) {\\n              case 8: case 9: case 10: case 12: case 13: case 34: case 92:\\n                result += Escapes[charCode];\\n                break;\\n              default:\\n                if (charCode < 32) {\\n                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));\\n                  break;\\n                }\\n                result += useCharIndex ? symbols[index] : value.charAt(index);\\n            }\\n          }\\n          return result + '\\\"';\\n        };\\n\\n        // Internal: Recursively serializes an object. Implements the\\n        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\\n        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\\n          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\\n          try {\\n            // Necessary for host object support.\\n            value = object[property];\\n          } catch (exception) {}\\n          if (typeof value == \\\"object\\\" && value) {\\n            className = getClass.call(value);\\n            if (className == dateClass && !isProperty.call(value, \\\"toJSON\\\")) {\\n              if (value > -1 / 0 && value < 1 / 0) {\\n                // Dates are serialized according to the `Date#toJSON` method\\n                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\\n                // for the ISO 8601 date time string format.\\n                if (getDay) {\\n                  // Manually compute the year, month, date, hours, minutes,\\n                  // seconds, and milliseconds if the `getUTC*` methods are\\n                  // buggy. Adapted from @Yaffle's `date-shim` project.\\n                  date = floor(value / 864e5);\\n                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\\n                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\\n                  date = 1 + date - getDay(year, month);\\n                  // The `time` value specifies the time within the day (see ES\\n                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\\n                  // to compute `A modulo B`, as the `%` operator does not\\n                  // correspond to the `modulo` operation for negative numbers.\\n                  time = (value % 864e5 + 864e5) % 864e5;\\n                  // The hours, minutes, seconds, and milliseconds are obtained by\\n                  // decomposing the time within the day. See section 15.9.1.10.\\n                  hours = floor(time / 36e5) % 24;\\n                  minutes = floor(time / 6e4) % 60;\\n                  seconds = floor(time / 1e3) % 60;\\n                  milliseconds = time % 1e3;\\n                } else {\\n                  year = value.getUTCFullYear();\\n                  month = value.getUTCMonth();\\n                  date = value.getUTCDate();\\n                  hours = value.getUTCHours();\\n                  minutes = value.getUTCMinutes();\\n                  seconds = value.getUTCSeconds();\\n                  milliseconds = value.getUTCMilliseconds();\\n                }\\n                // Serialize extended years correctly.\\n                value = (year <= 0 || year >= 1e4 ? (year < 0 ? \\\"-\\\" : \\\"+\\\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\\n                  \\\"-\\\" + toPaddedString(2, month + 1) + \\\"-\\\" + toPaddedString(2, date) +\\n                  // Months, dates, hours, minutes, and seconds should have two\\n                  // digits; milliseconds should have three.\\n                  \\\"T\\\" + toPaddedString(2, hours) + \\\":\\\" + toPaddedString(2, minutes) + \\\":\\\" + toPaddedString(2, seconds) +\\n                  // Milliseconds are optional in ES 5.0, but required in 5.1.\\n                  \\\".\\\" + toPaddedString(3, milliseconds) + \\\"Z\\\";\\n              } else {\\n                value = null;\\n              }\\n            } else if (typeof value.toJSON == \\\"function\\\" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, \\\"toJSON\\\"))) {\\n              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\\n              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\\n              // ignores all `toJSON` methods on these objects unless they are\\n              // defined directly on an instance.\\n              value = value.toJSON(property);\\n            }\\n          }\\n          if (callback) {\\n            // If a replacement function was provided, call it to obtain the value\\n            // for serialization.\\n            value = callback.call(object, property, value);\\n          }\\n          if (value === null) {\\n            return \\\"null\\\";\\n          }\\n          className = getClass.call(value);\\n          if (className == booleanClass) {\\n            // Booleans are represented literally.\\n            return \\\"\\\" + value;\\n          } else if (className == numberClass) {\\n            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\\n            // `\\\"null\\\"`.\\n            return value > -1 / 0 && value < 1 / 0 ? \\\"\\\" + value : \\\"null\\\";\\n          } else if (className == stringClass) {\\n            // Strings are double-quoted and escaped.\\n            return quote(\\\"\\\" + value);\\n          }\\n          // Recursively serialize objects and arrays.\\n          if (typeof value == \\\"object\\\") {\\n            // Check for cyclic structures. This is a linear search; performance\\n            // is inversely proportional to the number of unique nested objects.\\n            for (length = stack.length; length--;) {\\n              if (stack[length] === value) {\\n                // Cyclic structures cannot be serialized by `JSON.stringify`.\\n                throw TypeError();\\n              }\\n            }\\n            // Add the object to the stack of traversed objects.\\n            stack.push(value);\\n            results = [];\\n            // Save the current indentation level and indent one additional level.\\n            prefix = indentation;\\n            indentation += whitespace;\\n            if (className == arrayClass) {\\n              // Recursively serialize array elements.\\n              for (index = 0, length = value.length; index < length; index++) {\\n                element = serialize(index, value, callback, properties, whitespace, indentation, stack);\\n                results.push(element === undef ? \\\"null\\\" : element);\\n              }\\n              result = results.length ? (whitespace ? \\\"[\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"]\\\" : (\\\"[\\\" + results.join(\\\",\\\") + \\\"]\\\")) : \\\"[]\\\";\\n            } else {\\n              // Recursively serialize object members. Members are selected from\\n              // either a user-specified list of property names, or the object\\n              // itself.\\n              forEach(properties || value, function (property) {\\n                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\\n                if (element !== undef) {\\n                  // According to ES 5.1 section 15.12.3: \\\"If `gap` {whitespace}\\n                  // is not the empty string, let `member` {quote(property) + \\\":\\\"}\\n                  // be the concatenation of `member` and the `space` character.\\\"\\n                  // The \\\"`space` character\\\" refers to the literal space\\n                  // character, not the `space` {width} argument provided to\\n                  // `JSON.stringify`.\\n                  results.push(quote(property) + \\\":\\\" + (whitespace ? \\\" \\\" : \\\"\\\") + element);\\n                }\\n              });\\n              result = results.length ? (whitespace ? \\\"{\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"}\\\" : (\\\"{\\\" + results.join(\\\",\\\") + \\\"}\\\")) : \\\"{}\\\";\\n            }\\n            // Remove the object from the traversed object stack.\\n            stack.pop();\\n            return result;\\n          }\\n        };\\n\\n        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\\n        exports.stringify = function (source, filter, width) {\\n          var whitespace, callback, properties, className;\\n          if (objectTypes[typeof filter] && filter) {\\n            if ((className = getClass.call(filter)) == functionClass) {\\n              callback = filter;\\n            } else if (className == arrayClass) {\\n              // Convert the property names array into a makeshift set.\\n              properties = {};\\n              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));\\n            }\\n          }\\n          if (width) {\\n            if ((className = getClass.call(width)) == numberClass) {\\n              // Convert the `width` to an integer and create a string containing\\n              // `width` number of space characters.\\n              if ((width -= width % 1) > 0) {\\n                for (whitespace = \\\"\\\", width > 10 && (width = 10); whitespace.length < width; whitespace += \\\" \\\");\\n              }\\n            } else if (className == stringClass) {\\n              whitespace = width.length <= 10 ? width : width.slice(0, 10);\\n            }\\n          }\\n          // Opera <= 7.54u2 discards the values associated with empty string keys\\n          // (`\\\"\\\"`) only if they are used directly within an object member list\\n          // (e.g., `!(\\\"\\\" in { \\\"\\\": 1})`).\\n          return serialize(\\\"\\\", (value = {}, value[\\\"\\\"] = source, value), callback, properties, whitespace, \\\"\\\", []);\\n        };\\n      }\\n\\n      // Public: Parses a JSON source string.\\n      if (!has(\\\"json-parse\\\")) {\\n        var fromCharCode = String.fromCharCode;\\n\\n        // Internal: A map of escaped control characters and their unescaped\\n        // equivalents.\\n        var Unescapes = {\\n          92: \\\"\\\\\\\\\\\",\\n          34: '\\\"',\\n          47: \\\"/\\\",\\n          98: \\\"\\\\b\\\",\\n          116: \\\"\\\\t\\\",\\n          110: \\\"\\\\n\\\",\\n          102: \\\"\\\\f\\\",\\n          114: \\\"\\\\r\\\"\\n        };\\n\\n        // Internal: Stores the parser state.\\n        var Index, Source;\\n\\n        // Internal: Resets the parser state and throws a `SyntaxError`.\\n        var abort = function () {\\n          Index = Source = null;\\n          throw SyntaxError();\\n        };\\n\\n        // Internal: Returns the next token, or `\\\"$\\\"` if the parser has reached\\n        // the end of the source string. A token may be a string, number, `null`\\n        // literal, or Boolean literal.\\n        var lex = function () {\\n          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\\n          while (Index < length) {\\n            charCode = source.charCodeAt(Index);\\n            switch (charCode) {\\n              case 9: case 10: case 13: case 32:\\n                // Skip whitespace tokens, including tabs, carriage returns, line\\n                // feeds, and space characters.\\n                Index++;\\n                break;\\n              case 123: case 125: case 91: case 93: case 58: case 44:\\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\\n                // the current position.\\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\\n                Index++;\\n                return value;\\n              case 34:\\n                // `\\\"` delimits a JSON string; advance to the next character and\\n                // begin parsing the string. String tokens are prefixed with the\\n                // sentinel `@` character to distinguish them from punctuators and\\n                // end-of-string tokens.\\n                for (value = \\\"@\\\", Index++; Index < length;) {\\n                  charCode = source.charCodeAt(Index);\\n                  if (charCode < 32) {\\n                    // Unescaped ASCII control characters (those with a code unit\\n                    // less than the space character) are not permitted.\\n                    abort();\\n                  } else if (charCode == 92) {\\n                    // A reverse solidus (`\\\\`) marks the beginning of an escaped\\n                    // control character (including `\\\"`, `\\\\`, and `/`) or Unicode\\n                    // escape sequence.\\n                    charCode = source.charCodeAt(++Index);\\n                    switch (charCode) {\\n                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\\n                        // Revive escaped control characters.\\n                        value += Unescapes[charCode];\\n                        Index++;\\n                        break;\\n                      case 117:\\n                        // `\\\\u` marks the beginning of a Unicode escape sequence.\\n                        // Advance to the first character and validate the\\n                        // four-digit code point.\\n                        begin = ++Index;\\n                        for (position = Index + 4; Index < position; Index++) {\\n                          charCode = source.charCodeAt(Index);\\n                          // A valid sequence comprises four hexdigits (case-\\n                          // insensitive) that form a single hexadecimal value.\\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\\n                            // Invalid Unicode escape sequence.\\n                            abort();\\n                          }\\n                        }\\n                        // Revive the escaped character.\\n                        value += fromCharCode(\\\"0x\\\" + source.slice(begin, Index));\\n                        break;\\n                      default:\\n                        // Invalid escape sequence.\\n                        abort();\\n                    }\\n                  } else {\\n                    if (charCode == 34) {\\n                      // An unescaped double-quote character marks the end of the\\n                      // string.\\n                      break;\\n                    }\\n                    charCode = source.charCodeAt(Index);\\n                    begin = Index;\\n                    // Optimize for the common case where a string is valid.\\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\\n                      charCode = source.charCodeAt(++Index);\\n                    }\\n                    // Append the string as-is.\\n                    value += source.slice(begin, Index);\\n                  }\\n                }\\n                if (source.charCodeAt(Index) == 34) {\\n                  // Advance to the next character and return the revived string.\\n                  Index++;\\n                  return value;\\n                }\\n                // Unterminated string.\\n                abort();\\n              default:\\n                // Parse numbers and literals.\\n                begin = Index;\\n                // Advance past the negative sign, if one is specified.\\n                if (charCode == 45) {\\n                  isSigned = true;\\n                  charCode = source.charCodeAt(++Index);\\n                }\\n                // Parse an integer or floating-point value.\\n                if (charCode >= 48 && charCode <= 57) {\\n                  // Leading zeroes are interpreted as octal literals.\\n                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\\n                    // Illegal octal literal.\\n                    abort();\\n                  }\\n                  isSigned = false;\\n                  // Parse the integer component.\\n                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\\n                  // Floats cannot contain a leading decimal point; however, this\\n                  // case is already accounted for by the parser.\\n                  if (source.charCodeAt(Index) == 46) {\\n                    position = ++Index;\\n                    // Parse the decimal component.\\n                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\\n                    if (position == Index) {\\n                      // Illegal trailing decimal.\\n                      abort();\\n                    }\\n                    Index = position;\\n                  }\\n                  // Parse exponents. The `e` denoting the exponent is\\n                  // case-insensitive.\\n                  charCode = source.charCodeAt(Index);\\n                  if (charCode == 101 || charCode == 69) {\\n                    charCode = source.charCodeAt(++Index);\\n                    // Skip past the sign following the exponent, if one is\\n                    // specified.\\n                    if (charCode == 43 || charCode == 45) {\\n                      Index++;\\n                    }\\n                    // Parse the exponential component.\\n                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\\n                    if (position == Index) {\\n                      // Illegal empty exponent.\\n                      abort();\\n                    }\\n                    Index = position;\\n                  }\\n                  // Coerce the parsed value to a JavaScript number.\\n                  return +source.slice(begin, Index);\\n                }\\n                // A negative sign may only precede numbers.\\n                if (isSigned) {\\n                  abort();\\n                }\\n                // `true`, `false`, and `null` literals.\\n                if (source.slice(Index, Index + 4) == \\\"true\\\") {\\n                  Index += 4;\\n                  return true;\\n                } else if (source.slice(Index, Index + 5) == \\\"false\\\") {\\n                  Index += 5;\\n                  return false;\\n                } else if (source.slice(Index, Index + 4) == \\\"null\\\") {\\n                  Index += 4;\\n                  return null;\\n                }\\n                // Unrecognized token.\\n                abort();\\n            }\\n          }\\n          // Return the sentinel `$` character if the parser has reached the end\\n          // of the source string.\\n          return \\\"$\\\";\\n        };\\n\\n        // Internal: Parses a JSON `value` token.\\n        var get = function (value) {\\n          var results, hasMembers;\\n          if (value == \\\"$\\\") {\\n            // Unexpected end of input.\\n            abort();\\n          }\\n          if (typeof value == \\\"string\\\") {\\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \\\"@\\\") {\\n              // Remove the sentinel `@` character.\\n              return value.slice(1);\\n            }\\n            // Parse object and array literals.\\n            if (value == \\\"[\\\") {\\n              // Parses a JSON array, returning a new JavaScript array.\\n              results = [];\\n              for (;; hasMembers || (hasMembers = true)) {\\n                value = lex();\\n                // A closing square bracket marks the end of the array literal.\\n                if (value == \\\"]\\\") {\\n                  break;\\n                }\\n                // If the array literal contains elements, the current token\\n                // should be a comma separating the previous element from the\\n                // next.\\n                if (hasMembers) {\\n                  if (value == \\\",\\\") {\\n                    value = lex();\\n                    if (value == \\\"]\\\") {\\n                      // Unexpected trailing `,` in array literal.\\n                      abort();\\n                    }\\n                  } else {\\n                    // A `,` must separate each array element.\\n                    abort();\\n                  }\\n                }\\n                // Elisions and leading commas are not permitted.\\n                if (value == \\\",\\\") {\\n                  abort();\\n                }\\n                results.push(get(value));\\n              }\\n              return results;\\n            } else if (value == \\\"{\\\") {\\n              // Parses a JSON object, returning a new JavaScript object.\\n              results = {};\\n              for (;; hasMembers || (hasMembers = true)) {\\n                value = lex();\\n                // A closing curly brace marks the end of the object literal.\\n                if (value == \\\"}\\\") {\\n                  break;\\n                }\\n                // If the object literal contains members, the current token\\n                // should be a comma separator.\\n                if (hasMembers) {\\n                  if (value == \\\",\\\") {\\n                    value = lex();\\n                    if (value == \\\"}\\\") {\\n                      // Unexpected trailing `,` in object literal.\\n                      abort();\\n                    }\\n                  } else {\\n                    // A `,` must separate each object member.\\n                    abort();\\n                  }\\n                }\\n                // Leading commas are not permitted, object property names must be\\n                // double-quoted strings, and a `:` must separate each property\\n                // name and value.\\n                if (value == \\\",\\\" || typeof value != \\\"string\\\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \\\"@\\\" || lex() != \\\":\\\") {\\n                  abort();\\n                }\\n                results[value.slice(1)] = get(lex());\\n              }\\n              return results;\\n            }\\n            // Unexpected token encountered.\\n            abort();\\n          }\\n          return value;\\n        };\\n\\n        // Internal: Updates a traversed object member.\\n        var update = function (source, property, callback) {\\n          var element = walk(source, property, callback);\\n          if (element === undef) {\\n            delete source[property];\\n          } else {\\n            source[property] = element;\\n          }\\n        };\\n\\n        // Internal: Recursively traverses a parsed JSON object, invoking the\\n        // `callback` function for each value. This is an implementation of the\\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\\n        var walk = function (source, property, callback) {\\n          var value = source[property], length;\\n          if (typeof value == \\\"object\\\" && value) {\\n            // `forEach` can't be used to traverse an array in Opera <= 8.54\\n            // because its `Object#hasOwnProperty` implementation returns `false`\\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\\\"0\\\")`).\\n            if (getClass.call(value) == arrayClass) {\\n              for (length = value.length; length--;) {\\n                update(value, length, callback);\\n              }\\n            } else {\\n              forEach(value, function (property) {\\n                update(value, property, callback);\\n              });\\n            }\\n          }\\n          return callback.call(source, property, value);\\n        };\\n\\n        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\\n        exports.parse = function (source, callback) {\\n          var result, value;\\n          Index = 0;\\n          Source = \\\"\\\" + source;\\n          result = get(lex());\\n          // If a JSON string contains multiple tokens, it is invalid.\\n          if (lex() != \\\"$\\\") {\\n            abort();\\n          }\\n          // Reset the parser state.\\n          Index = Source = null;\\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\\\"\\\"] = result, value), \\\"\\\", callback) : result;\\n        };\\n      }\\n    }\\n\\n    exports[\\\"runInContext\\\"] = runInContext;\\n    return exports;\\n  }\\n\\n  if (freeExports && !isLoader) {\\n    // Export for CommonJS environments.\\n    runInContext(root, freeExports);\\n  } else {\\n    // Export for web browsers and JavaScript engines.\\n    var nativeJSON = root.JSON,\\n        previousJSON = root[\\\"JSON3\\\"],\\n        isRestored = false;\\n\\n    var JSON3 = runInContext(root, (root[\\\"JSON3\\\"] = {\\n      // Public: Restores the original value of the global `JSON` object and\\n      // returns a reference to the `JSON3` object.\\n      \\\"noConflict\\\": function () {\\n        if (!isRestored) {\\n          isRestored = true;\\n          root.JSON = nativeJSON;\\n          root[\\\"JSON3\\\"] = previousJSON;\\n          nativeJSON = previousJSON = null;\\n        }\\n        return JSON3;\\n      }\\n    }));\\n\\n    root.JSON = {\\n      \\\"parse\\\": JSON3.parse,\\n      \\\"stringify\\\": JSON3.stringify\\n    };\\n  }\\n\\n  // Export for asynchronous module loaders.\\n  if (isLoader) {\\n    define(function () {\\n      return JSON3;\\n    });\\n  }\\n}).call(this);\\n\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/json3/lib/json3.js\\n// module id = 11\\n// module chunks = 0\",\"module.exports = function(module) {\\r\\n\\tif(!module.webpackPolyfill) {\\r\\n\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\tmodule.paths = [];\\r\\n\\t\\t// module.parent = undefined by default\\r\\n\\t\\tmodule.children = [];\\r\\n\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t}\\r\\n\\treturn module;\\r\\n}\\r\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// (webpack)/buildin/module.js\\n// module id = 12\\n// module chunks = 0\",\"\\n/**\\n * Expose `Emitter`.\\n */\\n\\nmodule.exports = Emitter;\\n\\n/**\\n * Initialize a new `Emitter`.\\n *\\n * @api public\\n */\\n\\nfunction Emitter(obj) {\\n  if (obj) return mixin(obj);\\n};\\n\\n/**\\n * Mixin the emitter properties.\\n *\\n * @param {Object} obj\\n * @return {Object}\\n * @api private\\n */\\n\\nfunction mixin(obj) {\\n  for (var key in Emitter.prototype) {\\n    obj[key] = Emitter.prototype[key];\\n  }\\n  return obj;\\n}\\n\\n/**\\n * Listen on the given `event` with `fn`.\\n *\\n * @param {String} event\\n * @param {Function} fn\\n * @return {Emitter}\\n * @api public\\n */\\n\\nEmitter.prototype.on =\\nEmitter.prototype.addEventListener = function(event, fn){\\n  this._callbacks = this._callbacks || {};\\n  (this._callbacks[event] = this._callbacks[event] || [])\\n    .push(fn);\\n  return this;\\n};\\n\\n/**\\n * Adds an `event` listener that will be invoked a single\\n * time then automatically removed.\\n *\\n * @param {String} event\\n * @param {Function} fn\\n * @return {Emitter}\\n * @api public\\n */\\n\\nEmitter.prototype.once = function(event, fn){\\n  var self = this;\\n  this._callbacks = this._callbacks || {};\\n\\n  function on() {\\n    self.off(event, on);\\n    fn.apply(this, arguments);\\n  }\\n\\n  on.fn = fn;\\n  this.on(event, on);\\n  return this;\\n};\\n\\n/**\\n * Remove the given callback for `event` or all\\n * registered callbacks.\\n *\\n * @param {String} event\\n * @param {Function} fn\\n * @return {Emitter}\\n * @api public\\n */\\n\\nEmitter.prototype.off =\\nEmitter.prototype.removeListener =\\nEmitter.prototype.removeAllListeners =\\nEmitter.prototype.removeEventListener = function(event, fn){\\n  this._callbacks = this._callbacks || {};\\n\\n  // all\\n  if (0 == arguments.length) {\\n    this._callbacks = {};\\n    return this;\\n  }\\n\\n  // specific event\\n  var callbacks = this._callbacks[event];\\n  if (!callbacks) return this;\\n\\n  // remove all handlers\\n  if (1 == arguments.length) {\\n    delete this._callbacks[event];\\n    return this;\\n  }\\n\\n  // remove specific handler\\n  var cb;\\n  for (var i = 0; i < callbacks.length; i++) {\\n    cb = callbacks[i];\\n    if (cb === fn || cb.fn === fn) {\\n      callbacks.splice(i, 1);\\n      break;\\n    }\\n  }\\n  return this;\\n};\\n\\n/**\\n * Emit `event` with the given args.\\n *\\n * @param {String} event\\n * @param {Mixed} ...\\n * @return {Emitter}\\n */\\n\\nEmitter.prototype.emit = function(event){\\n  this._callbacks = this._callbacks || {};\\n  var args = [].slice.call(arguments, 1)\\n    , callbacks = this._callbacks[event];\\n\\n  if (callbacks) {\\n    callbacks = callbacks.slice(0);\\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\\n      callbacks[i].apply(this, args);\\n    }\\n  }\\n\\n  return this;\\n};\\n\\n/**\\n * Return array of callbacks for `event`.\\n *\\n * @param {String} event\\n * @return {Array}\\n * @api public\\n */\\n\\nEmitter.prototype.listeners = function(event){\\n  this._callbacks = this._callbacks || {};\\n  return this._callbacks[event] || [];\\n};\\n\\n/**\\n * Check if this emitter has `event` handlers.\\n *\\n * @param {String} event\\n * @return {Boolean}\\n * @api public\\n */\\n\\nEmitter.prototype.hasListeners = function(event){\\n  return !! this.listeners(event).length;\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/socket.io-parser/~/component-emitter/index.js\\n// module id = 13\\n// module chunks = 0\",\"/*global Blob,File*/\\n\\n/**\\n * Module requirements\\n */\\n\\nvar isArray = require('isarray');\\nvar isBuf = require('./is-buffer');\\n\\n/**\\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\\n * Anything with blobs or files should be fed through removeBlobs before coming\\n * here.\\n *\\n * @param {Object} packet - socket.io event packet\\n * @return {Object} with deconstructed packet and list of buffers\\n * @api public\\n */\\n\\nexports.deconstructPacket = function(packet){\\n  var buffers = [];\\n  var packetData = packet.data;\\n\\n  function _deconstructPacket(data) {\\n    if (!data) return data;\\n\\n    if (isBuf(data)) {\\n      var placeholder = { _placeholder: true, num: buffers.length };\\n      buffers.push(data);\\n      return placeholder;\\n    } else if (isArray(data)) {\\n      var newData = new Array(data.length);\\n      for (var i = 0; i < data.length; i++) {\\n        newData[i] = _deconstructPacket(data[i]);\\n      }\\n      return newData;\\n    } else if ('object' == typeof data && !(data instanceof Date)) {\\n      var newData = {};\\n      for (var key in data) {\\n        newData[key] = _deconstructPacket(data[key]);\\n      }\\n      return newData;\\n    }\\n    return data;\\n  }\\n\\n  var pack = packet;\\n  pack.data = _deconstructPacket(packetData);\\n  pack.attachments = buffers.length; // number of binary 'attachments'\\n  return {packet: pack, buffers: buffers};\\n};\\n\\n/**\\n * Reconstructs a binary packet from its placeholder packet and buffers\\n *\\n * @param {Object} packet - event packet with placeholders\\n * @param {Array} buffers - binary buffers to put in placeholder positions\\n * @return {Object} reconstructed packet\\n * @api public\\n */\\n\\nexports.reconstructPacket = function(packet, buffers) {\\n  var curPlaceHolder = 0;\\n\\n  function _reconstructPacket(data) {\\n    if (data && data._placeholder) {\\n      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\\n      return buf;\\n    } else if (isArray(data)) {\\n      for (var i = 0; i < data.length; i++) {\\n        data[i] = _reconstructPacket(data[i]);\\n      }\\n      return data;\\n    } else if (data && 'object' == typeof data) {\\n      for (var key in data) {\\n        data[key] = _reconstructPacket(data[key]);\\n      }\\n      return data;\\n    }\\n    return data;\\n  }\\n\\n  packet.data = _reconstructPacket(packet.data);\\n  packet.attachments = undefined; // no longer useful\\n  return packet;\\n};\\n\\n/**\\n * Asynchronously removes Blobs or Files from data via\\n * FileReader's readAsArrayBuffer method. Used before encoding\\n * data as msgpack. Calls callback with the blobless data.\\n *\\n * @param {Object} data\\n * @param {Function} callback\\n * @api private\\n */\\n\\nexports.removeBlobs = function(data, callback) {\\n  function _removeBlobs(obj, curKey, containingObject) {\\n    if (!obj) return obj;\\n\\n    // convert any blob\\n    if ((global.Blob && obj instanceof Blob) ||\\n        (global.File && obj instanceof File)) {\\n      pendingBlobs++;\\n\\n      // async filereader\\n      var fileReader = new FileReader();\\n      fileReader.onload = function() { // this.result == arraybuffer\\n        if (containingObject) {\\n          containingObject[curKey] = this.result;\\n        }\\n        else {\\n          bloblessData = this.result;\\n        }\\n\\n        // if nothing pending its callback time\\n        if(! --pendingBlobs) {\\n          callback(bloblessData);\\n        }\\n      };\\n\\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\\n    } else if (isArray(obj)) { // handle array\\n      for (var i = 0; i < obj.length; i++) {\\n        _removeBlobs(obj[i], i, obj);\\n      }\\n    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object\\n      for (var key in obj) {\\n        _removeBlobs(obj[key], key, obj);\\n      }\\n    }\\n  }\\n\\n  var pendingBlobs = 0;\\n  var bloblessData = data;\\n  _removeBlobs(bloblessData);\\n  if (!pendingBlobs) {\\n    callback(bloblessData);\\n  }\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/socket.io-parser/binary.js\\n// module id = 14\\n// module chunks = 0\",\"module.exports = Array.isArray || function (arr) {\\n  return Object.prototype.toString.call(arr) == '[object Array]';\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/isarray/index.js\\n// module id = 15\\n// module chunks = 0\",\"\\nmodule.exports = isBuf;\\n\\n/**\\n * Returns true if obj is a buffer or an arraybuffer.\\n *\\n * @api private\\n */\\n\\nfunction isBuf(obj) {\\n  return (global.Buffer && global.Buffer.isBuffer(obj)) ||\\n         (global.ArrayBuffer && obj instanceof ArrayBuffer);\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/socket.io-parser/is-buffer.js\\n// module id = 16\\n// module chunks = 0\",\"\\n/**\\n * Module dependencies.\\n */\\n\\nvar eio = require('engine.io-client');\\nvar Socket = require('./socket');\\nvar Emitter = require('component-emitter');\\nvar parser = require('socket.io-parser');\\nvar on = require('./on');\\nvar bind = require('component-bind');\\nvar debug = require('debug')('socket.io-client:manager');\\nvar indexOf = require('indexof');\\nvar Backoff = require('backo2');\\n\\n/**\\n * IE6+ hasOwnProperty\\n */\\n\\nvar has = Object.prototype.hasOwnProperty;\\n\\n/**\\n * Module exports\\n */\\n\\nmodule.exports = Manager;\\n\\n/**\\n * `Manager` constructor.\\n *\\n * @param {String} engine instance or engine uri/opts\\n * @param {Object} options\\n * @api public\\n */\\n\\nfunction Manager (uri, opts) {\\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\\n  if (uri && ('object' === typeof uri)) {\\n    opts = uri;\\n    uri = undefined;\\n  }\\n  opts = opts || {};\\n\\n  opts.path = opts.path || '/socket.io';\\n  this.nsps = {};\\n  this.subs = [];\\n  this.opts = opts;\\n  this.reconnection(opts.reconnection !== false);\\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\\n  this.backoff = new Backoff({\\n    min: this.reconnectionDelay(),\\n    max: this.reconnectionDelayMax(),\\n    jitter: this.randomizationFactor()\\n  });\\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\\n  this.readyState = 'closed';\\n  this.uri = uri;\\n  this.connecting = [];\\n  this.lastPing = null;\\n  this.encoding = false;\\n  this.packetBuffer = [];\\n  this.encoder = new parser.Encoder();\\n  this.decoder = new parser.Decoder();\\n  this.autoConnect = opts.autoConnect !== false;\\n  if (this.autoConnect) this.open();\\n}\\n\\n/**\\n * Propagate given event to sockets and emit on `this`\\n *\\n * @api private\\n */\\n\\nManager.prototype.emitAll = function () {\\n  this.emit.apply(this, arguments);\\n  for (var nsp in this.nsps) {\\n    if (has.call(this.nsps, nsp)) {\\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\\n    }\\n  }\\n};\\n\\n/**\\n * Update `socket.id` of all sockets\\n *\\n * @api private\\n */\\n\\nManager.prototype.updateSocketIds = function () {\\n  for (var nsp in this.nsps) {\\n    if (has.call(this.nsps, nsp)) {\\n      this.nsps[nsp].id = this.engine.id;\\n    }\\n  }\\n};\\n\\n/**\\n * Mix in `Emitter`.\\n */\\n\\nEmitter(Manager.prototype);\\n\\n/**\\n * Sets the `reconnection` config.\\n *\\n * @param {Boolean} true/false if it should automatically reconnect\\n * @return {Manager} self or value\\n * @api public\\n */\\n\\nManager.prototype.reconnection = function (v) {\\n  if (!arguments.length) return this._reconnection;\\n  this._reconnection = !!v;\\n  return this;\\n};\\n\\n/**\\n * Sets the reconnection attempts config.\\n *\\n * @param {Number} max reconnection attempts before giving up\\n * @return {Manager} self or value\\n * @api public\\n */\\n\\nManager.prototype.reconnectionAttempts = function (v) {\\n  if (!arguments.length) return this._reconnectionAttempts;\\n  this._reconnectionAttempts = v;\\n  return this;\\n};\\n\\n/**\\n * Sets the delay between reconnections.\\n *\\n * @param {Number} delay\\n * @return {Manager} self or value\\n * @api public\\n */\\n\\nManager.prototype.reconnectionDelay = function (v) {\\n  if (!arguments.length) return this._reconnectionDelay;\\n  this._reconnectionDelay = v;\\n  this.backoff && this.backoff.setMin(v);\\n  return this;\\n};\\n\\nManager.prototype.randomizationFactor = function (v) {\\n  if (!arguments.length) return this._randomizationFactor;\\n  this._randomizationFactor = v;\\n  this.backoff && this.backoff.setJitter(v);\\n  return this;\\n};\\n\\n/**\\n * Sets the maximum delay between reconnections.\\n *\\n * @param {Number} delay\\n * @return {Manager} self or value\\n * @api public\\n */\\n\\nManager.prototype.reconnectionDelayMax = function (v) {\\n  if (!arguments.length) return this._reconnectionDelayMax;\\n  this._reconnectionDelayMax = v;\\n  this.backoff && this.backoff.setMax(v);\\n  return this;\\n};\\n\\n/**\\n * Sets the connection timeout. `false` to disable\\n *\\n * @return {Manager} self or value\\n * @api public\\n */\\n\\nManager.prototype.timeout = function (v) {\\n  if (!arguments.length) return this._timeout;\\n  this._timeout = v;\\n  return this;\\n};\\n\\n/**\\n * Starts trying to reconnect if reconnection is enabled and we have not\\n * started reconnecting yet\\n *\\n * @api private\\n */\\n\\nManager.prototype.maybeReconnectOnOpen = function () {\\n  // Only try to reconnect if it's the first time we're connecting\\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\\n    // keeps reconnection from firing twice for the same reconnection loop\\n    this.reconnect();\\n  }\\n};\\n\\n/**\\n * Sets the current transport `socket`.\\n *\\n * @param {Function} optional, callback\\n * @return {Manager} self\\n * @api public\\n */\\n\\nManager.prototype.open =\\nManager.prototype.connect = function (fn, opts) {\\n  debug('readyState %s', this.readyState);\\n  if (~this.readyState.indexOf('open')) return this;\\n\\n  debug('opening %s', this.uri);\\n  this.engine = eio(this.uri, this.opts);\\n  var socket = this.engine;\\n  var self = this;\\n  this.readyState = 'opening';\\n  this.skipReconnect = false;\\n\\n  // emit `open`\\n  var openSub = on(socket, 'open', function () {\\n    self.onopen();\\n    fn && fn();\\n  });\\n\\n  // emit `connect_error`\\n  var errorSub = on(socket, 'error', function (data) {\\n    debug('connect_error');\\n    self.cleanup();\\n    self.readyState = 'closed';\\n    self.emitAll('connect_error', data);\\n    if (fn) {\\n      var err = new Error('Connection error');\\n      err.data = data;\\n      fn(err);\\n    } else {\\n      // Only do this if there is no fn to handle the error\\n      self.maybeReconnectOnOpen();\\n    }\\n  });\\n\\n  // emit `connect_timeout`\\n  if (false !== this._timeout) {\\n    var timeout = this._timeout;\\n    debug('connect attempt will timeout after %d', timeout);\\n\\n    // set timer\\n    var timer = setTimeout(function () {\\n      debug('connect attempt timed out after %d', timeout);\\n      openSub.destroy();\\n      socket.close();\\n      socket.emit('error', 'timeout');\\n      self.emitAll('connect_timeout', timeout);\\n    }, timeout);\\n\\n    this.subs.push({\\n      destroy: function () {\\n        clearTimeout(timer);\\n      }\\n    });\\n  }\\n\\n  this.subs.push(openSub);\\n  this.subs.push(errorSub);\\n\\n  return this;\\n};\\n\\n/**\\n * Called upon transport open.\\n *\\n * @api private\\n */\\n\\nManager.prototype.onopen = function () {\\n  debug('open');\\n\\n  // clear old subs\\n  this.cleanup();\\n\\n  // mark as open\\n  this.readyState = 'open';\\n  this.emit('open');\\n\\n  // add new subs\\n  var socket = this.engine;\\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\\n};\\n\\n/**\\n * Called upon a ping.\\n *\\n * @api private\\n */\\n\\nManager.prototype.onping = function () {\\n  this.lastPing = new Date();\\n  this.emitAll('ping');\\n};\\n\\n/**\\n * Called upon a packet.\\n *\\n * @api private\\n */\\n\\nManager.prototype.onpong = function () {\\n  this.emitAll('pong', new Date() - this.lastPing);\\n};\\n\\n/**\\n * Called with data.\\n *\\n * @api private\\n */\\n\\nManager.prototype.ondata = function (data) {\\n  this.decoder.add(data);\\n};\\n\\n/**\\n * Called when parser fully decodes a packet.\\n *\\n * @api private\\n */\\n\\nManager.prototype.ondecoded = function (packet) {\\n  this.emit('packet', packet);\\n};\\n\\n/**\\n * Called upon socket error.\\n *\\n * @api private\\n */\\n\\nManager.prototype.onerror = function (err) {\\n  debug('error', err);\\n  this.emitAll('error', err);\\n};\\n\\n/**\\n * Creates a new socket for the given `nsp`.\\n *\\n * @return {Socket}\\n * @api public\\n */\\n\\nManager.prototype.socket = function (nsp, opts) {\\n  var socket = this.nsps[nsp];\\n  if (!socket) {\\n    socket = new Socket(this, nsp, opts);\\n    this.nsps[nsp] = socket;\\n    var self = this;\\n    socket.on('connecting', onConnecting);\\n    socket.on('connect', function () {\\n      socket.id = self.engine.id;\\n    });\\n\\n    if (this.autoConnect) {\\n      // manually call here since connecting evnet is fired before listening\\n      onConnecting();\\n    }\\n  }\\n\\n  function onConnecting () {\\n    if (!~indexOf(self.connecting, socket)) {\\n      self.connecting.push(socket);\\n    }\\n  }\\n\\n  return socket;\\n};\\n\\n/**\\n * Called upon a socket close.\\n *\\n * @param {Socket} socket\\n */\\n\\nManager.prototype.destroy = function (socket) {\\n  var index = indexOf(this.connecting, socket);\\n  if (~index) this.connecting.splice(index, 1);\\n  if (this.connecting.length) return;\\n\\n  this.close();\\n};\\n\\n/**\\n * Writes a packet.\\n *\\n * @param {Object} packet\\n * @api private\\n */\\n\\nManager.prototype.packet = function (packet) {\\n  debug('writing packet %j', packet);\\n  var self = this;\\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\\n\\n  if (!self.encoding) {\\n    // encode, then write to engine with result\\n    self.encoding = true;\\n    this.encoder.encode(packet, function (encodedPackets) {\\n      for (var i = 0; i < encodedPackets.length; i++) {\\n        self.engine.write(encodedPackets[i], packet.options);\\n      }\\n      self.encoding = false;\\n      self.processPacketQueue();\\n    });\\n  } else { // add packet to the queue\\n    self.packetBuffer.push(packet);\\n  }\\n};\\n\\n/**\\n * If packet buffer is non-empty, begins encoding the\\n * next packet in line.\\n *\\n * @api private\\n */\\n\\nManager.prototype.processPacketQueue = function () {\\n  if (this.packetBuffer.length > 0 && !this.encoding) {\\n    var pack = this.packetBuffer.shift();\\n    this.packet(pack);\\n  }\\n};\\n\\n/**\\n * Clean up transport subscriptions and packet buffer.\\n *\\n * @api private\\n */\\n\\nManager.prototype.cleanup = function () {\\n  debug('cleanup');\\n\\n  var subsLength = this.subs.length;\\n  for (var i = 0; i < subsLength; i++) {\\n    var sub = this.subs.shift();\\n    sub.destroy();\\n  }\\n\\n  this.packetBuffer = [];\\n  this.encoding = false;\\n  this.lastPing = null;\\n\\n  this.decoder.destroy();\\n};\\n\\n/**\\n * Close the current socket.\\n *\\n * @api private\\n */\\n\\nManager.prototype.close =\\nManager.prototype.disconnect = function () {\\n  debug('disconnect');\\n  this.skipReconnect = true;\\n  this.reconnecting = false;\\n  if ('opening' === this.readyState) {\\n    // `onclose` will not fire because\\n    // an open event never happened\\n    this.cleanup();\\n  }\\n  this.backoff.reset();\\n  this.readyState = 'closed';\\n  if (this.engine) this.engine.close();\\n};\\n\\n/**\\n * Called upon engine close.\\n *\\n * @api private\\n */\\n\\nManager.prototype.onclose = function (reason) {\\n  debug('onclose');\\n\\n  this.cleanup();\\n  this.backoff.reset();\\n  this.readyState = 'closed';\\n  this.emit('close', reason);\\n\\n  if (this._reconnection && !this.skipReconnect) {\\n    this.reconnect();\\n  }\\n};\\n\\n/**\\n * Attempt a reconnection.\\n *\\n * @api private\\n */\\n\\nManager.prototype.reconnect = function () {\\n  if (this.reconnecting || this.skipReconnect) return this;\\n\\n  var self = this;\\n\\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\\n    debug('reconnect failed');\\n    this.backoff.reset();\\n    this.emitAll('reconnect_failed');\\n    this.reconnecting = false;\\n  } else {\\n    var delay = this.backoff.duration();\\n    debug('will wait %dms before reconnect attempt', delay);\\n\\n    this.reconnecting = true;\\n    var timer = setTimeout(function () {\\n      if (self.skipReconnect) return;\\n\\n      debug('attempting reconnect');\\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\\n      self.emitAll('reconnecting', self.backoff.attempts);\\n\\n      // check again for the case socket closed in above events\\n      if (self.skipReconnect) return;\\n\\n      self.open(function (err) {\\n        if (err) {\\n          debug('reconnect attempt error');\\n          self.reconnecting = false;\\n          self.reconnect();\\n          self.emitAll('reconnect_error', err.data);\\n        } else {\\n          debug('reconnect success');\\n          self.onreconnect();\\n        }\\n      });\\n    }, delay);\\n\\n    this.subs.push({\\n      destroy: function () {\\n        clearTimeout(timer);\\n      }\\n    });\\n  }\\n};\\n\\n/**\\n * Called upon successful reconnect.\\n *\\n * @api private\\n */\\n\\nManager.prototype.onreconnect = function () {\\n  var attempt = this.backoff.attempts;\\n  this.reconnecting = false;\\n  this.backoff.reset();\\n  this.updateSocketIds();\\n  this.emitAll('reconnect', attempt);\\n};\\n\\n\\n\\n// WEBPACK FOOTER //\\n// lib/manager.js\",\"\\nmodule.exports = require('./lib/index');\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/index.js\\n// module id = 18\\n// module chunks = 0\",\"\\nmodule.exports = require('./socket');\\n\\n/**\\n * Exports parser\\n *\\n * @api public\\n *\\n */\\nmodule.exports.parser = require('engine.io-parser');\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/index.js\\n// module id = 19\\n// module chunks = 0\",\"/**\\n * Module dependencies.\\n */\\n\\nvar transports = require('./transports/index');\\nvar Emitter = require('component-emitter');\\nvar debug = require('debug')('engine.io-client:socket');\\nvar index = require('indexof');\\nvar parser = require('engine.io-parser');\\nvar parseuri = require('parseuri');\\nvar parsejson = require('parsejson');\\nvar parseqs = require('parseqs');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = Socket;\\n\\n/**\\n * Socket constructor.\\n *\\n * @param {String|Object} uri or options\\n * @param {Object} options\\n * @api public\\n */\\n\\nfunction Socket (uri, opts) {\\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\\n\\n  opts = opts || {};\\n\\n  if (uri && 'object' === typeof uri) {\\n    opts = uri;\\n    uri = null;\\n  }\\n\\n  if (uri) {\\n    uri = parseuri(uri);\\n    opts.hostname = uri.host;\\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\\n    opts.port = uri.port;\\n    if (uri.query) opts.query = uri.query;\\n  } else if (opts.host) {\\n    opts.hostname = parseuri(opts.host).host;\\n  }\\n\\n  this.secure = null != opts.secure ? opts.secure\\n    : (global.location && 'https:' === location.protocol);\\n\\n  if (opts.hostname && !opts.port) {\\n    // if no port is specified manually, use the protocol default\\n    opts.port = this.secure ? '443' : '80';\\n  }\\n\\n  this.agent = opts.agent || false;\\n  this.hostname = opts.hostname ||\\n    (global.location ? location.hostname : 'localhost');\\n  this.port = opts.port || (global.location && location.port\\n      ? location.port\\n      : (this.secure ? 443 : 80));\\n  this.query = opts.query || {};\\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\\n  this.upgrade = false !== opts.upgrade;\\n  this.path = (opts.path || '/engine.io').replace(/\\\\/$/, '') + '/';\\n  this.forceJSONP = !!opts.forceJSONP;\\n  this.jsonp = false !== opts.jsonp;\\n  this.forceBase64 = !!opts.forceBase64;\\n  this.enablesXDR = !!opts.enablesXDR;\\n  this.timestampParam = opts.timestampParam || 't';\\n  this.timestampRequests = opts.timestampRequests;\\n  this.transports = opts.transports || ['polling', 'websocket'];\\n  this.readyState = '';\\n  this.writeBuffer = [];\\n  this.prevBufferLen = 0;\\n  this.policyPort = opts.policyPort || 843;\\n  this.rememberUpgrade = opts.rememberUpgrade || false;\\n  this.binaryType = null;\\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\\n\\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\\n    this.perMessageDeflate.threshold = 1024;\\n  }\\n\\n  // SSL options for Node.js client\\n  this.pfx = opts.pfx || null;\\n  this.key = opts.key || null;\\n  this.passphrase = opts.passphrase || null;\\n  this.cert = opts.cert || null;\\n  this.ca = opts.ca || null;\\n  this.ciphers = opts.ciphers || null;\\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\\n  this.forceNode = !!opts.forceNode;\\n\\n  // other options for Node.js client\\n  var freeGlobal = typeof global === 'object' && global;\\n  if (freeGlobal.global === freeGlobal) {\\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\\n      this.extraHeaders = opts.extraHeaders;\\n    }\\n\\n    if (opts.localAddress) {\\n      this.localAddress = opts.localAddress;\\n    }\\n  }\\n\\n  // set on handshake\\n  this.id = null;\\n  this.upgrades = null;\\n  this.pingInterval = null;\\n  this.pingTimeout = null;\\n\\n  // set on heartbeat\\n  this.pingIntervalTimer = null;\\n  this.pingTimeoutTimer = null;\\n\\n  this.open();\\n}\\n\\nSocket.priorWebsocketSuccess = false;\\n\\n/**\\n * Mix in `Emitter`.\\n */\\n\\nEmitter(Socket.prototype);\\n\\n/**\\n * Protocol version.\\n *\\n * @api public\\n */\\n\\nSocket.protocol = parser.protocol; // this is an int\\n\\n/**\\n * Expose deps for legacy compatibility\\n * and standalone browser access.\\n */\\n\\nSocket.Socket = Socket;\\nSocket.Transport = require('./transport');\\nSocket.transports = require('./transports/index');\\nSocket.parser = require('engine.io-parser');\\n\\n/**\\n * Creates transport of the given type.\\n *\\n * @param {String} transport name\\n * @return {Transport}\\n * @api private\\n */\\n\\nSocket.prototype.createTransport = function (name) {\\n  debug('creating transport \\\"%s\\\"', name);\\n  var query = clone(this.query);\\n\\n  // append engine.io protocol identifier\\n  query.EIO = parser.protocol;\\n\\n  // transport name\\n  query.transport = name;\\n\\n  // session id if we already have one\\n  if (this.id) query.sid = this.id;\\n\\n  var transport = new transports[name]({\\n    agent: this.agent,\\n    hostname: this.hostname,\\n    port: this.port,\\n    secure: this.secure,\\n    path: this.path,\\n    query: query,\\n    forceJSONP: this.forceJSONP,\\n    jsonp: this.jsonp,\\n    forceBase64: this.forceBase64,\\n    enablesXDR: this.enablesXDR,\\n    timestampRequests: this.timestampRequests,\\n    timestampParam: this.timestampParam,\\n    policyPort: this.policyPort,\\n    socket: this,\\n    pfx: this.pfx,\\n    key: this.key,\\n    passphrase: this.passphrase,\\n    cert: this.cert,\\n    ca: this.ca,\\n    ciphers: this.ciphers,\\n    rejectUnauthorized: this.rejectUnauthorized,\\n    perMessageDeflate: this.perMessageDeflate,\\n    extraHeaders: this.extraHeaders,\\n    forceNode: this.forceNode,\\n    localAddress: this.localAddress\\n  });\\n\\n  return transport;\\n};\\n\\nfunction clone (obj) {\\n  var o = {};\\n  for (var i in obj) {\\n    if (obj.hasOwnProperty(i)) {\\n      o[i] = obj[i];\\n    }\\n  }\\n  return o;\\n}\\n\\n/**\\n * Initializes transport to use and starts probe.\\n *\\n * @api private\\n */\\nSocket.prototype.open = function () {\\n  var transport;\\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\\n    transport = 'websocket';\\n  } else if (0 === this.transports.length) {\\n    // Emit error on next tick so it can be listened to\\n    var self = this;\\n    setTimeout(function () {\\n      self.emit('error', 'No transports available');\\n    }, 0);\\n    return;\\n  } else {\\n    transport = this.transports[0];\\n  }\\n  this.readyState = 'opening';\\n\\n  // Retry with the next transport if the transport is disabled (jsonp: false)\\n  try {\\n    transport = this.createTransport(transport);\\n  } catch (e) {\\n    this.transports.shift();\\n    this.open();\\n    return;\\n  }\\n\\n  transport.open();\\n  this.setTransport(transport);\\n};\\n\\n/**\\n * Sets the current transport. Disables the existing one (if any).\\n *\\n * @api private\\n */\\n\\nSocket.prototype.setTransport = function (transport) {\\n  debug('setting transport %s', transport.name);\\n  var self = this;\\n\\n  if (this.transport) {\\n    debug('clearing existing transport %s', this.transport.name);\\n    this.transport.removeAllListeners();\\n  }\\n\\n  // set up transport\\n  this.transport = transport;\\n\\n  // set up transport listeners\\n  transport\\n  .on('drain', function () {\\n    self.onDrain();\\n  })\\n  .on('packet', function (packet) {\\n    self.onPacket(packet);\\n  })\\n  .on('error', function (e) {\\n    self.onError(e);\\n  })\\n  .on('close', function () {\\n    self.onClose('transport close');\\n  });\\n};\\n\\n/**\\n * Probes a transport.\\n *\\n * @param {String} transport name\\n * @api private\\n */\\n\\nSocket.prototype.probe = function (name) {\\n  debug('probing transport \\\"%s\\\"', name);\\n  var transport = this.createTransport(name, { probe: 1 });\\n  var failed = false;\\n  var self = this;\\n\\n  Socket.priorWebsocketSuccess = false;\\n\\n  function onTransportOpen () {\\n    if (self.onlyBinaryUpgrades) {\\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\\n      failed = failed || upgradeLosesBinary;\\n    }\\n    if (failed) return;\\n\\n    debug('probe transport \\\"%s\\\" opened', name);\\n    transport.send([{ type: 'ping', data: 'probe' }]);\\n    transport.once('packet', function (msg) {\\n      if (failed) return;\\n      if ('pong' === msg.type && 'probe' === msg.data) {\\n        debug('probe transport \\\"%s\\\" pong', name);\\n        self.upgrading = true;\\n        self.emit('upgrading', transport);\\n        if (!transport) return;\\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\\n\\n        debug('pausing current transport \\\"%s\\\"', self.transport.name);\\n        self.transport.pause(function () {\\n          if (failed) return;\\n          if ('closed' === self.readyState) return;\\n          debug('changing transport and sending upgrade packet');\\n\\n          cleanup();\\n\\n          self.setTransport(transport);\\n          transport.send([{ type: 'upgrade' }]);\\n          self.emit('upgrade', transport);\\n          transport = null;\\n          self.upgrading = false;\\n          self.flush();\\n        });\\n      } else {\\n        debug('probe transport \\\"%s\\\" failed', name);\\n        var err = new Error('probe error');\\n        err.transport = transport.name;\\n        self.emit('upgradeError', err);\\n      }\\n    });\\n  }\\n\\n  function freezeTransport () {\\n    if (failed) return;\\n\\n    // Any callback called by transport should be ignored since now\\n    failed = true;\\n\\n    cleanup();\\n\\n    transport.close();\\n    transport = null;\\n  }\\n\\n  // Handle any error that happens while probing\\n  function onerror (err) {\\n    var error = new Error('probe error: ' + err);\\n    error.transport = transport.name;\\n\\n    freezeTransport();\\n\\n    debug('probe transport \\\"%s\\\" failed because of error: %s', name, err);\\n\\n    self.emit('upgradeError', error);\\n  }\\n\\n  function onTransportClose () {\\n    onerror('transport closed');\\n  }\\n\\n  // When the socket is closed while we're probing\\n  function onclose () {\\n    onerror('socket closed');\\n  }\\n\\n  // When the socket is upgraded while we're probing\\n  function onupgrade (to) {\\n    if (transport && to.name !== transport.name) {\\n      debug('\\\"%s\\\" works - aborting \\\"%s\\\"', to.name, transport.name);\\n      freezeTransport();\\n    }\\n  }\\n\\n  // Remove all listeners on the transport and on self\\n  function cleanup () {\\n    transport.removeListener('open', onTransportOpen);\\n    transport.removeListener('error', onerror);\\n    transport.removeListener('close', onTransportClose);\\n    self.removeListener('close', onclose);\\n    self.removeListener('upgrading', onupgrade);\\n  }\\n\\n  transport.once('open', onTransportOpen);\\n  transport.once('error', onerror);\\n  transport.once('close', onTransportClose);\\n\\n  this.once('close', onclose);\\n  this.once('upgrading', onupgrade);\\n\\n  transport.open();\\n};\\n\\n/**\\n * Called when connection is deemed open.\\n *\\n * @api public\\n */\\n\\nSocket.prototype.onOpen = function () {\\n  debug('socket open');\\n  this.readyState = 'open';\\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\\n  this.emit('open');\\n  this.flush();\\n\\n  // we check for `readyState` in case an `open`\\n  // listener already closed the socket\\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\\n    debug('starting upgrade probes');\\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\\n      this.probe(this.upgrades[i]);\\n    }\\n  }\\n};\\n\\n/**\\n * Handles a packet.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.onPacket = function (packet) {\\n  if ('opening' === this.readyState || 'open' === this.readyState ||\\n      'closing' === this.readyState) {\\n    debug('socket receive: type \\\"%s\\\", data \\\"%s\\\"', packet.type, packet.data);\\n\\n    this.emit('packet', packet);\\n\\n    // Socket is live - any packet counts\\n    this.emit('heartbeat');\\n\\n    switch (packet.type) {\\n      case 'open':\\n        this.onHandshake(parsejson(packet.data));\\n        break;\\n\\n      case 'pong':\\n        this.setPing();\\n        this.emit('pong');\\n        break;\\n\\n      case 'error':\\n        var err = new Error('server error');\\n        err.code = packet.data;\\n        this.onError(err);\\n        break;\\n\\n      case 'message':\\n        this.emit('data', packet.data);\\n        this.emit('message', packet.data);\\n        break;\\n    }\\n  } else {\\n    debug('packet received with socket readyState \\\"%s\\\"', this.readyState);\\n  }\\n};\\n\\n/**\\n * Called upon handshake completion.\\n *\\n * @param {Object} handshake obj\\n * @api private\\n */\\n\\nSocket.prototype.onHandshake = function (data) {\\n  this.emit('handshake', data);\\n  this.id = data.sid;\\n  this.transport.query.sid = data.sid;\\n  this.upgrades = this.filterUpgrades(data.upgrades);\\n  this.pingInterval = data.pingInterval;\\n  this.pingTimeout = data.pingTimeout;\\n  this.onOpen();\\n  // In case open handler closes socket\\n  if ('closed' === this.readyState) return;\\n  this.setPing();\\n\\n  // Prolong liveness of socket on heartbeat\\n  this.removeListener('heartbeat', this.onHeartbeat);\\n  this.on('heartbeat', this.onHeartbeat);\\n};\\n\\n/**\\n * Resets ping timeout.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.onHeartbeat = function (timeout) {\\n  clearTimeout(this.pingTimeoutTimer);\\n  var self = this;\\n  self.pingTimeoutTimer = setTimeout(function () {\\n    if ('closed' === self.readyState) return;\\n    self.onClose('ping timeout');\\n  }, timeout || (self.pingInterval + self.pingTimeout));\\n};\\n\\n/**\\n * Pings server every `this.pingInterval` and expects response\\n * within `this.pingTimeout` or closes connection.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.setPing = function () {\\n  var self = this;\\n  clearTimeout(self.pingIntervalTimer);\\n  self.pingIntervalTimer = setTimeout(function () {\\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\\n    self.ping();\\n    self.onHeartbeat(self.pingTimeout);\\n  }, self.pingInterval);\\n};\\n\\n/**\\n* Sends a ping packet.\\n*\\n* @api private\\n*/\\n\\nSocket.prototype.ping = function () {\\n  var self = this;\\n  this.sendPacket('ping', function () {\\n    self.emit('ping');\\n  });\\n};\\n\\n/**\\n * Called on `drain` event\\n *\\n * @api private\\n */\\n\\nSocket.prototype.onDrain = function () {\\n  this.writeBuffer.splice(0, this.prevBufferLen);\\n\\n  // setting prevBufferLen = 0 is very important\\n  // for example, when upgrading, upgrade packet is sent over,\\n  // and a nonzero prevBufferLen could cause problems on `drain`\\n  this.prevBufferLen = 0;\\n\\n  if (0 === this.writeBuffer.length) {\\n    this.emit('drain');\\n  } else {\\n    this.flush();\\n  }\\n};\\n\\n/**\\n * Flush write buffers.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.flush = function () {\\n  if ('closed' !== this.readyState && this.transport.writable &&\\n    !this.upgrading && this.writeBuffer.length) {\\n    debug('flushing %d packets in socket', this.writeBuffer.length);\\n    this.transport.send(this.writeBuffer);\\n    // keep track of current length of writeBuffer\\n    // splice writeBuffer and callbackBuffer on `drain`\\n    this.prevBufferLen = this.writeBuffer.length;\\n    this.emit('flush');\\n  }\\n};\\n\\n/**\\n * Sends a message.\\n *\\n * @param {String} message.\\n * @param {Function} callback function.\\n * @param {Object} options.\\n * @return {Socket} for chaining.\\n * @api public\\n */\\n\\nSocket.prototype.write =\\nSocket.prototype.send = function (msg, options, fn) {\\n  this.sendPacket('message', msg, options, fn);\\n  return this;\\n};\\n\\n/**\\n * Sends a packet.\\n *\\n * @param {String} packet type.\\n * @param {String} data.\\n * @param {Object} options.\\n * @param {Function} callback function.\\n * @api private\\n */\\n\\nSocket.prototype.sendPacket = function (type, data, options, fn) {\\n  if ('function' === typeof data) {\\n    fn = data;\\n    data = undefined;\\n  }\\n\\n  if ('function' === typeof options) {\\n    fn = options;\\n    options = null;\\n  }\\n\\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\\n    return;\\n  }\\n\\n  options = options || {};\\n  options.compress = false !== options.compress;\\n\\n  var packet = {\\n    type: type,\\n    data: data,\\n    options: options\\n  };\\n  this.emit('packetCreate', packet);\\n  this.writeBuffer.push(packet);\\n  if (fn) this.once('flush', fn);\\n  this.flush();\\n};\\n\\n/**\\n * Closes the connection.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.close = function () {\\n  if ('opening' === this.readyState || 'open' === this.readyState) {\\n    this.readyState = 'closing';\\n\\n    var self = this;\\n\\n    if (this.writeBuffer.length) {\\n      this.once('drain', function () {\\n        if (this.upgrading) {\\n          waitForUpgrade();\\n        } else {\\n          close();\\n        }\\n      });\\n    } else if (this.upgrading) {\\n      waitForUpgrade();\\n    } else {\\n      close();\\n    }\\n  }\\n\\n  function close () {\\n    self.onClose('forced close');\\n    debug('socket closing - telling transport to close');\\n    self.transport.close();\\n  }\\n\\n  function cleanupAndClose () {\\n    self.removeListener('upgrade', cleanupAndClose);\\n    self.removeListener('upgradeError', cleanupAndClose);\\n    close();\\n  }\\n\\n  function waitForUpgrade () {\\n    // wait for upgrade to finish since we can't send packets while pausing a transport\\n    self.once('upgrade', cleanupAndClose);\\n    self.once('upgradeError', cleanupAndClose);\\n  }\\n\\n  return this;\\n};\\n\\n/**\\n * Called upon transport error\\n *\\n * @api private\\n */\\n\\nSocket.prototype.onError = function (err) {\\n  debug('socket error %j', err);\\n  Socket.priorWebsocketSuccess = false;\\n  this.emit('error', err);\\n  this.onClose('transport error', err);\\n};\\n\\n/**\\n * Called upon transport close.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.onClose = function (reason, desc) {\\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\\n    debug('socket close with reason: \\\"%s\\\"', reason);\\n    var self = this;\\n\\n    // clear timers\\n    clearTimeout(this.pingIntervalTimer);\\n    clearTimeout(this.pingTimeoutTimer);\\n\\n    // stop event from firing again for transport\\n    this.transport.removeAllListeners('close');\\n\\n    // ensure transport won't stay open\\n    this.transport.close();\\n\\n    // ignore further transport communication\\n    this.transport.removeAllListeners();\\n\\n    // set ready state\\n    this.readyState = 'closed';\\n\\n    // clear session id\\n    this.id = null;\\n\\n    // emit close event\\n    this.emit('close', reason, desc);\\n\\n    // clean buffers after, so users can still\\n    // grab the buffers on `close` event\\n    self.writeBuffer = [];\\n    self.prevBufferLen = 0;\\n  }\\n};\\n\\n/**\\n * Filters upgrades, returning only those matching client transports.\\n *\\n * @param {Array} server upgrades\\n * @api private\\n *\\n */\\n\\nSocket.prototype.filterUpgrades = function (upgrades) {\\n  var filteredUpgrades = [];\\n  for (var i = 0, j = upgrades.length; i < j; i++) {\\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\\n  }\\n  return filteredUpgrades;\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/socket.js\\n// module id = 20\\n// module chunks = 0\",\"/**\\n * Module dependencies\\n */\\n\\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\\nvar XHR = require('./polling-xhr');\\nvar JSONP = require('./polling-jsonp');\\nvar websocket = require('./websocket');\\n\\n/**\\n * Export transports.\\n */\\n\\nexports.polling = polling;\\nexports.websocket = websocket;\\n\\n/**\\n * Polling transport polymorphic constructor.\\n * Decides on xhr vs jsonp based on feature detection.\\n *\\n * @api private\\n */\\n\\nfunction polling (opts) {\\n  var xhr;\\n  var xd = false;\\n  var xs = false;\\n  var jsonp = false !== opts.jsonp;\\n\\n  if (global.location) {\\n    var isSSL = 'https:' === location.protocol;\\n    var port = location.port;\\n\\n    // some user agents have empty `location.port`\\n    if (!port) {\\n      port = isSSL ? 443 : 80;\\n    }\\n\\n    xd = opts.hostname !== location.hostname || port !== opts.port;\\n    xs = opts.secure !== isSSL;\\n  }\\n\\n  opts.xdomain = xd;\\n  opts.xscheme = xs;\\n  xhr = new XMLHttpRequest(opts);\\n\\n  if ('open' in xhr && !opts.forceJSONP) {\\n    return new XHR(opts);\\n  } else {\\n    if (!jsonp) throw new Error('JSONP disabled');\\n    return new JSONP(opts);\\n  }\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/transports/index.js\\n// module id = 21\\n// module chunks = 0\",\"// browser shim for xmlhttprequest module\\n\\nvar hasCORS = require('has-cors');\\n\\nmodule.exports = function (opts) {\\n  var xdomain = opts.xdomain;\\n\\n  // scheme must be same when usign XDomainRequest\\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\\n  var xscheme = opts.xscheme;\\n\\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\\n  // https://github.com/Automattic/engine.io-client/pull/217\\n  var enablesXDR = opts.enablesXDR;\\n\\n  // XMLHttpRequest can be disabled on IE\\n  try {\\n    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\\n      return new XMLHttpRequest();\\n    }\\n  } catch (e) { }\\n\\n  // Use XDomainRequest for IE8 if enablesXDR is true\\n  // because loading bar keeps flashing when using jsonp-polling\\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\\n  try {\\n    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\\n      return new XDomainRequest();\\n    }\\n  } catch (e) { }\\n\\n  if (!xdomain) {\\n    try {\\n      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\\n    } catch (e) { }\\n  }\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/xmlhttprequest.js\\n// module id = 22\\n// module chunks = 0\",\"\\n/**\\n * Module exports.\\n *\\n * Logic borrowed from Modernizr:\\n *\\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\\n */\\n\\ntry {\\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\\n    'withCredentials' in new XMLHttpRequest();\\n} catch (err) {\\n  // if XMLHttp support is disabled in IE then it will throw\\n  // when trying to create\\n  module.exports = false;\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/has-cors/index.js\\n// module id = 23\\n// module chunks = 0\",\"/**\\n * Module requirements.\\n */\\n\\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\\nvar Polling = require('./polling');\\nvar Emitter = require('component-emitter');\\nvar inherit = require('component-inherit');\\nvar debug = require('debug')('engine.io-client:polling-xhr');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = XHR;\\nmodule.exports.Request = Request;\\n\\n/**\\n * Empty function\\n */\\n\\nfunction empty () {}\\n\\n/**\\n * XHR Polling constructor.\\n *\\n * @param {Object} opts\\n * @api public\\n */\\n\\nfunction XHR (opts) {\\n  Polling.call(this, opts);\\n  this.requestTimeout = opts.requestTimeout;\\n\\n  if (global.location) {\\n    var isSSL = 'https:' === location.protocol;\\n    var port = location.port;\\n\\n    // some user agents have empty `location.port`\\n    if (!port) {\\n      port = isSSL ? 443 : 80;\\n    }\\n\\n    this.xd = opts.hostname !== global.location.hostname ||\\n      port !== opts.port;\\n    this.xs = opts.secure !== isSSL;\\n  } else {\\n    this.extraHeaders = opts.extraHeaders;\\n  }\\n}\\n\\n/**\\n * Inherits from Polling.\\n */\\n\\ninherit(XHR, Polling);\\n\\n/**\\n * XHR supports binary\\n */\\n\\nXHR.prototype.supportsBinary = true;\\n\\n/**\\n * Creates a request.\\n *\\n * @param {String} method\\n * @api private\\n */\\n\\nXHR.prototype.request = function (opts) {\\n  opts = opts || {};\\n  opts.uri = this.uri();\\n  opts.xd = this.xd;\\n  opts.xs = this.xs;\\n  opts.agent = this.agent || false;\\n  opts.supportsBinary = this.supportsBinary;\\n  opts.enablesXDR = this.enablesXDR;\\n\\n  // SSL options for Node.js client\\n  opts.pfx = this.pfx;\\n  opts.key = this.key;\\n  opts.passphrase = this.passphrase;\\n  opts.cert = this.cert;\\n  opts.ca = this.ca;\\n  opts.ciphers = this.ciphers;\\n  opts.rejectUnauthorized = this.rejectUnauthorized;\\n  opts.requestTimeout = this.requestTimeout;\\n\\n  // other options for Node.js client\\n  opts.extraHeaders = this.extraHeaders;\\n\\n  return new Request(opts);\\n};\\n\\n/**\\n * Sends data.\\n *\\n * @param {String} data to send.\\n * @param {Function} called upon flush.\\n * @api private\\n */\\n\\nXHR.prototype.doWrite = function (data, fn) {\\n  var isBinary = typeof data !== 'string' && data !== undefined;\\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\\n  var self = this;\\n  req.on('success', fn);\\n  req.on('error', function (err) {\\n    self.onError('xhr post error', err);\\n  });\\n  this.sendXhr = req;\\n};\\n\\n/**\\n * Starts a poll cycle.\\n *\\n * @api private\\n */\\n\\nXHR.prototype.doPoll = function () {\\n  debug('xhr poll');\\n  var req = this.request();\\n  var self = this;\\n  req.on('data', function (data) {\\n    self.onData(data);\\n  });\\n  req.on('error', function (err) {\\n    self.onError('xhr poll error', err);\\n  });\\n  this.pollXhr = req;\\n};\\n\\n/**\\n * Request constructor\\n *\\n * @param {Object} options\\n * @api public\\n */\\n\\nfunction Request (opts) {\\n  this.method = opts.method || 'GET';\\n  this.uri = opts.uri;\\n  this.xd = !!opts.xd;\\n  this.xs = !!opts.xs;\\n  this.async = false !== opts.async;\\n  this.data = undefined !== opts.data ? opts.data : null;\\n  this.agent = opts.agent;\\n  this.isBinary = opts.isBinary;\\n  this.supportsBinary = opts.supportsBinary;\\n  this.enablesXDR = opts.enablesXDR;\\n  this.requestTimeout = opts.requestTimeout;\\n\\n  // SSL options for Node.js client\\n  this.pfx = opts.pfx;\\n  this.key = opts.key;\\n  this.passphrase = opts.passphrase;\\n  this.cert = opts.cert;\\n  this.ca = opts.ca;\\n  this.ciphers = opts.ciphers;\\n  this.rejectUnauthorized = opts.rejectUnauthorized;\\n\\n  // other options for Node.js client\\n  this.extraHeaders = opts.extraHeaders;\\n\\n  this.create();\\n}\\n\\n/**\\n * Mix in `Emitter`.\\n */\\n\\nEmitter(Request.prototype);\\n\\n/**\\n * Creates the XHR object and sends the request.\\n *\\n * @api private\\n */\\n\\nRequest.prototype.create = function () {\\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\\n\\n  // SSL options for Node.js client\\n  opts.pfx = this.pfx;\\n  opts.key = this.key;\\n  opts.passphrase = this.passphrase;\\n  opts.cert = this.cert;\\n  opts.ca = this.ca;\\n  opts.ciphers = this.ciphers;\\n  opts.rejectUnauthorized = this.rejectUnauthorized;\\n\\n  var xhr = this.xhr = new XMLHttpRequest(opts);\\n  var self = this;\\n\\n  try {\\n    debug('xhr open %s: %s', this.method, this.uri);\\n    xhr.open(this.method, this.uri, this.async);\\n    try {\\n      if (this.extraHeaders) {\\n        xhr.setDisableHeaderCheck(true);\\n        for (var i in this.extraHeaders) {\\n          if (this.extraHeaders.hasOwnProperty(i)) {\\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\\n          }\\n        }\\n      }\\n    } catch (e) {}\\n    if (this.supportsBinary) {\\n      // This has to be done after open because Firefox is stupid\\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\\n      xhr.responseType = 'arraybuffer';\\n    }\\n\\n    if ('POST' === this.method) {\\n      try {\\n        if (this.isBinary) {\\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\\n        } else {\\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\\n        }\\n      } catch (e) {}\\n    }\\n\\n    try {\\n      xhr.setRequestHeader('Accept', '*/*');\\n    } catch (e) {}\\n\\n    // ie6 check\\n    if ('withCredentials' in xhr) {\\n      xhr.withCredentials = true;\\n    }\\n\\n    if (this.requestTimeout) {\\n      xhr.timeout = this.requestTimeout;\\n    }\\n\\n    if (this.hasXDR()) {\\n      xhr.onload = function () {\\n        self.onLoad();\\n      };\\n      xhr.onerror = function () {\\n        self.onError(xhr.responseText);\\n      };\\n    } else {\\n      xhr.onreadystatechange = function () {\\n        if (4 !== xhr.readyState) return;\\n        if (200 === xhr.status || 1223 === xhr.status) {\\n          self.onLoad();\\n        } else {\\n          // make sure the `error` event handler that's user-set\\n          // does not throw in the same tick and gets caught here\\n          setTimeout(function () {\\n            self.onError(xhr.status);\\n          }, 0);\\n        }\\n      };\\n    }\\n\\n    debug('xhr data %s', this.data);\\n    xhr.send(this.data);\\n  } catch (e) {\\n    // Need to defer since .create() is called directly fhrom the constructor\\n    // and thus the 'error' event can only be only bound *after* this exception\\n    // occurs.  Therefore, also, we cannot throw here at all.\\n    setTimeout(function () {\\n      self.onError(e);\\n    }, 0);\\n    return;\\n  }\\n\\n  if (global.document) {\\n    this.index = Request.requestsCount++;\\n    Request.requests[this.index] = this;\\n  }\\n};\\n\\n/**\\n * Called upon successful response.\\n *\\n * @api private\\n */\\n\\nRequest.prototype.onSuccess = function () {\\n  this.emit('success');\\n  this.cleanup();\\n};\\n\\n/**\\n * Called if we have data.\\n *\\n * @api private\\n */\\n\\nRequest.prototype.onData = function (data) {\\n  this.emit('data', data);\\n  this.onSuccess();\\n};\\n\\n/**\\n * Called upon error.\\n *\\n * @api private\\n */\\n\\nRequest.prototype.onError = function (err) {\\n  this.emit('error', err);\\n  this.cleanup(true);\\n};\\n\\n/**\\n * Cleans up house.\\n *\\n * @api private\\n */\\n\\nRequest.prototype.cleanup = function (fromError) {\\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\\n    return;\\n  }\\n  // xmlhttprequest\\n  if (this.hasXDR()) {\\n    this.xhr.onload = this.xhr.onerror = empty;\\n  } else {\\n    this.xhr.onreadystatechange = empty;\\n  }\\n\\n  if (fromError) {\\n    try {\\n      this.xhr.abort();\\n    } catch (e) {}\\n  }\\n\\n  if (global.document) {\\n    delete Request.requests[this.index];\\n  }\\n\\n  this.xhr = null;\\n};\\n\\n/**\\n * Called upon load.\\n *\\n * @api private\\n */\\n\\nRequest.prototype.onLoad = function () {\\n  var data;\\n  try {\\n    var contentType;\\n    try {\\n      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\\n    } catch (e) {}\\n    if (contentType === 'application/octet-stream') {\\n      data = this.xhr.response || this.xhr.responseText;\\n    } else {\\n      if (!this.supportsBinary) {\\n        data = this.xhr.responseText;\\n      } else {\\n        try {\\n          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\\n        } catch (e) {\\n          var ui8Arr = new Uint8Array(this.xhr.response);\\n          var dataArray = [];\\n          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\\n            dataArray.push(ui8Arr[idx]);\\n          }\\n\\n          data = String.fromCharCode.apply(null, dataArray);\\n        }\\n      }\\n    }\\n  } catch (e) {\\n    this.onError(e);\\n  }\\n  if (null != data) {\\n    this.onData(data);\\n  }\\n};\\n\\n/**\\n * Check if it has XDomainRequest.\\n *\\n * @api private\\n */\\n\\nRequest.prototype.hasXDR = function () {\\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\\n};\\n\\n/**\\n * Aborts the request.\\n *\\n * @api public\\n */\\n\\nRequest.prototype.abort = function () {\\n  this.cleanup();\\n};\\n\\n/**\\n * Aborts pending requests when unloading the window. This is needed to prevent\\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\\n * emitted.\\n */\\n\\nRequest.requestsCount = 0;\\nRequest.requests = {};\\n\\nif (global.document) {\\n  if (global.attachEvent) {\\n    global.attachEvent('onunload', unloadHandler);\\n  } else if (global.addEventListener) {\\n    global.addEventListener('beforeunload', unloadHandler, false);\\n  }\\n}\\n\\nfunction unloadHandler () {\\n  for (var i in Request.requests) {\\n    if (Request.requests.hasOwnProperty(i)) {\\n      Request.requests[i].abort();\\n    }\\n  }\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/transports/polling-xhr.js\\n// module id = 24\\n// module chunks = 0\",\"/**\\n * Module dependencies.\\n */\\n\\nvar Transport = require('../transport');\\nvar parseqs = require('parseqs');\\nvar parser = require('engine.io-parser');\\nvar inherit = require('component-inherit');\\nvar yeast = require('yeast');\\nvar debug = require('debug')('engine.io-client:polling');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = Polling;\\n\\n/**\\n * Is XHR2 supported?\\n */\\n\\nvar hasXHR2 = (function () {\\n  var XMLHttpRequest = require('xmlhttprequest-ssl');\\n  var xhr = new XMLHttpRequest({ xdomain: false });\\n  return null != xhr.responseType;\\n})();\\n\\n/**\\n * Polling interface.\\n *\\n * @param {Object} opts\\n * @api private\\n */\\n\\nfunction Polling (opts) {\\n  var forceBase64 = (opts && opts.forceBase64);\\n  if (!hasXHR2 || forceBase64) {\\n    this.supportsBinary = false;\\n  }\\n  Transport.call(this, opts);\\n}\\n\\n/**\\n * Inherits from Transport.\\n */\\n\\ninherit(Polling, Transport);\\n\\n/**\\n * Transport name.\\n */\\n\\nPolling.prototype.name = 'polling';\\n\\n/**\\n * Opens the socket (triggers polling). We write a PING message to determine\\n * when the transport is open.\\n *\\n * @api private\\n */\\n\\nPolling.prototype.doOpen = function () {\\n  this.poll();\\n};\\n\\n/**\\n * Pauses polling.\\n *\\n * @param {Function} callback upon buffers are flushed and transport is paused\\n * @api private\\n */\\n\\nPolling.prototype.pause = function (onPause) {\\n  var self = this;\\n\\n  this.readyState = 'pausing';\\n\\n  function pause () {\\n    debug('paused');\\n    self.readyState = 'paused';\\n    onPause();\\n  }\\n\\n  if (this.polling || !this.writable) {\\n    var total = 0;\\n\\n    if (this.polling) {\\n      debug('we are currently polling - waiting to pause');\\n      total++;\\n      this.once('pollComplete', function () {\\n        debug('pre-pause polling complete');\\n        --total || pause();\\n      });\\n    }\\n\\n    if (!this.writable) {\\n      debug('we are currently writing - waiting to pause');\\n      total++;\\n      this.once('drain', function () {\\n        debug('pre-pause writing complete');\\n        --total || pause();\\n      });\\n    }\\n  } else {\\n    pause();\\n  }\\n};\\n\\n/**\\n * Starts polling cycle.\\n *\\n * @api public\\n */\\n\\nPolling.prototype.poll = function () {\\n  debug('polling');\\n  this.polling = true;\\n  this.doPoll();\\n  this.emit('poll');\\n};\\n\\n/**\\n * Overloads onData to detect payloads.\\n *\\n * @api private\\n */\\n\\nPolling.prototype.onData = function (data) {\\n  var self = this;\\n  debug('polling got data %s', data);\\n  var callback = function (packet, index, total) {\\n    // if its the first message we consider the transport open\\n    if ('opening' === self.readyState) {\\n      self.onOpen();\\n    }\\n\\n    // if its a close packet, we close the ongoing requests\\n    if ('close' === packet.type) {\\n      self.onClose();\\n      return false;\\n    }\\n\\n    // otherwise bypass onData and handle the message\\n    self.onPacket(packet);\\n  };\\n\\n  // decode payload\\n  parser.decodePayload(data, this.socket.binaryType, callback);\\n\\n  // if an event did not trigger closing\\n  if ('closed' !== this.readyState) {\\n    // if we got data we're not polling\\n    this.polling = false;\\n    this.emit('pollComplete');\\n\\n    if ('open' === this.readyState) {\\n      this.poll();\\n    } else {\\n      debug('ignoring poll - transport state \\\"%s\\\"', this.readyState);\\n    }\\n  }\\n};\\n\\n/**\\n * For polling, send a close packet.\\n *\\n * @api private\\n */\\n\\nPolling.prototype.doClose = function () {\\n  var self = this;\\n\\n  function close () {\\n    debug('writing close packet');\\n    self.write([{ type: 'close' }]);\\n  }\\n\\n  if ('open' === this.readyState) {\\n    debug('transport open - closing');\\n    close();\\n  } else {\\n    // in case we're trying to close while\\n    // handshaking is in progress (GH-164)\\n    debug('transport not open - deferring close');\\n    this.once('open', close);\\n  }\\n};\\n\\n/**\\n * Writes a packets payload.\\n *\\n * @param {Array} data packets\\n * @param {Function} drain callback\\n * @api private\\n */\\n\\nPolling.prototype.write = function (packets) {\\n  var self = this;\\n  this.writable = false;\\n  var callbackfn = function () {\\n    self.writable = true;\\n    self.emit('drain');\\n  };\\n\\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\\n    self.doWrite(data, callbackfn);\\n  });\\n};\\n\\n/**\\n * Generates uri for connection.\\n *\\n * @api private\\n */\\n\\nPolling.prototype.uri = function () {\\n  var query = this.query || {};\\n  var schema = this.secure ? 'https' : 'http';\\n  var port = '';\\n\\n  // cache busting is forced\\n  if (false !== this.timestampRequests) {\\n    query[this.timestampParam] = yeast();\\n  }\\n\\n  if (!this.supportsBinary && !query.sid) {\\n    query.b64 = 1;\\n  }\\n\\n  query = parseqs.encode(query);\\n\\n  // avoid port if default for schema\\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\\n     ('http' === schema && Number(this.port) !== 80))) {\\n    port = ':' + this.port;\\n  }\\n\\n  // prepend ? to query\\n  if (query.length) {\\n    query = '?' + query;\\n  }\\n\\n  var ipv6 = this.hostname.indexOf(':') !== -1;\\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/transports/polling.js\\n// module id = 25\\n// module chunks = 0\",\"/**\\n * Module dependencies.\\n */\\n\\nvar parser = require('engine.io-parser');\\nvar Emitter = require('component-emitter');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = Transport;\\n\\n/**\\n * Transport abstract constructor.\\n *\\n * @param {Object} options.\\n * @api private\\n */\\n\\nfunction Transport (opts) {\\n  this.path = opts.path;\\n  this.hostname = opts.hostname;\\n  this.port = opts.port;\\n  this.secure = opts.secure;\\n  this.query = opts.query;\\n  this.timestampParam = opts.timestampParam;\\n  this.timestampRequests = opts.timestampRequests;\\n  this.readyState = '';\\n  this.agent = opts.agent || false;\\n  this.socket = opts.socket;\\n  this.enablesXDR = opts.enablesXDR;\\n\\n  // SSL options for Node.js client\\n  this.pfx = opts.pfx;\\n  this.key = opts.key;\\n  this.passphrase = opts.passphrase;\\n  this.cert = opts.cert;\\n  this.ca = opts.ca;\\n  this.ciphers = opts.ciphers;\\n  this.rejectUnauthorized = opts.rejectUnauthorized;\\n  this.forceNode = opts.forceNode;\\n\\n  // other options for Node.js client\\n  this.extraHeaders = opts.extraHeaders;\\n  this.localAddress = opts.localAddress;\\n}\\n\\n/**\\n * Mix in `Emitter`.\\n */\\n\\nEmitter(Transport.prototype);\\n\\n/**\\n * Emits an error.\\n *\\n * @param {String} str\\n * @return {Transport} for chaining\\n * @api public\\n */\\n\\nTransport.prototype.onError = function (msg, desc) {\\n  var err = new Error(msg);\\n  err.type = 'TransportError';\\n  err.description = desc;\\n  this.emit('error', err);\\n  return this;\\n};\\n\\n/**\\n * Opens the transport.\\n *\\n * @api public\\n */\\n\\nTransport.prototype.open = function () {\\n  if ('closed' === this.readyState || '' === this.readyState) {\\n    this.readyState = 'opening';\\n    this.doOpen();\\n  }\\n\\n  return this;\\n};\\n\\n/**\\n * Closes the transport.\\n *\\n * @api private\\n */\\n\\nTransport.prototype.close = function () {\\n  if ('opening' === this.readyState || 'open' === this.readyState) {\\n    this.doClose();\\n    this.onClose();\\n  }\\n\\n  return this;\\n};\\n\\n/**\\n * Sends multiple packets.\\n *\\n * @param {Array} packets\\n * @api private\\n */\\n\\nTransport.prototype.send = function (packets) {\\n  if ('open' === this.readyState) {\\n    this.write(packets);\\n  } else {\\n    throw new Error('Transport not open');\\n  }\\n};\\n\\n/**\\n * Called upon open\\n *\\n * @api private\\n */\\n\\nTransport.prototype.onOpen = function () {\\n  this.readyState = 'open';\\n  this.writable = true;\\n  this.emit('open');\\n};\\n\\n/**\\n * Called with data.\\n *\\n * @param {String} data\\n * @api private\\n */\\n\\nTransport.prototype.onData = function (data) {\\n  var packet = parser.decodePacket(data, this.socket.binaryType);\\n  this.onPacket(packet);\\n};\\n\\n/**\\n * Called with a decoded packet.\\n */\\n\\nTransport.prototype.onPacket = function (packet) {\\n  this.emit('packet', packet);\\n};\\n\\n/**\\n * Called upon close.\\n *\\n * @api private\\n */\\n\\nTransport.prototype.onClose = function () {\\n  this.readyState = 'closed';\\n  this.emit('close');\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/transport.js\\n// module id = 26\\n// module chunks = 0\",\"/**\\n * Module dependencies.\\n */\\n\\nvar keys = require('./keys');\\nvar hasBinary = require('has-binary');\\nvar sliceBuffer = require('arraybuffer.slice');\\nvar after = require('after');\\nvar utf8 = require('wtf-8');\\n\\nvar base64encoder;\\nif (global && global.ArrayBuffer) {\\n  base64encoder = require('base64-arraybuffer');\\n}\\n\\n/**\\n * Check if we are running an android browser. That requires us to use\\n * ArrayBuffer with polling transports...\\n *\\n * http://ghinda.net/jpeg-blob-ajax-android/\\n */\\n\\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\\n\\n/**\\n * Check if we are running in PhantomJS.\\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\\n * https://github.com/ariya/phantomjs/issues/11395\\n * @type boolean\\n */\\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\\n\\n/**\\n * When true, avoids using Blobs to encode payloads.\\n * @type boolean\\n */\\nvar dontSendBlobs = isAndroid || isPhantomJS;\\n\\n/**\\n * Current protocol version.\\n */\\n\\nexports.protocol = 3;\\n\\n/**\\n * Packet types.\\n */\\n\\nvar packets = exports.packets = {\\n    open:     0    // non-ws\\n  , close:    1    // non-ws\\n  , ping:     2\\n  , pong:     3\\n  , message:  4\\n  , upgrade:  5\\n  , noop:     6\\n};\\n\\nvar packetslist = keys(packets);\\n\\n/**\\n * Premade error packet.\\n */\\n\\nvar err = { type: 'error', data: 'parser error' };\\n\\n/**\\n * Create a blob api even for blob builder when vendor prefixes exist\\n */\\n\\nvar Blob = require('blob');\\n\\n/**\\n * Encodes a packet.\\n *\\n *     <packet type id> [ <data> ]\\n *\\n * Example:\\n *\\n *     5hello world\\n *     3\\n *     4\\n *\\n * Binary is encoded in an identical principle\\n *\\n * @api private\\n */\\n\\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\\n  if ('function' == typeof supportsBinary) {\\n    callback = supportsBinary;\\n    supportsBinary = false;\\n  }\\n\\n  if ('function' == typeof utf8encode) {\\n    callback = utf8encode;\\n    utf8encode = null;\\n  }\\n\\n  var data = (packet.data === undefined)\\n    ? undefined\\n    : packet.data.buffer || packet.data;\\n\\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\\n    return encodeArrayBuffer(packet, supportsBinary, callback);\\n  } else if (Blob && data instanceof global.Blob) {\\n    return encodeBlob(packet, supportsBinary, callback);\\n  }\\n\\n  // might be an object with { base64: true, data: dataAsBase64String }\\n  if (data && data.base64) {\\n    return encodeBase64Object(packet, callback);\\n  }\\n\\n  // Sending data as a utf-8 string\\n  var encoded = packets[packet.type];\\n\\n  // data fragment is optional\\n  if (undefined !== packet.data) {\\n    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\\n  }\\n\\n  return callback('' + encoded);\\n\\n};\\n\\nfunction encodeBase64Object(packet, callback) {\\n  // packet data is an object { base64: true, data: dataAsBase64String }\\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\\n  return callback(message);\\n}\\n\\n/**\\n * Encode packet helpers for binary types\\n */\\n\\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\\n  if (!supportsBinary) {\\n    return exports.encodeBase64Packet(packet, callback);\\n  }\\n\\n  var data = packet.data;\\n  var contentArray = new Uint8Array(data);\\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\\n\\n  resultBuffer[0] = packets[packet.type];\\n  for (var i = 0; i < contentArray.length; i++) {\\n    resultBuffer[i+1] = contentArray[i];\\n  }\\n\\n  return callback(resultBuffer.buffer);\\n}\\n\\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\\n  if (!supportsBinary) {\\n    return exports.encodeBase64Packet(packet, callback);\\n  }\\n\\n  var fr = new FileReader();\\n  fr.onload = function() {\\n    packet.data = fr.result;\\n    exports.encodePacket(packet, supportsBinary, true, callback);\\n  };\\n  return fr.readAsArrayBuffer(packet.data);\\n}\\n\\nfunction encodeBlob(packet, supportsBinary, callback) {\\n  if (!supportsBinary) {\\n    return exports.encodeBase64Packet(packet, callback);\\n  }\\n\\n  if (dontSendBlobs) {\\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\\n  }\\n\\n  var length = new Uint8Array(1);\\n  length[0] = packets[packet.type];\\n  var blob = new Blob([length.buffer, packet.data]);\\n\\n  return callback(blob);\\n}\\n\\n/**\\n * Encodes a packet with binary data in a base64 string\\n *\\n * @param {Object} packet, has `type` and `data`\\n * @return {String} base64 encoded message\\n */\\n\\nexports.encodeBase64Packet = function(packet, callback) {\\n  var message = 'b' + exports.packets[packet.type];\\n  if (Blob && packet.data instanceof global.Blob) {\\n    var fr = new FileReader();\\n    fr.onload = function() {\\n      var b64 = fr.result.split(',')[1];\\n      callback(message + b64);\\n    };\\n    return fr.readAsDataURL(packet.data);\\n  }\\n\\n  var b64data;\\n  try {\\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\\n  } catch (e) {\\n    // iPhone Safari doesn't let you apply with typed arrays\\n    var typed = new Uint8Array(packet.data);\\n    var basic = new Array(typed.length);\\n    for (var i = 0; i < typed.length; i++) {\\n      basic[i] = typed[i];\\n    }\\n    b64data = String.fromCharCode.apply(null, basic);\\n  }\\n  message += global.btoa(b64data);\\n  return callback(message);\\n};\\n\\n/**\\n * Decodes a packet. Changes format to Blob if requested.\\n *\\n * @return {Object} with `type` and `data` (if any)\\n * @api private\\n */\\n\\nexports.decodePacket = function (data, binaryType, utf8decode) {\\n  if (data === undefined) {\\n    return err;\\n  }\\n  // String data\\n  if (typeof data == 'string') {\\n    if (data.charAt(0) == 'b') {\\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\\n    }\\n\\n    if (utf8decode) {\\n      data = tryDecode(data);\\n      if (data === false) {\\n        return err;\\n      }\\n    }\\n    var type = data.charAt(0);\\n\\n    if (Number(type) != type || !packetslist[type]) {\\n      return err;\\n    }\\n\\n    if (data.length > 1) {\\n      return { type: packetslist[type], data: data.substring(1) };\\n    } else {\\n      return { type: packetslist[type] };\\n    }\\n  }\\n\\n  var asArray = new Uint8Array(data);\\n  var type = asArray[0];\\n  var rest = sliceBuffer(data, 1);\\n  if (Blob && binaryType === 'blob') {\\n    rest = new Blob([rest]);\\n  }\\n  return { type: packetslist[type], data: rest };\\n};\\n\\nfunction tryDecode(data) {\\n  try {\\n    data = utf8.decode(data);\\n  } catch (e) {\\n    return false;\\n  }\\n  return data;\\n}\\n\\n/**\\n * Decodes a packet encoded in a base64 string\\n *\\n * @param {String} base64 encoded message\\n * @return {Object} with `type` and `data` (if any)\\n */\\n\\nexports.decodeBase64Packet = function(msg, binaryType) {\\n  var type = packetslist[msg.charAt(0)];\\n  if (!base64encoder) {\\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\\n  }\\n\\n  var data = base64encoder.decode(msg.substr(1));\\n\\n  if (binaryType === 'blob' && Blob) {\\n    data = new Blob([data]);\\n  }\\n\\n  return { type: type, data: data };\\n};\\n\\n/**\\n * Encodes multiple messages (payload).\\n *\\n *     <length>:data\\n *\\n * Example:\\n *\\n *     11:hello world2:hi\\n *\\n * If any contents are binary, they will be encoded as base64 strings. Base64\\n * encoded strings are marked with a b before the length specifier\\n *\\n * @param {Array} packets\\n * @api private\\n */\\n\\nexports.encodePayload = function (packets, supportsBinary, callback) {\\n  if (typeof supportsBinary == 'function') {\\n    callback = supportsBinary;\\n    supportsBinary = null;\\n  }\\n\\n  var isBinary = hasBinary(packets);\\n\\n  if (supportsBinary && isBinary) {\\n    if (Blob && !dontSendBlobs) {\\n      return exports.encodePayloadAsBlob(packets, callback);\\n    }\\n\\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\\n  }\\n\\n  if (!packets.length) {\\n    return callback('0:');\\n  }\\n\\n  function setLengthHeader(message) {\\n    return message.length + ':' + message;\\n  }\\n\\n  function encodeOne(packet, doneCallback) {\\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\\n      doneCallback(null, setLengthHeader(message));\\n    });\\n  }\\n\\n  map(packets, encodeOne, function(err, results) {\\n    return callback(results.join(''));\\n  });\\n};\\n\\n/**\\n * Async array map using after\\n */\\n\\nfunction map(ary, each, done) {\\n  var result = new Array(ary.length);\\n  var next = after(ary.length, done);\\n\\n  var eachWithIndex = function(i, el, cb) {\\n    each(el, function(error, msg) {\\n      result[i] = msg;\\n      cb(error, result);\\n    });\\n  };\\n\\n  for (var i = 0; i < ary.length; i++) {\\n    eachWithIndex(i, ary[i], next);\\n  }\\n}\\n\\n/*\\n * Decodes data when a payload is maybe expected. Possible binary contents are\\n * decoded from their base64 representation\\n *\\n * @param {String} data, callback method\\n * @api public\\n */\\n\\nexports.decodePayload = function (data, binaryType, callback) {\\n  if (typeof data != 'string') {\\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\\n  }\\n\\n  if (typeof binaryType === 'function') {\\n    callback = binaryType;\\n    binaryType = null;\\n  }\\n\\n  var packet;\\n  if (data == '') {\\n    // parser error - ignoring payload\\n    return callback(err, 0, 1);\\n  }\\n\\n  var length = ''\\n    , n, msg;\\n\\n  for (var i = 0, l = data.length; i < l; i++) {\\n    var chr = data.charAt(i);\\n\\n    if (':' != chr) {\\n      length += chr;\\n    } else {\\n      if ('' == length || (length != (n = Number(length)))) {\\n        // parser error - ignoring payload\\n        return callback(err, 0, 1);\\n      }\\n\\n      msg = data.substr(i + 1, n);\\n\\n      if (length != msg.length) {\\n        // parser error - ignoring payload\\n        return callback(err, 0, 1);\\n      }\\n\\n      if (msg.length) {\\n        packet = exports.decodePacket(msg, binaryType, true);\\n\\n        if (err.type == packet.type && err.data == packet.data) {\\n          // parser error in individual packet - ignoring payload\\n          return callback(err, 0, 1);\\n        }\\n\\n        var ret = callback(packet, i + n, l);\\n        if (false === ret) return;\\n      }\\n\\n      // advance cursor\\n      i += n;\\n      length = '';\\n    }\\n  }\\n\\n  if (length != '') {\\n    // parser error - ignoring payload\\n    return callback(err, 0, 1);\\n  }\\n\\n};\\n\\n/**\\n * Encodes multiple messages (payload) as binary.\\n *\\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\\n * 255><data>\\n *\\n * Example:\\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\\n *\\n * @param {Array} packets\\n * @return {ArrayBuffer} encoded payload\\n * @api private\\n */\\n\\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\\n  if (!packets.length) {\\n    return callback(new ArrayBuffer(0));\\n  }\\n\\n  function encodeOne(packet, doneCallback) {\\n    exports.encodePacket(packet, true, true, function(data) {\\n      return doneCallback(null, data);\\n    });\\n  }\\n\\n  map(packets, encodeOne, function(err, encodedPackets) {\\n    var totalLength = encodedPackets.reduce(function(acc, p) {\\n      var len;\\n      if (typeof p === 'string'){\\n        len = p.length;\\n      } else {\\n        len = p.byteLength;\\n      }\\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\\n    }, 0);\\n\\n    var resultArray = new Uint8Array(totalLength);\\n\\n    var bufferIndex = 0;\\n    encodedPackets.forEach(function(p) {\\n      var isString = typeof p === 'string';\\n      var ab = p;\\n      if (isString) {\\n        var view = new Uint8Array(p.length);\\n        for (var i = 0; i < p.length; i++) {\\n          view[i] = p.charCodeAt(i);\\n        }\\n        ab = view.buffer;\\n      }\\n\\n      if (isString) { // not true binary\\n        resultArray[bufferIndex++] = 0;\\n      } else { // true binary\\n        resultArray[bufferIndex++] = 1;\\n      }\\n\\n      var lenStr = ab.byteLength.toString();\\n      for (var i = 0; i < lenStr.length; i++) {\\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\\n      }\\n      resultArray[bufferIndex++] = 255;\\n\\n      var view = new Uint8Array(ab);\\n      for (var i = 0; i < view.length; i++) {\\n        resultArray[bufferIndex++] = view[i];\\n      }\\n    });\\n\\n    return callback(resultArray.buffer);\\n  });\\n};\\n\\n/**\\n * Encode as Blob\\n */\\n\\nexports.encodePayloadAsBlob = function(packets, callback) {\\n  function encodeOne(packet, doneCallback) {\\n    exports.encodePacket(packet, true, true, function(encoded) {\\n      var binaryIdentifier = new Uint8Array(1);\\n      binaryIdentifier[0] = 1;\\n      if (typeof encoded === 'string') {\\n        var view = new Uint8Array(encoded.length);\\n        for (var i = 0; i < encoded.length; i++) {\\n          view[i] = encoded.charCodeAt(i);\\n        }\\n        encoded = view.buffer;\\n        binaryIdentifier[0] = 0;\\n      }\\n\\n      var len = (encoded instanceof ArrayBuffer)\\n        ? encoded.byteLength\\n        : encoded.size;\\n\\n      var lenStr = len.toString();\\n      var lengthAry = new Uint8Array(lenStr.length + 1);\\n      for (var i = 0; i < lenStr.length; i++) {\\n        lengthAry[i] = parseInt(lenStr[i]);\\n      }\\n      lengthAry[lenStr.length] = 255;\\n\\n      if (Blob) {\\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\\n        doneCallback(null, blob);\\n      }\\n    });\\n  }\\n\\n  map(packets, encodeOne, function(err, results) {\\n    return callback(new Blob(results));\\n  });\\n};\\n\\n/*\\n * Decodes data when a payload is maybe expected. Strings are decoded by\\n * interpreting each byte as a key code for entries marked to start with 0. See\\n * description of encodePayloadAsBinary\\n *\\n * @param {ArrayBuffer} data, callback method\\n * @api public\\n */\\n\\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\\n  if (typeof binaryType === 'function') {\\n    callback = binaryType;\\n    binaryType = null;\\n  }\\n\\n  var bufferTail = data;\\n  var buffers = [];\\n\\n  var numberTooLong = false;\\n  while (bufferTail.byteLength > 0) {\\n    var tailArray = new Uint8Array(bufferTail);\\n    var isString = tailArray[0] === 0;\\n    var msgLength = '';\\n\\n    for (var i = 1; ; i++) {\\n      if (tailArray[i] == 255) break;\\n\\n      if (msgLength.length > 310) {\\n        numberTooLong = true;\\n        break;\\n      }\\n\\n      msgLength += tailArray[i];\\n    }\\n\\n    if(numberTooLong) return callback(err, 0, 1);\\n\\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\\n    msgLength = parseInt(msgLength);\\n\\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\\n    if (isString) {\\n      try {\\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\\n      } catch (e) {\\n        // iPhone Safari doesn't let you apply to typed arrays\\n        var typed = new Uint8Array(msg);\\n        msg = '';\\n        for (var i = 0; i < typed.length; i++) {\\n          msg += String.fromCharCode(typed[i]);\\n        }\\n      }\\n    }\\n\\n    buffers.push(msg);\\n    bufferTail = sliceBuffer(bufferTail, msgLength);\\n  }\\n\\n  var total = buffers.length;\\n  buffers.forEach(function(buffer, i) {\\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\\n  });\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-parser/lib/browser.js\\n// module id = 27\\n// module chunks = 0\",\"\\n/**\\n * Gets the keys for an object.\\n *\\n * @return {Array} keys\\n * @api private\\n */\\n\\nmodule.exports = Object.keys || function keys (obj){\\n  var arr = [];\\n  var has = Object.prototype.hasOwnProperty;\\n\\n  for (var i in obj) {\\n    if (has.call(obj, i)) {\\n      arr.push(i);\\n    }\\n  }\\n  return arr;\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-parser/lib/keys.js\\n// module id = 28\\n// module chunks = 0\",\"\\n/*\\n * Module requirements.\\n */\\n\\nvar isArray = require('isarray');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = hasBinary;\\n\\n/**\\n * Checks for binary data.\\n *\\n * Right now only Buffer and ArrayBuffer are supported..\\n *\\n * @param {Object} anything\\n * @api public\\n */\\n\\nfunction hasBinary(data) {\\n\\n  function _hasBinary(obj) {\\n    if (!obj) return false;\\n\\n    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||\\n         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||\\n         (global.Blob && obj instanceof Blob) ||\\n         (global.File && obj instanceof File)\\n        ) {\\n      return true;\\n    }\\n\\n    if (isArray(obj)) {\\n      for (var i = 0; i < obj.length; i++) {\\n          if (_hasBinary(obj[i])) {\\n              return true;\\n          }\\n      }\\n    } else if (obj && 'object' == typeof obj) {\\n      // see: https://github.com/Automattic/has-binary/pull/4\\n      if (obj.toJSON && 'function' == typeof obj.toJSON) {\\n        obj = obj.toJSON();\\n      }\\n\\n      for (var key in obj) {\\n        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {\\n          return true;\\n        }\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  return _hasBinary(data);\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/has-binary/index.js\\n// module id = 29\\n// module chunks = 0\",\"/**\\n * An abstraction for slicing an arraybuffer even when\\n * ArrayBuffer.prototype.slice is not supported\\n *\\n * @api public\\n */\\n\\nmodule.exports = function(arraybuffer, start, end) {\\n  var bytes = arraybuffer.byteLength;\\n  start = start || 0;\\n  end = end || bytes;\\n\\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\\n\\n  if (start < 0) { start += bytes; }\\n  if (end < 0) { end += bytes; }\\n  if (end > bytes) { end = bytes; }\\n\\n  if (start >= bytes || start >= end || bytes === 0) {\\n    return new ArrayBuffer(0);\\n  }\\n\\n  var abv = new Uint8Array(arraybuffer);\\n  var result = new Uint8Array(end - start);\\n  for (var i = start, ii = 0; i < end; i++, ii++) {\\n    result[ii] = abv[i];\\n  }\\n  return result.buffer;\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/arraybuffer.slice/index.js\\n// module id = 30\\n// module chunks = 0\",\"module.exports = after\\n\\nfunction after(count, callback, err_cb) {\\n    var bail = false\\n    err_cb = err_cb || noop\\n    proxy.count = count\\n\\n    return (count === 0) ? callback() : proxy\\n\\n    function proxy(err, result) {\\n        if (proxy.count <= 0) {\\n            throw new Error('after called too many times')\\n        }\\n        --proxy.count\\n\\n        // after first error, rest are passed to err_cb\\n        if (err) {\\n            bail = true\\n            callback(err)\\n            // future error callbacks will go to error handler\\n            callback = err_cb\\n        } else if (proxy.count === 0 && !bail) {\\n            callback(null, result)\\n        }\\n    }\\n}\\n\\nfunction noop() {}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/after/index.js\\n// module id = 31\\n// module chunks = 0\",\"/*! https://mths.be/wtf8 v1.0.0 by @mathias */\\n;(function(root) {\\n\\n\\t// Detect free variables `exports`\\n\\tvar freeExports = typeof exports == 'object' && exports;\\n\\n\\t// Detect free variable `module`\\n\\tvar freeModule = typeof module == 'object' && module &&\\n\\t\\tmodule.exports == freeExports && module;\\n\\n\\t// Detect free variable `global`, from Node.js or Browserified code,\\n\\t// and use it as `root`\\n\\tvar freeGlobal = typeof global == 'object' && global;\\n\\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\\n\\t\\troot = freeGlobal;\\n\\t}\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\n\\tvar stringFromCharCode = String.fromCharCode;\\n\\n\\t// Taken from https://mths.be/punycode\\n\\tfunction ucs2decode(string) {\\n\\t\\tvar output = [];\\n\\t\\tvar counter = 0;\\n\\t\\tvar length = string.length;\\n\\t\\tvar value;\\n\\t\\tvar extra;\\n\\t\\twhile (counter < length) {\\n\\t\\t\\tvalue = string.charCodeAt(counter++);\\n\\t\\t\\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\\n\\t\\t\\t\\t// high surrogate, and there is a next character\\n\\t\\t\\t\\textra = string.charCodeAt(counter++);\\n\\t\\t\\t\\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\\n\\t\\t\\t\\t\\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// unmatched surrogate; only append this code unit, in case the next\\n\\t\\t\\t\\t\\t// code unit is the high surrogate of a surrogate pair\\n\\t\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t\\t\\tcounter--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn output;\\n\\t}\\n\\n\\t// Taken from https://mths.be/punycode\\n\\tfunction ucs2encode(array) {\\n\\t\\tvar length = array.length;\\n\\t\\tvar index = -1;\\n\\t\\tvar value;\\n\\t\\tvar output = '';\\n\\t\\twhile (++index < length) {\\n\\t\\t\\tvalue = array[index];\\n\\t\\t\\tif (value > 0xFFFF) {\\n\\t\\t\\t\\tvalue -= 0x10000;\\n\\t\\t\\t\\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\\n\\t\\t\\t\\tvalue = 0xDC00 | value & 0x3FF;\\n\\t\\t\\t}\\n\\t\\t\\toutput += stringFromCharCode(value);\\n\\t\\t}\\n\\t\\treturn output;\\n\\t}\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\n\\tfunction createByte(codePoint, shift) {\\n\\t\\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\\n\\t}\\n\\n\\tfunction encodeCodePoint(codePoint) {\\n\\t\\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\\n\\t\\t\\treturn stringFromCharCode(codePoint);\\n\\t\\t}\\n\\t\\tvar symbol = '';\\n\\t\\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\\n\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\\n\\t\\t}\\n\\t\\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\\n\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\\n\\t\\t\\tsymbol += createByte(codePoint, 6);\\n\\t\\t}\\n\\t\\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\\n\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\\n\\t\\t\\tsymbol += createByte(codePoint, 12);\\n\\t\\t\\tsymbol += createByte(codePoint, 6);\\n\\t\\t}\\n\\t\\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\\n\\t\\treturn symbol;\\n\\t}\\n\\n\\tfunction wtf8encode(string) {\\n\\t\\tvar codePoints = ucs2decode(string);\\n\\t\\tvar length = codePoints.length;\\n\\t\\tvar index = -1;\\n\\t\\tvar codePoint;\\n\\t\\tvar byteString = '';\\n\\t\\twhile (++index < length) {\\n\\t\\t\\tcodePoint = codePoints[index];\\n\\t\\t\\tbyteString += encodeCodePoint(codePoint);\\n\\t\\t}\\n\\t\\treturn byteString;\\n\\t}\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\n\\tfunction readContinuationByte() {\\n\\t\\tif (byteIndex >= byteCount) {\\n\\t\\t\\tthrow Error('Invalid byte index');\\n\\t\\t}\\n\\n\\t\\tvar continuationByte = byteArray[byteIndex] & 0xFF;\\n\\t\\tbyteIndex++;\\n\\n\\t\\tif ((continuationByte & 0xC0) == 0x80) {\\n\\t\\t\\treturn continuationByte & 0x3F;\\n\\t\\t}\\n\\n\\t\\t// If we end up here, it’s not a continuation byte.\\n\\t\\tthrow Error('Invalid continuation byte');\\n\\t}\\n\\n\\tfunction decodeSymbol() {\\n\\t\\tvar byte1;\\n\\t\\tvar byte2;\\n\\t\\tvar byte3;\\n\\t\\tvar byte4;\\n\\t\\tvar codePoint;\\n\\n\\t\\tif (byteIndex > byteCount) {\\n\\t\\t\\tthrow Error('Invalid byte index');\\n\\t\\t}\\n\\n\\t\\tif (byteIndex == byteCount) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Read the first byte.\\n\\t\\tbyte1 = byteArray[byteIndex] & 0xFF;\\n\\t\\tbyteIndex++;\\n\\n\\t\\t// 1-byte sequence (no continuation bytes)\\n\\t\\tif ((byte1 & 0x80) == 0) {\\n\\t\\t\\treturn byte1;\\n\\t\\t}\\n\\n\\t\\t// 2-byte sequence\\n\\t\\tif ((byte1 & 0xE0) == 0xC0) {\\n\\t\\t\\tvar byte2 = readContinuationByte();\\n\\t\\t\\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\\n\\t\\t\\tif (codePoint >= 0x80) {\\n\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// 3-byte sequence (may include unpaired surrogates)\\n\\t\\tif ((byte1 & 0xF0) == 0xE0) {\\n\\t\\t\\tbyte2 = readContinuationByte();\\n\\t\\t\\tbyte3 = readContinuationByte();\\n\\t\\t\\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\\n\\t\\t\\tif (codePoint >= 0x0800) {\\n\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// 4-byte sequence\\n\\t\\tif ((byte1 & 0xF8) == 0xF0) {\\n\\t\\t\\tbyte2 = readContinuationByte();\\n\\t\\t\\tbyte3 = readContinuationByte();\\n\\t\\t\\tbyte4 = readContinuationByte();\\n\\t\\t\\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |\\n\\t\\t\\t\\t(byte3 << 0x06) | byte4;\\n\\t\\t\\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\\n\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthrow Error('Invalid WTF-8 detected');\\n\\t}\\n\\n\\tvar byteArray;\\n\\tvar byteCount;\\n\\tvar byteIndex;\\n\\tfunction wtf8decode(byteString) {\\n\\t\\tbyteArray = ucs2decode(byteString);\\n\\t\\tbyteCount = byteArray.length;\\n\\t\\tbyteIndex = 0;\\n\\t\\tvar codePoints = [];\\n\\t\\tvar tmp;\\n\\t\\twhile ((tmp = decodeSymbol()) !== false) {\\n\\t\\t\\tcodePoints.push(tmp);\\n\\t\\t}\\n\\t\\treturn ucs2encode(codePoints);\\n\\t}\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\n\\tvar wtf8 = {\\n\\t\\t'version': '1.0.0',\\n\\t\\t'encode': wtf8encode,\\n\\t\\t'decode': wtf8decode\\n\\t};\\n\\n\\t// Some AMD build optimizers, like r.js, check for specific condition patterns\\n\\t// like the following:\\n\\tif (\\n\\t\\ttypeof define == 'function' &&\\n\\t\\ttypeof define.amd == 'object' &&\\n\\t\\tdefine.amd\\n\\t) {\\n\\t\\tdefine(function() {\\n\\t\\t\\treturn wtf8;\\n\\t\\t});\\n\\t}\\telse if (freeExports && !freeExports.nodeType) {\\n\\t\\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\\n\\t\\t\\tfreeModule.exports = wtf8;\\n\\t\\t} else { // in Narwhal or RingoJS v0.7.0-\\n\\t\\t\\tvar object = {};\\n\\t\\t\\tvar hasOwnProperty = object.hasOwnProperty;\\n\\t\\t\\tfor (var key in wtf8) {\\n\\t\\t\\t\\thasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else { // in Rhino or a web browser\\n\\t\\troot.wtf8 = wtf8;\\n\\t}\\n\\n}(this));\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/wtf-8/wtf-8.js\\n// module id = 32\\n// module chunks = 0\",\"/*\\n * base64-arraybuffer\\n * https://github.com/niklasvh/base64-arraybuffer\\n *\\n * Copyright (c) 2012 Niklas von Hertzen\\n * Licensed under the MIT license.\\n */\\n(function(){\\n  \\\"use strict\\\";\\n\\n  var chars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  // Use a lookup table to find the index.\\n  var lookup = new Uint8Array(256);\\n  for (var i = 0; i < chars.length; i++) {\\n    lookup[chars.charCodeAt(i)] = i;\\n  }\\n\\n  exports.encode = function(arraybuffer) {\\n    var bytes = new Uint8Array(arraybuffer),\\n    i, len = bytes.length, base64 = \\\"\\\";\\n\\n    for (i = 0; i < len; i+=3) {\\n      base64 += chars[bytes[i] >> 2];\\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\\n      base64 += chars[bytes[i + 2] & 63];\\n    }\\n\\n    if ((len % 3) === 2) {\\n      base64 = base64.substring(0, base64.length - 1) + \\\"=\\\";\\n    } else if (len % 3 === 1) {\\n      base64 = base64.substring(0, base64.length - 2) + \\\"==\\\";\\n    }\\n\\n    return base64;\\n  };\\n\\n  exports.decode =  function(base64) {\\n    var bufferLength = base64.length * 0.75,\\n    len = base64.length, i, p = 0,\\n    encoded1, encoded2, encoded3, encoded4;\\n\\n    if (base64[base64.length - 1] === \\\"=\\\") {\\n      bufferLength--;\\n      if (base64[base64.length - 2] === \\\"=\\\") {\\n        bufferLength--;\\n      }\\n    }\\n\\n    var arraybuffer = new ArrayBuffer(bufferLength),\\n    bytes = new Uint8Array(arraybuffer);\\n\\n    for (i = 0; i < len; i+=4) {\\n      encoded1 = lookup[base64.charCodeAt(i)];\\n      encoded2 = lookup[base64.charCodeAt(i+1)];\\n      encoded3 = lookup[base64.charCodeAt(i+2)];\\n      encoded4 = lookup[base64.charCodeAt(i+3)];\\n\\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\\n    }\\n\\n    return arraybuffer;\\n  };\\n})();\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/base64-arraybuffer/lib/base64-arraybuffer.js\\n// module id = 33\\n// module chunks = 0\",\"/**\\n * Create a blob builder even when vendor prefixes exist\\n */\\n\\nvar BlobBuilder = global.BlobBuilder\\n  || global.WebKitBlobBuilder\\n  || global.MSBlobBuilder\\n  || global.MozBlobBuilder;\\n\\n/**\\n * Check if Blob constructor is supported\\n */\\n\\nvar blobSupported = (function() {\\n  try {\\n    var a = new Blob(['hi']);\\n    return a.size === 2;\\n  } catch(e) {\\n    return false;\\n  }\\n})();\\n\\n/**\\n * Check if Blob constructor supports ArrayBufferViews\\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\\n */\\n\\nvar blobSupportsArrayBufferView = blobSupported && (function() {\\n  try {\\n    var b = new Blob([new Uint8Array([1,2])]);\\n    return b.size === 2;\\n  } catch(e) {\\n    return false;\\n  }\\n})();\\n\\n/**\\n * Check if BlobBuilder is supported\\n */\\n\\nvar blobBuilderSupported = BlobBuilder\\n  && BlobBuilder.prototype.append\\n  && BlobBuilder.prototype.getBlob;\\n\\n/**\\n * Helper function that maps ArrayBufferViews to ArrayBuffers\\n * Used by BlobBuilder constructor and old browsers that didn't\\n * support it in the Blob constructor.\\n */\\n\\nfunction mapArrayBufferViews(ary) {\\n  for (var i = 0; i < ary.length; i++) {\\n    var chunk = ary[i];\\n    if (chunk.buffer instanceof ArrayBuffer) {\\n      var buf = chunk.buffer;\\n\\n      // if this is a subarray, make a copy so we only\\n      // include the subarray region from the underlying buffer\\n      if (chunk.byteLength !== buf.byteLength) {\\n        var copy = new Uint8Array(chunk.byteLength);\\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\\n        buf = copy.buffer;\\n      }\\n\\n      ary[i] = buf;\\n    }\\n  }\\n}\\n\\nfunction BlobBuilderConstructor(ary, options) {\\n  options = options || {};\\n\\n  var bb = new BlobBuilder();\\n  mapArrayBufferViews(ary);\\n\\n  for (var i = 0; i < ary.length; i++) {\\n    bb.append(ary[i]);\\n  }\\n\\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\\n};\\n\\nfunction BlobConstructor(ary, options) {\\n  mapArrayBufferViews(ary);\\n  return new Blob(ary, options || {});\\n};\\n\\nmodule.exports = (function() {\\n  if (blobSupported) {\\n    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\\n  } else if (blobBuilderSupported) {\\n    return BlobBuilderConstructor;\\n  } else {\\n    return undefined;\\n  }\\n})();\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/blob/index.js\\n// module id = 34\\n// module chunks = 0\",\"\\r\\n/**\\r\\n * Expose `Emitter`.\\r\\n */\\r\\n\\r\\nif (typeof module !== 'undefined') {\\r\\n  module.exports = Emitter;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Initialize a new `Emitter`.\\r\\n *\\r\\n * @api public\\r\\n */\\r\\n\\r\\nfunction Emitter(obj) {\\r\\n  if (obj) return mixin(obj);\\r\\n};\\r\\n\\r\\n/**\\r\\n * Mixin the emitter properties.\\r\\n *\\r\\n * @param {Object} obj\\r\\n * @return {Object}\\r\\n * @api private\\r\\n */\\r\\n\\r\\nfunction mixin(obj) {\\r\\n  for (var key in Emitter.prototype) {\\r\\n    obj[key] = Emitter.prototype[key];\\r\\n  }\\r\\n  return obj;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Listen on the given `event` with `fn`.\\r\\n *\\r\\n * @param {String} event\\r\\n * @param {Function} fn\\r\\n * @return {Emitter}\\r\\n * @api public\\r\\n */\\r\\n\\r\\nEmitter.prototype.on =\\r\\nEmitter.prototype.addEventListener = function(event, fn){\\r\\n  this._callbacks = this._callbacks || {};\\r\\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\\r\\n    .push(fn);\\r\\n  return this;\\r\\n};\\r\\n\\r\\n/**\\r\\n * Adds an `event` listener that will be invoked a single\\r\\n * time then automatically removed.\\r\\n *\\r\\n * @param {String} event\\r\\n * @param {Function} fn\\r\\n * @return {Emitter}\\r\\n * @api public\\r\\n */\\r\\n\\r\\nEmitter.prototype.once = function(event, fn){\\r\\n  function on() {\\r\\n    this.off(event, on);\\r\\n    fn.apply(this, arguments);\\r\\n  }\\r\\n\\r\\n  on.fn = fn;\\r\\n  this.on(event, on);\\r\\n  return this;\\r\\n};\\r\\n\\r\\n/**\\r\\n * Remove the given callback for `event` or all\\r\\n * registered callbacks.\\r\\n *\\r\\n * @param {String} event\\r\\n * @param {Function} fn\\r\\n * @return {Emitter}\\r\\n * @api public\\r\\n */\\r\\n\\r\\nEmitter.prototype.off =\\r\\nEmitter.prototype.removeListener =\\r\\nEmitter.prototype.removeAllListeners =\\r\\nEmitter.prototype.removeEventListener = function(event, fn){\\r\\n  this._callbacks = this._callbacks || {};\\r\\n\\r\\n  // all\\r\\n  if (0 == arguments.length) {\\r\\n    this._callbacks = {};\\r\\n    return this;\\r\\n  }\\r\\n\\r\\n  // specific event\\r\\n  var callbacks = this._callbacks['$' + event];\\r\\n  if (!callbacks) return this;\\r\\n\\r\\n  // remove all handlers\\r\\n  if (1 == arguments.length) {\\r\\n    delete this._callbacks['$' + event];\\r\\n    return this;\\r\\n  }\\r\\n\\r\\n  // remove specific handler\\r\\n  var cb;\\r\\n  for (var i = 0; i < callbacks.length; i++) {\\r\\n    cb = callbacks[i];\\r\\n    if (cb === fn || cb.fn === fn) {\\r\\n      callbacks.splice(i, 1);\\r\\n      break;\\r\\n    }\\r\\n  }\\r\\n  return this;\\r\\n};\\r\\n\\r\\n/**\\r\\n * Emit `event` with the given args.\\r\\n *\\r\\n * @param {String} event\\r\\n * @param {Mixed} ...\\r\\n * @return {Emitter}\\r\\n */\\r\\n\\r\\nEmitter.prototype.emit = function(event){\\r\\n  this._callbacks = this._callbacks || {};\\r\\n  var args = [].slice.call(arguments, 1)\\r\\n    , callbacks = this._callbacks['$' + event];\\r\\n\\r\\n  if (callbacks) {\\r\\n    callbacks = callbacks.slice(0);\\r\\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\\r\\n      callbacks[i].apply(this, args);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return this;\\r\\n};\\r\\n\\r\\n/**\\r\\n * Return array of callbacks for `event`.\\r\\n *\\r\\n * @param {String} event\\r\\n * @return {Array}\\r\\n * @api public\\r\\n */\\r\\n\\r\\nEmitter.prototype.listeners = function(event){\\r\\n  this._callbacks = this._callbacks || {};\\r\\n  return this._callbacks['$' + event] || [];\\r\\n};\\r\\n\\r\\n/**\\r\\n * Check if this emitter has `event` handlers.\\r\\n *\\r\\n * @param {String} event\\r\\n * @return {Boolean}\\r\\n * @api public\\r\\n */\\r\\n\\r\\nEmitter.prototype.hasListeners = function(event){\\r\\n  return !! this.listeners(event).length;\\r\\n};\\r\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/component-emitter/index.js\\n// module id = 35\\n// module chunks = 0\",\"/**\\r\\n * Compiles a querystring\\r\\n * Returns string representation of the object\\r\\n *\\r\\n * @param {Object}\\r\\n * @api private\\r\\n */\\r\\n\\r\\nexports.encode = function (obj) {\\r\\n  var str = '';\\r\\n\\r\\n  for (var i in obj) {\\r\\n    if (obj.hasOwnProperty(i)) {\\r\\n      if (str.length) str += '&';\\r\\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return str;\\r\\n};\\r\\n\\r\\n/**\\r\\n * Parses a simple querystring into an object\\r\\n *\\r\\n * @param {String} qs\\r\\n * @api private\\r\\n */\\r\\n\\r\\nexports.decode = function(qs){\\r\\n  var qry = {};\\r\\n  var pairs = qs.split('&');\\r\\n  for (var i = 0, l = pairs.length; i < l; i++) {\\r\\n    var pair = pairs[i].split('=');\\r\\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\\r\\n  }\\r\\n  return qry;\\r\\n};\\r\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/parseqs/index.js\\n// module id = 36\\n// module chunks = 0\",\"\\nmodule.exports = function(a, b){\\n  var fn = function(){};\\n  fn.prototype = b.prototype;\\n  a.prototype = new fn;\\n  a.prototype.constructor = a;\\n};\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/component-inherit/index.js\\n// module id = 37\\n// module chunks = 0\",\"'use strict';\\n\\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\\n  , length = 64\\n  , map = {}\\n  , seed = 0\\n  , i = 0\\n  , prev;\\n\\n/**\\n * Return a string representing the specified number.\\n *\\n * @param {Number} num The number to convert.\\n * @returns {String} The string representation of the number.\\n * @api public\\n */\\nfunction encode(num) {\\n  var encoded = '';\\n\\n  do {\\n    encoded = alphabet[num % length] + encoded;\\n    num = Math.floor(num / length);\\n  } while (num > 0);\\n\\n  return encoded;\\n}\\n\\n/**\\n * Return the integer value specified by the given string.\\n *\\n * @param {String} str The string to convert.\\n * @returns {Number} The integer value represented by the string.\\n * @api public\\n */\\nfunction decode(str) {\\n  var decoded = 0;\\n\\n  for (i = 0; i < str.length; i++) {\\n    decoded = decoded * length + map[str.charAt(i)];\\n  }\\n\\n  return decoded;\\n}\\n\\n/**\\n * Yeast: A tiny growing id generator.\\n *\\n * @returns {String} A unique id.\\n * @api public\\n */\\nfunction yeast() {\\n  var now = encode(+new Date());\\n\\n  if (now !== prev) return seed = 0, prev = now;\\n  return now +'.'+ encode(seed++);\\n}\\n\\n//\\n// Map each character to its index.\\n//\\nfor (; i < length; i++) map[alphabet[i]] = i;\\n\\n//\\n// Expose the `yeast`, `encode` and `decode` functions.\\n//\\nyeast.encode = encode;\\nyeast.decode = decode;\\nmodule.exports = yeast;\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/yeast/index.js\\n// module id = 38\\n// module chunks = 0\",\"\\n/**\\n * Module requirements.\\n */\\n\\nvar Polling = require('./polling');\\nvar inherit = require('component-inherit');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = JSONPPolling;\\n\\n/**\\n * Cached regular expressions.\\n */\\n\\nvar rNewline = /\\\\n/g;\\nvar rEscapedNewline = /\\\\\\\\n/g;\\n\\n/**\\n * Global JSONP callbacks.\\n */\\n\\nvar callbacks;\\n\\n/**\\n * Noop.\\n */\\n\\nfunction empty () { }\\n\\n/**\\n * JSONP Polling constructor.\\n *\\n * @param {Object} opts.\\n * @api public\\n */\\n\\nfunction JSONPPolling (opts) {\\n  Polling.call(this, opts);\\n\\n  this.query = this.query || {};\\n\\n  // define global callbacks array if not present\\n  // we do this here (lazily) to avoid unneeded global pollution\\n  if (!callbacks) {\\n    // we need to consider multiple engines in the same page\\n    if (!global.___eio) global.___eio = [];\\n    callbacks = global.___eio;\\n  }\\n\\n  // callback identifier\\n  this.index = callbacks.length;\\n\\n  // add callback to jsonp global\\n  var self = this;\\n  callbacks.push(function (msg) {\\n    self.onData(msg);\\n  });\\n\\n  // append to query string\\n  this.query.j = this.index;\\n\\n  // prevent spurious errors from being emitted when the window is unloaded\\n  if (global.document && global.addEventListener) {\\n    global.addEventListener('beforeunload', function () {\\n      if (self.script) self.script.onerror = empty;\\n    }, false);\\n  }\\n}\\n\\n/**\\n * Inherits from Polling.\\n */\\n\\ninherit(JSONPPolling, Polling);\\n\\n/*\\n * JSONP only supports binary as base64 encoded strings\\n */\\n\\nJSONPPolling.prototype.supportsBinary = false;\\n\\n/**\\n * Closes the socket.\\n *\\n * @api private\\n */\\n\\nJSONPPolling.prototype.doClose = function () {\\n  if (this.script) {\\n    this.script.parentNode.removeChild(this.script);\\n    this.script = null;\\n  }\\n\\n  if (this.form) {\\n    this.form.parentNode.removeChild(this.form);\\n    this.form = null;\\n    this.iframe = null;\\n  }\\n\\n  Polling.prototype.doClose.call(this);\\n};\\n\\n/**\\n * Starts a poll cycle.\\n *\\n * @api private\\n */\\n\\nJSONPPolling.prototype.doPoll = function () {\\n  var self = this;\\n  var script = document.createElement('script');\\n\\n  if (this.script) {\\n    this.script.parentNode.removeChild(this.script);\\n    this.script = null;\\n  }\\n\\n  script.async = true;\\n  script.src = this.uri();\\n  script.onerror = function (e) {\\n    self.onError('jsonp poll error', e);\\n  };\\n\\n  var insertAt = document.getElementsByTagName('script')[0];\\n  if (insertAt) {\\n    insertAt.parentNode.insertBefore(script, insertAt);\\n  } else {\\n    (document.head || document.body).appendChild(script);\\n  }\\n  this.script = script;\\n\\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\\n\\n  if (isUAgecko) {\\n    setTimeout(function () {\\n      var iframe = document.createElement('iframe');\\n      document.body.appendChild(iframe);\\n      document.body.removeChild(iframe);\\n    }, 100);\\n  }\\n};\\n\\n/**\\n * Writes with a hidden iframe.\\n *\\n * @param {String} data to send\\n * @param {Function} called upon flush.\\n * @api private\\n */\\n\\nJSONPPolling.prototype.doWrite = function (data, fn) {\\n  var self = this;\\n\\n  if (!this.form) {\\n    var form = document.createElement('form');\\n    var area = document.createElement('textarea');\\n    var id = this.iframeId = 'eio_iframe_' + this.index;\\n    var iframe;\\n\\n    form.className = 'socketio';\\n    form.style.position = 'absolute';\\n    form.style.top = '-1000px';\\n    form.style.left = '-1000px';\\n    form.target = id;\\n    form.method = 'POST';\\n    form.setAttribute('accept-charset', 'utf-8');\\n    area.name = 'd';\\n    form.appendChild(area);\\n    document.body.appendChild(form);\\n\\n    this.form = form;\\n    this.area = area;\\n  }\\n\\n  this.form.action = this.uri();\\n\\n  function complete () {\\n    initIframe();\\n    fn();\\n  }\\n\\n  function initIframe () {\\n    if (self.iframe) {\\n      try {\\n        self.form.removeChild(self.iframe);\\n      } catch (e) {\\n        self.onError('jsonp polling iframe removal error', e);\\n      }\\n    }\\n\\n    try {\\n      // ie6 dynamic iframes with target=\\\"\\\" support (thanks Chris Lambacher)\\n      var html = '<iframe src=\\\"javascript:0\\\" name=\\\"' + self.iframeId + '\\\">';\\n      iframe = document.createElement(html);\\n    } catch (e) {\\n      iframe = document.createElement('iframe');\\n      iframe.name = self.iframeId;\\n      iframe.src = 'javascript:0';\\n    }\\n\\n    iframe.id = self.iframeId;\\n\\n    self.form.appendChild(iframe);\\n    self.iframe = iframe;\\n  }\\n\\n  initIframe();\\n\\n  // escape \\\\n to prevent it from being converted into \\\\r\\\\n by some UAs\\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\\n  data = data.replace(rEscapedNewline, '\\\\\\\\\\\\n');\\n  this.area.value = data.replace(rNewline, '\\\\\\\\n');\\n\\n  try {\\n    this.form.submit();\\n  } catch (e) {}\\n\\n  if (this.iframe.attachEvent) {\\n    this.iframe.onreadystatechange = function () {\\n      if (self.iframe.readyState === 'complete') {\\n        complete();\\n      }\\n    };\\n  } else {\\n    this.iframe.onload = complete;\\n  }\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/transports/polling-jsonp.js\\n// module id = 39\\n// module chunks = 0\",\"/**\\n * Module dependencies.\\n */\\n\\nvar Transport = require('../transport');\\nvar parser = require('engine.io-parser');\\nvar parseqs = require('parseqs');\\nvar inherit = require('component-inherit');\\nvar yeast = require('yeast');\\nvar debug = require('debug')('engine.io-client:websocket');\\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\\nvar NodeWebSocket;\\nif (typeof window === 'undefined') {\\n  try {\\n    NodeWebSocket = require('ws');\\n  } catch (e) { }\\n}\\n\\n/**\\n * Get either the `WebSocket` or `MozWebSocket` globals\\n * in the browser or try to resolve WebSocket-compatible\\n * interface exposed by `ws` for Node-like environment.\\n */\\n\\nvar WebSocket = BrowserWebSocket;\\nif (!WebSocket && typeof window === 'undefined') {\\n  WebSocket = NodeWebSocket;\\n}\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = WS;\\n\\n/**\\n * WebSocket transport constructor.\\n *\\n * @api {Object} connection options\\n * @api public\\n */\\n\\nfunction WS (opts) {\\n  var forceBase64 = (opts && opts.forceBase64);\\n  if (forceBase64) {\\n    this.supportsBinary = false;\\n  }\\n  this.perMessageDeflate = opts.perMessageDeflate;\\n  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\\n  if (!this.usingBrowserWebSocket) {\\n    WebSocket = NodeWebSocket;\\n  }\\n  Transport.call(this, opts);\\n}\\n\\n/**\\n * Inherits from Transport.\\n */\\n\\ninherit(WS, Transport);\\n\\n/**\\n * Transport name.\\n *\\n * @api public\\n */\\n\\nWS.prototype.name = 'websocket';\\n\\n/*\\n * WebSockets support binary\\n */\\n\\nWS.prototype.supportsBinary = true;\\n\\n/**\\n * Opens socket.\\n *\\n * @api private\\n */\\n\\nWS.prototype.doOpen = function () {\\n  if (!this.check()) {\\n    // let probe timeout\\n    return;\\n  }\\n\\n  var uri = this.uri();\\n  var protocols = void (0);\\n  var opts = {\\n    agent: this.agent,\\n    perMessageDeflate: this.perMessageDeflate\\n  };\\n\\n  // SSL options for Node.js client\\n  opts.pfx = this.pfx;\\n  opts.key = this.key;\\n  opts.passphrase = this.passphrase;\\n  opts.cert = this.cert;\\n  opts.ca = this.ca;\\n  opts.ciphers = this.ciphers;\\n  opts.rejectUnauthorized = this.rejectUnauthorized;\\n  if (this.extraHeaders) {\\n    opts.headers = this.extraHeaders;\\n  }\\n  if (this.localAddress) {\\n    opts.localAddress = this.localAddress;\\n  }\\n\\n  try {\\n    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);\\n  } catch (err) {\\n    return this.emit('error', err);\\n  }\\n\\n  if (this.ws.binaryType === undefined) {\\n    this.supportsBinary = false;\\n  }\\n\\n  if (this.ws.supports && this.ws.supports.binary) {\\n    this.supportsBinary = true;\\n    this.ws.binaryType = 'nodebuffer';\\n  } else {\\n    this.ws.binaryType = 'arraybuffer';\\n  }\\n\\n  this.addEventListeners();\\n};\\n\\n/**\\n * Adds event listeners to the socket\\n *\\n * @api private\\n */\\n\\nWS.prototype.addEventListeners = function () {\\n  var self = this;\\n\\n  this.ws.onopen = function () {\\n    self.onOpen();\\n  };\\n  this.ws.onclose = function () {\\n    self.onClose();\\n  };\\n  this.ws.onmessage = function (ev) {\\n    self.onData(ev.data);\\n  };\\n  this.ws.onerror = function (e) {\\n    self.onError('websocket error', e);\\n  };\\n};\\n\\n/**\\n * Writes data to socket.\\n *\\n * @param {Array} array of packets.\\n * @api private\\n */\\n\\nWS.prototype.write = function (packets) {\\n  var self = this;\\n  this.writable = false;\\n\\n  // encodePacket efficient as it uses WS framing\\n  // no need for encodePayload\\n  var total = packets.length;\\n  for (var i = 0, l = total; i < l; i++) {\\n    (function (packet) {\\n      parser.encodePacket(packet, self.supportsBinary, function (data) {\\n        if (!self.usingBrowserWebSocket) {\\n          // always create a new object (GH-437)\\n          var opts = {};\\n          if (packet.options) {\\n            opts.compress = packet.options.compress;\\n          }\\n\\n          if (self.perMessageDeflate) {\\n            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;\\n            if (len < self.perMessageDeflate.threshold) {\\n              opts.compress = false;\\n            }\\n          }\\n        }\\n\\n        // Sometimes the websocket has already been closed but the browser didn't\\n        // have a chance of informing us about it yet, in that case send will\\n        // throw an error\\n        try {\\n          if (self.usingBrowserWebSocket) {\\n            // TypeError is thrown when passing the second argument on Safari\\n            self.ws.send(data);\\n          } else {\\n            self.ws.send(data, opts);\\n          }\\n        } catch (e) {\\n          debug('websocket closed before onclose event');\\n        }\\n\\n        --total || done();\\n      });\\n    })(packets[i]);\\n  }\\n\\n  function done () {\\n    self.emit('flush');\\n\\n    // fake drain\\n    // defer to next tick to allow Socket to clear writeBuffer\\n    setTimeout(function () {\\n      self.writable = true;\\n      self.emit('drain');\\n    }, 0);\\n  }\\n};\\n\\n/**\\n * Called upon close\\n *\\n * @api private\\n */\\n\\nWS.prototype.onClose = function () {\\n  Transport.prototype.onClose.call(this);\\n};\\n\\n/**\\n * Closes socket.\\n *\\n * @api private\\n */\\n\\nWS.prototype.doClose = function () {\\n  if (typeof this.ws !== 'undefined') {\\n    this.ws.close();\\n  }\\n};\\n\\n/**\\n * Generates uri for connection.\\n *\\n * @api private\\n */\\n\\nWS.prototype.uri = function () {\\n  var query = this.query || {};\\n  var schema = this.secure ? 'wss' : 'ws';\\n  var port = '';\\n\\n  // avoid port if default for schema\\n  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\\n    ('ws' === schema && Number(this.port) !== 80))) {\\n    port = ':' + this.port;\\n  }\\n\\n  // append timestamp to URI\\n  if (this.timestampRequests) {\\n    query[this.timestampParam] = yeast();\\n  }\\n\\n  // communicate binary support capabilities\\n  if (!this.supportsBinary) {\\n    query.b64 = 1;\\n  }\\n\\n  query = parseqs.encode(query);\\n\\n  // prepend ? to query\\n  if (query.length) {\\n    query = '?' + query;\\n  }\\n\\n  var ipv6 = this.hostname.indexOf(':') !== -1;\\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\\n};\\n\\n/**\\n * Feature detection for WebSocket.\\n *\\n * @return {Boolean} whether this transport is available.\\n * @api public\\n */\\n\\nWS.prototype.check = function () {\\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/engine.io-client/lib/transports/websocket.js\\n// module id = 40\\n// module chunks = 0\",\"/* (ignored) */\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ws (ignored)\\n// module id = 41\\n// module chunks = 0\",\"\\nvar indexOf = [].indexOf;\\n\\nmodule.exports = function(arr, obj){\\n  if (indexOf) return arr.indexOf(obj);\\n  for (var i = 0; i < arr.length; ++i) {\\n    if (arr[i] === obj) return i;\\n  }\\n  return -1;\\n};\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/indexof/index.js\\n// module id = 42\\n// module chunks = 0\",\"/**\\r\\n * JSON parse.\\r\\n *\\r\\n * @see Based on jQuery#parseJSON (MIT) and JSON2\\r\\n * @api private\\r\\n */\\r\\n\\r\\nvar rvalidchars = /^[\\\\],:{}\\\\s]*$/;\\r\\nvar rvalidescape = /\\\\\\\\(?:[\\\"\\\\\\\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\\r\\nvar rvalidtokens = /\\\"[^\\\"\\\\\\\\\\\\n\\\\r]*\\\"|true|false|null|-?\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d+)?/g;\\r\\nvar rvalidbraces = /(?:^|:|,)(?:\\\\s*\\\\[)+/g;\\r\\nvar rtrimLeft = /^\\\\s+/;\\r\\nvar rtrimRight = /\\\\s+$/;\\r\\n\\r\\nmodule.exports = function parsejson(data) {\\r\\n  if ('string' != typeof data || !data) {\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\\r\\n\\r\\n  // Attempt to parse using the native JSON parser first\\r\\n  if (global.JSON && JSON.parse) {\\r\\n    return JSON.parse(data);\\r\\n  }\\r\\n\\r\\n  if (rvalidchars.test(data.replace(rvalidescape, '@')\\r\\n      .replace(rvalidtokens, ']')\\r\\n      .replace(rvalidbraces, ''))) {\\r\\n    return (new Function('return ' + data))();\\r\\n  }\\r\\n};\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/parsejson/index.js\\n// module id = 43\\n// module chunks = 0\",\"\\n/**\\n * Module dependencies.\\n */\\n\\nvar parser = require('socket.io-parser');\\nvar Emitter = require('component-emitter');\\nvar toArray = require('to-array');\\nvar on = require('./on');\\nvar bind = require('component-bind');\\nvar debug = require('debug')('socket.io-client:socket');\\nvar hasBin = require('has-binary');\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = exports = Socket;\\n\\n/**\\n * Internal events (blacklisted).\\n * These events can't be emitted by the user.\\n *\\n * @api private\\n */\\n\\nvar events = {\\n  connect: 1,\\n  connect_error: 1,\\n  connect_timeout: 1,\\n  connecting: 1,\\n  disconnect: 1,\\n  error: 1,\\n  reconnect: 1,\\n  reconnect_attempt: 1,\\n  reconnect_failed: 1,\\n  reconnect_error: 1,\\n  reconnecting: 1,\\n  ping: 1,\\n  pong: 1\\n};\\n\\n/**\\n * Shortcut to `Emitter#emit`.\\n */\\n\\nvar emit = Emitter.prototype.emit;\\n\\n/**\\n * `Socket` constructor.\\n *\\n * @api public\\n */\\n\\nfunction Socket (io, nsp, opts) {\\n  this.io = io;\\n  this.nsp = nsp;\\n  this.json = this; // compat\\n  this.ids = 0;\\n  this.acks = {};\\n  this.receiveBuffer = [];\\n  this.sendBuffer = [];\\n  this.connected = false;\\n  this.disconnected = true;\\n  if (opts && opts.query) {\\n    this.query = opts.query;\\n  }\\n  if (this.io.autoConnect) this.open();\\n}\\n\\n/**\\n * Mix in `Emitter`.\\n */\\n\\nEmitter(Socket.prototype);\\n\\n/**\\n * Subscribe to open, close and packet events\\n *\\n * @api private\\n */\\n\\nSocket.prototype.subEvents = function () {\\n  if (this.subs) return;\\n\\n  var io = this.io;\\n  this.subs = [\\n    on(io, 'open', bind(this, 'onopen')),\\n    on(io, 'packet', bind(this, 'onpacket')),\\n    on(io, 'close', bind(this, 'onclose'))\\n  ];\\n};\\n\\n/**\\n * \\\"Opens\\\" the socket.\\n *\\n * @api public\\n */\\n\\nSocket.prototype.open =\\nSocket.prototype.connect = function () {\\n  if (this.connected) return this;\\n\\n  this.subEvents();\\n  this.io.open(); // ensure open\\n  if ('open' === this.io.readyState) this.onopen();\\n  this.emit('connecting');\\n  return this;\\n};\\n\\n/**\\n * Sends a `message` event.\\n *\\n * @return {Socket} self\\n * @api public\\n */\\n\\nSocket.prototype.send = function () {\\n  var args = toArray(arguments);\\n  args.unshift('message');\\n  this.emit.apply(this, args);\\n  return this;\\n};\\n\\n/**\\n * Override `emit`.\\n * If the event is in `events`, it's emitted normally.\\n *\\n * @param {String} event name\\n * @return {Socket} self\\n * @api public\\n */\\n\\nSocket.prototype.emit = function (ev) {\\n  if (events.hasOwnProperty(ev)) {\\n    emit.apply(this, arguments);\\n    return this;\\n  }\\n\\n  var args = toArray(arguments);\\n  var parserType = parser.EVENT; // default\\n  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary\\n  var packet = { type: parserType, data: args };\\n\\n  packet.options = {};\\n  packet.options.compress = !this.flags || false !== this.flags.compress;\\n\\n  // event ack callback\\n  if ('function' === typeof args[args.length - 1]) {\\n    debug('emitting packet with ack id %d', this.ids);\\n    this.acks[this.ids] = args.pop();\\n    packet.id = this.ids++;\\n  }\\n\\n  if (this.connected) {\\n    this.packet(packet);\\n  } else {\\n    this.sendBuffer.push(packet);\\n  }\\n\\n  delete this.flags;\\n\\n  return this;\\n};\\n\\n/**\\n * Sends a packet.\\n *\\n * @param {Object} packet\\n * @api private\\n */\\n\\nSocket.prototype.packet = function (packet) {\\n  packet.nsp = this.nsp;\\n  this.io.packet(packet);\\n};\\n\\n/**\\n * Called upon engine `open`.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.onopen = function () {\\n  debug('transport is open - connecting');\\n\\n  // write connect packet if necessary\\n  if ('/' !== this.nsp) {\\n    if (this.query) {\\n      this.packet({type: parser.CONNECT, query: this.query});\\n    } else {\\n      this.packet({type: parser.CONNECT});\\n    }\\n  }\\n};\\n\\n/**\\n * Called upon engine `close`.\\n *\\n * @param {String} reason\\n * @api private\\n */\\n\\nSocket.prototype.onclose = function (reason) {\\n  debug('close (%s)', reason);\\n  this.connected = false;\\n  this.disconnected = true;\\n  delete this.id;\\n  this.emit('disconnect', reason);\\n};\\n\\n/**\\n * Called with socket packet.\\n *\\n * @param {Object} packet\\n * @api private\\n */\\n\\nSocket.prototype.onpacket = function (packet) {\\n  if (packet.nsp !== this.nsp) return;\\n\\n  switch (packet.type) {\\n    case parser.CONNECT:\\n      this.onconnect();\\n      break;\\n\\n    case parser.EVENT:\\n      this.onevent(packet);\\n      break;\\n\\n    case parser.BINARY_EVENT:\\n      this.onevent(packet);\\n      break;\\n\\n    case parser.ACK:\\n      this.onack(packet);\\n      break;\\n\\n    case parser.BINARY_ACK:\\n      this.onack(packet);\\n      break;\\n\\n    case parser.DISCONNECT:\\n      this.ondisconnect();\\n      break;\\n\\n    case parser.ERROR:\\n      this.emit('error', packet.data);\\n      break;\\n  }\\n};\\n\\n/**\\n * Called upon a server event.\\n *\\n * @param {Object} packet\\n * @api private\\n */\\n\\nSocket.prototype.onevent = function (packet) {\\n  var args = packet.data || [];\\n  debug('emitting event %j', args);\\n\\n  if (null != packet.id) {\\n    debug('attaching ack callback to event');\\n    args.push(this.ack(packet.id));\\n  }\\n\\n  if (this.connected) {\\n    emit.apply(this, args);\\n  } else {\\n    this.receiveBuffer.push(args);\\n  }\\n};\\n\\n/**\\n * Produces an ack callback to emit with an event.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.ack = function (id) {\\n  var self = this;\\n  var sent = false;\\n  return function () {\\n    // prevent double callbacks\\n    if (sent) return;\\n    sent = true;\\n    var args = toArray(arguments);\\n    debug('sending ack %j', args);\\n\\n    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;\\n    self.packet({\\n      type: type,\\n      id: id,\\n      data: args\\n    });\\n  };\\n};\\n\\n/**\\n * Called upon a server acknowlegement.\\n *\\n * @param {Object} packet\\n * @api private\\n */\\n\\nSocket.prototype.onack = function (packet) {\\n  var ack = this.acks[packet.id];\\n  if ('function' === typeof ack) {\\n    debug('calling ack %s with %j', packet.id, packet.data);\\n    ack.apply(this, packet.data);\\n    delete this.acks[packet.id];\\n  } else {\\n    debug('bad ack %s', packet.id);\\n  }\\n};\\n\\n/**\\n * Called upon server connect.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.onconnect = function () {\\n  this.connected = true;\\n  this.disconnected = false;\\n  this.emit('connect');\\n  this.emitBuffered();\\n};\\n\\n/**\\n * Emit buffered events (received and emitted).\\n *\\n * @api private\\n */\\n\\nSocket.prototype.emitBuffered = function () {\\n  var i;\\n  for (i = 0; i < this.receiveBuffer.length; i++) {\\n    emit.apply(this, this.receiveBuffer[i]);\\n  }\\n  this.receiveBuffer = [];\\n\\n  for (i = 0; i < this.sendBuffer.length; i++) {\\n    this.packet(this.sendBuffer[i]);\\n  }\\n  this.sendBuffer = [];\\n};\\n\\n/**\\n * Called upon server disconnect.\\n *\\n * @api private\\n */\\n\\nSocket.prototype.ondisconnect = function () {\\n  debug('server disconnect (%s)', this.nsp);\\n  this.destroy();\\n  this.onclose('io server disconnect');\\n};\\n\\n/**\\n * Called upon forced client/server side disconnections,\\n * this method ensures the manager stops tracking us and\\n * that reconnections don't get triggered for this.\\n *\\n * @api private.\\n */\\n\\nSocket.prototype.destroy = function () {\\n  if (this.subs) {\\n    // clean subscriptions to avoid reconnections\\n    for (var i = 0; i < this.subs.length; i++) {\\n      this.subs[i].destroy();\\n    }\\n    this.subs = null;\\n  }\\n\\n  this.io.destroy(this);\\n};\\n\\n/**\\n * Disconnects the socket manually.\\n *\\n * @return {Socket} self\\n * @api public\\n */\\n\\nSocket.prototype.close =\\nSocket.prototype.disconnect = function () {\\n  if (this.connected) {\\n    debug('performing disconnect (%s)', this.nsp);\\n    this.packet({ type: parser.DISCONNECT });\\n  }\\n\\n  // remove socket from pool\\n  this.destroy();\\n\\n  if (this.connected) {\\n    // fire events\\n    this.onclose('io client disconnect');\\n  }\\n  return this;\\n};\\n\\n/**\\n * Sets the compress flag.\\n *\\n * @param {Boolean} if `true`, compresses the sending data\\n * @return {Socket} self\\n * @api public\\n */\\n\\nSocket.prototype.compress = function (compress) {\\n  this.flags = this.flags || {};\\n  this.flags.compress = compress;\\n  return this;\\n};\\n\\n\\n\\n// WEBPACK FOOTER //\\n// lib/socket.js\",\"module.exports = toArray\\n\\nfunction toArray(list, index) {\\n    var array = []\\n\\n    index = index || 0\\n\\n    for (var i = index || 0; i < list.length; i++) {\\n        array[i - index] = list[i]\\n    }\\n\\n    return array\\n}\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/to-array/index.js\\n// module id = 45\\n// module chunks = 0\",\"\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = on;\\n\\n/**\\n * Helper for subscriptions.\\n *\\n * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\\n * @param {String} event name\\n * @param {Function} callback\\n * @api public\\n */\\n\\nfunction on (obj, ev, fn) {\\n  obj.on(ev, fn);\\n  return {\\n    destroy: function () {\\n      obj.removeListener(ev, fn);\\n    }\\n  };\\n}\\n\\n\\n\\n// WEBPACK FOOTER //\\n// lib/on.js\",\"/**\\n * Slice reference.\\n */\\n\\nvar slice = [].slice;\\n\\n/**\\n * Bind `obj` to `fn`.\\n *\\n * @param {Object} obj\\n * @param {Function|String} fn or string\\n * @return {Function}\\n * @api public\\n */\\n\\nmodule.exports = function(obj, fn){\\n  if ('string' == typeof fn) fn = obj[fn];\\n  if ('function' != typeof fn) throw new Error('bind() requires a function');\\n  var args = slice.call(arguments, 2);\\n  return function(){\\n    return fn.apply(obj, args.concat(slice.call(arguments)));\\n  }\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/component-bind/index.js\\n// module id = 47\\n// module chunks = 0\",\"\\n/**\\n * Expose `Backoff`.\\n */\\n\\nmodule.exports = Backoff;\\n\\n/**\\n * Initialize backoff timer with `opts`.\\n *\\n * - `min` initial timeout in milliseconds [100]\\n * - `max` max timeout [10000]\\n * - `jitter` [0]\\n * - `factor` [2]\\n *\\n * @param {Object} opts\\n * @api public\\n */\\n\\nfunction Backoff(opts) {\\n  opts = opts || {};\\n  this.ms = opts.min || 100;\\n  this.max = opts.max || 10000;\\n  this.factor = opts.factor || 2;\\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\\n  this.attempts = 0;\\n}\\n\\n/**\\n * Return the backoff duration.\\n *\\n * @return {Number}\\n * @api public\\n */\\n\\nBackoff.prototype.duration = function(){\\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\\n  if (this.jitter) {\\n    var rand =  Math.random();\\n    var deviation = Math.floor(rand * this.jitter * ms);\\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\\n  }\\n  return Math.min(ms, this.max) | 0;\\n};\\n\\n/**\\n * Reset the number of attempts.\\n *\\n * @api public\\n */\\n\\nBackoff.prototype.reset = function(){\\n  this.attempts = 0;\\n};\\n\\n/**\\n * Set the minimum duration\\n *\\n * @api public\\n */\\n\\nBackoff.prototype.setMin = function(min){\\n  this.ms = min;\\n};\\n\\n/**\\n * Set the maximum duration\\n *\\n * @api public\\n */\\n\\nBackoff.prototype.setMax = function(max){\\n  this.max = max;\\n};\\n\\n/**\\n * Set the jitter\\n *\\n * @api public\\n */\\n\\nBackoff.prototype.setJitter = function(jitter){\\n  this.jitter = jitter;\\n};\\n\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./~/backo2/index.js\\n// module id = 48\\n// module chunks = 0\"],\"mappings\":\"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrCA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;;;;AAMA;;;;;;;;;AC1GA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtlnvpnvpnbA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9inuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChzaplmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACjlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnxbA;AACA;AAeA;;;;AAIA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;;;;;;;ACjaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;;;;AAIA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;\",\"sourceRoot\":\"\"}");

/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.io=e():t.io=e()}(this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){"use strict";function n(t,e){"object"===("undefined"==typeof t?"undefined":i(t))&&(e=t,t=void 0),e=e||{};var r,n=s(t),a=n.source,p=n.id,f=n.path,l=h[p]&&f in h[p].nsps,d=e.forceNew||e["force new connection"]||!1===e.multiplex||l;return d?(u("ignoring socket cache for %s",a),r=c(a,e)):(h[p]||(u("new io instance for %s",a),h[p]=c(a,e)),r=h[p]),n.query&&!e.query?e.query=n.query:e&&"object"===i(e.query)&&(e.query=o(e.query)),r.socket(n.path,e)}function o(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push(encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e.join("&")}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s=r(1),a=r(7),c=r(17),u=r(3)("socket.io-client");t.exports=e=n;var h=e.managers={};e.protocol=a.protocol,e.connect=n,e.Manager=r(17),e.Socket=r(44)},function(t,e,r){(function(e){"use strict";function n(t,r){var n=t;r=r||e.location,null==t&&(t=r.protocol+"//"+r.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?r.protocol+t:r.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t="undefined"!=typeof r?r.protocol+"//"+t:"https://"+t),i("parse %s",t),n=o(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";var s=n.host.indexOf(":")!==-1,a=s?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+a+":"+n.port,n.href=n.protocol+"://"+a+(r&&r.port===n.port?"":":"+n.port),n}var o=r(2),i=r(3)("socket.io-client:url");t.exports=n}).call(e,function(){return this}())},function(t,e){var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");o!=-1&&i!=-1&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=r.exec(t||""),a={},c=14;c--;)a[n[c]]=s[c]||"";return o!=-1&&i!=-1&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e,r){(function(n){function o(){return"undefined"!=typeof document&&"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function i(){var t=arguments,r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return t;var n="color: "+this.color;t=[t[0],n,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,n),t}function s(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function a(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}}function c(){try{return e.storage.debug}catch(t){}if("undefined"!=typeof n&&"env"in n)return n.env.DEBUG}function u(){try{return window.localStorage}catch(t){}}e=t.exports=r(5),e.log=s,e.formatArgs=i,e.save=a,e.load=c,e.useColors=o,e.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:u(),e.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(c())}).call(e,r(4))},function(t,e){function r(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function o(t){if(h===setTimeout)return setTimeout(t,0);if((h===r||!h)&&setTimeout)return h=setTimeout,setTimeout(t,0);try{return h(t,0)}catch(e){try{return h.call(null,t,0)}catch(e){return h.call(this,t,0)}}}function i(t){if(p===clearTimeout)return clearTimeout(t);if((p===n||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(t);try{return p(t)}catch(e){try{return p.call(null,t)}catch(e){return p.call(this,t)}}}function s(){y&&l&&(y=!1,l.length?d=l.concat(d):g=-1,d.length&&a())}function a(){if(!y){var t=o(s);y=!0;for(var e=d.length;e;){for(l=d,d=[];++g<e;)l&&l[g].run();g=-1,e=d.length}l=null,y=!1,i(t)}}function c(t,e){this.fun=t,this.array=e}function u(){}var h,p,f=t.exports={};!function(){try{h="function"==typeof setTimeout?setTimeout:r}catch(t){h=r}try{p="function"==typeof clearTimeout?clearTimeout:n}catch(t){p=n}}();var l,d=[],y=!1,g=-1;f.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];d.push(new c(t,e)),1!==d.length||y||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.binding=function(t){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(t){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},function(t,e,r){function n(){return e.colors[h++%e.colors.length]}function o(t){function r(){}function o(){var t=o,r=+new Date,i=r-(u||r);t.diff=i,t.prev=u,t.curr=r,u=r,null==t.useColors&&(t.useColors=e.useColors()),null==t.color&&t.useColors&&(t.color=n());for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var c=0;s[0]=s[0].replace(/%([a-z%])/g,function(r,n){if("%%"===r)return r;c++;var o=e.formatters[n];if("function"==typeof o){var i=s[c];r=o.call(t,i),s.splice(c,1),c--}return r}),s=e.formatArgs.apply(t,s);var h=o.log||e.log||console.log.bind(console);h.apply(t,s)}r.enabled=!1,o.enabled=!0;var i=e.enabled(t)?o:r;return i.namespace=t,i}function i(t){e.save(t);for(var r=(t||"").split(/[\s,]+/),n=r.length,o=0;o<n;o++)r[o]&&(t=r[o].replace(/[\\^$+?.()|[\]{}]/g,"\\$&").replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))}function s(){e.enable("")}function a(t){var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1}function c(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o.debug=o,e.coerce=c,e.disable=s,e.enable=i,e.enabled=a,e.humanize=r(6),e.names=[],e.skips=[],e.formatters={};var u,h=0},function(t,e){function r(t){if(t=String(t),!(t.length>1e4)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var r=parseFloat(e[1]),n=(e[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return r*h;case"days":case"day":case"d":return r*u;case"hours":case"hour":case"hrs":case"hr":case"h":return r*c;case"minutes":case"minute":case"mins":case"min":case"m":return r*a;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function n(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms"}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms"}function i(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,h=365.25*u;t.exports=function(t,e){e=e||{};var i=typeof t;if("string"===i&&t.length>0)return r(t);if("number"===i&&isNaN(t)===!1)return e.long?o(t):n(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){function n(){}function o(t){var r="",n=!1;return r+=t.type,e.BINARY_EVENT!=t.type&&e.BINARY_ACK!=t.type||(r+=t.attachments,r+="-"),t.nsp&&"/"!=t.nsp&&(n=!0,r+=t.nsp),null!=t.id&&(n&&(r+=",",n=!1),r+=t.id),null!=t.data&&(n&&(r+=","),r+=f.stringify(t.data)),p("encoded %j as %s",t,r),r}function i(t,e){function r(t){var r=d.deconstructPacket(t),n=o(r.packet),i=r.buffers;i.unshift(n),e(i)}d.removeBlobs(t,r)}function s(){this.reconstructor=null}function a(t){var r={},n=0;if(r.type=Number(t.charAt(0)),null==e.types[r.type])return h();if(e.BINARY_EVENT==r.type||e.BINARY_ACK==r.type){for(var o="";"-"!=t.charAt(++n)&&(o+=t.charAt(n),n!=t.length););if(o!=Number(o)||"-"!=t.charAt(n))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"==t.charAt(n+1))for(r.nsp="";++n;){var i=t.charAt(n);if(","==i)break;if(r.nsp+=i,n==t.length)break}else r.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(r.id="";++n;){var i=t.charAt(n);if(null==i||Number(i)!=i){--n;break}if(r.id+=t.charAt(n),n==t.length)break}r.id=Number(r.id)}return t.charAt(++n)&&(r=c(r,t.substr(n))),p("decoded %s as %j",t,r),r}function c(t,e){try{t.data=f.parse(e)}catch(t){return h()}return t}function u(t){this.reconPack=t,this.buffers=[]}function h(t){return{type:e.ERROR,data:"parser error"}}var p=r(8)("socket.io-parser"),f=r(11),l=r(13),d=r(14),y=r(16);e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=n,e.Decoder=s,n.prototype.encode=function(t,r){if(p("encoding packet %j",t),e.BINARY_EVENT==t.type||e.BINARY_ACK==t.type)i(t,r);else{var n=o(t);r([n])}},l(s.prototype),s.prototype.add=function(t){var r;if("string"==typeof t)r=a(t),e.BINARY_EVENT==r.type||e.BINARY_ACK==r.type?(this.reconstructor=new u(r),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",r)):this.emit("decoded",r);else{if(!y(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");r=this.reconstructor.takeBinaryData(t),r&&(this.reconstructor=null,this.emit("decoded",r))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},u.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length==this.reconPack.attachments){var e=d.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},u.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,r){function n(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function o(){var t=arguments,r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return t;var n="color: "+this.color;t=[t[0],n,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,n),t}function i(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function s(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}}function a(){var t;try{t=e.storage.debug}catch(t){}return t}function c(){try{return window.localStorage}catch(t){}}e=t.exports=r(9),e.log=i,e.formatArgs=o,e.save=s,e.load=a,e.useColors=n,e.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:c(),e.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],e.formatters.j=function(t){return JSON.stringify(t)},e.enable(a())},function(t,e,r){function n(){return e.colors[h++%e.colors.length]}function o(t){function r(){}function o(){var t=o,r=+new Date,i=r-(u||r);t.diff=i,t.prev=u,t.curr=r,u=r,null==t.useColors&&(t.useColors=e.useColors()),null==t.color&&t.useColors&&(t.color=n());var s=Array.prototype.slice.call(arguments);s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var a=0;s[0]=s[0].replace(/%([a-z%])/g,function(r,n){if("%%"===r)return r;a++;var o=e.formatters[n];if("function"==typeof o){var i=s[a];r=o.call(t,i),s.splice(a,1),a--}return r}),"function"==typeof e.formatArgs&&(s=e.formatArgs.apply(t,s));var c=o.log||e.log||console.log.bind(console);c.apply(t,s)}r.enabled=!1,o.enabled=!0;var i=e.enabled(t)?o:r;return i.namespace=t,i}function i(t){e.save(t);for(var r=(t||"").split(/[\s,]+/),n=r.length,o=0;o<n;o++)r[o]&&(t=r[o].replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))}function s(){e.enable("")}function a(t){var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1}function c(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o,e.coerce=c,e.disable=s,e.enable=i,e.enabled=a,e.humanize=r(10),e.names=[],e.skips=[],e.formatters={};var u,h=0},function(t,e){function r(t){if(t=""+t,!(t.length>1e4)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var r=parseFloat(e[1]),n=(e[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return r*h;case"days":case"day":case"d":return r*u;case"hours":case"hour":case"hrs":case"hr":case"h":return r*c;case"minutes":case"minute":case"mins":case"min":case"m":return r*a;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r}}}}function n(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms"}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms"}function i(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,h=365.25*u;t.exports=function(t,e){return e=e||{},"string"==typeof t?r(t):e.long?o(t):n(t)}},function(t,e,r){(function(t,r){var n=!1;(function(){function o(t,e){function r(t){if(r[t]!==g)return r[t];var o;if("bug-string-char-index"==t)o="a"!="a"[0];else if("json"==t)o=r("json-stringify")&&r("json-parse");else{var s,a='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==t){var c=e.stringify,h="function"==typeof c&&b;if(h){(s=function(){return 1}).toJSON=s;try{h="0"===c(0)&&"0"===c(new n)&&'""'==c(new i)&&c(v)===g&&c(g)===g&&c()===g&&"1"===c(s)&&"[1]"==c([s])&&"[null]"==c([g])&&"null"==c(null)&&"[null,null,null]"==c([g,v,null])&&c({a:[s,!0,!1,null,"\0\b\n\f\r\t"]})==a&&"1"===c(null,s)&&"[\n 1,\n 2\n]"==c([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==c(new u(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==c(new u(864e13))&&'"-000001-01-01T00:00:00.000Z"'==c(new u(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==c(new u(-1))}catch(t){h=!1}}o=h}if("json-parse"==t){var p=e.parse;if("function"==typeof p)try{if(0===p("0")&&!p(!1)){s=p(a);var f=5==s.a.length&&1===s.a[0];if(f){try{f=!p('"\t"')}catch(t){}if(f)try{f=1!==p("01")}catch(t){}if(f)try{f=1!==p("1.")}catch(t){}}}}catch(t){f=!1}o=f}}return r[t]=!!o}t||(t=c.Object()),e||(e=c.Object());var n=t.Number||c.Number,i=t.String||c.String,a=t.Object||c.Object,u=t.Date||c.Date,h=t.SyntaxError||c.SyntaxError,p=t.TypeError||c.TypeError,f=t.Math||c.Math,l=t.JSON||c.JSON;"object"==typeof l&&l&&(e.stringify=l.stringify,e.parse=l.parse);var d,y,g,m=a.prototype,v=m.toString,b=new u(-0xc782b5b800cec);try{b=b.getUTCFullYear()==-109252&&0===b.getUTCMonth()&&1===b.getUTCDate()&&10==b.getUTCHours()&&37==b.getUTCMinutes()&&6==b.getUTCSeconds()&&708==b.getUTCMilliseconds()}catch(t){}if(!r("json")){var w="[object Function]",k="[object Date]",x="[object Number]",A="[object String]",C="[object Array]",B="[object Boolean]",S=r("bug-string-char-index");if(!b)var T=f.floor,E=[0,31,59,90,120,151,181,212,243,273,304,334],_=function(t,e){return E[e]+365*(t-1970)+T((t-1969+(e=+(e>1)))/4)-T((t-1901+e)/100)+T((t-1601+e)/400)};if((d=m.hasOwnProperty)||(d=function(t){var e,r={};return(r.__proto__=null,r.__proto__={toString:1},r).toString!=v?d=function(t){var e=this.__proto__,r=t in(this.__proto__=null,this);return this.__proto__=e,r}:(e=r.constructor,d=function(t){var r=(this.constructor||e).prototype;return t in this&&!(t in r&&this[t]===r[t])}),r=null,d.call(this,t)}),y=function(t,e){var r,n,o,i=0;(r=function(){this.valueOf=0}).prototype.valueOf=0,n=new r;for(o in n)d.call(n,o)&&i++;return r=n=null,i?y=2==i?function(t,e){var r,n={},o=v.call(t)==w;for(r in t)o&&"prototype"==r||d.call(n,r)||!(n[r]=1)||!d.call(t,r)||e(r)}:function(t,e){var r,n,o=v.call(t)==w;for(r in t)o&&"prototype"==r||!d.call(t,r)||(n="constructor"===r)||e(r);(n||d.call(t,r="constructor"))&&e(r)}:(n=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],y=function(t,e){var r,o,i=v.call(t)==w,a=!i&&"function"!=typeof t.constructor&&s[typeof t.hasOwnProperty]&&t.hasOwnProperty||d;for(r in t)i&&"prototype"==r||!a.call(t,r)||e(r);for(o=n.length;r=n[--o];a.call(t,r)&&e(r));}),y(t,e)},!r("json-stringify")){var N={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},j="000000",O=function(t,e){return(j+(e||0)).slice(-t)},P="\\u00",R=function(t){for(var e='"',r=0,n=t.length,o=!S||n>10,i=o&&(S?t.split(""):t);r<n;r++){var s=t.charCodeAt(r);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:e+=N[s];break;default:if(s<32){e+=P+O(2,s.toString(16));break}e+=o?i[r]:t.charAt(r)}}return e+'"'},D=function(t,e,r,n,o,i,s){var a,c,u,h,f,l,m,b,w,S,E,N,j,P,q,U;try{a=e[t]}catch(t){}if("object"==typeof a&&a)if(c=v.call(a),c!=k||d.call(a,"toJSON"))"function"==typeof a.toJSON&&(c!=x&&c!=A&&c!=C||d.call(a,"toJSON"))&&(a=a.toJSON(t));else if(a>-1/0&&a<1/0){if(_){for(f=T(a/864e5),u=T(f/365.2425)+1970-1;_(u+1,0)<=f;u++);for(h=T((f-_(u,0))/30.42);_(u,h+1)<=f;h++);f=1+f-_(u,h),l=(a%864e5+864e5)%864e5,m=T(l/36e5)%24,b=T(l/6e4)%60,w=T(l/1e3)%60,S=l%1e3}else u=a.getUTCFullYear(),h=a.getUTCMonth(),f=a.getUTCDate(),m=a.getUTCHours(),b=a.getUTCMinutes(),w=a.getUTCSeconds(),S=a.getUTCMilliseconds();a=(u<=0||u>=1e4?(u<0?"-":"+")+O(6,u<0?-u:u):O(4,u))+"-"+O(2,h+1)+"-"+O(2,f)+"T"+O(2,m)+":"+O(2,b)+":"+O(2,w)+"."+O(3,S)+"Z"}else a=null;if(r&&(a=r.call(e,t,a)),null===a)return"null";if(c=v.call(a),c==B)return""+a;if(c==x)return a>-1/0&&a<1/0?""+a:"null";if(c==A)return R(""+a);if("object"==typeof a){for(P=s.length;P--;)if(s[P]===a)throw p();if(s.push(a),E=[],q=i,i+=o,c==C){for(j=0,P=a.length;j<P;j++)N=D(j,a,r,n,o,i,s),E.push(N===g?"null":N);U=E.length?o?"[\n"+i+E.join(",\n"+i)+"\n"+q+"]":"["+E.join(",")+"]":"[]"}else y(n||a,function(t){var e=D(t,a,r,n,o,i,s);e!==g&&E.push(R(t)+":"+(o?" ":"")+e)}),U=E.length?o?"{\n"+i+E.join(",\n"+i)+"\n"+q+"}":"{"+E.join(",")+"}":"{}";return s.pop(),U}};e.stringify=function(t,e,r){var n,o,i,a;if(s[typeof e]&&e)if((a=v.call(e))==w)o=e;else if(a==C){i={};for(var c,u=0,h=e.length;u<h;c=e[u++],a=v.call(c),(a==A||a==x)&&(i[c]=1));}if(r)if((a=v.call(r))==x){if((r-=r%1)>0)for(n="",r>10&&(r=10);n.length<r;n+=" ");}else a==A&&(n=r.length<=10?r:r.slice(0,10));return D("",(c={},c[""]=t,c),o,i,n,"",[])}}if(!r("json-parse")){var q,U,M=i.fromCharCode,L={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},I=function(){throw q=U=null,h()},H=function(){for(var t,e,r,n,o,i=U,s=i.length;q<s;)switch(o=i.charCodeAt(q)){case 9:case 10:case 13:case 32:q++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=S?i.charAt(q):i[q],q++,t;case 34:for(t="@",q++;q<s;)if(o=i.charCodeAt(q),o<32)I();else if(92==o)switch(o=i.charCodeAt(++q)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=L[o],q++;break;case 117:for(e=++q,r=q+4;q<r;q++)o=i.charCodeAt(q),o>=48&&o<=57||o>=97&&o<=102||o>=65&&o<=70||I();t+=M("0x"+i.slice(e,q));break;default:I()}else{if(34==o)break;for(o=i.charCodeAt(q),e=q;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++q);t+=i.slice(e,q)}if(34==i.charCodeAt(q))return q++,t;I();default:if(e=q,45==o&&(n=!0,o=i.charCodeAt(++q)),o>=48&&o<=57){for(48==o&&(o=i.charCodeAt(q+1),o>=48&&o<=57)&&I(),n=!1;q<s&&(o=i.charCodeAt(q),o>=48&&o<=57);q++);if(46==i.charCodeAt(q)){for(r=++q;r<s&&(o=i.charCodeAt(r),o>=48&&o<=57);r++);r==q&&I(),q=r}if(o=i.charCodeAt(q),101==o||69==o){for(o=i.charCodeAt(++q),43!=o&&45!=o||q++,r=q;r<s&&(o=i.charCodeAt(r),o>=48&&o<=57);r++);r==q&&I(),q=r}return+i.slice(e,q)}if(n&&I(),"true"==i.slice(q,q+4))return q+=4,!0;if("false"==i.slice(q,q+5))return q+=5,!1;if("null"==i.slice(q,q+4))return q+=4,null;I()}return"$"},z=function(t){var e,r;if("$"==t&&I(),"string"==typeof t){if("@"==(S?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];t=H(),"]"!=t;r||(r=!0))r&&(","==t?(t=H(),"]"==t&&I()):I()),","==t&&I(),e.push(z(t));return e}if("{"==t){for(e={};t=H(),"}"!=t;r||(r=!0))r&&(","==t?(t=H(),"}"==t&&I()):I()),","!=t&&"string"==typeof t&&"@"==(S?t.charAt(0):t[0])&&":"==H()||I(),e[t.slice(1)]=z(H());return e}I()}return t},J=function(t,e,r){var n=X(t,e,r);n===g?delete t[e]:t[e]=n},X=function(t,e,r){var n,o=t[e];if("object"==typeof o&&o)if(v.call(o)==C)for(n=o.length;n--;)J(o,n,r);else y(o,function(t){J(o,t,r)});return r.call(t,e,o)};e.parse=function(t,e){var r,n;return q=0,U=""+t,r=z(H()),"$"!=H()&&I(),q=U=null,e&&v.call(e)==w?X((n={},n[""]=r,n),"",e):r}}}return e.runInContext=o,e}var i="function"==typeof n&&n.amd,s={function:!0,object:!0},a=s[typeof e]&&e&&!e.nodeType&&e,c=s[typeof window]&&window||this,u=a&&s[typeof t]&&t&&!t.nodeType&&"object"==typeof r&&r;if(!u||u.global!==u&&u.window!==u&&u.self!==u||(c=u),a&&!i)o(c,a);else{var h=c.JSON,p=c.JSON3,f=!1,l=o(c,c.JSON3={noConflict:function(){return f||(f=!0,c.JSON=h,c.JSON3=p,h=p=null),l}});c.JSON={parse:l.parse,stringify:l.stringify}}i&&n(function(){return l})}).call(this)}).call(e,r(12)(t),function(){return this}())},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){function r(t){if(t)return n(t)}function n(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[t]=this._callbacks[t]||[]).push(e),this},r.prototype.once=function(t,e){function r(){n.off(t,r),e.apply(this,arguments)}var n=this;return this._callbacks=this._callbacks||{},r.fn=e,this.on(t,r),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r=this._callbacks[t];if(!r)return this;if(1==arguments.length)return delete this._callbacks[t],this;for(var n,o=0;o<r.length;o++)if(n=r[o],n===e||n.fn===e){r.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks[t];if(r){r=r.slice(0);for(var n=0,o=r.length;n<o;++n)r[n].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,r){(function(t){var n=r(15),o=r(16);e.deconstructPacket=function(t){function e(t){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:r.length};return r.push(t),i}if(n(t)){for(var s=new Array(t.length),a=0;a<t.length;a++)s[a]=e(t[a]);return s}if("object"==typeof t&&!(t instanceof Date)){var s={};for(var c in t)s[c]=e(t[c]);return s}return t}var r=[],i=t.data,s=t;return s.data=e(i),s.attachments=r.length,{packet:s,buffers:r}},e.reconstructPacket=function(t,e){function r(t){if(t&&t._placeholder){var o=e[t.num];return o}if(n(t)){for(var i=0;i<t.length;i++)t[i]=r(t[i]);return t}if(t&&"object"==typeof t){for(var s in t)t[s]=r(t[s]);return t}return t}return t.data=r(t.data),t.attachments=void 0,t},e.removeBlobs=function(e,r){function i(e,c,u){if(!e)return e;if(t.Blob&&e instanceof Blob||t.File&&e instanceof File){s++;var h=new FileReader;h.onload=function(){u?u[c]=this.result:a=this.result,--s||r(a)},h.readAsArrayBuffer(e)}else if(n(e))for(var p=0;p<e.length;p++)i(e[p],p,e);else if(e&&"object"==typeof e&&!o(e))for(var f in e)i(e[f],f,e)}var s=0,a=e;i(a),s||r(a)}}).call(e,function(){return this}())},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,e){(function(e){function r(t){return e.Buffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer}t.exports=r}).call(e,function(){return this}())},function(t,e,r){"use strict";function n(t,e){return this instanceof n?(t&&"object"===("undefined"==typeof t?"undefined":o(t))&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new l({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[],this.encoder=new c.Encoder,this.decoder=new c.Decoder,this.autoConnect=e.autoConnect!==!1,void(this.autoConnect&&this.open())):new n(t,e)}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(18),s=r(44),a=r(35),c=r(7),u=r(46),h=r(47),p=r(3)("socket.io-client:manager"),f=r(42),l=r(48),d=Object.prototype.hasOwnProperty;t.exports=n,n.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps)d.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},n.prototype.updateSocketIds=function(){for(var t in this.nsps)d.call(this.nsps,t)&&(this.nsps[t].id=this.engine.id)},a(n.prototype),n.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},n.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},n.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},n.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},n.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},n.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},n.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},n.prototype.open=n.prototype.connect=function(t,e){if(p("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=i(this.uri,this.opts);var r=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var o=u(r,"open",function(){n.onopen(),t&&t()}),s=u(r,"error",function(e){if(p("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else n.maybeReconnectOnOpen()});if(!1!==this._timeout){var a=this._timeout;p("connect attempt will timeout after %d",a);var c=setTimeout(function(){p("connect attempt timed out after %d",a),o.destroy(),r.close(),r.emit("error","timeout"),n.emitAll("connect_timeout",a)},a);this.subs.push({destroy:function(){clearTimeout(c)}})}return this.subs.push(o),this.subs.push(s),this},n.prototype.onopen=function(){p("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(u(t,"data",h(this,"ondata"))),this.subs.push(u(t,"ping",h(this,"onping"))),this.subs.push(u(t,"pong",h(this,"onpong"))),this.subs.push(u(t,"error",h(this,"onerror"))),this.subs.push(u(t,"close",h(this,"onclose"))),this.subs.push(u(this.decoder,"decoded",h(this,"ondecoded")))},n.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},n.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},n.prototype.ondata=function(t){this.decoder.add(t)},n.prototype.ondecoded=function(t){this.emit("packet",t)},n.prototype.onerror=function(t){p("error",t),this.emitAll("error",t)},n.prototype.socket=function(t,e){function r(){~f(o.connecting,n)||o.connecting.push(n)}var n=this.nsps[t];if(!n){n=new s(this,t,e),this.nsps[t]=n;var o=this;n.on("connecting",r),n.on("connect",function(){n.id=o.engine.id}),this.autoConnect&&r()}return n},n.prototype.destroy=function(t){var e=f(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},n.prototype.packet=function(t){p("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(r){for(var n=0;n<r.length;n++)e.engine.write(r[n],t.options);e.encoding=!1,e.processPacketQueue()}))},n.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},n.prototype.cleanup=function(){p("cleanup");for(var t=this.subs.length,e=0;e<t;e++){var r=this.subs.shift();r.destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},n.prototype.close=n.prototype.disconnect=function(){p("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},n.prototype.onclose=function(t){p("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},n.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();p("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout(function(){t.skipReconnect||(p("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(p("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(p("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(r)}})}},n.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,r){t.exports=r(19)},function(t,e,r){t.exports=r(20),t.exports.parser=r(27)},function(t,e,r){(function(e){function n(t,r){if(!(this instanceof n))return new n(t,r);r=r||{},t&&"object"==typeof t&&(r=t,t=null),t?(t=h(t),r.hostname=t.host,r.secure="https"===t.protocol||"wss"===t.protocol,r.port=t.port,t.query&&(r.query=t.query)):r.host&&(r.hostname=h(r.host).host),
this.secure=null!=r.secure?r.secure:e.location&&"https:"===location.protocol,r.hostname&&!r.port&&(r.port=this.secure?"443":"80"),this.agent=r.agent||!1,this.hostname=r.hostname||(e.location?location.hostname:"localhost"),this.port=r.port||(e.location&&location.port?location.port:this.secure?443:80),this.query=r.query||{},"string"==typeof this.query&&(this.query=f.decode(this.query)),this.upgrade=!1!==r.upgrade,this.path=(r.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!r.forceJSONP,this.jsonp=!1!==r.jsonp,this.forceBase64=!!r.forceBase64,this.enablesXDR=!!r.enablesXDR,this.timestampParam=r.timestampParam||"t",this.timestampRequests=r.timestampRequests,this.transports=r.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=r.policyPort||843,this.rememberUpgrade=r.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=r.onlyBinaryUpgrades,this.perMessageDeflate=!1!==r.perMessageDeflate&&(r.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=r.pfx||null,this.key=r.key||null,this.passphrase=r.passphrase||null,this.cert=r.cert||null,this.ca=r.ca||null,this.ciphers=r.ciphers||null,this.rejectUnauthorized=void 0===r.rejectUnauthorized?null:r.rejectUnauthorized,this.forceNode=!!r.forceNode;var o="object"==typeof e&&e;o.global===o&&(r.extraHeaders&&Object.keys(r.extraHeaders).length>0&&(this.extraHeaders=r.extraHeaders),r.localAddress&&(this.localAddress=r.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function o(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}var i=r(21),s=r(35),a=r(3)("engine.io-client:socket"),c=r(42),u=r(27),h=r(2),p=r(43),f=r(36);t.exports=n,n.priorWebsocketSuccess=!1,s(n.prototype),n.protocol=u.protocol,n.Socket=n,n.Transport=r(26),n.transports=r(21),n.parser=r(27),n.prototype.createTransport=function(t){a('creating transport "%s"',t);var e=o(this.query);e.EIO=u.protocol,e.transport=t,this.id&&(e.sid=this.id);var r=new i[t]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:e,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders,forceNode:this.forceNode,localAddress:this.localAddress});return r},n.prototype.open=function(){var t;if(this.rememberUpgrade&&n.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},n.prototype.setTransport=function(t){a("setting transport %s",t.name);var e=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},n.prototype.probe=function(t){function e(){if(f.onlyBinaryUpgrades){var e=!this.supportsBinary&&f.transport.supportsBinary;p=p||e}p||(a('probe transport "%s" opened',t),h.send([{type:"ping",data:"probe"}]),h.once("packet",function(e){if(!p)if("pong"===e.type&&"probe"===e.data){if(a('probe transport "%s" pong',t),f.upgrading=!0,f.emit("upgrading",h),!h)return;n.priorWebsocketSuccess="websocket"===h.name,a('pausing current transport "%s"',f.transport.name),f.transport.pause(function(){p||"closed"!==f.readyState&&(a("changing transport and sending upgrade packet"),u(),f.setTransport(h),h.send([{type:"upgrade"}]),f.emit("upgrade",h),h=null,f.upgrading=!1,f.flush())})}else{a('probe transport "%s" failed',t);var r=new Error("probe error");r.transport=h.name,f.emit("upgradeError",r)}}))}function r(){p||(p=!0,u(),h.close(),h=null)}function o(e){var n=new Error("probe error: "+e);n.transport=h.name,r(),a('probe transport "%s" failed because of error: %s',t,e),f.emit("upgradeError",n)}function i(){o("transport closed")}function s(){o("socket closed")}function c(t){h&&t.name!==h.name&&(a('"%s" works - aborting "%s"',t.name,h.name),r())}function u(){h.removeListener("open",e),h.removeListener("error",o),h.removeListener("close",i),f.removeListener("close",s),f.removeListener("upgrading",c)}a('probing transport "%s"',t);var h=this.createTransport(t,{probe:1}),p=!1,f=this;n.priorWebsocketSuccess=!1,h.once("open",e),h.once("error",o),h.once("close",i),this.once("close",s),this.once("upgrading",c),h.open()},n.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",n.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},n.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(p(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else a('packet received with socket readyState "%s"',this.readyState)},n.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},n.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},n.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},n.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},n.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},n.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},n.prototype.write=n.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this},n.prototype.sendPacket=function(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){r=r||{},r.compress=!1!==r.compress;var o={type:t,data:e,options:r};this.emit("packetCreate",o),this.writeBuffer.push(o),n&&this.once("flush",n),this.flush()}},n.prototype.close=function(){function t(){n.onClose("forced close"),a("socket closing - telling transport to close"),n.transport.close()}function e(){n.removeListener("upgrade",e),n.removeListener("upgradeError",e),t()}function r(){n.once("upgrade",e),n.once("upgradeError",e)}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var n=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}return this},n.prototype.onError=function(t){a("socket error %j",t),n.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},n.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',t);var r=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),r.writeBuffer=[],r.prevBufferLen=0}},n.prototype.filterUpgrades=function(t){for(var e=[],r=0,n=t.length;r<n;r++)~c(this.transports,t[r])&&e.push(t[r]);return e}}).call(e,function(){return this}())},function(t,e,r){(function(t){function n(e){var r,n=!1,a=!1,c=!1!==e.jsonp;if(t.location){var u="https:"===location.protocol,h=location.port;h||(h=u?443:80),n=e.hostname!==location.hostname||h!==e.port,a=e.secure!==u}if(e.xdomain=n,e.xscheme=a,r=new o(e),"open"in r&&!e.forceJSONP)return new i(e);if(!c)throw new Error("JSONP disabled");return new s(e)}var o=r(22),i=r(24),s=r(39),a=r(40);e.polling=n,e.websocket=a}).call(e,function(){return this}())},function(t,e,r){(function(e){var n=r(23);t.exports=function(t){var r=t.xdomain,o=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!r||n))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(t){}if(!r)try{return new(e[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}}).call(e,function(){return this}())},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,r){(function(e){function n(){}function o(t){if(c.call(this,t),this.requestTimeout=t.requestTimeout,e.location){var r="https:"===location.protocol,n=location.port;n||(n=r?443:80),this.xd=t.hostname!==e.location.hostname||n!==t.port,this.xs=t.secure!==r}else this.extraHeaders=t.extraHeaders}function i(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}function s(){for(var t in i.requests)i.requests.hasOwnProperty(t)&&i.requests[t].abort()}var a=r(22),c=r(25),u=r(35),h=r(37),p=r(3)("engine.io-client:polling-xhr");t.exports=o,t.exports.Request=i,h(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new i(t)},o.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,n=this.request({method:"POST",data:t,isBinary:r}),o=this;n.on("success",e),n.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=n},o.prototype.doPoll=function(){p("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},u(i.prototype),i.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var r=this.xhr=new a(t),n=this;try{p("xhr open %s: %s",this.method,this.uri),r.open(this.method,this.uri,this.async);try{if(this.extraHeaders){r.setDisableHeaderCheck(!0);for(var o in this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&r.setRequestHeader(o,this.extraHeaders[o])}}catch(t){}if(this.supportsBinary&&(r.responseType="arraybuffer"),"POST"===this.method)try{this.isBinary?r.setRequestHeader("Content-type","application/octet-stream"):r.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{r.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in r&&(r.withCredentials=!0),this.requestTimeout&&(r.timeout=this.requestTimeout),this.hasXDR()?(r.onload=function(){n.onLoad()},r.onerror=function(){n.onError(r.responseText)}):r.onreadystatechange=function(){4===r.readyState&&(200===r.status||1223===r.status?n.onLoad():setTimeout(function(){n.onError(r.status)},0))},p("xhr data %s",this.data),r.send(this.data)}catch(t){return void setTimeout(function(){n.onError(t)},0)}e.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},i.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},i.prototype.cleanup=function(t){if("undefined"!=typeof this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=n:this.xhr.onreadystatechange=n,t)try{this.xhr.abort()}catch(t){}e.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type").split(";")[0]}catch(t){}if("application/octet-stream"===e)t=this.xhr.response||this.xhr.responseText;else if(this.supportsBinary)try{t=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(e){for(var r=new Uint8Array(this.xhr.response),n=[],o=0,i=r.length;o<i;o++)n.push(r[o]);t=String.fromCharCode.apply(null,n)}else t=this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},i.prototype.hasXDR=function(){return"undefined"!=typeof e.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},i.requestsCount=0,i.requests={},e.document&&(e.attachEvent?e.attachEvent("onunload",s):e.addEventListener&&e.addEventListener("beforeunload",s,!1))}).call(e,function(){return this}())},function(t,e,r){function n(t){var e=t&&t.forceBase64;h&&!e||(this.supportsBinary=!1),o.call(this,t)}var o=r(26),i=r(36),s=r(27),a=r(37),c=r(38),u=r(3)("engine.io-client:polling");t.exports=n;var h=function(){var t=r(22),e=new t({xdomain:!1});return null!=e.responseType}();a(n,o),n.prototype.name="polling",n.prototype.doOpen=function(){this.poll()},n.prototype.pause=function(t){function e(){u("paused"),r.readyState="paused",t()}var r=this;if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(u("we are currently polling - waiting to pause"),n++,this.once("pollComplete",function(){u("pre-pause polling complete"),--n||e()})),this.writable||(u("we are currently writing - waiting to pause"),n++,this.once("drain",function(){u("pre-pause writing complete"),--n||e()}))}else e()},n.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},n.prototype.onData=function(t){var e=this;u("polling got data %s",t);var r=function(t,r,n){return"opening"===e.readyState&&e.onOpen(),"close"===t.type?(e.onClose(),!1):void e.onPacket(t)};s.decodePayload(t,this.socket.binaryType,r),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},n.prototype.doClose=function(){function t(){u("writing close packet"),e.write([{type:"close"}])}var e=this;"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},n.prototype.write=function(t){var e=this;this.writable=!1;var r=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,r)})},n.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";!1!==this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t);var n=this.hostname.indexOf(":")!==-1;return e+"://"+(n?"["+this.hostname+"]":this.hostname)+r+this.path+t}},function(t,e,r){function n(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}var o=r(27),i=r(35);t.exports=n,i(n.prototype),n.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},n.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},n.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},n.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},n.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},n.prototype.onData=function(t){var e=o.decodePacket(t,this.socket.binaryType);this.onPacket(e)},n.prototype.onPacket=function(t){this.emit("packet",t)},n.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,r){(function(t){function n(t,r){var n="b"+e.packets[t.type]+t.data.data;return r(n)}function o(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=v[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return n(s.buffer)}function i(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=new FileReader;return o.onload=function(){t.data=o.result,e.encodePacket(t,r,!0,n)},o.readAsArrayBuffer(t.data)}function s(t,r,n){if(!r)return e.encodeBase64Packet(t,n);if(m)return i(t,r,n);var o=new Uint8Array(1);o[0]=v[t.type];var s=new k([o.buffer,t.data]);return n(s)}function a(t){try{t=d.decode(t)}catch(t){return!1}return t}function c(t,e,r){for(var n=new Array(t.length),o=l(t.length,r),i=function(t,r,o){e(r,function(e,r){n[t]=r,o(e,n)})},s=0;s<t.length;s++)i(s,t[s],o)}var u,h=r(28),p=r(29),f=r(30),l=r(31),d=r(32);t&&t.ArrayBuffer&&(u=r(33));var y="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),g="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),m=y||g;e.protocol=3;var v=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=h(v),w={type:"error",data:"parser error"},k=r(34);e.encodePacket=function(e,r,i,a){"function"==typeof r&&(a=r,r=!1),"function"==typeof i&&(a=i,i=null);var c=void 0===e.data?void 0:e.data.buffer||e.data;if(t.ArrayBuffer&&c instanceof ArrayBuffer)return o(e,r,a);if(k&&c instanceof t.Blob)return s(e,r,a);if(c&&c.base64)return n(e,a);var u=v[e.type];return void 0!==e.data&&(u+=i?d.encode(String(e.data)):String(e.data)),a(""+u)},e.encodeBase64Packet=function(r,n){var o="b"+e.packets[r.type];if(k&&r.data instanceof t.Blob){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];n(o+t)},i.readAsDataURL(r.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(r.data))}catch(t){for(var a=new Uint8Array(r.data),c=new Array(a.length),u=0;u<a.length;u++)c[u]=a[u];s=String.fromCharCode.apply(null,c)}return o+=t.btoa(s),n(o)},e.decodePacket=function(t,r,n){if(void 0===t)return w;if("string"==typeof t){if("b"==t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(n&&(t=a(t),t===!1))return w;var o=t.charAt(0);return Number(o)==o&&b[o]?t.length>1?{type:b[o],data:t.substring(1)}:{type:b[o]}:w}var i=new Uint8Array(t),o=i[0],s=f(t,1);return k&&"blob"===r&&(s=new k([s])),{type:b[o],data:s}},e.decodeBase64Packet=function(t,e){var r=b[t.charAt(0)];if(!u)return{type:r,data:{base64:!0,data:t.substr(1)}};var n=u.decode(t.substr(1));return"blob"===e&&k&&(n=new k([n])),{type:r,data:n}},e.encodePayload=function(t,r,n){function o(t){return t.length+":"+t}function i(t,n){e.encodePacket(t,!!s&&r,!0,function(t){n(null,o(t))})}"function"==typeof r&&(n=r,r=null);var s=p(t);return r&&s?k&&!m?e.encodePayloadAsBlob(t,n):e.encodePayloadAsArrayBuffer(t,n):t.length?void c(t,i,function(t,e){return n(e.join(""))}):n("0:")},e.decodePayload=function(t,r,n){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,n);"function"==typeof r&&(n=r,r=null);var o;if(""==t)return n(w,0,1);for(var i,s,a="",c=0,u=t.length;c<u;c++){var h=t.charAt(c);if(":"!=h)a+=h;else{if(""==a||a!=(i=Number(a)))return n(w,0,1);if(s=t.substr(c+1,i),a!=s.length)return n(w,0,1);if(s.length){if(o=e.decodePacket(s,r,!0),w.type==o.type&&w.data==o.data)return n(w,0,1);var p=n(o,c+i,u);if(!1===p)return}c+=i,a=""}}return""!=a?n(w,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,r){function n(t,r){e.encodePacket(t,!0,!0,function(t){return r(null,t)})}return t.length?void c(t,n,function(t,e){var n=e.reduce(function(t,e){var r;return r="string"==typeof e?e.length:e.byteLength,t+r.toString().length+r+2},0),o=new Uint8Array(n),i=0;return e.forEach(function(t){var e="string"==typeof t,r=t;if(e){for(var n=new Uint8Array(t.length),s=0;s<t.length;s++)n[s]=t.charCodeAt(s);r=n.buffer}e?o[i++]=0:o[i++]=1;for(var a=r.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var n=new Uint8Array(r),s=0;s<n.length;s++)o[i++]=n[s]}),r(o.buffer)}):r(new ArrayBuffer(0))},e.encodePayloadAsBlob=function(t,r){function n(t,r){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var n=new Uint8Array(t.length),o=0;o<t.length;o++)n[o]=t.charCodeAt(o);t=n.buffer,e[0]=0}for(var i=t instanceof ArrayBuffer?t.byteLength:t.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++)a[o]=parseInt(s[o]);if(a[s.length]=255,k){var c=new k([e.buffer,a.buffer,t]);r(null,c)}})}c(t,n,function(t,e){return r(new k(e))})},e.decodePayloadAsBinary=function(t,r,n){"function"==typeof r&&(n=r,r=null);for(var o=t,i=[],s=!1;o.byteLength>0;){for(var a=new Uint8Array(o),c=0===a[0],u="",h=1;255!=a[h];h++){if(u.length>310){s=!0;break}u+=a[h]}if(s)return n(w,0,1);o=f(o,2+u.length),u=parseInt(u);var p=f(o,0,u);if(c)try{p=String.fromCharCode.apply(null,new Uint8Array(p))}catch(t){var l=new Uint8Array(p);p="";for(var h=0;h<l.length;h++)p+=String.fromCharCode(l[h])}i.push(p),o=f(o,u)}var d=i.length;i.forEach(function(t,o){n(e.decodePacket(t,r,!0),o,d)})}}).call(e,function(){return this}())},function(t,e){t.exports=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var n in t)r.call(t,n)&&e.push(n);return e}},function(t,e,r){(function(e){function n(t){function r(t){if(!t)return!1;if(e.Buffer&&e.Buffer.isBuffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer||e.Blob&&t instanceof Blob||e.File&&t instanceof File)return!0;if(o(t)){for(var n=0;n<t.length;n++)if(r(t[n]))return!0}else if(t&&"object"==typeof t){t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON());for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&r(t[i]))return!0}return!1}return r(t)}var o=r(15);t.exports=n}).call(e,function(){return this}())},function(t,e){t.exports=function(t,e,r){var n=t.byteLength;if(e=e||0,r=r||n,t.slice)return t.slice(e,r);if(e<0&&(e+=n),r<0&&(r+=n),r>n&&(r=n),e>=n||e>=r||0===n)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(r-e),s=e,a=0;s<r;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){function r(t,e,r){function o(t,n){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(i=!0,e(t),e=r):0!==o.count||i||e(null,n)}var i=!1;return r=r||n,o.count=t,0===t?e():o}function n(){}t.exports=r},function(t,e,r){var n;(function(t,o){!function(i){function s(t){for(var e,r,n=[],o=0,i=t.length;o<i;)e=t.charCodeAt(o++),e>=55296&&e<=56319&&o<i?(r=t.charCodeAt(o++),56320==(64512&r)?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--)):n.push(e);return n}function a(t){for(var e,r=t.length,n=-1,o="";++n<r;)e=t[n],e>65535&&(e-=65536,o+=b(e>>>10&1023|55296),e=56320|1023&e),o+=b(e);return o}function c(t,e){return b(t>>e&63|128)}function u(t){if(0==(4294967168&t))return b(t);var e="";return 0==(4294965248&t)?e=b(t>>6&31|192):0==(4294901760&t)?(e=b(t>>12&15|224),e+=c(t,6)):0==(4292870144&t)&&(e=b(t>>18&7|240),e+=c(t,12),e+=c(t,6)),e+=b(63&t|128)}function h(t){for(var e,r=s(t),n=r.length,o=-1,i="";++o<n;)e=r[o],i+=u(e);return i}function p(){if(v>=m)throw Error("Invalid byte index");var t=255&g[v];if(v++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(){var t,e,r,n,o;if(v>m)throw Error("Invalid byte index");if(v==m)return!1;if(t=255&g[v],v++,0==(128&t))return t;if(192==(224&t)){var e=p();if(o=(31&t)<<6|e,o>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&t)){if(e=p(),r=p(),o=(15&t)<<12|e<<6|r,o>=2048)return o;throw Error("Invalid continuation byte")}if(240==(248&t)&&(e=p(),r=p(),n=p(),o=(15&t)<<18|e<<12|r<<6|n,o>=65536&&o<=1114111))return o;throw Error("Invalid WTF-8 detected")}function l(t){g=s(t),m=g.length,v=0;for(var e,r=[];(e=f())!==!1;)r.push(e);return a(r)}var d="object"==typeof e&&e,y=("object"==typeof t&&t&&t.exports==d&&t,"object"==typeof o&&o);y.global!==y&&y.window!==y||(i=y);var g,m,v,b=String.fromCharCode,w={version:"1.0.0",encode:h,decode:l};n=function(){return w}.call(e,r,e,t),!(void 0!==n&&(t.exports=n))}(this)}).call(e,r(12)(t),function(){return this}())},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),n=0;n<t.length;n++)r[t.charCodeAt(n)]=n;e.encode=function(e){var r,n=new Uint8Array(e),o=n.length,i="";for(r=0;r<o;r+=3)i+=t[n[r]>>2],i+=t[(3&n[r])<<4|n[r+1]>>4],i+=t[(15&n[r+1])<<2|n[r+2]>>6],i+=t[63&n[r+2]];return o%3===2?i=i.substring(0,i.length-1)+"=":o%3===1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,n,o,i,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var h=new ArrayBuffer(a),p=new Uint8Array(h);for(e=0;e<c;e+=4)n=r[t.charCodeAt(e)],o=r[t.charCodeAt(e+1)],i=r[t.charCodeAt(e+2)],s=r[t.charCodeAt(e+3)],p[u++]=n<<2|o>>4,p[u++]=(15&o)<<4|i>>2,p[u++]=(3&i)<<6|63&s;return h}}()},function(t,e){(function(e){function r(t){for(var e=0;e<t.length;e++){var r=t[e];if(r.buffer instanceof ArrayBuffer){var n=r.buffer;if(r.byteLength!==n.byteLength){var o=new Uint8Array(r.byteLength);o.set(new Uint8Array(n,r.byteOffset,r.byteLength)),n=o.buffer}t[e]=n}}}function n(t,e){e=e||{};var n=new i;r(t);for(var o=0;o<t.length;o++)n.append(t[o]);return e.type?n.getBlob(e.type):n.getBlob()}function o(t,e){return r(t),new Blob(t,e||{})}var i=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder,s=function(){try{var t=new Blob(["hi"]);return 2===t.size}catch(t){return!1}}(),a=s&&function(){try{var t=new Blob([new Uint8Array([1,2])]);return 2===t.size}catch(t){return!1}}(),c=i&&i.prototype.append&&i.prototype.getBlob;t.exports=function(){return s?a?e.Blob:o:c?n:void 0}()}).call(e,function(){return this}())},function(t,e,r){function n(t){if(t)return o(t)}function o(t){for(var e in n.prototype)t[e]=n.prototype[e];return t}t.exports=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},n.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var n,o=0;o<r.length;o++)if(n=r[o],n===e||n.fn===e){r.splice(o,1);break}return this},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r){r=r.slice(0);for(var n=0,o=r.length;n<o;++n)r[n].apply(this,e)}return this},n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},n.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e){e.encode=function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},e.decode=function(t){for(var e={},r=t.split("&"),n=0,o=r.length;n<o;n++){var i=r[n].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e){t.exports=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e){"use strict";function r(t){var e="";do e=s[t%a]+e,t=Math.floor(t/a);while(t>0);return e}function n(t){var e=0;for(h=0;h<t.length;h++)e=e*a+c[t.charAt(h)];return e}function o(){var t=r(+new Date);return t!==i?(u=0,i=t):t+"."+r(u++)}for(var i,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),a=64,c={},u=0,h=0;h<a;h++)c[s[h]]=h;o.encode=r,o.decode=n,t.exports=o},function(t,e,r){(function(e){function n(){}function o(t){i.call(this,t),this.query=this.query||{},a||(e.___eio||(e.___eio=[]),a=e.___eio),this.index=a.length;var r=this;a.push(function(t){r.onData(t)}),this.query.j=this.index,e.document&&e.addEventListener&&e.addEventListener("beforeunload",function(){r.script&&(r.script.onerror=n)},!1)}var i=r(25),s=r(37);t.exports=o;var a,c=/\n/g,u=/\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e;var n="undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent);n&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},o.prototype.doWrite=function(t,e){function r(){n(),e()}function n(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(t){o.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(t)}catch(t){i=document.createElement("iframe"),i.name=o.iframeId,i.src="javascript:0"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),h=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=h,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),n(),t=t.replace(u,"\\\n"),this.area.value=t.replace(c,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===o.iframe.readyState&&r();
}:this.iframe.onload=r}}).call(e,function(){return this}())},function(t,e,r){(function(e){function n(t){var e=t&&t.forceBase64;e&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=p&&!t.forceNode,this.usingBrowserWebSocket||(f=o),i.call(this,t)}var o,i=r(26),s=r(27),a=r(36),c=r(37),u=r(38),h=r(3)("engine.io-client:websocket"),p=e.WebSocket||e.MozWebSocket;if("undefined"==typeof window)try{o=r(41)}catch(t){}var f=p;f||"undefined"!=typeof window||(f=o),t.exports=n,c(n,i),n.prototype.name="websocket",n.prototype.supportsBinary=!0,n.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=void 0,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?new f(t):new f(t,e,r)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},n.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},n.prototype.write=function(t){function r(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}var n=this;this.writable=!1;for(var o=t.length,i=0,a=o;i<a;i++)!function(t){s.encodePacket(t,n.supportsBinary,function(i){if(!n.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),n.perMessageDeflate){var a="string"==typeof i?e.Buffer.byteLength(i):i.length;a<n.perMessageDeflate.threshold&&(s.compress=!1)}}try{n.usingBrowserWebSocket?n.ws.send(i):n.ws.send(i,s)}catch(t){h("websocket closed before onclose event")}--o||r()})}(t[i])},n.prototype.onClose=function(){i.prototype.onClose.call(this)},n.prototype.doClose=function(){"undefined"!=typeof this.ws&&this.ws.close()},n.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=u()),this.supportsBinary||(t.b64=1),t=a.encode(t),t.length&&(t="?"+t);var n=this.hostname.indexOf(":")!==-1;return e+"://"+(n?"["+this.hostname+"]":this.hostname)+r+this.path+t},n.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===n.prototype.name)}}).call(e,function(){return this}())},function(t,e){},function(t,e){var r=[].indexOf;t.exports=function(t,e){if(r)return t.indexOf(e);for(var n=0;n<t.length;++n)if(t[n]===e)return n;return-1}},function(t,e){(function(e){var r=/^[\],:{}\s]*$/,n=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,o=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,i=/(?:^|:|,)(?:\s*\[)+/g,s=/^\s+/,a=/\s+$/;t.exports=function(t){return"string"==typeof t&&t?(t=t.replace(s,"").replace(a,""),e.JSON&&JSON.parse?JSON.parse(t):r.test(t.replace(n,"@").replace(o,"]").replace(i,""))?new Function("return "+t)():void 0):null}}).call(e,function(){return this}())},function(t,e,r){"use strict";function n(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}var o=r(7),i=r(35),s=r(45),a=r(46),c=r(47),u=r(3)("socket.io-client:socket"),h=r(29);t.exports=e=n;var p={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=i.prototype.emit;i(n.prototype),n.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[a(t,"open",c(this,"onopen")),a(t,"packet",c(this,"onpacket")),a(t,"close",c(this,"onclose"))]}},n.prototype.open=n.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},n.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},n.prototype.emit=function(t){if(p.hasOwnProperty(t))return f.apply(this,arguments),this;var e=s(arguments),r=o.EVENT;h(e)&&(r=o.BINARY_EVENT);var n={type:r,data:e};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),delete this.flags,this},n.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},n.prototype.onopen=function(){u("transport is open - connecting"),"/"!==this.nsp&&(this.query?this.packet({type:o.CONNECT,query:this.query}):this.packet({type:o.CONNECT}))},n.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},n.prototype.onpacket=function(t){if(t.nsp===this.nsp)switch(t.type){case o.CONNECT:this.onconnect();break;case o.EVENT:this.onevent(t);break;case o.BINARY_EVENT:this.onevent(t);break;case o.ACK:this.onack(t);break;case o.BINARY_ACK:this.onack(t);break;case o.DISCONNECT:this.ondisconnect();break;case o.ERROR:this.emit("error",t.data)}},n.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?f.apply(this,e):this.receiveBuffer.push(e)},n.prototype.ack=function(t){var e=this,r=!1;return function(){if(!r){r=!0;var n=s(arguments);u("sending ack %j",n);var i=h(n)?o.BINARY_ACK:o.ACK;e.packet({type:i,id:t,data:n})}}},n.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},n.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},n.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)f.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},n.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},n.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},n.prototype.close=n.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:o.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},n.prototype.compress=function(t){return this.flags=this.flags||{},this.flags.compress=t,this}},function(t,e){function r(t,e){var r=[];e=e||0;for(var n=e||0;n<t.length;n++)r[n-e]=t[n];return r}t.exports=r},function(t,e){"use strict";function r(t,e,r){return t.on(e,r),{destroy:function(){t.removeListener(e,r)}}}t.exports=r},function(t,e){var r=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return e.apply(t,n.concat(r.call(arguments)))}}},function(t,e){function r(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=r,r.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(t){this.ms=t},r.prototype.setMax=function(t){this.max=t},r.prototype.setJitter=function(t){this.jitter=t}}])});

/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var url = __webpack_require__(620);
var parser = __webpack_require__(81);
var Manager = __webpack_require__(482);
var debug = __webpack_require__(232)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  } else if (opts && 'object' === typeof opts.query) {
    opts.query = encodeQueryString(opts.query);
  }
  return io.socket(parsed.path, opts);
}
/**
 *  Helper method to parse query objects to string.
 * @param {object} query
 * @returns {string}
 */
function encodeQueryString (obj) {
  var str = [];
  for (var p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}
/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(482);
exports.Socket = __webpack_require__(484);


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(471);
var debug = __webpack_require__(232)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(228);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 622 */
/***/ (function(module, exports) {

module.exports = {
	"_args": [
		[
			{
				"raw": "socket.io-client@1.7.3",
				"scope": null,
				"escapedName": "socket.io-client",
				"name": "socket.io-client",
				"rawSpec": "1.7.3",
				"spec": "1.7.3",
				"type": "version"
			},
			"/Users/amikulski/Documents/dev/multines/node_modules/socket.io"
		]
	],
	"_from": "socket.io-client@1.7.3",
	"_id": "socket.io-client@1.7.3",
	"_inCache": true,
	"_location": "/socket.io-client",
	"_nodeVersion": "6.9.4",
	"_npmOperationalInternal": {
		"host": "packages-18-east.internal.npmjs.com",
		"tmp": "tmp/socket.io-client-1.7.3.tgz_1487311502896_0.13560540578328073"
	},
	"_npmUser": {
		"name": "darrachequesne",
		"email": "damien.arrachequesne@gmail.com"
	},
	"_npmVersion": "3.10.10",
	"_phantomChildren": {
		"ms": "0.7.2"
	},
	"_requested": {
		"raw": "socket.io-client@1.7.3",
		"scope": null,
		"escapedName": "socket.io-client",
		"name": "socket.io-client",
		"rawSpec": "1.7.3",
		"spec": "1.7.3",
		"type": "version"
	},
	"_requiredBy": [
		"/socket.io"
	],
	"_resolved": "https://registry.npmjs.org/socket.io-client/-/socket.io-client-1.7.3.tgz",
	"_shasum": "b30e86aa10d5ef3546601c09cde4765e381da377",
	"_shrinkwrap": null,
	"_spec": "socket.io-client@1.7.3",
	"_where": "/Users/amikulski/Documents/dev/multines/node_modules/socket.io",
	"bugs": {
		"url": "https://github.com/Automattic/socket.io-client/issues"
	},
	"contributors": [
		{
			"name": "Guillermo Rauch",
			"email": "rauchg@gmail.com"
		},
		{
			"name": "Arnout Kazemier",
			"email": "info@3rd-eden.com"
		},
		{
			"name": "Vladimir Dronnikov",
			"email": "dronnikov@gmail.com"
		},
		{
			"name": "Einar Otto Stangvik",
			"email": "einaros@gmail.com"
		}
	],
	"dependencies": {
		"backo2": "1.0.2",
		"component-bind": "1.0.0",
		"component-emitter": "1.2.1",
		"debug": "2.3.3",
		"engine.io-client": "1.8.3",
		"has-binary": "0.1.7",
		"indexof": "0.0.1",
		"object-component": "0.0.3",
		"parseuri": "0.0.5",
		"socket.io-parser": "2.3.1",
		"to-array": "0.1.4"
	},
	"description": "[![Build Status](https://secure.travis-ci.org/socketio/socket.io-client.svg?branch=master)](http://travis-ci.org/socketio/socket.io-client) [![Dependency Status](https://david-dm.org/socketio/socket.io-client.svg)](https://david-dm.org/socketio/socket.io-",
	"devDependencies": {
		"babel-core": "6.4.5",
		"babel-eslint": "4.1.7",
		"babel-loader": "6.2.1",
		"babel-preset-es2015": "6.3.13",
		"base64-arraybuffer": "0.1.5",
		"concat-stream": "1.5.1",
		"derequire": "2.0.3",
		"eslint-config-standard": "4.4.0",
		"eslint-plugin-standard": "1.3.1",
		"expect.js": "0.3.1",
		"gulp": "3.9.0",
		"gulp-eslint": "1.1.1",
		"gulp-file": "0.2.0",
		"gulp-istanbul": "0.10.3",
		"gulp-minify": "0.0.14",
		"gulp-mocha": "2.2.0",
		"gulp-task-listing": "1.0.1",
		"has-cors": "1.1.0",
		"imports-loader": "^0.6.5",
		"istanbul": "0.4.2",
		"mocha": "2.3.4",
		"socket.io": "1.7.3",
		"strip-loader": "0.1.2",
		"text-blob-builder": "0.0.1",
		"uglify-js": "2.6.1",
		"webpack-stream": "3.2.0",
		"zuul": "3.11.0",
		"zuul-builder-webpack": "1.1.0",
		"zuul-ngrok": "4.0.0"
	},
	"directories": {},
	"dist": {
		"shasum": "b30e86aa10d5ef3546601c09cde4765e381da377",
		"tarball": "https://registry.npmjs.org/socket.io-client/-/socket.io-client-1.7.3.tgz"
	},
	"files": [
		"lib/",
		"dist/"
	],
	"gitHead": "dc76b53805eeecc84fd5c07952baa842369e59fe",
	"homepage": "https://github.com/Automattic/socket.io-client#readme",
	"keywords": [
		"realtime",
		"framework",
		"websocket",
		"tcp",
		"events",
		"client"
	],
	"license": "MIT",
	"main": "./lib/index",
	"maintainers": [
		{
			"name": "darrachequesne",
			"email": "damien.arrachequesne@gmail.com"
		},
		{
			"name": "rauchg",
			"email": "rauchg@gmail.com"
		}
	],
	"name": "socket.io-client",
	"optionalDependencies": {},
	"readme": "ERROR: No README data found!",
	"repository": {
		"type": "git",
		"url": "git+https://github.com/Automattic/socket.io-client.git"
	},
	"scripts": {
		"test": "gulp test"
	},
	"version": "1.7.3"
};

/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(626);
var isBuf = __webpack_require__(486);

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet){
  var buffers = [];
  var packetData = packet.data;

  function _deconstructPacket(data) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i]);
      }
      return newData;
    } else if ('object' == typeof data && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key]);
      }
      return newData;
    }
    return data;
  }

  var pack = packet;
  pack.data = _deconstructPacket(packetData);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  var curPlaceHolder = 0;

  function _reconstructPacket(data) {
    if (data && data._placeholder) {
      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
      return buf;
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i]);
      }
      return data;
    } else if (data && 'object' == typeof data) {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key]);
      }
      return data;
    }
    return data;
  }

  packet.data = _reconstructPacket(packet.data);
  packet.attachments = undefined; // no longer useful
  return packet;
};

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((global.Blob && obj instanceof Blob) ||
        (global.File && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(625);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(627);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 626 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 627 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * Module dependencies.
 */

var parser = __webpack_require__(81);
var debug = __webpack_require__(233)('socket.io:client');
var url = __webpack_require__(83);

/**
 * Module exports.
 */

module.exports = Client;

/**
 * Client constructor.
 *
 * @param {Server} server instance
 * @param {Socket} conn
 * @api private
 */

function Client(server, conn){
  this.server = server;
  this.conn = conn;
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.id = conn.id;
  this.request = conn.request;
  this.setup();
  this.sockets = {};
  this.nsps = {};
  this.connectBuffer = [];
}

/**
 * Sets up event listeners.
 *
 * @api private
 */

Client.prototype.setup = function(){
  this.onclose = this.onclose.bind(this);
  this.ondata = this.ondata.bind(this);
  this.onerror = this.onerror.bind(this);
  this.ondecoded = this.ondecoded.bind(this);

  this.decoder.on('decoded', this.ondecoded);
  this.conn.on('data', this.ondata);
  this.conn.on('error', this.onerror);
  this.conn.on('close', this.onclose);
};

/**
 * Connects a client to a namespace.
 *
 * @param {String} name namespace
 * @api private
 */

Client.prototype.connect = function(name, query){
  debug('connecting to namespace %s', name);
  var nsp = this.server.nsps[name];
  if (!nsp) {
    this.packet({ type: parser.ERROR, nsp: name, data : 'Invalid namespace'});
    return;
  }

  if ('/' != name && !this.nsps['/']) {
    this.connectBuffer.push(name);
    return;
  }

  var self = this;
  var socket = nsp.add(this, query, function(){
    self.sockets[socket.id] = socket;
    self.nsps[nsp.name] = socket;

    if ('/' == nsp.name && self.connectBuffer.length > 0) {
      self.connectBuffer.forEach(self.connect, self);
      self.connectBuffer = [];
    }
  });
};

/**
 * Disconnects from all namespaces and closes transport.
 *
 * @api private
 */

Client.prototype.disconnect = function(){
  for (var id in this.sockets) {
    if (this.sockets.hasOwnProperty(id)) {
      this.sockets[id].disconnect();
    }
  }
  this.sockets = {};
  this.close();
};

/**
 * Removes a socket. Called by each `Socket`.
 *
 * @api private
 */

Client.prototype.remove = function(socket){
  if (this.sockets.hasOwnProperty(socket.id)) {
    var nsp = this.sockets[socket.id].nsp.name;
    delete this.sockets[socket.id];
    delete this.nsps[nsp];
  } else {
    debug('ignoring remove for %s', socket.id);
  }
};

/**
 * Closes the underlying connection.
 *
 * @api private
 */

Client.prototype.close = function(){
  if ('open' == this.conn.readyState) {
    debug('forcing transport close');
    this.conn.close();
    this.onclose('forced server close');
  }
};

/**
 * Writes a packet to the transport.
 *
 * @param {Object} packet object
 * @param {Object} opts
 * @api private
 */

Client.prototype.packet = function(packet, opts){
  opts = opts || {};
  var self = this;

  // this writes to the actual connection
  function writeToEngine(encodedPackets) {
    if (opts.volatile && !self.conn.transport.writable) return;
    for (var i = 0; i < encodedPackets.length; i++) {
      self.conn.write(encodedPackets[i], { compress: opts.compress });
    }
  }

  if ('open' == this.conn.readyState) {
    debug('writing packet %j', packet);
    if (!opts.preEncoded) { // not broadcasting, need to encode
      this.encoder.encode(packet, function (encodedPackets) { // encode, then write results to engine
        writeToEngine(encodedPackets);
      });
    } else { // a broadcast pre-encodes a packet
      writeToEngine(packet);
    }
  } else {
    debug('ignoring packet write %j', packet);
  }
};

/**
 * Called with incoming transport data.
 *
 * @api private
 */

Client.prototype.ondata = function(data){
  // try/catch is needed for protocol violations (GH-1880)
  try {
    this.decoder.add(data);
  } catch(e) {
    this.onerror(e);
  }
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Client.prototype.ondecoded = function(packet) {
  if (parser.CONNECT == packet.type) {
    this.connect(url.parse(packet.nsp).pathname, url.parse(packet.nsp, true).query);
  } else {
    var socket = this.nsps[packet.nsp];
    if (socket) {
      process.nextTick(function() {
        socket.onpacket(packet);
      });
    } else {
      debug('no socket for namespace %s', packet.nsp);
    }
  }
};

/**
 * Handles an error.
 *
 * @param {Object} err object
 * @api private
 */

Client.prototype.onerror = function(err){
  for (var id in this.sockets) {
    if (this.sockets.hasOwnProperty(id)) {
      this.sockets[id].onerror(err);
    }
  }
  this.onclose('client error');
};

/**
 * Called upon transport close.
 *
 * @param {String} reason
 * @api private
 */

Client.prototype.onclose = function(reason){
  debug('client close with reason %s', reason);

  // ignore a potential subsequent `close` event
  this.destroy();

  // `nsps` and `sockets` are cleaned up seamlessly
  for (var id in this.sockets) {
    if (this.sockets.hasOwnProperty(id)) {
      this.sockets[id].onclose(reason);
    }
  }
  this.sockets = {};

  this.decoder.destroy(); // clean up decoder
};

/**
 * Cleans up event listeners.
 *
 * @api private
 */

Client.prototype.destroy = function(){
  this.conn.removeListener('data', this.ondata);
  this.conn.removeListener('error', this.onerror);
  this.conn.removeListener('close', this.onclose);
  this.decoder.removeListener('decoded', this.ondecoded);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var http = __webpack_require__(123);
var read = __webpack_require__(229).readFileSync;
var engine = __webpack_require__(554);
var client = __webpack_require__(619);
var clientVersion = __webpack_require__(622).version;
var Client = __webpack_require__(628);
var Emitter = __webpack_require__(41).EventEmitter;
var Namespace = __webpack_require__(630);
var Adapter = __webpack_require__(616);
var debug = __webpack_require__(233)('socket.io:server');
var url = __webpack_require__(83);

/**
 * Module exports.
 */

module.exports = Server;

/**
 * Socket.IO client source.
 */

var clientSource = undefined;
var clientSourceMap = undefined;

/**
 * Server constructor.
 *
 * @param {http.Server|Number|Object} srv http server, port or options
 * @param {Object} [opts]
 * @api public
 */

function Server(srv, opts){
  if (!(this instanceof Server)) return new Server(srv, opts);
  if ('object' == typeof srv && !srv.listen) {
    opts = srv;
    srv = null;
  }
  opts = opts || {};
  this.nsps = {};
  this.path(opts.path || '/socket.io');
  this.serveClient(false !== opts.serveClient);
  this.adapter(opts.adapter || Adapter);
  this.origins(opts.origins || '*:*');
  this.sockets = this.of('/');
  if (srv) this.attach(srv, opts);
}

/**
 * Server request verification function, that checks for allowed origins
 *
 * @param {http.IncomingMessage} req request
 * @param {Function} fn callback to be called with the result: `fn(err, success)`
 */

Server.prototype.checkRequest = function(req, fn) {
  var origin = req.headers.origin || req.headers.referer;

  // file:// URLs produce a null Origin which can't be authorized via echo-back
  if ('null' == origin || null == origin) origin = '*';

  if (!!origin && typeof(this._origins) == 'function') return this._origins(origin, fn);
  if (this._origins.indexOf('*:*') !== -1) return fn(null, true);
  if (origin) {
    try {
      var parts = url.parse(origin);
      var defaultPort = 'https:' == parts.protocol ? 443 : 80;
      parts.port = parts.port != null
        ? parts.port
        : defaultPort;
      var ok =
        ~this._origins.indexOf(parts.hostname + ':' + parts.port) ||
        ~this._origins.indexOf(parts.hostname + ':*') ||
        ~this._origins.indexOf('*:' + parts.port);
      return fn(null, !!ok);
    } catch (ex) {
    }
  }
  fn(null, false);
};

/**
 * Sets/gets whether client code is being served.
 *
 * @param {Boolean} v whether to serve client code
 * @return {Server|Boolean} self when setting or value when getting
 * @api public
 */

Server.prototype.serveClient = function(v){
  if (!arguments.length) return this._serveClient;
  this._serveClient = v;

  if (v && !clientSource) {
    clientSource = read(/*require.resolve*/(618), 'utf-8');
    try {
      clientSourceMap = read(/*require.resolve*/(617), 'utf-8');
    } catch(err) {
      debug('could not load sourcemap file');
    }
  }

  return this;
};

/**
 * Old settings for backwards compatibility
 */

var oldSettings = {
  "transports": "transports",
  "heartbeat timeout": "pingTimeout",
  "heartbeat interval": "pingInterval",
  "destroy buffer size": "maxHttpBufferSize"
};

/**
 * Backwards compatibility.
 *
 * @api public
 */

Server.prototype.set = function(key, val){
  if ('authorization' == key && val) {
    this.use(function(socket, next) {
      val(socket.request, function(err, authorized) {
        if (err) return next(new Error(err));
        if (!authorized) return next(new Error('Not authorized'));
        next();
      });
    });
  } else if ('origins' == key && val) {
    this.origins(val);
  } else if ('resource' == key) {
    this.path(val);
  } else if (oldSettings[key] && this.eio[oldSettings[key]]) {
    this.eio[oldSettings[key]] = val;
  } else {
    console.error('Option %s is not valid. Please refer to the README.', key);
  }

  return this;
};

/**
 * Sets the client serving path.
 *
 * @param {String} v pathname
 * @return {Server|String} self when setting or value when getting
 * @api public
 */

Server.prototype.path = function(v){
  if (!arguments.length) return this._path;
  this._path = v.replace(/\/$/, '');
  return this;
};

/**
 * Sets the adapter for rooms.
 *
 * @param {Adapter} v pathname
 * @return {Server|Adapter} self when setting or value when getting
 * @api public
 */

Server.prototype.adapter = function(v){
  if (!arguments.length) return this._adapter;
  this._adapter = v;
  for (var i in this.nsps) {
    if (this.nsps.hasOwnProperty(i)) {
      this.nsps[i].initAdapter();
    }
  }
  return this;
};

/**
 * Sets the allowed origins for requests.
 *
 * @param {String} v origins
 * @return {Server|Adapter} self when setting or value when getting
 * @api public
 */

Server.prototype.origins = function(v){
  if (!arguments.length) return this._origins;

  this._origins = v;
  return this;
};

/**
 * Attaches socket.io to a server or port.
 *
 * @param {http.Server|Number} server or port
 * @param {Object} options passed to engine.io
 * @return {Server} self
 * @api public
 */

Server.prototype.listen =
Server.prototype.attach = function(srv, opts){
  if ('function' == typeof srv) {
    var msg = 'You are trying to attach socket.io to an express ' +
    'request handler function. Please pass a http.Server instance.';
    throw new Error(msg);
  }

  // handle a port as a string
  if (Number(srv) == srv) {
    srv = Number(srv);
  }

  if ('number' == typeof srv) {
    debug('creating http server and binding to %d', srv);
    var port = srv;
    srv = http.Server(function(req, res){
      res.writeHead(404);
      res.end();
    });
    srv.listen(port);

  }

  // set engine.io path to `/socket.io`
  opts = opts || {};
  opts.path = opts.path || this.path();
  // set origins verification
  opts.allowRequest = opts.allowRequest || this.checkRequest.bind(this);

  // initialize engine
  debug('creating engine.io instance with opts %j', opts);
  this.eio = engine.attach(srv, opts);

  // attach static file serving
  if (this._serveClient) this.attachServe(srv);

  // Export http server
  this.httpServer = srv;

  // bind to engine events
  this.bind(this.eio);

  return this;
};

/**
 * Attaches the static file serving.
 *
 * @param {Function|http.Server} srv http server
 * @api private
 */

Server.prototype.attachServe = function(srv){
  debug('attaching client serving req handler');
  var url = this._path + '/socket.io.js';
  var urlMap = this._path + '/socket.io.js.map';
  var evs = srv.listeners('request').slice(0);
  var self = this;
  srv.removeAllListeners('request');
  srv.on('request', function(req, res) {
    if (0 === req.url.indexOf(urlMap)) {
      self.serveMap(req, res);
    } else if (0 === req.url.indexOf(url)) {
      self.serve(req, res);
    } else {
      for (var i = 0; i < evs.length; i++) {
        evs[i].call(srv, req, res);
      }
    }
  });
};

/**
 * Handles a request serving `/socket.io.js`
 *
 * @param {http.Request} req
 * @param {http.Response} res
 * @api private
 */

Server.prototype.serve = function(req, res){
  // Per the standard, ETags must be quoted:
  // https://tools.ietf.org/html/rfc7232#section-2.3
  var expectedEtag = '"' + clientVersion + '"';

  var etag = req.headers['if-none-match'];
  if (etag) {
    if (expectedEtag == etag) {
      debug('serve client 304');
      res.writeHead(304);
      res.end();
      return;
    }
  }

  debug('serve client source');
  res.setHeader('Content-Type', 'application/javascript');
  res.setHeader('ETag', expectedEtag);
  res.setHeader('X-SourceMap', 'socket.io.js.map');
  res.writeHead(200);
  res.end(clientSource);
};

/**
 * Handles a request serving `/socket.io.js.map`
 *
 * @param {http.Request} req
 * @param {http.Response} res
 * @api private
 */

Server.prototype.serveMap = function(req, res){
  // Per the standard, ETags must be quoted:
  // https://tools.ietf.org/html/rfc7232#section-2.3
  var expectedEtag = '"' + clientVersion + '"';

  var etag = req.headers['if-none-match'];
  if (etag) {
    if (expectedEtag == etag) {
      debug('serve client 304');
      res.writeHead(304);
      res.end();
      return;
    }
  }

  debug('serve client sourcemap');
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('ETag', expectedEtag);
  res.writeHead(200);
  res.end(clientSourceMap);
};

/**
 * Binds socket.io to an engine.io instance.
 *
 * @param {engine.Server} engine engine.io (or compatible) server
 * @return {Server} self
 * @api public
 */

Server.prototype.bind = function(engine){
  this.engine = engine;
  this.engine.on('connection', this.onconnection.bind(this));
  return this;
};

/**
 * Called with each incoming transport connection.
 *
 * @param {engine.Socket} conn
 * @return {Server} self
 * @api public
 */

Server.prototype.onconnection = function(conn){
  debug('incoming connection with id %s', conn.id);
  var client = new Client(this, conn);
  client.connect('/');
  return this;
};

/**
 * Looks up a namespace.
 *
 * @param {String} name nsp name
 * @param {Function} [fn] optional, nsp `connection` ev handler
 * @api public
 */

Server.prototype.of = function(name, fn){
  if (String(name)[0] !== '/') name = '/' + name;
  
  var nsp = this.nsps[name];
  if (!nsp) {
    debug('initializing namespace %s', name);
    nsp = new Namespace(this, name);
    this.nsps[name] = nsp;
  }
  if (fn) nsp.on('connect', fn);
  return nsp;
};

/**
 * Closes server connection
 *
 * @param {Function} [fn] optional, called as `fn([err])` on error OR all conns closed 
 * @api public
 */

Server.prototype.close = function(fn){
  for (var id in this.nsps['/'].sockets) {
    if (this.nsps['/'].sockets.hasOwnProperty(id)) {
      this.nsps['/'].sockets[id].onclose();
    }
  }

  this.engine.close();

  if (this.httpServer) {
    this.httpServer.close(fn);
  } else {
    fn && fn();
  }
};

/**
 * Expose main namespace (/).
 */

var emitterMethods = Object.keys(Emitter.prototype).filter(function(key){
  return typeof Emitter.prototype[key] === 'function';
});

emitterMethods.concat(['to', 'in', 'use', 'send', 'write', 'clients', 'compress']).forEach(function(fn){
  Server.prototype[fn] = function(){
    return this.sockets[fn].apply(this.sockets, arguments);
  };
});

Namespace.flags.forEach(function(flag){
  Object.defineProperty(Server.prototype, flag, {
    get: function() {
      this.sockets.flags = this.sockets.flags || {};
      this.sockets.flags[flag] = true;
      return this;
    }
  });
});

/**
 * BC with `io.listen`
 */

Server.listen = Server;


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * Module dependencies.
 */

var Socket = __webpack_require__(631);
var Emitter = __webpack_require__(41).EventEmitter;
var parser = __webpack_require__(81);
var debug = __webpack_require__(233)('socket.io:namespace');
var hasBin = __webpack_require__(227);

/**
 * Module exports.
 */

module.exports = exports = Namespace;

/**
 * Blacklisted events.
 */

exports.events = [
  'connect',    // for symmetry with client
  'connection',
  'newListener'
];

/**
 * Flags.
 */

exports.flags = [
  'json',
  'volatile',
  'local'
];

/**
 * `EventEmitter#emit` reference.
 */

var emit = Emitter.prototype.emit;

/**
 * Namespace constructor.
 *
 * @param {Server} server instance
 * @param {Socket} name
 * @api private
 */

function Namespace(server, name){
  this.name = name;
  this.server = server;
  this.sockets = {};
  this.connected = {};
  this.fns = [];
  this.ids = 0;
  this.initAdapter();
}

/**
 * Inherits from `EventEmitter`.
 */

Namespace.prototype.__proto__ = Emitter.prototype;

/**
 * Apply flags from `Socket`.
 */

exports.flags.forEach(function(flag){
  Object.defineProperty(Namespace.prototype, flag, {
    get: function() {
      this.flags = this.flags || {};
      this.flags[flag] = true;
      return this;
    }
  });
});

/**
 * Initializes the `Adapter` for this nsp.
 * Run upon changing adapter by `Server#adapter`
 * in addition to the constructor.
 *
 * @api private
 */

Namespace.prototype.initAdapter = function(){
  this.adapter = new (this.server.adapter())(this);
};

/**
 * Sets up namespace middleware.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.use = function(fn){
  this.fns.push(fn);
  return this;
};

/**
 * Executes the middleware for an incoming client.
 *
 * @param {Socket} socket that will get added
 * @param {Function} fn last fn call in the middleware
 * @api private
 */

Namespace.prototype.run = function(socket, fn){
  var fns = this.fns.slice(0);
  if (!fns.length) return fn(null);

  function run(i){
    fns[i](socket, function(err){
      // upon error, short-circuit
      if (err) return fn(err);

      // if no middleware left, summon callback
      if (!fns[i + 1]) return fn(null);

      // go on to next
      run(i + 1);
    });
  }

  run(0);
};

/**
 * Targets a room when emitting.
 *
 * @param {String} name
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.to =
Namespace.prototype.in = function(name){
  this.rooms = this.rooms || [];
  if (!~this.rooms.indexOf(name)) this.rooms.push(name);
  return this;
};

/**
 * Adds a new client.
 *
 * @return {Socket}
 * @api private
 */

Namespace.prototype.add = function(client, query, fn){
  debug('adding socket to nsp %s', this.name);
  var socket = new Socket(this, client, query);
  var self = this;
  this.run(socket, function(err){
    process.nextTick(function(){
      if ('open' == client.conn.readyState) {
        if (err) return socket.error(err.data || err.message);

        // track socket
        self.sockets[socket.id] = socket;

        // it's paramount that the internal `onconnect` logic
        // fires before user-set events to prevent state order
        // violations (such as a disconnection before the connection
        // logic is complete)
        socket.onconnect();
        if (fn) fn();

        // fire user-set events
        self.emit('connect', socket);
        self.emit('connection', socket);
      } else {
        debug('next called after client was closed - ignoring socket');
      }
    });
  });
  return socket;
};

/**
 * Removes a client. Called by each `Socket`.
 *
 * @api private
 */

Namespace.prototype.remove = function(socket){
  if (this.sockets.hasOwnProperty(socket.id)) {
    delete this.sockets[socket.id];
  } else {
    debug('ignoring remove for %s', socket.id);
  }
};

/**
 * Emits to all clients.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.emit = function(ev){
  if (~exports.events.indexOf(ev)) {
    emit.apply(this, arguments);
  } else {
    // set up packet object
    var args = Array.prototype.slice.call(arguments);
    var parserType = parser.EVENT; // default
    if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary

    var packet = { type: parserType, data: args };

    if ('function' == typeof args[args.length - 1]) {
      throw new Error('Callbacks are not supported when broadcasting');
    }

    this.adapter.broadcast(packet, {
      rooms: this.rooms,
      flags: this.flags
    });

    delete this.rooms;
    delete this.flags;
  }
  return this;
};

/**
 * Sends a `message` event to all clients.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.send =
Namespace.prototype.write = function(){
  var args = Array.prototype.slice.call(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Gets a list of clients.
 *
 * @return {Namespace} self
 * @api public
 */

Namespace.prototype.clients = function(fn){
  this.adapter.clients(this.rooms, fn);
  // delete rooms flag for scenario:
  // .in('room').clients() (GH-1978)
  delete this.rooms;
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} compress if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Namespace.prototype.compress = function(compress){
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * Module dependencies.
 */

var Emitter = __webpack_require__(41).EventEmitter;
var parser = __webpack_require__(81);
var url = __webpack_require__(83);
var debug = __webpack_require__(233)('socket.io:socket');
var hasBin = __webpack_require__(227);
var assign = __webpack_require__(633);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Blacklisted events.
 *
 * @api public
 */

exports.events = [
  'error',
  'connect',
  'disconnect',
  'disconnecting',
  'newListener',
  'removeListener'
];

/**
 * Flags.
 *
 * @api private
 */

var flags = [
  'json',
  'volatile',
  'broadcast'
];

/**
 * `EventEmitter#emit` reference.
 */

var emit = Emitter.prototype.emit;

/**
 * Interface to a `Client` for a given `Namespace`.
 *
 * @param {Namespace} nsp
 * @param {Client} client
 * @api public
 */

function Socket(nsp, client, query){
  this.nsp = nsp;
  this.server = nsp.server;
  this.adapter = this.nsp.adapter;
  this.id = nsp.name !== '/' ? nsp.name + '#' + client.id : client.id;
  this.client = client;
  this.conn = client.conn;
  this.rooms = {};
  this.acks = {};
  this.connected = true;
  this.disconnected = false;
  this.handshake = this.buildHandshake(query);
  this.fns = [];
}

/**
 * Inherits from `EventEmitter`.
 */

Socket.prototype.__proto__ = Emitter.prototype;

/**
 * Apply flags from `Socket`.
 */

flags.forEach(function(flag){
  Object.defineProperty(Socket.prototype, flag, {
    get: function() {
      this.flags = this.flags || {};
      this.flags[flag] = true;
      return this;
    }
  });
});

/**
 * `request` engine.io shortcut.
 *
 * @api public
 */

Object.defineProperty(Socket.prototype, 'request', {
  get: function() {
    return this.conn.request;
  }
});

/**
 * Builds the `handshake` BC object
 *
 * @api private
 */

Socket.prototype.buildHandshake = function(query){
  var self = this;
  function buildQuery(){
    var requestQuery = url.parse(self.request.url, true).query;
    //if socket-specific query exist, replace query strings in requestQuery
    return assign({}, query, requestQuery);
  }
  return {
    headers: this.request.headers,
    time: (new Date) + '',
    address: this.conn.remoteAddress,
    xdomain: !!this.request.headers.origin,
    secure: !!this.request.connection.encrypted,
    issued: +(new Date),
    url: this.request.url,
    query: buildQuery()
  };
};

/**
 * Emits to this client.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function(ev){
  if (~exports.events.indexOf(ev)) {
    emit.apply(this, arguments);
  } else {
    var args = Array.prototype.slice.call(arguments);
    var packet = {};
    packet.type = hasBin(args) ? parser.BINARY_EVENT : parser.EVENT;
    packet.data = args;
    var flags = this.flags || {};

    // access last argument to see if it's an ACK callback
    if ('function' == typeof args[args.length - 1]) {
      if (this._rooms || flags.broadcast) {
        throw new Error('Callbacks are not supported when broadcasting');
      }

      debug('emitting packet with ack id %d', this.nsp.ids);
      this.acks[this.nsp.ids] = args.pop();
      packet.id = this.nsp.ids++;
    }

    if (this._rooms || flags.broadcast) {
      this.adapter.broadcast(packet, {
        except: [this.id],
        rooms: this._rooms,
        flags: flags
      });
    } else {
      // dispatch packet
      this.packet(packet, {
        volatile: flags.volatile,
        compress: flags.compress
      });
    }

    // reset flags
    delete this._rooms;
    delete this.flags;
  }
  return this;
};

/**
 * Targets a room when broadcasting.
 *
 * @param {String} name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.to =
Socket.prototype.in = function(name){
  this._rooms = this._rooms || [];
  if (!~this._rooms.indexOf(name)) this._rooms.push(name);
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send =
Socket.prototype.write = function(){
  var args = Array.prototype.slice.call(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Writes a packet.
 *
 * @param {Object} packet object
 * @param {Object} opts options
 * @api private
 */

Socket.prototype.packet = function(packet, opts){
  packet.nsp = this.nsp.name;
  opts = opts || {};
  opts.compress = false !== opts.compress;
  this.client.packet(packet, opts);
};

/**
 * Joins a room.
 *
 * @param {String} room
 * @param {Function} fn optional, callback
 * @return {Socket} self
 * @api private
 */

Socket.prototype.join = function(room, fn){
  debug('joining room %s', room);
  var self = this;
  if (this.rooms.hasOwnProperty(room)) {
    fn && fn(null);
    return this;
  }
  this.adapter.add(this.id, room, function(err){
    if (err) return fn && fn(err);
    debug('joined room %s', room);
    self.rooms[room] = room;
    fn && fn(null);
  });
  return this;
};

/**
 * Leaves a room.
 *
 * @param {String} room
 * @param {Function} fn optional, callback
 * @return {Socket} self
 * @api private
 */

Socket.prototype.leave = function(room, fn){
  debug('leave room %s', room);
  var self = this;
  this.adapter.del(this.id, room, function(err){
    if (err) return fn && fn(err);
    debug('left room %s', room);
    delete self.rooms[room];
    fn && fn(null);
  });
  return this;
};

/**
 * Leave all rooms.
 *
 * @api private
 */

Socket.prototype.leaveAll = function(){
  this.adapter.delAll(this.id);
  this.rooms = {};
};

/**
 * Called by `Namespace` upon successful
 * middleware execution (ie: authorization).
 * Socket is added to namespace array before
 * call to join, so adapters can access it.
 *
 * @api private
 */

Socket.prototype.onconnect = function(){
  debug('socket connected - writing packet');
  this.nsp.connected[this.id] = this;
  this.join(this.id);
  this.packet({ type: parser.CONNECT });
};

/**
 * Called with each packet. Called by `Client`.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function(packet){
  debug('got packet %j', packet);
  switch (packet.type) {
    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
  }
};

/**
 * Called upon event packet.
 *
 * @param {Object} packet object
 * @api private
 */

Socket.prototype.onevent = function(packet){
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  this.dispatch(args);
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @param {Number} id packet id
 * @api private
 */

Socket.prototype.ack = function(id){
  var self = this;
  var sent = false;
  return function(){
    // prevent double callbacks
    if (sent) return;
    var args = Array.prototype.slice.call(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      id: id,
      type: type,
      data: args
    });

    sent = true;
  };
};

/**
 * Called upon ack packet.
 *
 * @api private
 */

Socket.prototype.onack = function(packet){
  var ack = this.acks[packet.id];
  if ('function' == typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon client disconnect packet.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function(){
  debug('got disconnect packet');
  this.onclose('client namespace disconnect');
};

/**
 * Handles a client error.
 *
 * @api private
 */

Socket.prototype.onerror = function(err){
  if (this.listeners('error').length) {
    this.emit('error', err);
  } else {
    console.error('Missing error handler on `socket`.');
    console.error(err.stack);
  }
};

/**
 * Called upon closing. Called by `Client`.
 *
 * @param {String} reason
 * @throw {Error} optional error object
 * @api private
 */

Socket.prototype.onclose = function(reason){
  if (!this.connected) return this;
  debug('closing socket - reason %s', reason);
  this.emit('disconnecting', reason);
  this.leaveAll();
  this.nsp.remove(this);
  this.client.remove(this);
  this.connected = false;
  this.disconnected = true;
  delete this.nsp.connected[this.id];
  this.emit('disconnect', reason);
};

/**
 * Produces an `error` packet.
 *
 * @param {Object} err error object
 * @api private
 */

Socket.prototype.error = function(err){
  this.packet({ type: parser.ERROR, data: err });
};

/**
 * Disconnects this client.
 *
 * @param {Boolean} close if `true`, closes the underlying connection
 * @return {Socket} self
 * @api public
 */

Socket.prototype.disconnect = function(close){
  if (!this.connected) return this;
  if (close) {
    this.client.disconnect();
  } else {
    this.packet({ type: parser.DISCONNECT });
    this.onclose('server namespace disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} compress if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function(compress){
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};

/**
 * Dispatch incoming event to socket listeners.
 *
 * @param {Array} event that will get emitted
 * @api private
 */

Socket.prototype.dispatch = function(event){
  debug('dispatching an event %j', event);
  var self = this;
  this.run(event, function(err){
    process.nextTick(function(){
      if (err) {
        return self.error(err.data || err.message);
      }
      emit.apply(self, event);
    });
  });
}

/**
 * Sets up socket middleware.
 *
 * @param {Function} middleware function (event, next)
 * @return {Socket} self
 * @api public
 */

Socket.prototype.use = function(fn){
  this.fns.push(fn);
  return this;
};

/**
 * Executes the middleware for an incoming event.
 *
 * @param {Array} event that will get emitted
 * @param {Function} last fn call in the middleware
 * @api private
 */
Socket.prototype.run = function(event, fn){
  var fns = this.fns.slice(0);
  if (!fns.length) return fn(null);

  function run(i){
    fns[i](event, function(err){
      // upon error, short-circuit
      if (err) return fn(err);

      // if no middleware left, summon callback
      if (!fns[i + 1]) return fn(null);

      // go on to next
      run(i + 1);
    });
  }

  run(0);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(228);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(487)
var inherits = __webpack_require__(11)
var response = __webpack_require__(635)
var stream = __webpack_require__(250)
var toArrayBuffer = __webpack_require__(637)

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
		// If the use of XHR should be preferred and includes preserving the 'content-type' header.
		// Force XHR to be used since the Fetch API does not yet support timeouts.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var self = this
	return self._headers[name.toLowerCase()].value
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH' || opts.method === 'MERGE') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer)
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	if (self._mode === 'fetch') {
		var headers = Object.keys(headersObj).map(function (name) {
			return [headersObj[name].name, headersObj[name].value]
		})

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headers,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('timeout' in opts) {
			xhr.timeout = opts.timeout
			xhr.ontimeout = function () {
				self.emit('timeout')
			}
		}

		Object.keys(headersObj).forEach(function (name) {
			xhr.setRequestHeader(headersObj[name].name, headersObj[name].value)
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'user-agent',
	'via'
]

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, __webpack_require__(10), __webpack_require__(16)))

/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(487)
var inherits = __webpack_require__(11)
var stream = __webpack_require__(250)

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function(header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})


		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			}).catch(function(err) {
				self.emit('error', err)
			})
		}
		read()

	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16), __webpack_require__(1).Buffer, __webpack_require__(10)))

/***/ }),
/* 636 */
/***/ (function(module, exports) {

module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length)
		var len = buf.length
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i]
		}
		return arrayCopy.buffer
	} else {
		throw new Error('Argument must be a Buffer')
	}
}


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 640 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 641 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

var indexOf = __webpack_require__(244);

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/wtf8 v1.0.0 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function wtf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte.
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read the first byte.
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			var byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid WTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function wtf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var wtf8 = {
		'version': '1.0.0',
		'encode': wtf8encode,
		'decode': wtf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return wtf8;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = wtf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in wtf8) {
				hasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.wtf8 = wtf8;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(234)(module), __webpack_require__(10)))

/***/ }),
/* 644 */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 649 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 650 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(489);
module.exports = __webpack_require__(490);


/***/ })
/******/ ]);